#!/usr/bin/python3

import sys
import numpy as np
import pyqtgraph as pg
from PyQt5 import QtCore
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout, QComboBox, QHBoxLayout, QGridLayout
import rclpy
from rclpy.node import Node
from std_msgs.msg import String, Float32

class MainWindow(QMainWindow):

    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        # Window settings
        self.setMinimumSize(600, 600)
        self.setWindowTitle("ROS2 IHM")
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f4f4f9;
            }
            QLabel {
                font-size: 16px;
            }
            QLineEdit {
                font-size: 14px;
                padding: 5px;
                border: 1px solid #ccc;
                border-radius: 5px;
                background-color: #fff;
            }
            QPushButton {
                font-size: 12px;
                padding: 6px;
                border: none;
                border-radius: 5px;
                background-color: #0056b3;
            }
            QPushButton#btnUp { background-color: #4CAF50; color: white; }
            QPushButton#btnDown { background-color: #FF5733; color: white; }
            QPushButton#btnLeft { background-color: #FFC300; color: white; }
            QPushButton#btnRight { background-color: #337ab7; color: white; }
            # QPushButton:hover {
                
            # }
            QComboBox {
                font-size: 14px;
                padding: 5px;
                border: 1px solid #ccc;
                border-radius: 5px;
                background-color: #fff;
            }
        """)

        # Mode selection
        self.mode_label = QLabel('Mode de Fonctionnement:', self)
        self.mode_combo = QComboBox(self)
        self.mode_combo.addItems(['Manuel', 'Aléatoire', 'Tracking'])
        self.mode_combo.currentIndexChanged.connect(self.onModeChange)

        # Speed input
        self.speed_label = QLabel('Changer la vitesse (m/s):', self)
        self.speed_input = QLineEdit(self)
        self.speed_input.setPlaceholderText('Enter new speed')
        self.speed_btn = QPushButton('Set Speed', self)
        self.speed_btn.clicked.connect(self.onSetSpeed)

        # Movement control layout
        self.movement_label = QLabel('Contrôle de Mouvement:')
        self.movement_layout = QGridLayout()

        # Arrow buttons
        self.btn_up = QPushButton("↑")
        self.btn_up.setObjectName("btnUp")
        self.btn_down = QPushButton("↓")
        self.btn_down.setObjectName("btnDown")
        self.btn_left = QPushButton("←")
        self.btn_left.setObjectName("btnLeft")
        self.btn_right = QPushButton("→")
        self.btn_right.setObjectName("btnRight")

        # Connect buttons to movement functions
        self.btn_up.clicked.connect(lambda: self.send_movement_command("UP"))
        self.btn_down.clicked.connect(lambda: self.send_movement_command("DOWN"))
        self.btn_left.clicked.connect(lambda: self.send_movement_command("LEFT"))
        self.btn_right.clicked.connect(lambda: self.send_movement_command("RIGHT"))

        # Organize buttons in grid layout
        self.movement_layout.addWidget(self.btn_up, 0, 1)
        self.movement_layout.addWidget(self.btn_left, 1, 0)
        self.movement_layout.addWidget(self.btn_right, 1, 2)
        self.movement_layout.addWidget(self.btn_down, 2, 1)

        # Robot data display
        self.rotation_speed_label = QLabel('Vitesse de rotation (tr/min):', self)
        self.rotation_speed_display = QLineEdit(self)
        self.rotation_speed_display.setReadOnly(True)

        self.movement_speed_label = QLabel('Vitesse de déplacement (m/s):', self)
        self.movement_speed_display = QLineEdit(self)
        self.movement_speed_display.setReadOnly(True)

        self.obstacle_label = QLabel('Obstacle:', self)
        self.obstacle_display = QLineEdit(self)
        self.obstacle_display.setReadOnly(True)

        # Layout management
        widget = QWidget()
        self.setCentralWidget(widget)
        layout = QVBoxLayout(widget)

        layout.addWidget(self.mode_label)
        layout.addWidget(self.mode_combo)
        layout.addWidget(self.rotation_speed_label)
        layout.addWidget(self.rotation_speed_display)
        layout.addWidget(self.movement_speed_label)
        layout.addWidget(self.movement_speed_display)
        layout.addWidget(self.obstacle_label)
        layout.addWidget(self.obstacle_display)

        layout.addWidget(self.speed_label)
        layout.addWidget(self.speed_input)
        layout.addWidget(self.speed_btn)

        # Add movement controls to layout
        layout.addWidget(self.movement_label)
        layout.addLayout(self.movement_layout)

        # Graph setup
        self.graph_widget = pg.PlotWidget()
        layout.addWidget(self.graph_widget)
        self.graph_widget.setBackground('w')
        self.graph_widget.setTitle("Vitesse de Déplacement", color="b", size="15pt")
        self.graph_widget.setLabel('left', 'Speed', color='red', size=30)
        self.graph_widget.setLabel('bottom', 'Time', color='red', size=30)
        self.speed_data = np.zeros(100)
        self.ptr = 0
        self.curve = self.graph_widget.plot(self.speed_data, pen=pg.mkPen(color='b', width=2))

        layout.addStretch()

        # ROS2 initialization
        rclpy.init(args=None)
        self.node = Node('py_ihm_node')
        self.publisher_mode = self.node.create_publisher(String, 'send_mode', 10)
        self.publisher_speed_movement = self.node.create_publisher(String, 'send_speed_movement', 10)

        # Subscriptions for robot data
        self.subscription_speed = self.node.create_subscription(Float32, 'recive_vitesse', self.movement_speed_callback, 10)
        self.subscription_obstacle = self.node.create_subscription(String, 'recive_obstacle', self.obstacle_callback, 10)

        self.timer = QTimer()
        self.timer.timeout.connect(self.onTimerTick)
        self.timer.start(100)

    def onModeChange(self):
        mode = self.mode_combo.currentText()
        msg = String()
        msg.data = f'Set Mode: {mode}'
        self.publisher_mode.publish(msg)
        print(f'Publishing Mode: "{msg.data}"')

    def onSetSpeed(self):
        speed = self.speed_input.text()
        if speed:
            msg = String()
            msg.data = f'Set Speed: {speed}'
            self.publisher_speed_movement.publish(msg)
            print(f'Publishing Speed: "{msg.data}"')

    def send_movement_command(self, direction):
        msg = String()
        msg.data = f'Move {direction}'
        self.publisher_speed_movement.publish(msg)
        print(f'Publishing Movement: "{msg.data}"')

    def movement_speed_callback(self, msg):
        self.movement_speed_display.setText(f'{msg.data:.2f} m/s')
        self.update_graph(msg.data)

    def obstacle_callback(self, msg):
        self.obstacle_display.setText(msg.data)

    def update_graph(self, new_speed):
        self.speed_data[:-1] = self.speed_data[1:]
        self.speed_data[-1] = new_speed
        self.curve.setData(self.speed_data)

    def onTimerTick(self):
        rclpy.spin_once(self.node, executor=None, timeout_sec=0.01)

def main(args=None):
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()
