
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001098  0801ea68  0801ea68  0002ea68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb00  0801fb00  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  0801fb00  0801fb00  0002fb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fb08  0801fb08  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb08  0801fb08  0002fb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb0c  0801fb0c  0002fb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0801fb10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e698  20000260  0801fd6c  00030260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e8f8  0801fd6c  0003e8f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000e709c  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001822f  00000000  00000000  00117328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004428  00000000  00000000  0012f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000b7c0  00000000  00000000  00133980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025237  00000000  00000000  0013f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0007293b  00000000  00000000  00164377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8529  00000000  00000000  001d6cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  0028f1db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000118a8  00000000  00000000  0028f284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00057bbf  00000000  00000000  002a0b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801ea4c 	.word	0x0801ea4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0801ea4c 	.word	0x0801ea4c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <millis>:
// Locally used functions (private)
//---------------------------------------------------------
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte);

uint8_t millis()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 80010e8:	1dba      	adds	r2, r7, #6
 80010ea:	79f9      	ldrb	r1, [r7, #7]
 80010ec:	2301      	movs	r3, #1
 80010ee:	2053      	movs	r0, #83	; 0x53
 80010f0:	f001 f910 	bl	8002314 <i2c1_WriteRegBuffer>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <writeReg16Bit>:
// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	79f9      	ldrb	r1, [r7, #7]
 8001122:	2302      	movs	r3, #2
 8001124:	2053      	movs	r0, #83	; 0x53
 8001126:	f001 f8f5 	bl	8002314 <i2c1_WriteRegBuffer>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <writeReg32Bit>:
// Write a 32-bit register
void writeReg32Bit(uint8_t reg, uint32_t value){
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	6039      	str	r1, [r7, #0]
 800113c:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[4];
		tab[3]= ((value >> 24) & 0xFF);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	0e1b      	lsrs	r3, r3, #24
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]
		tab[2]= ((value >> 16) & 0xFF);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73bb      	strb	r3, [r7, #14]
		tab[1]= ((value >> 8) & 0xFF);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b2db      	uxtb	r3, r3
 8001154:	737b      	strb	r3, [r7, #13]
		tab[0] = ((value ) & 0xFF);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	733b      	strb	r3, [r7, #12]
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	79f9      	ldrb	r1, [r7, #7]
 8001162:	2304      	movs	r3, #4
 8001164:	2053      	movs	r0, #83	; 0x53
 8001166:	f001 f8d5 	bl	8002314 <i2c1_WriteRegBuffer>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <readReg>:
// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 8001180:	f107 020f 	add.w	r2, r7, #15
 8001184:	79f9      	ldrb	r1, [r7, #7]
 8001186:	2301      	movs	r3, #1
 8001188:	2053      	movs	r0, #83	; 0x53
 800118a:	f001 f891 	bl	80022b0 <i2c1_ReadRegBuffer>
  	return value;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <readReg16Bit>:
// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	79f9      	ldrb	r1, [r7, #7]
 80011a8:	2302      	movs	r3, #2
 80011aa:	2053      	movs	r0, #83	; 0x53
 80011ac:	f001 f880 	bl	80022b0 <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	81fb      	strh	r3, [r7, #14]
  	return value;
 80011c0:	89fb      	ldrh	r3, [r7, #14]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <readMulti>:


// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	6039      	str	r1, [r7, #0]
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	4613      	mov	r3, r2
 80011d8:	71bb      	strb	r3, [r7, #6]
	uint8_t value=0;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  while (count-- > 0)
 80011de:	e00b      	b.n	80011f8 <readMulti+0x2e>
  {
	  i2c1_ReadRegBuffer(0x53,reg,&value,1);
 80011e0:	f107 020f 	add.w	r2, r7, #15
 80011e4:	79f9      	ldrb	r1, [r7, #7]
 80011e6:	2301      	movs	r3, #1
 80011e8:	2053      	movs	r0, #83	; 0x53
 80011ea:	f001 f861 	bl	80022b0 <i2c1_ReadRegBuffer>
    *(dst++) = value;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	603a      	str	r2, [r7, #0]
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	71ba      	strb	r2, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ee      	bne.n	80011e0 <readMulti+0x16>
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <VL53L0X_validateInterface>:
uint8_t VL53L0X_getAddress() {
  return g_i2cAddr;
}
//===========================================================================
uint8_t VL53L0X_validateInterface()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint16_t var=0;
 8001212:	2300      	movs	r3, #0
 8001214:	80fb      	strh	r3, [r7, #6]
	var = readReg(0xC0);
 8001216:	20c0      	movs	r0, #192	; 0xc0
 8001218:	f7ff ffab 	bl	8001172 <readReg>
 800121c:	4603      	mov	r3, r0
 800121e:	80fb      	strh	r3, [r7, #6]
	if ( var == 0xEE)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	2bee      	cmp	r3, #238	; 0xee
 8001224:	d121      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
	{
		var =readReg(0xC1);
 8001226:	20c1      	movs	r0, #193	; 0xc1
 8001228:	f7ff ffa3 	bl	8001172 <readReg>
 800122c:	4603      	mov	r3, r0
 800122e:	80fb      	strh	r3, [r7, #6]
		if ( var == 0xAA)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	2baa      	cmp	r3, #170	; 0xaa
 8001234:	d119      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
		{
			var =readReg(0xC2);
 8001236:	20c2      	movs	r0, #194	; 0xc2
 8001238:	f7ff ff9b 	bl	8001172 <readReg>
 800123c:	4603      	mov	r3, r0
 800123e:	80fb      	strh	r3, [r7, #6]
			if ( var == 0x10)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d111      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
			{
				var =readReg16Bit(0x51);
 8001246:	2051      	movs	r0, #81	; 0x51
 8001248:	f7ff ffa6 	bl	8001198 <readReg16Bit>
 800124c:	4603      	mov	r3, r0
 800124e:	80fb      	strh	r3, [r7, #6]
				if ( var == 0x0096) // doc 0x0099 ??
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	2b96      	cmp	r3, #150	; 0x96
 8001254:	d109      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
				{
					var =readReg16Bit(0x61);
 8001256:	2061      	movs	r0, #97	; 0x61
 8001258:	f7ff ff9e 	bl	8001198 <readReg16Bit>
 800125c:	4603      	mov	r3, r0
 800125e:	80fb      	strh	r3, [r7, #6]
					if ( var == 0x0000)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
					{
						return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <VL53L0X_validateInterface+0x60>
					}
				}
			}
		}
	}
	return -1;
 800126a:	23ff      	movs	r3, #255	; 0xff
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <VL53L0X_init>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t VL53L0X_init( ){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  //****************************************************************************
  // DATA INIT
  // "Set I2C standard mode"
  writeReg(I2C_MODE, 0x00);
 800127a:	2100      	movs	r1, #0
 800127c:	2088      	movs	r0, #136	; 0x88
 800127e:	f7ff ff2b 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001282:	2101      	movs	r1, #1
 8001284:	2080      	movs	r0, #128	; 0x80
 8001286:	f7ff ff27 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x01);
 800128a:	2101      	movs	r1, #1
 800128c:	20ff      	movs	r0, #255	; 0xff
 800128e:	f7ff ff23 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ff1f 	bl	80010d8 <writeReg>
  g_stopVariable = readReg(0x91);
 800129a:	2091      	movs	r0, #145	; 0x91
 800129c:	f7ff ff69 	bl	8001172 <readReg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4bde      	ldr	r3, [pc, #888]	; (8001620 <VL53L0X_init+0x3ac>)
 80012a6:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff14 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	20ff      	movs	r0, #255	; 0xff
 80012b4:	f7ff ff10 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2080      	movs	r0, #128	; 0x80
 80012bc:	f7ff ff0c 	bl	80010d8 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80012c0:	2060      	movs	r0, #96	; 0x60
 80012c2:	f7ff ff56 	bl	8001172 <readReg>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f043 0312 	orr.w	r3, r3, #18
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	2060      	movs	r0, #96	; 0x60
 80012d2:	f7ff ff01 	bl	80010d8 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(0.25);
 80012d6:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80012da:	f000 f9a5 	bl	8001628 <VL53L0X_setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff fef9 	bl	80010d8 <writeReg>
  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80012e6:	1dba      	adds	r2, r7, #6
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f9eb 	bl	80016c8 <VL53L0X_getSpadInfo>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <VL53L0X_init+0x88>
 80012f8:	2300      	movs	r3, #0
 80012fa:	e18d      	b.n	8001618 <VL53L0X_init+0x3a4>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80012fc:	463b      	mov	r3, r7
 80012fe:	2206      	movs	r2, #6
 8001300:	4619      	mov	r1, r3
 8001302:	20b0      	movs	r0, #176	; 0xb0
 8001304:	f7ff ff61 	bl	80011ca <readMulti>
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
  writeReg(INTERNAL_TUNING_2, 0x01);
 8001308:	2101      	movs	r1, #1
 800130a:	20ff      	movs	r0, #255	; 0xff
 800130c:	f7ff fee4 	bl	80010d8 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001310:	2100      	movs	r1, #0
 8001312:	204f      	movs	r0, #79	; 0x4f
 8001314:	f7ff fee0 	bl	80010d8 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001318:	212c      	movs	r1, #44	; 0x2c
 800131a:	204e      	movs	r0, #78	; 0x4e
 800131c:	f7ff fedc 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 8001320:	2100      	movs	r1, #0
 8001322:	20ff      	movs	r0, #255	; 0xff
 8001324:	f7ff fed8 	bl	80010d8 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001328:	21b4      	movs	r1, #180	; 0xb4
 800132a:	20b6      	movs	r0, #182	; 0xb6
 800132c:	f7ff fed4 	bl	80010d8 <writeReg>
  // -- VL53L0X_set_reference_spads() end
  //****************************************************************************
  // LOAD TUNING SETTINGS
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001330:	2101      	movs	r1, #1
 8001332:	20ff      	movs	r0, #255	; 0xff
 8001334:	f7ff fed0 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001338:	2100      	movs	r1, #0
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fecc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001340:	2100      	movs	r1, #0
 8001342:	20ff      	movs	r0, #255	; 0xff
 8001344:	f7ff fec8 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_RANGE_CONFIG, 0x00);
 8001348:	2100      	movs	r1, #0
 800134a:	2009      	movs	r0, #9
 800134c:	f7ff fec4 	bl	80010d8 <writeReg>
  writeReg(0x10, 0x00);
 8001350:	2100      	movs	r1, #0
 8001352:	2010      	movs	r0, #16
 8001354:	f7ff fec0 	bl	80010d8 <writeReg>
  writeReg(0x11, 0x00);
 8001358:	2100      	movs	r1, #0
 800135a:	2011      	movs	r0, #17
 800135c:	f7ff febc 	bl	80010d8 <writeReg>

  writeReg(0x24, 0x01);
 8001360:	2101      	movs	r1, #1
 8001362:	2024      	movs	r0, #36	; 0x24
 8001364:	f7ff feb8 	bl	80010d8 <writeReg>
  writeReg(0x25, 0xFF);
 8001368:	21ff      	movs	r1, #255	; 0xff
 800136a:	2025      	movs	r0, #37	; 0x25
 800136c:	f7ff feb4 	bl	80010d8 <writeReg>
  writeReg(0x75, 0x00);
 8001370:	2100      	movs	r1, #0
 8001372:	2075      	movs	r0, #117	; 0x75
 8001374:	f7ff feb0 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001378:	2101      	movs	r1, #1
 800137a:	20ff      	movs	r0, #255	; 0xff
 800137c:	f7ff feac 	bl	80010d8 <writeReg>
  writeReg(0x4E, 0x2C);
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	204e      	movs	r0, #78	; 0x4e
 8001384:	f7ff fea8 	bl	80010d8 <writeReg>
  writeReg(0x48, 0x00);
 8001388:	2100      	movs	r1, #0
 800138a:	2048      	movs	r0, #72	; 0x48
 800138c:	f7ff fea4 	bl	80010d8 <writeReg>
  writeReg(0x30, 0x20);
 8001390:	2120      	movs	r1, #32
 8001392:	2030      	movs	r0, #48	; 0x30
 8001394:	f7ff fea0 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001398:	2100      	movs	r1, #0
 800139a:	20ff      	movs	r0, #255	; 0xff
 800139c:	f7ff fe9c 	bl	80010d8 <writeReg>
  writeReg(0x30, 0x09);
 80013a0:	2109      	movs	r1, #9
 80013a2:	2030      	movs	r0, #48	; 0x30
 80013a4:	f7ff fe98 	bl	80010d8 <writeReg>
  writeReg(0x54, 0x00);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2054      	movs	r0, #84	; 0x54
 80013ac:	f7ff fe94 	bl	80010d8 <writeReg>
  writeReg(0x31, 0x04);
 80013b0:	2104      	movs	r1, #4
 80013b2:	2031      	movs	r0, #49	; 0x31
 80013b4:	f7ff fe90 	bl	80010d8 <writeReg>
  writeReg(0x32, 0x03);
 80013b8:	2103      	movs	r1, #3
 80013ba:	2032      	movs	r0, #50	; 0x32
 80013bc:	f7ff fe8c 	bl	80010d8 <writeReg>
  writeReg(0x40, 0x83);
 80013c0:	2183      	movs	r1, #131	; 0x83
 80013c2:	2040      	movs	r0, #64	; 0x40
 80013c4:	f7ff fe88 	bl	80010d8 <writeReg>
  writeReg(0x46, 0x25);
 80013c8:	2125      	movs	r1, #37	; 0x25
 80013ca:	2046      	movs	r0, #70	; 0x46
 80013cc:	f7ff fe84 	bl	80010d8 <writeReg>
  writeReg(0x60, 0x00);
 80013d0:	2100      	movs	r1, #0
 80013d2:	2060      	movs	r0, #96	; 0x60
 80013d4:	f7ff fe80 	bl	80010d8 <writeReg>
  writeReg(0x27, 0x00);
 80013d8:	2100      	movs	r1, #0
 80013da:	2027      	movs	r0, #39	; 0x27
 80013dc:	f7ff fe7c 	bl	80010d8 <writeReg>
  writeReg(0x50, 0x06);
 80013e0:	2106      	movs	r1, #6
 80013e2:	2050      	movs	r0, #80	; 0x50
 80013e4:	f7ff fe78 	bl	80010d8 <writeReg>
  writeReg(0x51, 0x00);
 80013e8:	2100      	movs	r1, #0
 80013ea:	2051      	movs	r0, #81	; 0x51
 80013ec:	f7ff fe74 	bl	80010d8 <writeReg>
  writeReg(0x52, 0x96);
 80013f0:	2196      	movs	r1, #150	; 0x96
 80013f2:	2052      	movs	r0, #82	; 0x52
 80013f4:	f7ff fe70 	bl	80010d8 <writeReg>
  writeReg(0x56, 0x08);
 80013f8:	2108      	movs	r1, #8
 80013fa:	2056      	movs	r0, #86	; 0x56
 80013fc:	f7ff fe6c 	bl	80010d8 <writeReg>
  writeReg(0x57, 0x30);
 8001400:	2130      	movs	r1, #48	; 0x30
 8001402:	2057      	movs	r0, #87	; 0x57
 8001404:	f7ff fe68 	bl	80010d8 <writeReg>
  writeReg(0x61, 0x00);
 8001408:	2100      	movs	r1, #0
 800140a:	2061      	movs	r0, #97	; 0x61
 800140c:	f7ff fe64 	bl	80010d8 <writeReg>
  writeReg(0x62, 0x00);
 8001410:	2100      	movs	r1, #0
 8001412:	2062      	movs	r0, #98	; 0x62
 8001414:	f7ff fe60 	bl	80010d8 <writeReg>
  writeReg(0x64, 0x00);
 8001418:	2100      	movs	r1, #0
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f7ff fe5c 	bl	80010d8 <writeReg>
  writeReg(0x65, 0x00);
 8001420:	2100      	movs	r1, #0
 8001422:	2065      	movs	r0, #101	; 0x65
 8001424:	f7ff fe58 	bl	80010d8 <writeReg>
  writeReg(0x66, 0xA0);
 8001428:	21a0      	movs	r1, #160	; 0xa0
 800142a:	2066      	movs	r0, #102	; 0x66
 800142c:	f7ff fe54 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001430:	2101      	movs	r1, #1
 8001432:	20ff      	movs	r0, #255	; 0xff
 8001434:	f7ff fe50 	bl	80010d8 <writeReg>
  writeReg(0x22, 0x32);
 8001438:	2132      	movs	r1, #50	; 0x32
 800143a:	2022      	movs	r0, #34	; 0x22
 800143c:	f7ff fe4c 	bl	80010d8 <writeReg>
  writeReg(0x47, 0x14);
 8001440:	2114      	movs	r1, #20
 8001442:	2047      	movs	r0, #71	; 0x47
 8001444:	f7ff fe48 	bl	80010d8 <writeReg>
  writeReg(0x49, 0xFF);
 8001448:	21ff      	movs	r1, #255	; 0xff
 800144a:	2049      	movs	r0, #73	; 0x49
 800144c:	f7ff fe44 	bl	80010d8 <writeReg>
  writeReg(0x4A, 0x00);
 8001450:	2100      	movs	r1, #0
 8001452:	204a      	movs	r0, #74	; 0x4a
 8001454:	f7ff fe40 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001458:	2100      	movs	r1, #0
 800145a:	20ff      	movs	r0, #255	; 0xff
 800145c:	f7ff fe3c 	bl	80010d8 <writeReg>
  writeReg(0x7A, 0x0A);
 8001460:	210a      	movs	r1, #10
 8001462:	207a      	movs	r0, #122	; 0x7a
 8001464:	f7ff fe38 	bl	80010d8 <writeReg>
  writeReg(0x7B, 0x00);
 8001468:	2100      	movs	r1, #0
 800146a:	207b      	movs	r0, #123	; 0x7b
 800146c:	f7ff fe34 	bl	80010d8 <writeReg>
  writeReg(0x78, 0x21);
 8001470:	2121      	movs	r1, #33	; 0x21
 8001472:	2078      	movs	r0, #120	; 0x78
 8001474:	f7ff fe30 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001478:	2101      	movs	r1, #1
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	f7ff fe2c 	bl	80010d8 <writeReg>
  writeReg(0x23, 0x34);
 8001480:	2134      	movs	r1, #52	; 0x34
 8001482:	2023      	movs	r0, #35	; 0x23
 8001484:	f7ff fe28 	bl	80010d8 <writeReg>
  writeReg(0x42, 0x00);
 8001488:	2100      	movs	r1, #0
 800148a:	2042      	movs	r0, #66	; 0x42
 800148c:	f7ff fe24 	bl	80010d8 <writeReg>
  writeReg(0x44, 0xFF);
 8001490:	21ff      	movs	r1, #255	; 0xff
 8001492:	2044      	movs	r0, #68	; 0x44
 8001494:	f7ff fe20 	bl	80010d8 <writeReg>
  writeReg(0x45, 0x26);
 8001498:	2126      	movs	r1, #38	; 0x26
 800149a:	2045      	movs	r0, #69	; 0x45
 800149c:	f7ff fe1c 	bl	80010d8 <writeReg>
  writeReg(0x46, 0x05);
 80014a0:	2105      	movs	r1, #5
 80014a2:	2046      	movs	r0, #70	; 0x46
 80014a4:	f7ff fe18 	bl	80010d8 <writeReg>
  writeReg(0x40, 0x40);
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	2040      	movs	r0, #64	; 0x40
 80014ac:	f7ff fe14 	bl	80010d8 <writeReg>
  writeReg(0x0E, 0x06);
 80014b0:	2106      	movs	r1, #6
 80014b2:	200e      	movs	r0, #14
 80014b4:	f7ff fe10 	bl	80010d8 <writeReg>
  writeReg(0x20, 0x1A);
 80014b8:	211a      	movs	r1, #26
 80014ba:	2020      	movs	r0, #32
 80014bc:	f7ff fe0c 	bl	80010d8 <writeReg>
  writeReg(0x43, 0x40);
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	2043      	movs	r0, #67	; 0x43
 80014c4:	f7ff fe08 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80014c8:	2100      	movs	r1, #0
 80014ca:	20ff      	movs	r0, #255	; 0xff
 80014cc:	f7ff fe04 	bl	80010d8 <writeReg>
  writeReg(0x34, 0x03);
 80014d0:	2103      	movs	r1, #3
 80014d2:	2034      	movs	r0, #52	; 0x34
 80014d4:	f7ff fe00 	bl	80010d8 <writeReg>
  writeReg(0x35, 0x44);
 80014d8:	2144      	movs	r1, #68	; 0x44
 80014da:	2035      	movs	r0, #53	; 0x35
 80014dc:	f7ff fdfc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80014e0:	2101      	movs	r1, #1
 80014e2:	20ff      	movs	r0, #255	; 0xff
 80014e4:	f7ff fdf8 	bl	80010d8 <writeReg>
  writeReg(0x31, 0x04);
 80014e8:	2104      	movs	r1, #4
 80014ea:	2031      	movs	r0, #49	; 0x31
 80014ec:	f7ff fdf4 	bl	80010d8 <writeReg>
  writeReg(0x4B, 0x09);
 80014f0:	2109      	movs	r1, #9
 80014f2:	204b      	movs	r0, #75	; 0x4b
 80014f4:	f7ff fdf0 	bl	80010d8 <writeReg>
  writeReg(0x4C, 0x05);
 80014f8:	2105      	movs	r1, #5
 80014fa:	204c      	movs	r0, #76	; 0x4c
 80014fc:	f7ff fdec 	bl	80010d8 <writeReg>
  writeReg(0x4D, 0x04);
 8001500:	2104      	movs	r1, #4
 8001502:	204d      	movs	r0, #77	; 0x4d
 8001504:	f7ff fde8 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001508:	2100      	movs	r1, #0
 800150a:	20ff      	movs	r0, #255	; 0xff
 800150c:	f7ff fde4 	bl	80010d8 <writeReg>
  writeReg(0x44, 0x00);
 8001510:	2100      	movs	r1, #0
 8001512:	2044      	movs	r0, #68	; 0x44
 8001514:	f7ff fde0 	bl	80010d8 <writeReg>
  writeReg(0x45, 0x20);
 8001518:	2120      	movs	r1, #32
 800151a:	2045      	movs	r0, #69	; 0x45
 800151c:	f7ff fddc 	bl	80010d8 <writeReg>
  writeReg(0x47, 0x08);
 8001520:	2108      	movs	r1, #8
 8001522:	2047      	movs	r0, #71	; 0x47
 8001524:	f7ff fdd8 	bl	80010d8 <writeReg>
  writeReg(0x48, 0x28);
 8001528:	2128      	movs	r1, #40	; 0x28
 800152a:	2048      	movs	r0, #72	; 0x48
 800152c:	f7ff fdd4 	bl	80010d8 <writeReg>
  writeReg(0x67, 0x00);
 8001530:	2100      	movs	r1, #0
 8001532:	2067      	movs	r0, #103	; 0x67
 8001534:	f7ff fdd0 	bl	80010d8 <writeReg>
  writeReg(0x70, 0x04);
 8001538:	2104      	movs	r1, #4
 800153a:	2070      	movs	r0, #112	; 0x70
 800153c:	f7ff fdcc 	bl	80010d8 <writeReg>
  writeReg(0x71, 0x01);
 8001540:	2101      	movs	r1, #1
 8001542:	2071      	movs	r0, #113	; 0x71
 8001544:	f7ff fdc8 	bl	80010d8 <writeReg>
  writeReg(0x72, 0xFE);
 8001548:	21fe      	movs	r1, #254	; 0xfe
 800154a:	2072      	movs	r0, #114	; 0x72
 800154c:	f7ff fdc4 	bl	80010d8 <writeReg>
  writeReg(0x76, 0x00);
 8001550:	2100      	movs	r1, #0
 8001552:	2076      	movs	r0, #118	; 0x76
 8001554:	f7ff fdc0 	bl	80010d8 <writeReg>
  writeReg(0x77, 0x00);
 8001558:	2100      	movs	r1, #0
 800155a:	2077      	movs	r0, #119	; 0x77
 800155c:	f7ff fdbc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001560:	2101      	movs	r1, #1
 8001562:	20ff      	movs	r0, #255	; 0xff
 8001564:	f7ff fdb8 	bl	80010d8 <writeReg>
  writeReg(0x0D, 0x01);
 8001568:	2101      	movs	r1, #1
 800156a:	200d      	movs	r0, #13
 800156c:	f7ff fdb4 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001570:	2100      	movs	r1, #0
 8001572:	20ff      	movs	r0, #255	; 0xff
 8001574:	f7ff fdb0 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001578:	2101      	movs	r1, #1
 800157a:	2080      	movs	r0, #128	; 0x80
 800157c:	f7ff fdac 	bl	80010d8 <writeReg>
  writeReg(0x01, 0xF8);
 8001580:	21f8      	movs	r1, #248	; 0xf8
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fda8 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001588:	2101      	movs	r1, #1
 800158a:	20ff      	movs	r0, #255	; 0xff
 800158c:	f7ff fda4 	bl	80010d8 <writeReg>
  writeReg(0x8E, 0x01);
 8001590:	2101      	movs	r1, #1
 8001592:	208e      	movs	r0, #142	; 0x8e
 8001594:	f7ff fda0 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001598:	2101      	movs	r1, #1
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fd9c 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80015a0:	2100      	movs	r1, #0
 80015a2:	20ff      	movs	r0, #255	; 0xff
 80015a4:	f7ff fd98 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2080      	movs	r0, #128	; 0x80
 80015ac:	f7ff fd94 	bl	80010d8 <writeReg>
  //***************************************************************************
  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80015b0:	2104      	movs	r1, #4
 80015b2:	200a      	movs	r0, #10
 80015b4:	f7ff fd90 	bl	80010d8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80015b8:	2084      	movs	r0, #132	; 0x84
 80015ba:	f7ff fdda 	bl	8001172 <readReg>
 80015be:	4603      	mov	r3, r0
 80015c0:	f023 0310 	bic.w	r3, r3, #16
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4619      	mov	r1, r3
 80015c8:	2084      	movs	r0, #132	; 0x84
 80015ca:	f7ff fd85 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015ce:	2101      	movs	r1, #1
 80015d0:	200b      	movs	r0, #11
 80015d2:	f7ff fd81 	bl	80010d8 <writeReg>
  //***************************************************************************
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015d6:	21e8      	movs	r1, #232	; 0xe8
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd7d 	bl	80010d8 <writeReg>
  //***************************************************************************
  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())
  // -- VL53L0X_perform_vhv_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80015de:	2101      	movs	r1, #1
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff fd79 	bl	80010d8 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x40)) { return false; }
 80015e6:	2040      	movs	r0, #64	; 0x40
 80015e8:	f000 f854 	bl	8001694 <VL53L0X_performSingleRefCalibration>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <VL53L0X_init+0x382>
 80015f2:	2300      	movs	r3, #0
 80015f4:	e010      	b.n	8001618 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // -- VL53L0X_perform_phase_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015f6:	2102      	movs	r1, #2
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fd6d 	bl	80010d8 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x00)) { return false; }
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f848 	bl	8001694 <VL53L0X_performSingleRefCalibration>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <VL53L0X_init+0x39a>
 800160a:	2300      	movs	r3, #0
 800160c:	e004      	b.n	8001618 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800160e:	21e8      	movs	r1, #232	; 0xe8
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fd61 	bl	80010d8 <writeReg>
  //***************************************************************************
  return true;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000027c 	.word	0x2000027c
 8001624:	00000000 	.word	0x00000000

08001628 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t VL53L0X_setSignalRateLimit(float limit_Mcps)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001632:	edd7 7a01 	vldr	s15, [r7, #4]
 8001636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	d40a      	bmi.n	8001656 <VL53L0X_setSignalRateLimit+0x2e>
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe ff99 	bl	8000578 <__aeabi_f2d>
 8001646:	a311      	add	r3, pc, #68	; (adr r3, 800168c <VL53L0X_setSignalRateLimit+0x64>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7ff fa7c 	bl	8000b48 <__aeabi_dcmpgt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <VL53L0X_setSignalRateLimit+0x32>
 8001656:	2300      	movs	r3, #0
 8001658:	e00f      	b.n	800167a <VL53L0X_setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800165a:	edd7 7a01 	vldr	s15, [r7, #4]
 800165e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001688 <VL53L0X_setSignalRateLimit+0x60>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	b29b      	uxth	r3, r3
 8001670:	4619      	mov	r1, r3
 8001672:	2044      	movs	r0, #68	; 0x44
 8001674:	f7ff fd42 	bl	80010fc <writeReg16Bit>
  return true;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	43000000 	.word	0x43000000
 800168c:	0a3d70a4 	.word	0x0a3d70a4
 8001690:	407fffd7 	.word	0x407fffd7

08001694 <VL53L0X_performSingleRefCalibration>:
  return temp;
}
//=============================================================================
// based on VL53L0X_perform_single_ref_calibration()
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fd15 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80016ae:	2101      	movs	r1, #1
 80016b0:	200b      	movs	r0, #11
 80016b2:	f7ff fd11 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 80016b6:	2100      	movs	r1, #0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fd0d 	bl	80010d8 <writeReg>
  return true;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <VL53L0X_getSpadInfo>:
//=============================================================================
// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t VL53L0X_getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80016d2:	2101      	movs	r1, #1
 80016d4:	2080      	movs	r0, #128	; 0x80
 80016d6:	f7ff fcff 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 80016da:	2101      	movs	r1, #1
 80016dc:	20ff      	movs	r0, #255	; 0xff
 80016de:	f7ff fcfb 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x00);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fcf7 	bl	80010d8 <writeReg>

  writeReg(0xFF, 0x06);
 80016ea:	2106      	movs	r1, #6
 80016ec:	20ff      	movs	r0, #255	; 0xff
 80016ee:	f7ff fcf3 	bl	80010d8 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 80016f2:	2083      	movs	r0, #131	; 0x83
 80016f4:	f7ff fd3d 	bl	8001172 <readReg>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4619      	mov	r1, r3
 8001702:	2083      	movs	r0, #131	; 0x83
 8001704:	f7ff fce8 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x07);
 8001708:	2107      	movs	r1, #7
 800170a:	20ff      	movs	r0, #255	; 0xff
 800170c:	f7ff fce4 	bl	80010d8 <writeReg>
  writeReg(0x81, 0x01);
 8001710:	2101      	movs	r1, #1
 8001712:	2081      	movs	r0, #129	; 0x81
 8001714:	f7ff fce0 	bl	80010d8 <writeReg>

  writeReg(0x80, 0x01);
 8001718:	2101      	movs	r1, #1
 800171a:	2080      	movs	r0, #128	; 0x80
 800171c:	f7ff fcdc 	bl	80010d8 <writeReg>

  writeReg(0x94, 0x6b);
 8001720:	216b      	movs	r1, #107	; 0x6b
 8001722:	2094      	movs	r0, #148	; 0x94
 8001724:	f7ff fcd8 	bl	80010d8 <writeReg>
  writeReg(0x83, 0x00);
 8001728:	2100      	movs	r1, #0
 800172a:	2083      	movs	r0, #131	; 0x83
 800172c:	f7ff fcd4 	bl	80010d8 <writeReg>
  startTimeout();
 8001730:	f7ff fcca 	bl	80010c8 <millis>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <VL53L0X_getSpadInfo+0x12c>)
 800173a:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 800173c:	e010      	b.n	8001760 <VL53L0X_getSpadInfo+0x98>
  {
    if (checkTimeoutExpired()) { return false; }
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <VL53L0X_getSpadInfo+0x130>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <VL53L0X_getSpadInfo+0x98>
 8001746:	f7ff fcbf 	bl	80010c8 <millis>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <VL53L0X_getSpadInfo+0x12c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <VL53L0X_getSpadInfo+0x130>)
 8001756:	8812      	ldrh	r2, [r2, #0]
 8001758:	4293      	cmp	r3, r2
 800175a:	dd01      	ble.n	8001760 <VL53L0X_getSpadInfo+0x98>
 800175c:	2300      	movs	r3, #0
 800175e:	e044      	b.n	80017ea <VL53L0X_getSpadInfo+0x122>
  while (readReg(0x83) == 0x00)
 8001760:	2083      	movs	r0, #131	; 0x83
 8001762:	f7ff fd06 	bl	8001172 <readReg>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e8      	beq.n	800173e <VL53L0X_getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 800176c:	2101      	movs	r1, #1
 800176e:	2083      	movs	r0, #131	; 0x83
 8001770:	f7ff fcb2 	bl	80010d8 <writeReg>
  tmp = readReg(0x92);
 8001774:	2092      	movs	r0, #146	; 0x92
 8001776:	f7ff fcfc 	bl	8001172 <readReg>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	09db      	lsrs	r3, r3, #7
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2da      	uxtb	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 80017a2:	2100      	movs	r1, #0
 80017a4:	2081      	movs	r0, #129	; 0x81
 80017a6:	f7ff fc97 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x06);
 80017aa:	2106      	movs	r1, #6
 80017ac:	20ff      	movs	r0, #255	; 0xff
 80017ae:	f7ff fc93 	bl	80010d8 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 80017b2:	2083      	movs	r0, #131	; 0x83
 80017b4:	f7ff fcdd 	bl	8001172 <readReg>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	2083      	movs	r0, #131	; 0x83
 80017c4:	f7ff fc88 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 80017c8:	2101      	movs	r1, #1
 80017ca:	20ff      	movs	r0, #255	; 0xff
 80017cc:	f7ff fc84 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x01);
 80017d0:	2101      	movs	r1, #1
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fc80 	bl	80010d8 <writeReg>

  writeReg(0xFF, 0x00);
 80017d8:	2100      	movs	r1, #0
 80017da:	20ff      	movs	r0, #255	; 0xff
 80017dc:	f7ff fc7c 	bl	80010d8 <writeReg>
  writeReg(0x80, 0x00);
 80017e0:	2100      	movs	r1, #0
 80017e2:	2080      	movs	r0, #128	; 0x80
 80017e4:	f7ff fc78 	bl	80010d8 <writeReg>

  return true;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000027e 	.word	0x2000027e
 80017f8:	20000280 	.word	0x20000280

080017fc <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(uint32_t period_ms)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8001804:	2101      	movs	r1, #1
 8001806:	2080      	movs	r0, #128	; 0x80
 8001808:	f7ff fc66 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 800180c:	2101      	movs	r1, #1
 800180e:	20ff      	movs	r0, #255	; 0xff
 8001810:	f7ff fc62 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x00);
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fc5e 	bl	80010d8 <writeReg>
  writeReg(0x91, g_stopVariable);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <VL53L0X_startContinuous+0x88>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	2091      	movs	r0, #145	; 0x91
 8001824:	f7ff fc58 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x01);
 8001828:	2101      	movs	r1, #1
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fc54 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x00);
 8001830:	2100      	movs	r1, #0
 8001832:	20ff      	movs	r0, #255	; 0xff
 8001834:	f7ff fc50 	bl	80010d8 <writeReg>
  writeReg(0x80, 0x00);
 8001838:	2100      	movs	r1, #0
 800183a:	2080      	movs	r0, #128	; 0x80
 800183c:	f7ff fc4c 	bl	80010d8 <writeReg>

  if (period_ms != 0)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <VL53L0X_startContinuous+0x76>
  {
    // continuous timed mode
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 8001846:	20f8      	movs	r0, #248	; 0xf8
 8001848:	f7ff fca6 	bl	8001198 <readReg16Bit>
 800184c:	4603      	mov	r3, r0
 800184e:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <VL53L0X_startContinuous+0x64>
    {
      period_ms *= osc_calibrate_val;
 8001856:	89fa      	ldrh	r2, [r7, #14]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	607b      	str	r3, [r7, #4]
    }
    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	2004      	movs	r0, #4
 8001864:	f7ff fc65 	bl	8001132 <writeReg32Bit>
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001868:	2104      	movs	r1, #4
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fc34 	bl	80010d8 <writeReg>
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001870:	e003      	b.n	800187a <VL53L0X_startContinuous+0x7e>
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8001872:	2102      	movs	r1, #2
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fc2f 	bl	80010d8 <writeReg>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000027c 	.word	0x2000027c

08001888 <VL53L0X_readRangeContinuousMillimeters>:
  writeReg(0x00, 0x01);
  writeReg(0xFF, 0x00);
}
//=============================================================================
uint16_t VL53L0X_readRangeContinuousMillimeters()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
    }
  }
*/
  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 800188e:	201e      	movs	r0, #30
 8001890:	f7ff fc82 	bl	8001198 <readReg16Bit>
 8001894:	4603      	mov	r3, r0
 8001896:	80fb      	strh	r3, [r7, #6]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001898:	2101      	movs	r1, #1
 800189a:	200b      	movs	r0, #11
 800189c:	f7ff fc1c 	bl	80010d8 <writeReg>

  return range;
 80018a0:	88fb      	ldrh	r3, [r7, #6]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <captDistIR_Init+0x5c>)
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <captDistIR_Init+0x60>)
 80018b4:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <captDistIR_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <captDistIR_Init+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <captDistIR_Init+0x5c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <captDistIR_Init+0x5c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <captDistIR_Init+0x5c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <captDistIR_Init+0x5c>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <captDistIR_Init+0x5c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <captDistIR_Init+0x5c>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <captDistIR_Init+0x5c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <captDistIR_Init+0x5c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <captDistIR_Init+0x5c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <captDistIR_Init+0x5c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 80018fe:	4802      	ldr	r0, [pc, #8]	; (8001908 <captDistIR_Init+0x5c>)
 8001900:	f003 faa8 	bl	8004e54 <HAL_ADC_Init>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000284 	.word	0x20000284
 800190c:	40012000 	.word	0x40012000

08001910 <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <captDistIR_Get+0x80>)
 800191a:	2204      	movs	r2, #4
 800191c:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <captDistIR_Get+0x80>)
 8001920:	2201      	movs	r2, #1
 8001922:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <captDistIR_Get+0x80>)
 8001926:	2203      	movs	r2, #3
 8001928:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 800192a:	4919      	ldr	r1, [pc, #100]	; (8001990 <captDistIR_Get+0x80>)
 800192c:	4819      	ldr	r0, [pc, #100]	; (8001994 <captDistIR_Get+0x84>)
 800192e:	f003 fb7d 	bl	800502c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 8001932:	4818      	ldr	r0, [pc, #96]	; (8001994 <captDistIR_Get+0x84>)
 8001934:	f003 fac2 	bl	8004ebc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8001938:	210a      	movs	r1, #10
 800193a:	4816      	ldr	r0, [pc, #88]	; (8001994 <captDistIR_Get+0x84>)
 800193c:	f003 fb2a 	bl	8004f94 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8001940:	4814      	ldr	r0, [pc, #80]	; (8001994 <captDistIR_Get+0x84>)
 8001942:	f003 fb66 	bl	8005012 <HAL_ADC_GetValue>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <captDistIR_Get+0x80>)
 8001950:	2208      	movs	r2, #8
 8001952:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <captDistIR_Get+0x80>)
 8001956:	2201      	movs	r2, #1
 8001958:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <captDistIR_Get+0x80>)
 800195c:	2203      	movs	r2, #3
 800195e:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001960:	490b      	ldr	r1, [pc, #44]	; (8001990 <captDistIR_Get+0x80>)
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <captDistIR_Get+0x84>)
 8001964:	f003 fb62 	bl	800502c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <captDistIR_Get+0x84>)
 800196a:	f003 faa7 	bl	8004ebc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 800196e:	210a      	movs	r1, #10
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <captDistIR_Get+0x84>)
 8001972:	f003 fb0f 	bl	8004f94 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <captDistIR_Get+0x84>)
 8001978:	f003 fb4b 	bl	8005012 <HAL_ADC_GetValue>
 800197c:	4602      	mov	r2, r0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3304      	adds	r3, #4
 8001982:	601a      	str	r2, [r3, #0]

	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002c8 	.word	0x200002c8
 8001994:	20000284 	.word	0x20000284

08001998 <process_command_data>:
#include <stdlib.h>

static int vitess_send = 0;
static char last_command = '\0';

char process_command_data(char* buffer) {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    if (buffer != NULL) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d015      	beq.n	80019d2 <process_command_data+0x3a>
        char first_char = buffer[0];
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	73fb      	strb	r3, [r7, #15]
        // Check if the first character is 'v' command to change vitess
        if(first_char == 'v') {
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b76      	cmp	r3, #118	; 0x76
 80019b0:	d108      	bne.n	80019c4 <process_command_data+0x2c>
            // Check if there is a previous command stored
            if(last_command != '\0') {
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <process_command_data+0x48>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <process_command_data+0x28>
                return last_command; // Return the last command without change
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <process_command_data+0x48>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	e009      	b.n	80019d4 <process_command_data+0x3c>
            } else {
                return '\0'; // Return null character if there is no previous command
 80019c0:	2300      	movs	r3, #0
 80019c2:	e007      	b.n	80019d4 <process_command_data+0x3c>
            }
        } else {
            last_command = buffer[0]; // Store the new command
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <process_command_data+0x48>)
 80019ca:	701a      	strb	r2, [r3, #0]
            return last_command; // Return the new command
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <process_command_data+0x48>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	e000      	b.n	80019d4 <process_command_data+0x3c>
        }
    }
    return '\0'; // Return null character if buffer is empty or for other conditions
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	200002dc 	.word	0x200002dc

080019e4 <process_vitess_data>:

int process_vitess_data(char* buffer) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    if (buffer != NULL) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d015      	beq.n	8001a1e <process_vitess_data+0x3a>
        int i = 0; // Start from index 0
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
        vitess_send = 0; // Reset the vitess value
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <process_vitess_data+0x48>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
        // Process data until encountering null character ('\0')
        while (buffer[i] != '\0') {
 80019fc:	e009      	b.n	8001a12 <process_vitess_data+0x2e>
            get_vitess(buffer[i]); // Process each character to calculate vitess
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f812 	bl	8001a30 <get_vitess>
            i++; // Move to the next character
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
        while (buffer[i] != '\0') {
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ef      	bne.n	80019fe <process_vitess_data+0x1a>
        }
    }
    return vitess_send; // Return the calculated vitess value
 8001a1e:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <process_vitess_data+0x48>)
 8001a20:	681b      	ldr	r3, [r3, #0]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200002d8 	.word	0x200002d8

08001a30 <get_vitess>:

void get_vitess(char c) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
    // Logic to process character for vitess
    if (c >= '0' && c <= '9') {
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b2f      	cmp	r3, #47	; 0x2f
 8001a3e:	d90e      	bls.n	8001a5e <get_vitess+0x2e>
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b39      	cmp	r3, #57	; 0x39
 8001a44:	d80b      	bhi.n	8001a5e <get_vitess+0x2e>
        vitess_send = vitess_send * 10 + (c - '0'); // Convert character to integer and update vitess value
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <get_vitess+0x3c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	461a      	mov	r2, r3
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3b30      	subs	r3, #48	; 0x30
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <get_vitess+0x3c>)
 8001a5c:	6013      	str	r3, [r2, #0]
    }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200002d8 	.word	0x200002d8

08001a70 <get_xy>:

void get_xy(char *buffer, float *result) {
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    if (buffer != NULL && result != NULL) {
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d02b      	beq.n	8001ad8 <get_xy+0x68>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d028      	beq.n	8001ad8 <get_xy+0x68>
        char *part1 = strtok(buffer, ",");
 8001a86:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <get_xy+0x70>)
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f01a f9a1 	bl	801bdd0 <strtok>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]
        char *part2 = strtok(NULL, ",");
 8001a92:	4913      	ldr	r1, [pc, #76]	; (8001ae0 <get_xy+0x70>)
 8001a94:	2000      	movs	r0, #0
 8001a96:	f01a f99b 	bl	801bdd0 <strtok>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	60bb      	str	r3, [r7, #8]

        if (part1 != NULL && part2 != NULL) {
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d019      	beq.n	8001ad8 <get_xy+0x68>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d016      	beq.n	8001ad8 <get_xy+0x68>
            result[0] = atof(part1);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f017 ffda 	bl	8019a64 <atof>
 8001ab0:	ec53 2b10 	vmov	r2, r3, d0
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f8ae 	bl	8000c18 <__aeabi_d2f>
 8001abc:	4602      	mov	r2, r0
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
            result[1] = atof(part2);
 8001ac2:	68b8      	ldr	r0, [r7, #8]
 8001ac4:	f017 ffce 	bl	8019a64 <atof>
 8001ac8:	ec51 0b10 	vmov	r0, r1, d0
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	1d1c      	adds	r4, r3, #4
 8001ad0:	f7ff f8a2 	bl	8000c18 <__aeabi_d2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	6023      	str	r3, [r4, #0]
        }
    }
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	0801ea68 	.word	0x0801ea68

08001ae4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001af0:	f00b f8ea 	bl	800ccc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001af4:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <pvPortMallocMicroROS+0x174>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001afc:	f000 f98c 	bl	8001e18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b00:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <pvPortMallocMicroROS+0x178>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 808e 	bne.w	8001c2a <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01d      	beq.n	8001b50 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001b14:	2208      	movs	r2, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d014      	beq.n	8001b50 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f023 0307 	bic.w	r3, r3, #7
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3e:	f383 8811 	msr	BASEPRI, r3
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b4c:	bf00      	nop
 8001b4e:	e7fe      	b.n	8001b4e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d069      	beq.n	8001c2a <pvPortMallocMicroROS+0x146>
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <pvPortMallocMicroROS+0x17c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d864      	bhi.n	8001c2a <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <pvPortMallocMicroROS+0x180>)
 8001b62:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <pvPortMallocMicroROS+0x180>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b6a:	e004      	b.n	8001b76 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d903      	bls.n	8001b88 <pvPortMallocMicroROS+0xa4>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f1      	bne.n	8001b6c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <pvPortMallocMicroROS+0x174>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d04b      	beq.n	8001c2a <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2208      	movs	r2, #8
 8001b98:	4413      	add	r3, r2
 8001b9a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	1ad2      	subs	r2, r2, r3
 8001bac:	2308      	movs	r3, #8
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d91f      	bls.n	8001bf4 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	613b      	str	r3, [r7, #16]
}
 8001bd8:	bf00      	nop
 8001bda:	e7fe      	b.n	8001bda <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	1ad2      	subs	r2, r2, r3
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001bee:	69b8      	ldr	r0, [r7, #24]
 8001bf0:	f000 f974 	bl	8001edc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <pvPortMallocMicroROS+0x17c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <pvPortMallocMicroROS+0x17c>)
 8001c00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <pvPortMallocMicroROS+0x17c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <pvPortMallocMicroROS+0x184>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d203      	bcs.n	8001c16 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <pvPortMallocMicroROS+0x17c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <pvPortMallocMicroROS+0x184>)
 8001c14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <pvPortMallocMicroROS+0x178>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c2a:	f00b f85b 	bl	800cce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	60fb      	str	r3, [r7, #12]
}
 8001c4a:	bf00      	nop
 8001c4c:	e7fe      	b.n	8001c4c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200042e8 	.word	0x200042e8
 8001c5c:	200042f4 	.word	0x200042f4
 8001c60:	200042ec 	.word	0x200042ec
 8001c64:	200042e0 	.word	0x200042e0
 8001c68:	200042f0 	.word	0x200042f0

08001c6c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d048      	beq.n	8001d10 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	425b      	negs	r3, r3
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <vPortFreeMicroROS+0xac>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <vPortFreeMicroROS+0x44>
	__asm volatile
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	60fb      	str	r3, [r7, #12]
}
 8001cac:	bf00      	nop
 8001cae:	e7fe      	b.n	8001cae <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00a      	beq.n	8001cce <vPortFreeMicroROS+0x62>
	__asm volatile
 8001cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cbc:	f383 8811 	msr	BASEPRI, r3
 8001cc0:	f3bf 8f6f 	isb	sy
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	60bb      	str	r3, [r7, #8]
}
 8001cca:	bf00      	nop
 8001ccc:	e7fe      	b.n	8001ccc <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <vPortFreeMicroROS+0xac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d019      	beq.n	8001d10 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d115      	bne.n	8001d10 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <vPortFreeMicroROS+0xac>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001cf4:	f00a ffe8 	bl	800ccc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <vPortFreeMicroROS+0xb0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <vPortFreeMicroROS+0xb0>)
 8001d04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d06:	6938      	ldr	r0, [r7, #16]
 8001d08:	f000 f8e8 	bl	8001edc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d0c:	f00a ffea 	bl	800cce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d10:	bf00      	nop
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200042f4 	.word	0x200042f4
 8001d1c:	200042ec 	.word	0x200042ec

08001d20 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	425b      	negs	r3, r3
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4413      	add	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <getBlockSize+0x38>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

	return count;
 8001d48:	68fb      	ldr	r3, [r7, #12]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200042f4 	.word	0x200042f4

08001d5c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d66:	f00a ffaf 	bl	800ccc8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f7ff feba 	bl	8001ae4 <pvPortMallocMicroROS>
 8001d70:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d76:	2308      	movs	r3, #8
 8001d78:	425b      	negs	r3, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <pvPortReallocMicroROS+0x70>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4013      	ands	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001d9a:	e007      	b.n	8001dac <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	1c53      	adds	r3, r2, #1
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1c59      	adds	r1, r3, #1
 8001da6:	61b9      	str	r1, [r7, #24]
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1e5a      	subs	r2, r3, #1
 8001db0:	617a      	str	r2, [r7, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f2      	bne.n	8001d9c <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff58 	bl	8001c6c <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001dbc:	f00a ff92 	bl	800cce4 <xTaskResumeAll>

	return newmem;
 8001dc0:	693b      	ldr	r3, [r7, #16]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200042f4 	.word	0x200042f4

08001dd0 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001dda:	f00a ff75 	bl	800ccc8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001de8:	6978      	ldr	r0, [r7, #20]
 8001dea:	f7ff fe7b 	bl	8001ae4 <pvPortMallocMicroROS>
 8001dee:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001df4:	e004      	b.n	8001e00 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	613a      	str	r2, [r7, #16]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	617a      	str	r2, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f5      	bne.n	8001df6 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001e0a:	f00a ff6b 	bl	800cce4 <xTaskResumeAll>
  	return mem;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <prvHeapInit+0xac>)
 8001e26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3307      	adds	r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0307 	bic.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <prvHeapInit+0xac>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e50:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <prvHeapInit+0xb0>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <prvHeapInit+0xb0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e64:	2208      	movs	r2, #8
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f023 0307 	bic.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <prvHeapInit+0xb4>)
 8001e78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <prvHeapInit+0xb4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <prvHeapInit+0xb4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <prvHeapInit+0xb4>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <prvHeapInit+0xb8>)
 8001ea6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <prvHeapInit+0xbc>)
 8001eae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <prvHeapInit+0xc0>)
 8001eb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001eb6:	601a      	str	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	200002e0 	.word	0x200002e0
 8001ec8:	200042e0 	.word	0x200042e0
 8001ecc:	200042e8 	.word	0x200042e8
 8001ed0:	200042f0 	.word	0x200042f0
 8001ed4:	200042ec 	.word	0x200042ec
 8001ed8:	200042f4 	.word	0x200042f4

08001edc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <prvInsertBlockIntoFreeList+0xac>)
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e002      	b.n	8001ef0 <prvInsertBlockIntoFreeList+0x14>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8f7      	bhi.n	8001eea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4413      	add	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d108      	bne.n	8001f1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	441a      	add	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	441a      	add	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d118      	bne.n	8001f64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <prvInsertBlockIntoFreeList+0xb0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d00d      	beq.n	8001f5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	441a      	add	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e008      	b.n	8001f6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <prvInsertBlockIntoFreeList+0xb0>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e003      	b.n	8001f6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d002      	beq.n	8001f7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	200042e0 	.word	0x200042e0
 8001f8c:	200042e8 	.word	0x200042e8

08001f90 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f9e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa4:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <cubemx_transport_open+0x28>)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f008 fa44 	bl	800a434 <HAL_UART_Receive_DMA>
    return true;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200042f8 	.word	0x200042f8

08001fbc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001fca:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f008 fa61 	bl	800a494 <HAL_UART_DMAStop>
    return true;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ff0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d11c      	bne.n	8002038 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f008 f996 	bl	800a338 <HAL_UART_Transmit_DMA>
 800200c:	4603      	mov	r3, r0
 800200e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002010:	e002      	b.n	8002018 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f009 fcae 	bl	800b974 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <cubemx_transport_write+0x4e>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	d1f3      	bne.n	8002012 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <cubemx_transport_write+0x58>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	e002      	b.n	800203a <cubemx_transport_write+0x5e>
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002038:	2300      	movs	r3, #0
    }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002058:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205e:	b672      	cpsid	i
}
 8002060:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800206e:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <cubemx_transport_read+0x9c>)
 8002070:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002072:	b662      	cpsie	i
}
 8002074:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3301      	adds	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800207c:	2001      	movs	r0, #1
 800207e:	f009 fc79 	bl	800b974 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <cubemx_transport_read+0xa0>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <cubemx_transport_read+0x9c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d103      	bne.n	8002096 <cubemx_transport_read+0x52>
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	dbe3      	blt.n	800205e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800209a:	e011      	b.n	80020c0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <cubemx_transport_read+0xa0>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	440b      	add	r3, r1
 80020a6:	4910      	ldr	r1, [pc, #64]	; (80020e8 <cubemx_transport_read+0xa4>)
 80020a8:	5c8a      	ldrb	r2, [r1, r2]
 80020aa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <cubemx_transport_read+0xa0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <cubemx_transport_read+0xa0>)
 80020b8:	6013      	str	r3, [r2, #0]
        wrote++;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	3301      	adds	r3, #1
 80020be:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <cubemx_transport_read+0xa0>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <cubemx_transport_read+0x9c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d003      	beq.n	80020d4 <cubemx_transport_read+0x90>
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3e3      	bcc.n	800209c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80020d4:	69bb      	ldr	r3, [r7, #24]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20004afc 	.word	0x20004afc
 80020e4:	20004af8 	.word	0x20004af8
 80020e8:	200042f8 	.word	0x200042f8

080020ec <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a2c      	ldr	r2, [pc, #176]	; (80021bc <MX_GPIO_Init+0xd0>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <MX_GPIO_Init+0xd0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_GPIO_Init+0xd0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MX_GPIO_Init+0xd0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2120      	movs	r1, #32
 8002176:	4812      	ldr	r0, [pc, #72]	; (80021c0 <MX_GPIO_Init+0xd4>)
 8002178:	f003 ffb2 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800217c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002182:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_GPIO_Init+0xd8>)
 8002194:	f003 fe20 	bl	8005dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002198:	2320      	movs	r3, #32
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4804      	ldr	r0, [pc, #16]	; (80021c0 <MX_GPIO_Init+0xd4>)
 80021b0:	f003 fe12 	bl	8005dd8 <HAL_GPIO_Init>

}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020800 	.word	0x40020800

080021c8 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d8:	d017      	beq.n	800220a <HAL_GPIO_EXTI_Callback+0x42>
 80021da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021de:	dc16      	bgt.n	800220e <HAL_GPIO_EXTI_Callback+0x46>
 80021e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e4:	d00e      	beq.n	8002204 <HAL_GPIO_EXTI_Callback+0x3c>
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ea:	dc10      	bgt.n	800220e <HAL_GPIO_EXTI_Callback+0x46>
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d010      	beq.n	8002212 <HAL_GPIO_EXTI_Callback+0x4a>
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	dc0c      	bgt.n	800220e <HAL_GPIO_EXTI_Callback+0x46>
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d002      	beq.n	80021fe <HAL_GPIO_EXTI_Callback+0x36>
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d00c      	beq.n	8002216 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 80021fc:	e007      	b.n	800220e <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 80021fe:	f001 fdc3 	bl	8003d88 <quadEncoder_CallbackIndexR>
					break;
 8002202:	e009      	b.n	8002218 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8002204:	f001 fd94 	bl	8003d30 <quadEncoder_CallbackIndexL>
					break;
 8002208:	e006      	b.n	8002218 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800220a:	bf00      	nop
 800220c:	e004      	b.n	8002218 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800220e:	bf00      	nop
 8002210:	e002      	b.n	8002218 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002212:	bf00      	nop
 8002214:	e000      	b.n	8002218 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002216:	bf00      	nop


	}
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <MX_I2C1_Init+0x50>)
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <MX_I2C1_Init+0x54>)
 8002228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_I2C1_Init+0x50>)
 800222c:	4a12      	ldr	r2, [pc, #72]	; (8002278 <MX_I2C1_Init+0x58>)
 800222e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002230:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <MX_I2C1_Init+0x50>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_I2C1_Init+0x50>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_I2C1_Init+0x50>)
 800223e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002242:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <MX_I2C1_Init+0x50>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_I2C1_Init+0x50>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <MX_I2C1_Init+0x50>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_I2C1_Init+0x50>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <MX_I2C1_Init+0x50>)
 800225e:	f003 ff71 	bl	8006144 <HAL_I2C_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002268:	f001 fa1c 	bl	80036a4 <Error_Handler>
  }

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20004b00 	.word	0x20004b00
 8002274:	40005400 	.word	0x40005400
 8002278:	00061a80 	.word	0x00061a80

0800227c <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	4603      	mov	r3, r0
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	b29b      	uxth	r3, r3
 800228e:	89f9      	ldrh	r1, [r7, #14]
 8002290:	2264      	movs	r2, #100	; 0x64
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <i2c1_WriteBuffer+0x30>)
 8002298:	f004 f898 	bl	80063cc <HAL_I2C_Master_Transmit>
 800229c:	4603      	mov	r3, r0
 800229e:	617b      	str	r3, [r7, #20]
	return status;
 80022a0:	697b      	ldr	r3, [r7, #20]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20004b00 	.word	0x20004b00

080022b0 <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4603      	mov	r3, r0
 80022bc:	81fb      	strh	r3, [r7, #14]
 80022be:	460b      	mov	r3, r1
 80022c0:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 80022c2:	7b7b      	ldrb	r3, [r7, #13]
 80022c4:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 80022c6:	f107 0213 	add.w	r2, r7, #19
 80022ca:	89f9      	ldrh	r1, [r7, #14]
 80022cc:	2364      	movs	r3, #100	; 0x64
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	480f      	ldr	r0, [pc, #60]	; (8002310 <i2c1_ReadRegBuffer+0x60>)
 80022d4:	f004 f87a 	bl	80063cc <HAL_I2C_Master_Transmit>
 80022d8:	4603      	mov	r3, r0
 80022da:	617b      	str	r3, [r7, #20]
        if( status )
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10f      	bne.n	8002302 <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2164      	movs	r1, #100	; 0x64
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	89f9      	ldrh	r1, [r7, #14]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	4806      	ldr	r0, [pc, #24]	; (8002310 <i2c1_ReadRegBuffer+0x60>)
 80022f8:	f004 f966 	bl	80065c8 <HAL_I2C_Master_Receive>
 80022fc:	4603      	mov	r3, r0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e000      	b.n	8002304 <i2c1_ReadRegBuffer+0x54>
            break;
 8002302:	bf00      	nop
    }while(0);
    return status;
 8002304:	697b      	ldr	r3, [r7, #20]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20004b00 	.word	0x20004b00

08002314 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af02      	add	r7, sp, #8
 800231a:	60ba      	str	r2, [r7, #8]
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4603      	mov	r3, r0
 8002320:	81fb      	strh	r3, [r7, #14]
 8002322:	460b      	mov	r3, r1
 8002324:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8002326:	7b7b      	ldrb	r3, [r7, #13]
 8002328:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	3301      	adds	r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	4618      	mov	r0, r3
 8002336:	f017 fd1d 	bl	8019d74 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	b29b      	uxth	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	b29b      	uxth	r3, r3
 8002342:	f107 0214 	add.w	r2, r7, #20
 8002346:	89f9      	ldrh	r1, [r7, #14]
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	9000      	str	r0, [sp, #0]
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <i2c1_WriteRegBuffer+0x4c>)
 800234e:	f004 f83d 	bl	80063cc <HAL_I2C_Master_Transmit>
 8002352:	4603      	mov	r3, r0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002358:	4618      	mov	r0, r3
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20004b00 	.word	0x20004b00

08002364 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif


PUTCHAR_PROTOTYPE
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800236c:	1d39      	adds	r1, r7, #4
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002372:	2201      	movs	r2, #1
 8002374:	4803      	ldr	r0, [pc, #12]	; (8002384 <__io_putchar+0x20>)
 8002376:	f007 ff4d 	bl	800a214 <HAL_UART_Transmit>
  return ch;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20004b98 	.word	0x20004b98

08002388 <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <MX_USART1_UART_Init+0x50>)
 8002390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 8002394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023ae:	220c      	movs	r2, #12
 80023b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023c0:	f007 fedb 	bl	800a17a <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ca:	f001 f96b 	bl	80036a4 <Error_Handler>
  }
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20004b54 	.word	0x20004b54
 80023d8:	40011000 	.word	0x40011000

080023dc <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <MX_USART2_UART_Init+0x50>)
 80023e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 80023e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 8002402:	220c      	movs	r2, #12
 8002404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_USART2_UART_Init+0x4c>)
 8002414:	f007 feb1 	bl	800a17a <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800241e:	f001 f941 	bl	80036a4 <Error_Handler>
  }
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20004b98 	.word	0x20004b98
 800242c:	40004400 	.word	0x40004400

08002430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <MX_DMA_Init+0x88>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <MX_DMA_Init+0x88>)
 8002440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <MX_DMA_Init+0x88>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_DMA_Init+0x88>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <MX_DMA_Init+0x88>)
 800245c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_DMA_Init+0x88>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2105      	movs	r1, #5
 8002472:	2010      	movs	r0, #16
 8002474:	f003 f876 	bl	8005564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002478:	2010      	movs	r0, #16
 800247a:	f003 f88f 	bl	800559c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2105      	movs	r1, #5
 8002482:	2011      	movs	r0, #17
 8002484:	f003 f86e 	bl	8005564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002488:	2011      	movs	r0, #17
 800248a:	f003 f887 	bl	800559c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2105      	movs	r1, #5
 8002492:	203a      	movs	r0, #58	; 0x3a
 8002494:	f003 f866 	bl	8005564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002498:	203a      	movs	r0, #58	; 0x3a
 800249a:	f003 f87f 	bl	800559c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	2046      	movs	r0, #70	; 0x46
 80024a4:	f003 f85e 	bl	8005564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80024a8:	2046      	movs	r0, #70	; 0x46
 80024aa:	f003 f877 	bl	800559c <HAL_NVIC_EnableIRQ>

}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	207c      	movs	r0, #124	; 0x7c
 80024d0:	f7ff fed4 	bl	800227c <i2c1_WriteBuffer>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	460b      	mov	r3, r1
 80024e8:	71bb      	strb	r3, [r7, #6]
 80024ea:	4613      	mov	r3, r2
 80024ec:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d906      	bls.n	8002502 <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <groveLCD_begin+0xe8>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <groveLCD_begin+0xe8>)
 8002500:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8002502:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <groveLCD_begin+0xec>)
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8002508:	4b30      	ldr	r3, [pc, #192]	; (80025cc <groveLCD_begin+0xf0>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 800250e:	797b      	ldrb	r3, [r7, #5]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <groveLCD_begin+0x4c>
 8002514:	79bb      	ldrb	r3, [r7, #6]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d106      	bne.n	8002528 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <groveLCD_begin+0xe8>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <groveLCD_begin+0xe8>)
 8002526:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8002528:	2032      	movs	r0, #50	; 0x32
 800252a:	f002 fc6f 	bl	8004e0c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <groveLCD_begin+0xe8>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f043 0320 	orr.w	r3, r3, #32
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f89b 	bl	8002674 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800253e:	2005      	movs	r0, #5
 8002540:	f002 fc64 	bl	8004e0c <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <groveLCD_begin+0xe8>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f043 0320 	orr.w	r3, r3, #32
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f890 	bl	8002674 <groveLCD_command>
    HAL_Delay(5);
 8002554:	2005      	movs	r0, #5
 8002556:	f002 fc59 	bl	8004e0c <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <groveLCD_begin+0xe8>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f043 0320 	orr.w	r3, r3, #32
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f885 	bl	8002674 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <groveLCD_begin+0xe8>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f043 0320 	orr.w	r3, r3, #32
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f87d 	bl	8002674 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <groveLCD_begin+0xf4>)
 800257c:	2204      	movs	r2, #4
 800257e:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8002580:	f000 f862 	bl	8002648 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8002584:	f000 f831 	bl	80025ea <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <groveLCD_begin+0xf8>)
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <groveLCD_begin+0xf8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f86b 	bl	8002674 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 800259e:	2100      	movs	r1, #0
 80025a0:	2000      	movs	r0, #0
 80025a2:	f000 f8a4 	bl	80026ee <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 80025a6:	21ff      	movs	r1, #255	; 0xff
 80025a8:	2008      	movs	r0, #8
 80025aa:	f000 f8a0 	bl	80026ee <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 80025ae:	2120      	movs	r1, #32
 80025b0:	2001      	movs	r0, #1
 80025b2:	f000 f89c 	bl	80026ee <groveLCD_setReg>

    groveLCD_setColorWhite();
 80025b6:	f000 f80f 	bl	80025d8 <groveLCD_setColorWhite>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20004d5c 	.word	0x20004d5c
 80025c8:	20004d5f 	.word	0x20004d5f
 80025cc:	20004d60 	.word	0x20004d60
 80025d0:	20004d5d 	.word	0x20004d5d
 80025d4:	20004d5e 	.word	0x20004d5e

080025d8 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
 80025dc:	22ff      	movs	r2, #255	; 0xff
 80025de:	21ff      	movs	r1, #255	; 0xff
 80025e0:	20ff      	movs	r0, #255	; 0xff
 80025e2:	f000 f896 	bl	8002712 <groveLCD_setRGB>
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}

080025ea <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80025ee:	2001      	movs	r0, #1
 80025f0:	f000 f840 	bl	8002674 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80025f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025f8:	f002 fc08 	bl	8004e0c <HAL_Delay>
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}

08002600 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	460a      	mov	r2, r1
 800260a:	71fb      	strb	r3, [r7, #7]
 800260c:	4613      	mov	r3, r2
 800260e:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8002610:	79bb      	ldrb	r3, [r7, #6]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <groveLCD_setCursor+0x20>
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e003      	b.n	8002628 <groveLCD_setCursor+0x28>
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002626:	b2db      	uxtb	r3, r3
 8002628:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	733b      	strb	r3, [r7, #12]
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff3f 	bl	80024bc <i2c_send_byteS>
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <groveLCD_display+0x28>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <groveLCD_display+0x28>)
 8002658:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <groveLCD_display+0x28>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f805 	bl	8002674 <groveLCD_command>
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20004d5d 	.word	0x20004d5d

08002674 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	733b      	strb	r3, [r7, #12]
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	2102      	movs	r1, #2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff15 	bl	80024bc <i2c_send_byteS>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 80026a4:	2340      	movs	r3, #64	; 0x40
 80026a6:	733b      	strb	r3, [r7, #12]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	2102      	movs	r1, #2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff02 	bl	80024bc <i2c_send_byteS>
    return 1; // assume sucess
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80026ca:	e007      	b.n	80026dc <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ffe2 	bl	800269a <groveLCD_write>
		s++;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3301      	adds	r3, #1
 80026da:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f3      	bne.n	80026cc <groveLCD_putString+0xa>
	}
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	460a      	mov	r2, r1
 80026f8:	71fb      	strb	r3, [r7, #7]
 80026fa:	4613      	mov	r3, r2
 80026fc:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80026fe:	1dba      	adds	r2, r7, #6
 8002700:	79f9      	ldrb	r1, [r7, #7]
 8002702:	2301      	movs	r3, #1
 8002704:	20c4      	movs	r0, #196	; 0xc4
 8002706:	f7ff fe05 	bl	8002314 <i2c1_WriteRegBuffer>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	460b      	mov	r3, r1
 800271e:	71bb      	strb	r3, [r7, #6]
 8002720:	4613      	mov	r3, r2
 8002722:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	4619      	mov	r1, r3
 8002728:	2004      	movs	r0, #4
 800272a:	f7ff ffe0 	bl	80026ee <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	4619      	mov	r1, r3
 8002732:	2003      	movs	r0, #3
 8002734:	f7ff ffdb 	bl	80026ee <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002738:	797b      	ldrb	r3, [r7, #5]
 800273a:	4619      	mov	r1, r3
 800273c:	2002      	movs	r0, #2
 800273e:	f7ff ffd6 	bl	80026ee <groveLCD_setReg>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	0000      	movs	r0, r0
 800274c:	0000      	movs	r0, r0
	...

08002750 <groveLCD_term_printf>:
    if(color > 3)return ;
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
}
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002750:	b40f      	push	{r0, r1, r2, r3}
 8002752:	b5b0      	push	{r4, r5, r7, lr}
 8002754:	b0a4      	sub	sp, #144	; 0x90
 8002756:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002758:	2300      	movs	r3, #0
 800275a:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 800275c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 8002762:	e1cd      	b.n	8002b00 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 8002764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b25      	cmp	r3, #37	; 0x25
 800276c:	f040 81bd 	bne.w	8002aea <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002770:	2300      	movs	r3, #0
 8002772:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002774:	2301      	movs	r3, #1
 8002776:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800277c:	3301      	adds	r3, #1
 800277e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b30      	cmp	r3, #48	; 0x30
 800278a:	d106      	bne.n	800279a <groveLCD_term_printf+0x4a>
 800278c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002790:	3301      	adds	r3, #1
 8002792:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002796:	2300      	movs	r3, #0
 8002798:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 800279a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80027a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80027a8:	2b30      	cmp	r3, #48	; 0x30
 80027aa:	d92c      	bls.n	8002806 <groveLCD_term_printf+0xb6>
 80027ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80027b0:	2b39      	cmp	r3, #57	; 0x39
 80027b2:	d828      	bhi.n	8002806 <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 80027b8:	e012      	b.n	80027e0 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80027ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	673a      	str	r2, [r7, #112]	; 0x70
 80027c0:	3388      	adds	r3, #136	; 0x88
 80027c2:	443b      	add	r3, r7
 80027c4:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80027c8:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027d0:	3301      	adds	r3, #1
 80027d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 80027e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80027e4:	2b2f      	cmp	r3, #47	; 0x2f
 80027e6:	d903      	bls.n	80027f0 <groveLCD_term_printf+0xa0>
 80027e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80027ec:	2b39      	cmp	r3, #57	; 0x39
 80027ee:	d9e4      	bls.n	80027ba <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 80027f0:	463a      	mov	r2, r7
 80027f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f4:	4413      	add	r3, r2
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 80027fa:	463b      	mov	r3, r7
 80027fc:	210a      	movs	r1, #10
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 f940 	bl	8004a84 <str2num>
 8002804:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 8002806:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800280a:	2b25      	cmp	r3, #37	; 0x25
 800280c:	d03c      	beq.n	8002888 <groveLCD_term_printf+0x138>
 800280e:	2b25      	cmp	r3, #37	; 0x25
 8002810:	f2c0 8164 	blt.w	8002adc <groveLCD_term_printf+0x38c>
 8002814:	2b78      	cmp	r3, #120	; 0x78
 8002816:	f300 8161 	bgt.w	8002adc <groveLCD_term_printf+0x38c>
 800281a:	2b63      	cmp	r3, #99	; 0x63
 800281c:	f2c0 815e 	blt.w	8002adc <groveLCD_term_printf+0x38c>
 8002820:	3b63      	subs	r3, #99	; 0x63
 8002822:	2b15      	cmp	r3, #21
 8002824:	f200 815a 	bhi.w	8002adc <groveLCD_term_printf+0x38c>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <groveLCD_term_printf+0xe0>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002891 	.word	0x08002891
 8002834:	080028bb 	.word	0x080028bb
 8002838:	08002add 	.word	0x08002add
 800283c:	080029bb 	.word	0x080029bb
 8002840:	08002add 	.word	0x08002add
 8002844:	08002add 	.word	0x08002add
 8002848:	08002add 	.word	0x08002add
 800284c:	08002add 	.word	0x08002add
 8002850:	08002add 	.word	0x08002add
 8002854:	08002add 	.word	0x08002add
 8002858:	08002add 	.word	0x08002add
 800285c:	08002add 	.word	0x08002add
 8002860:	0800292b 	.word	0x0800292b
 8002864:	08002957 	.word	0x08002957
 8002868:	08002add 	.word	0x08002add
 800286c:	08002add 	.word	0x08002add
 8002870:	080028a9 	.word	0x080028a9
 8002874:	08002add 	.word	0x08002add
 8002878:	080028ff 	.word	0x080028ff
 800287c:	08002add 	.word	0x08002add
 8002880:	08002add 	.word	0x08002add
 8002884:	0800298f 	.word	0x0800298f
				case '%':
					groveLCD_write('%');
 8002888:	2025      	movs	r0, #37	; 0x25
 800288a:	f7ff ff06 	bl	800269a <groveLCD_write>
					break;
 800288e:	e132      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8002890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002892:	1d1a      	adds	r2, r3, #4
 8002894:	64ba      	str	r2, [r7, #72]	; 0x48
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 800289c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fefa 	bl	800269a <groveLCD_write>
					break;
 80028a6:	e126      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80028a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028aa:	1d1a      	adds	r2, r3, #4
 80028ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80028b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80028b4:	f7ff ff05 	bl	80026c2 <groveLCD_putString>
					break;
 80028b8:	e11d      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80028ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028bc:	1d1a      	adds	r2, r3, #4
 80028be:	64ba      	str	r2, [r7, #72]	; 0x48
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 80028c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da07      	bge.n	80028de <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 80028ce:	202d      	movs	r0, #45	; 0x2d
 80028d0:	f7ff fee3 	bl	800269a <groveLCD_write>
						ul = -(long)ul;
 80028d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d8:	425b      	negs	r3, r3
 80028da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 80028de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e0:	f107 000c 	add.w	r0, r7, #12
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028e8:	220a      	movs	r2, #10
 80028ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80028ee:	f002 f845 	bl	800497c <num2str>
					groveLCD_putString(s);
 80028f2:	f107 030c 	add.w	r3, r7, #12
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fee3 	bl	80026c2 <groveLCD_putString>
					break;
 80028fc:	e0fb      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 80028fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002900:	1d1a      	adds	r2, r3, #4
 8002902:	64ba      	str	r2, [r7, #72]	; 0x48
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 800290a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290c:	f107 000c 	add.w	r0, r7, #12
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002914:	220a      	movs	r2, #10
 8002916:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800291a:	f002 f82f 	bl	800497c <num2str>
					groveLCD_putString(s);
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fecd 	bl	80026c2 <groveLCD_putString>
					break;
 8002928:	e0e5      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 800292a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292c:	1d1a      	adds	r2, r3, #4
 800292e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 8002936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002938:	f107 000c 	add.w	r0, r7, #12
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002940:	2208      	movs	r2, #8
 8002942:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002946:	f002 f819 	bl	800497c <num2str>
					groveLCD_putString(s);
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff feb7 	bl	80026c2 <groveLCD_putString>
					break;
 8002954:	e0cf      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 8002956:	2030      	movs	r0, #48	; 0x30
 8002958:	f7ff fe9f 	bl	800269a <groveLCD_write>
					groveLCD_write('x');
 800295c:	2078      	movs	r0, #120	; 0x78
 800295e:	f7ff fe9c 	bl	800269a <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 8002962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002964:	1d1a      	adds	r2, r3, #4
 8002966:	64ba      	str	r2, [r7, #72]	; 0x48
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800296e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002970:	f107 000c 	add.w	r0, r7, #12
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002978:	2210      	movs	r2, #16
 800297a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800297e:	f001 fffd 	bl	800497c <num2str>
					groveLCD_putString(s);
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fe9b 	bl	80026c2 <groveLCD_putString>
					break;
 800298c:	e0b3      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002990:	1d1a      	adds	r2, r3, #4
 8002992:	64ba      	str	r2, [r7, #72]	; 0x48
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800299a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299c:	f107 000c 	add.w	r0, r7, #12
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029a4:	2210      	movs	r2, #16
 80029a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80029aa:	f001 ffe7 	bl	800497c <num2str>
					groveLCD_putString(s);
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fe85 	bl	80026c2 <groveLCD_putString>
					break;
 80029b8:	e09d      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80029ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10c      	bne.n	80029da <groveLCD_term_printf+0x28a>
 80029c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c2:	3307      	adds	r3, #7
 80029c4:	f023 0307 	bic.w	r3, r3, #7
 80029c8:	f103 0208 	add.w	r2, r3, #8
 80029cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80029d6:	2301      	movs	r3, #1
 80029d8:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029dc:	3307      	adds	r3, #7
 80029de:	f023 0307 	bic.w	r3, r3, #7
 80029e2:	f103 0208 	add.w	r2, r3, #8
 80029e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 80029f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	0fc2      	lsrs	r2, r0, #31
 80029fe:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002a02:	0fcb      	lsrs	r3, r1, #31
 8002a04:	4613      	mov	r3, r2
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a12:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 8002a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 8002a22:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002a26:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002b28 <groveLCD_term_printf+0x3d8>
 8002a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a2e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 8002a32:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a3e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 8002a42:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	0dc2      	lsrs	r2, r0, #23
 8002a50:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002a54:	0dcb      	lsrs	r3, r1, #23
 8002a56:	4613      	mov	r3, r2
 8002a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8002a5e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	0d02      	lsrs	r2, r0, #20
 8002a6c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002a70:	0d0b      	lsrs	r3, r1, #20
 8002a72:	4613      	mov	r3, r2
 8002a74:	f003 020f 	and.w	r2, r3, #15
 8002a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 8002a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a80:	3b7f      	subs	r3, #127	; 0x7f
 8002a82:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 8002a84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002a86:	f7fd fd77 	bl	8000578 <__aeabi_f2d>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	460d      	mov	r5, r1
 8002a8e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002a90:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002b20 <groveLCD_term_printf+0x3d0>
 8002a94:	f002 f904 	bl	8004ca0 <myPow>
 8002a98:	ec53 2b10 	vmov	r2, r3, d0
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	f7fd fdc2 	bl	8000628 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f8b4 	bl	8000c18 <__aeabi_d2f>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d102      	bne.n	8002ac0 <groveLCD_term_printf+0x370>
 8002aba:	202d      	movs	r0, #45	; 0x2d
 8002abc:	f7ff fded 	bl	800269a <groveLCD_write>
					float2str((char*)s, f, 5);
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	2105      	movs	r1, #5
 8002ac6:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 f898 	bl	8004c00 <float2str>
					groveLCD_putString((char*)s);
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fdf4 	bl	80026c2 <groveLCD_putString>
					break;
 8002ada:	e00c      	b.n	8002af6 <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 8002adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fdd9 	bl	800269a <groveLCD_write>
 8002ae8:	e005      	b.n	8002af6 <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 8002aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fdd2 	bl	800269a <groveLCD_write>
		fmt++;
 8002af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002afa:	3301      	adds	r3, #1
 8002afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f47f ae2c 	bne.w	8002764 <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3788      	adds	r7, #136	; 0x88
 8002b12:	46bd      	mov	sp, r7
 8002b14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002b18:	b004      	add	sp, #16
 8002b1a:	4770      	bx	lr
 8002b1c:	f3af 8000 	nop.w
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40000000 	.word	0x40000000
 8002b28:	49800000 	.word	0x49800000
 8002b2c:	00000000 	.word	0x00000000

08002b30 <task_MG>:
#define Kp_R 0.01

//========================================================================

int speed_L = 0;
static void task_MG(void *pvParameters) {
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    int err_L;
    float up_L;
    static float ui_L = 0.0;
    int commande = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	623b      	str	r3, [r7, #32]
    int consigne=0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    int start = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
    int tmp = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
    struct AMessage pxLxedMessage;

    for (;;) {
        xQueueReceive(qhL, &pxLxedMessage, portMAX_DELAY);
 8002b48:	4b45      	ldr	r3, [pc, #276]	; (8002c60 <task_MG+0x130>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f107 0108 	add.w	r1, r7, #8
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b54:	4618      	mov	r0, r3
 8002b56:	f009 fae9 	bl	800c12c <xQueueReceive>
        //printf("TASK A \r\n");

		if(pxLxedMessage.command == 'b'){ //consigne recul
 8002b5a:	7a3b      	ldrb	r3, [r7, #8]
 8002b5c:	2b62      	cmp	r3, #98	; 0x62
 8002b5e:	d103      	bne.n	8002b68 <task_MG+0x38>
			consigne = -pxLxedMessage.data;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	425b      	negs	r3, r3
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	e014      	b.n	8002b92 <task_MG+0x62>
		}else if(pxLxedMessage.command =='f'){ // avancer
 8002b68:	7a3b      	ldrb	r3, [r7, #8]
 8002b6a:	2b66      	cmp	r3, #102	; 0x66
 8002b6c:	d102      	bne.n	8002b74 <task_MG+0x44>
			consigne = pxLxedMessage.data;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e00e      	b.n	8002b92 <task_MG+0x62>
		}else if(pxLxedMessage.command == 'l'){ // rotation gauche
 8002b74:	7a3b      	ldrb	r3, [r7, #8]
 8002b76:	2b6c      	cmp	r3, #108	; 0x6c
 8002b78:	d103      	bne.n	8002b82 <task_MG+0x52>
			consigne = -pxLxedMessage.data;;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	e007      	b.n	8002b92 <task_MG+0x62>
		}else if(pxLxedMessage.command == 'r'){ // rotation droite
 8002b82:	7a3b      	ldrb	r3, [r7, #8]
 8002b84:	2b72      	cmp	r3, #114	; 0x72
 8002b86:	d102      	bne.n	8002b8e <task_MG+0x5e>
			consigne = pxLxedMessage.data;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	e001      	b.n	8002b92 <task_MG+0x62>
		}else{
			consigne = pxLxedMessage.data;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
		}

        // Calculate speed control values for left motor
        speed_L = quadEncoder_GetSpeedL();
 8002b92:	f001 f829 	bl	8003be8 <quadEncoder_GetSpeedL>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <task_MG+0x134>)
 8002b9c:	601a      	str	r2, [r3, #0]
        err_L = consigne - speed_L;
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <task_MG+0x134>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	617b      	str	r3, [r7, #20]
        up_L = Kp_L * (float)err_L;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb2:	ee17 0a90 	vmov	r0, s15
 8002bb6:	f7fd fcdf 	bl	8000578 <__aeabi_f2d>
 8002bba:	a325      	add	r3, pc, #148	; (adr r3, 8002c50 <task_MG+0x120>)
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f7fd fd32 	bl	8000628 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f7fe f824 	bl	8000c18 <__aeabi_d2f>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	613b      	str	r3, [r7, #16]
        ui_L += Kp_L * Ki_L * (float)err_L;
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <task_MG+0x138>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fccd 	bl	8000578 <__aeabi_f2d>
 8002bde:	4604      	mov	r4, r0
 8002be0:	460d      	mov	r5, r1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bec:	ee17 0a90 	vmov	r0, s15
 8002bf0:	f7fd fcc2 	bl	8000578 <__aeabi_f2d>
 8002bf4:	a318      	add	r3, pc, #96	; (adr r3, 8002c58 <task_MG+0x128>)
 8002bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfa:	f7fd fd15 	bl	8000628 <__aeabi_dmul>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4620      	mov	r0, r4
 8002c04:	4629      	mov	r1, r5
 8002c06:	f7fd fb59 	bl	80002bc <__adddf3>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7fe f801 	bl	8000c18 <__aeabi_d2f>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <task_MG+0x138>)
 8002c1a:	6013      	str	r3, [r2, #0]
        commande = (int)(up_L + ui_L);
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <task_MG+0x138>)
 8002c1e:	ed93 7a00 	vldr	s14, [r3]
 8002c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c2e:	ee17 3a90 	vmov	r3, s15
 8002c32:	623b      	str	r3, [r7, #32]
        motorLeft_SetDuty(commande+100);
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	3364      	adds	r3, #100	; 0x64
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fef9 	bl	8003a30 <motorLeft_SetDuty>

        xSemaphoreGive(xSemaphore);
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <task_MG+0x13c>)
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	f009 f8d6 	bl	800bdf8 <xQueueGenericSend>
        xQueueReceive(qhL, &pxLxedMessage, portMAX_DELAY);
 8002c4c:	e77c      	b.n	8002b48 <task_MG+0x18>
 8002c4e:	bf00      	nop
 8002c50:	47ae147b 	.word	0x47ae147b
 8002c54:	3f847ae1 	.word	0x3f847ae1
 8002c58:	ada2811d 	.word	0xada2811d
 8002c5c:	3f61cf06 	.word	0x3f61cf06
 8002c60:	20004d6c 	.word	0x20004d6c
 8002c64:	20004d98 	.word	0x20004d98
 8002c68:	20004da0 	.word	0x20004da0
 8002c6c:	20004d64 	.word	0x20004d64

08002c70 <task_MD>:
    }
}

int speed_R = 0;
static void task_MD(void *pvParameters) {
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    int err_R;
    float up_R;
    static float ui_R = 0.0;
    int commande = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
    int consigne=0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    int start = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
    int tmp = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    struct AMessage pxRxedMessage;

    for (;;) {
        xQueueReceive(qhR, &pxRxedMessage, portMAX_DELAY);
 8002c88:	4b45      	ldr	r3, [pc, #276]	; (8002da0 <task_MD+0x130>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f107 0108 	add.w	r1, r7, #8
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c94:	4618      	mov	r0, r3
 8002c96:	f009 fa49 	bl	800c12c <xQueueReceive>
        //printf("TASK B \r\n");


		if(pxRxedMessage.command == 'b'){ //consigne recul
 8002c9a:	7a3b      	ldrb	r3, [r7, #8]
 8002c9c:	2b62      	cmp	r3, #98	; 0x62
 8002c9e:	d103      	bne.n	8002ca8 <task_MD+0x38>
			consigne = -pxRxedMessage.data;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	425b      	negs	r3, r3
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	e014      	b.n	8002cd2 <task_MD+0x62>
		}else if(pxRxedMessage.command =='f'){ // avancer
 8002ca8:	7a3b      	ldrb	r3, [r7, #8]
 8002caa:	2b66      	cmp	r3, #102	; 0x66
 8002cac:	d102      	bne.n	8002cb4 <task_MD+0x44>
			consigne = pxRxedMessage.data;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	e00e      	b.n	8002cd2 <task_MD+0x62>
		}else if(pxRxedMessage.command == 'l'){ // rotation gauche
 8002cb4:	7a3b      	ldrb	r3, [r7, #8]
 8002cb6:	2b6c      	cmp	r3, #108	; 0x6c
 8002cb8:	d102      	bne.n	8002cc0 <task_MD+0x50>
			consigne = pxRxedMessage.data;;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	e008      	b.n	8002cd2 <task_MD+0x62>
		}else if(pxRxedMessage.command == 'r'){ // rotation droite
 8002cc0:	7a3b      	ldrb	r3, [r7, #8]
 8002cc2:	2b72      	cmp	r3, #114	; 0x72
 8002cc4:	d103      	bne.n	8002cce <task_MD+0x5e>
			consigne = -pxRxedMessage.data;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	425b      	negs	r3, r3
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	e001      	b.n	8002cd2 <task_MD+0x62>
		}else {
			consigne = pxRxedMessage.data;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
		}

        // Calculate speed control values for right motor
        speed_R = quadEncoder_GetSpeedR();
 8002cd2:	f000 ffdb 	bl	8003c8c <quadEncoder_GetSpeedR>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <task_MD+0x134>)
 8002cdc:	601a      	str	r2, [r3, #0]
        err_R = consigne - speed_R;
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <task_MD+0x134>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
        up_R = Kp_R * (float)err_R;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf2:	ee17 0a90 	vmov	r0, s15
 8002cf6:	f7fd fc3f 	bl	8000578 <__aeabi_f2d>
 8002cfa:	a325      	add	r3, pc, #148	; (adr r3, 8002d90 <task_MD+0x120>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fc92 	bl	8000628 <__aeabi_dmul>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7fd ff84 	bl	8000c18 <__aeabi_d2f>
 8002d10:	4603      	mov	r3, r0
 8002d12:	613b      	str	r3, [r7, #16]
        ui_R += Kp_R * Ki_R * (float)err_R;
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <task_MD+0x138>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc2d 	bl	8000578 <__aeabi_f2d>
 8002d1e:	4604      	mov	r4, r0
 8002d20:	460d      	mov	r5, r1
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2c:	ee17 0a90 	vmov	r0, s15
 8002d30:	f7fd fc22 	bl	8000578 <__aeabi_f2d>
 8002d34:	a318      	add	r3, pc, #96	; (adr r3, 8002d98 <task_MD+0x128>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc75 	bl	8000628 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4620      	mov	r0, r4
 8002d44:	4629      	mov	r1, r5
 8002d46:	f7fd fab9 	bl	80002bc <__adddf3>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7fd ff61 	bl	8000c18 <__aeabi_d2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <task_MD+0x138>)
 8002d5a:	6013      	str	r3, [r2, #0]
        commande= (int)(up_R + ui_R);
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <task_MD+0x138>)
 8002d5e:	ed93 7a00 	vldr	s14, [r3]
 8002d62:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6e:	ee17 3a90 	vmov	r3, s15
 8002d72:	623b      	str	r3, [r7, #32]
        motorRight_SetDuty(commande+100);
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	3364      	adds	r3, #100	; 0x64
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fe69 	bl	8003a50 <motorRight_SetDuty>
        xSemaphoreGive(xSemaphore);
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <task_MD+0x13c>)
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	2300      	movs	r3, #0
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	f009 f836 	bl	800bdf8 <xQueueGenericSend>
        xQueueReceive(qhR, &pxRxedMessage, portMAX_DELAY);
 8002d8c:	e77c      	b.n	8002c88 <task_MD+0x18>
 8002d8e:	bf00      	nop
 8002d90:	47ae147b 	.word	0x47ae147b
 8002d94:	3f847ae1 	.word	0x3f847ae1
 8002d98:	13813813 	.word	0x13813813
 8002d9c:	3f638138 	.word	0x3f638138
 8002da0:	20004d70 	.word	0x20004d70
 8002da4:	20004d9c 	.word	0x20004d9c
 8002da8:	20004da4 	.word	0x20004da4
 8002dac:	20004d64 	.word	0x20004d64

08002db0 <task_Superviseur>:
    }
}


static void task_Superviseur(void *pvParameters) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    struct AMessage pxMessage;
    int obstacle_detected_forward, obstacle_detected_backward;
    int mode_navigate_end;
    char first;
    char last;
    vTaskDelay(5);
 8002db8:	2005      	movs	r0, #5
 8002dba:	f009 fee1 	bl	800cb80 <vTaskDelay>
    for (;;) {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	4893      	ldr	r0, [pc, #588]	; (8003010 <task_Superviseur+0x260>)
 8002dc4:	f003 f98c 	bl	80060e0 <HAL_GPIO_WritePin>
        //printf("TASK C \r\n");
    	// Check for obstacles
    	obstacle_detected = 0;
 8002dc8:	4b92      	ldr	r3, [pc, #584]	; (8003014 <task_Superviseur+0x264>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    	obstacle_detected_forward = detect_obstacle_forward();
 8002dce:	f001 f807 	bl	8003de0 <detect_obstacle_forward>
 8002dd2:	6178      	str	r0, [r7, #20]
    	obstacle_detected_backward = detect_obstacle_backward();
 8002dd4:	f001 f828 	bl	8003e28 <detect_obstacle_backward>
 8002dd8:	6138      	str	r0, [r7, #16]

        // Set mode to auto
        if(mode == 0){
 8002dda:	4b8f      	ldr	r3, [pc, #572]	; (8003018 <task_Superviseur+0x268>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <task_Superviseur+0x40>
//							pxMessage.command = 's';
//							pxMessage.data =0;
//							obstacle_detected = 2;
//					} else {

							pxMessage.command = command_received;
 8002de2:	4b8e      	ldr	r3, [pc, #568]	; (800301c <task_Superviseur+0x26c>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	723b      	strb	r3, [r7, #8]
							pxMessage.data = speed_received;
 8002de8:	4b8d      	ldr	r3, [pc, #564]	; (8003020 <task_Superviseur+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e123      	b.n	8003038 <task_Superviseur+0x288>
//					}
        }else if(mode == 1){
 8002df0:	4b89      	ldr	r3, [pc, #548]	; (8003018 <task_Superviseur+0x268>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 80a1 	bne.w	8002f3c <task_Superviseur+0x18c>
        	if(obstacle_detected_forward >= 0 && obstacle_detected_backward){
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <task_Superviseur+0x66>
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <task_Superviseur+0x66>
        		pxMessage.command = 's';
 8002e06:	2373      	movs	r3, #115	; 0x73
 8002e08:	723b      	strb	r3, [r7, #8]
        		pxMessage.data =0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
        		obstacle_detected=3;
 8002e0e:	4b81      	ldr	r3, [pc, #516]	; (8003014 <task_Superviseur+0x264>)
 8002e10:	2203      	movs	r2, #3
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e110      	b.n	8003038 <task_Superviseur+0x288>
        	}
        	else if (obstacle_detected_forward >= 0) {
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db18      	blt.n	8002e4e <task_Superviseur+0x9e>
				//printf("Obstacle front ! .\r\n");
				//printf("steps %d .\r\n",steps);
        		first = (obstacle_detected_forward == 0) ? 'l' : 'r'; last = (obstacle_detected_forward == 0) ? 'r' : 'l';
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <task_Superviseur+0x76>
 8002e22:	236c      	movs	r3, #108	; 0x6c
 8002e24:	e000      	b.n	8002e28 <task_Superviseur+0x78>
 8002e26:	2372      	movs	r3, #114	; 0x72
 8002e28:	76fb      	strb	r3, [r7, #27]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <task_Superviseur+0x84>
 8002e30:	2372      	movs	r3, #114	; 0x72
 8002e32:	e000      	b.n	8002e36 <task_Superviseur+0x86>
 8002e34:	236c      	movs	r3, #108	; 0x6c
 8002e36:	76bb      	strb	r3, [r7, #26]
				pxMessage.command = 'b';
 8002e38:	2362      	movs	r3, #98	; 0x62
 8002e3a:	723b      	strb	r3, [r7, #8]
				pxMessage.data = 500;
 8002e3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e40:	60fb      	str	r3, [r7, #12]
				obstacle_detected = 1;
 8002e42:	4b74      	ldr	r3, [pc, #464]	; (8003014 <task_Superviseur+0x264>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
				mode_navigate_end = 1;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e0f4      	b.n	8003038 <task_Superviseur+0x288>
			} else if (obstacle_detected_backward) {
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <task_Superviseur+0xb4>
				//printf("Obstacle detected behind! Stopping.\r\n");
				pxMessage.command = 's';
 8002e54:	2373      	movs	r3, #115	; 0x73
 8002e56:	723b      	strb	r3, [r7, #8]
				pxMessage.data = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
				obstacle_detected = 2;
 8002e5c:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <task_Superviseur+0x264>)
 8002e5e:	2202      	movs	r2, #2
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e0e9      	b.n	8003038 <task_Superviseur+0x288>
			} else if(mode_navigate_end){
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d038      	beq.n	8002edc <task_Superviseur+0x12c>
				if (cpt < 500) {
 8002e6a:	4b6e      	ldr	r3, [pc, #440]	; (8003024 <task_Superviseur+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e72:	da04      	bge.n	8002e7e <task_Superviseur+0xce>
					pxMessage.command = first;
 8002e74:	7efb      	ldrb	r3, [r7, #27]
 8002e76:	723b      	strb	r3, [r7, #8]
					pxMessage.data = 200;
 8002e78:	23c8      	movs	r3, #200	; 0xc8
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e01d      	b.n	8002eba <task_Superviseur+0x10a>
				} else if (cpt > 300 && cpt < 900) {
 8002e7e:	4b69      	ldr	r3, [pc, #420]	; (8003024 <task_Superviseur+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e86:	dd0a      	ble.n	8002e9e <task_Superviseur+0xee>
 8002e88:	4b66      	ldr	r3, [pc, #408]	; (8003024 <task_Superviseur+0x274>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e90:	da05      	bge.n	8002e9e <task_Superviseur+0xee>
					pxMessage.command = 'f';
 8002e92:	2366      	movs	r3, #102	; 0x66
 8002e94:	723b      	strb	r3, [r7, #8]
					pxMessage.data = 400;
 8002e96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e00d      	b.n	8002eba <task_Superviseur+0x10a>
				} else if(cpt > 900 && cpt < 1400){
 8002e9e:	4b61      	ldr	r3, [pc, #388]	; (8003024 <task_Superviseur+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002ea6:	dd08      	ble.n	8002eba <task_Superviseur+0x10a>
 8002ea8:	4b5e      	ldr	r3, [pc, #376]	; (8003024 <task_Superviseur+0x274>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002eb0:	da03      	bge.n	8002eba <task_Superviseur+0x10a>
					pxMessage.command = last;
 8002eb2:	7ebb      	ldrb	r3, [r7, #26]
 8002eb4:	723b      	strb	r3, [r7, #8]
					pxMessage.data = 100;
 8002eb6:	2364      	movs	r3, #100	; 0x64
 8002eb8:	60fb      	str	r3, [r7, #12]
				}(cpt)++;
 8002eba:	4b5a      	ldr	r3, [pc, #360]	; (8003024 <task_Superviseur+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <task_Superviseur+0x274>)
 8002ec2:	6013      	str	r3, [r2, #0]
				if(cpt > 700){
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <task_Superviseur+0x274>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002ecc:	f340 80b4 	ble.w	8003038 <task_Superviseur+0x288>
					mode_navigate_end = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
					cpt=0;
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <task_Superviseur+0x274>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e0ad      	b.n	8003038 <task_Superviseur+0x288>
					//printf("end  \r\n",cpt);
				}
				//printf("capt = %d \r\n",cpt);
			}else {
				//printf("move_in_square_pattern\r\n");
									if (cpt > 5000 && cpt < 6000) {
 8002edc:	4b51      	ldr	r3, [pc, #324]	; (8003024 <task_Superviseur+0x274>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	dd0a      	ble.n	8002efe <task_Superviseur+0x14e>
 8002ee8:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <task_Superviseur+0x274>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f241 726f 	movw	r2, #5999	; 0x176f
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	dc04      	bgt.n	8002efe <task_Superviseur+0x14e>
								        pxMessage.command = 'l';
 8002ef4:	236c      	movs	r3, #108	; 0x6c
 8002ef6:	723b      	strb	r3, [r7, #8]
								        pxMessage.data = 100;
 8002ef8:	2364      	movs	r3, #100	; 0x64
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e018      	b.n	8002f30 <task_Superviseur+0x180>
								    } else if (cpt > 6000 && cpt < 7000) {
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <task_Superviseur+0x274>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f06:	4293      	cmp	r3, r2
 8002f08:	dd0d      	ble.n	8002f26 <task_Superviseur+0x176>
 8002f0a:	4b46      	ldr	r3, [pc, #280]	; (8003024 <task_Superviseur+0x274>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002f12:	4293      	cmp	r3, r2
 8002f14:	dc07      	bgt.n	8002f26 <task_Superviseur+0x176>
								    	//printf("move right\r\n");
								        pxMessage.command = 'r';
 8002f16:	2372      	movs	r3, #114	; 0x72
 8002f18:	723b      	strb	r3, [r7, #8]
								        pxMessage.data = 100;
 8002f1a:	2364      	movs	r3, #100	; 0x64
 8002f1c:	60fb      	str	r3, [r7, #12]
								        cpt = 0;
 8002f1e:	4b41      	ldr	r3, [pc, #260]	; (8003024 <task_Superviseur+0x274>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e004      	b.n	8002f30 <task_Superviseur+0x180>
								    } else {
								    	//printf("move forward\r\n");
								        pxMessage.command = 'f';
 8002f26:	2366      	movs	r3, #102	; 0x66
 8002f28:	723b      	strb	r3, [r7, #8]
								        pxMessage.data = 500;
 8002f2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f2e:	60fb      	str	r3, [r7, #12]
								    }
								    (cpt)++;
 8002f30:	4b3c      	ldr	r3, [pc, #240]	; (8003024 <task_Superviseur+0x274>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	4a3b      	ldr	r2, [pc, #236]	; (8003024 <task_Superviseur+0x274>)
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e07d      	b.n	8003038 <task_Superviseur+0x288>
								    //printf("capt = %d \r\n",cpt);
			}
        } else {
        	if (obstacle_detected_forward >= 0) {
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	db07      	blt.n	8002f52 <task_Superviseur+0x1a2>
        			pxMessage.command = 's';
 8002f42:	2373      	movs	r3, #115	; 0x73
 8002f44:	723b      	strb	r3, [r7, #8]
        			pxMessage.data =0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
					obstacle_detected = 1;
 8002f4a:	4b32      	ldr	r3, [pc, #200]	; (8003014 <task_Superviseur+0x264>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e009      	b.n	8002f66 <task_Superviseur+0x1b6>
			} else if (obstacle_detected_backward) {
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <task_Superviseur+0x1b6>
				pxMessage.command = 's';
 8002f58:	2373      	movs	r3, #115	; 0x73
 8002f5a:	723b      	strb	r3, [r7, #8]
				pxMessage.data =0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
				obstacle_detected = 2;
 8002f60:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <task_Superviseur+0x264>)
 8002f62:	2202      	movs	r2, #2
 8002f64:	601a      	str	r2, [r3, #0]
			}
            if (values_xy[0] == 0 && values_xy[1] == 0) {
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <task_Superviseur+0x278>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f74:	d10c      	bne.n	8002f90 <task_Superviseur+0x1e0>
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <task_Superviseur+0x278>)
 8002f78:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f84:	d104      	bne.n	8002f90 <task_Superviseur+0x1e0>
                pxMessage.command = 's';
 8002f86:	2373      	movs	r3, #115	; 0x73
 8002f88:	723b      	strb	r3, [r7, #8]
                pxMessage.data = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e053      	b.n	8003038 <task_Superviseur+0x288>
            }
            // Move forward condition
            else if (values_xy[0] > (w_cam / 2 - 120) && values_xy[0] < (w_cam / 2 + 120)) {
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <task_Superviseur+0x278>)
 8002f92:	ed93 7a00 	vldr	s14, [r3]
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <task_Superviseur+0x27c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0fda      	lsrs	r2, r3, #31
 8002f9c:	4413      	add	r3, r2
 8002f9e:	105b      	asrs	r3, r3, #1
 8002fa0:	3b78      	subs	r3, #120	; 0x78
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	dd17      	ble.n	8002fe4 <task_Superviseur+0x234>
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <task_Superviseur+0x278>)
 8002fb6:	ed93 7a00 	vldr	s14, [r3]
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <task_Superviseur+0x27c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0fda      	lsrs	r2, r3, #31
 8002fc0:	4413      	add	r3, r2
 8002fc2:	105b      	asrs	r3, r3, #1
 8002fc4:	3378      	adds	r3, #120	; 0x78
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	d505      	bpl.n	8002fe4 <task_Superviseur+0x234>
                pxMessage.command = 'f';
 8002fd8:	2366      	movs	r3, #102	; 0x66
 8002fda:	723b      	strb	r3, [r7, #8]
                pxMessage.data = 300;
 8002fdc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e029      	b.n	8003038 <task_Superviseur+0x288>
            }
            // Move right condition (if values_xy[0] is more than halfway of w_cam)
            else if (values_xy[0] > w_cam / 2) {
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <task_Superviseur+0x278>)
 8002fe6:	ed93 7a00 	vldr	s14, [r3]
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <task_Superviseur+0x27c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0fda      	lsrs	r2, r3, #31
 8002ff0:	4413      	add	r3, r2
 8002ff2:	105b      	asrs	r3, r3, #1
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	dd14      	ble.n	8003030 <task_Superviseur+0x280>
                pxMessage.command = 'r';
 8003006:	2372      	movs	r3, #114	; 0x72
 8003008:	723b      	strb	r3, [r7, #8]
                pxMessage.data = 100;
 800300a:	2364      	movs	r3, #100	; 0x64
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e013      	b.n	8003038 <task_Superviseur+0x288>
 8003010:	40020400 	.word	0x40020400
 8003014:	20004d7c 	.word	0x20004d7c
 8003018:	20000000 	.word	0x20000000
 800301c:	20004d80 	.word	0x20004d80
 8003020:	20004d84 	.word	0x20004d84
 8003024:	20004d94 	.word	0x20004d94
 8003028:	20004d88 	.word	0x20004d88
 800302c:	20000004 	.word	0x20000004
            }
            // Move left condition (if values_xy[0] is less than halfway of w_cam)
            else {
                pxMessage.command = 'l';
 8003030:	236c      	movs	r3, #108	; 0x6c
 8003032:	723b      	strb	r3, [r7, #8]
                pxMessage.data = 100;
 8003034:	2364      	movs	r3, #100	; 0x64
 8003036:	60fb      	str	r3, [r7, #12]
            }
        }

        // Send command to left motor task
        xQueueSend(qhL, (void *)&pxMessage, portMAX_DELAY);
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <task_Superviseur+0x2dc>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	f107 0108 	add.w	r1, r7, #8
 8003040:	2300      	movs	r3, #0
 8003042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003046:	f008 fed7 	bl	800bdf8 <xQueueGenericSend>
        xSemaphoreTake(xSemaphore, portMAX_DELAY);
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <task_Superviseur+0x2e0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003052:	4618      	mov	r0, r3
 8003054:	f009 f94a 	bl	800c2ec <xQueueSemaphoreTake>

        // Send command to right motor task
        xQueueSend(qhR, (void *)&pxMessage, portMAX_DELAY);
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <task_Superviseur+0x2e4>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	f107 0108 	add.w	r1, r7, #8
 8003060:	2300      	movs	r3, #0
 8003062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003066:	f008 fec7 	bl	800bdf8 <xQueueGenericSend>
        xSemaphoreTake(xSemaphore, portMAX_DELAY);
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <task_Superviseur+0x2e0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003072:	4618      	mov	r0, r3
 8003074:	f009 f93a 	bl	800c2ec <xQueueSemaphoreTake>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2110      	movs	r1, #16
 800307c:	4806      	ldr	r0, [pc, #24]	; (8003098 <task_Superviseur+0x2e8>)
 800307e:	f003 f82f 	bl	80060e0 <HAL_GPIO_WritePin>
        // Wait before the next iteration
        vTaskDelay(SAMPLING_PERIOD_ms);
 8003082:	2005      	movs	r0, #5
 8003084:	f009 fd7c 	bl	800cb80 <vTaskDelay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003088:	e699      	b.n	8002dbe <task_Superviseur+0xe>
 800308a:	bf00      	nop
 800308c:	20004d6c 	.word	0x20004d6c
 8003090:	20004d64 	.word	0x20004d64
 8003094:	20004d70 	.word	0x20004d70
 8003098:	40020400 	.word	0x40020400

0800309c <task_LCD>:
    }
}


static void task_LCD(void *pvParameters)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	struct AMessage pxRxedMessage;
	for(;;) {

		if(mode != previous){
 80030a4:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <task_LCD+0x54>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <task_LCD+0x58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d0f9      	beq.n	80030a4 <task_LCD+0x8>
			groveLCD_display();
 80030b0:	f7ff faca 	bl	8002648 <groveLCD_display>
			groveLCD_setCursor(0,0);
 80030b4:	2100      	movs	r1, #0
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7ff faa2 	bl	8002600 <groveLCD_setCursor>
			if(mode ==0){
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <task_LCD+0x54>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <task_LCD+0x2e>
			groveLCD_term_printf("MODE Manuel");
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <task_LCD+0x5c>)
 80030c6:	f7ff fb43 	bl	8002750 <groveLCD_term_printf>
			}
			if(mode ==1){
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <task_LCD+0x54>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d102      	bne.n	80030d8 <task_LCD+0x3c>
			groveLCD_term_printf("MODE Auto");
 80030d2:	480a      	ldr	r0, [pc, #40]	; (80030fc <task_LCD+0x60>)
 80030d4:	f7ff fb3c 	bl	8002750 <groveLCD_term_printf>
			}
			if(mode ==2){
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <task_LCD+0x54>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d102      	bne.n	80030e6 <task_LCD+0x4a>
			groveLCD_term_printf("MODE Track");
 80030e0:	4807      	ldr	r0, [pc, #28]	; (8003100 <task_LCD+0x64>)
 80030e2:	f7ff fb35 	bl	8002750 <groveLCD_term_printf>
			}
			previous = mode;
 80030e6:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <task_LCD+0x54>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a02      	ldr	r2, [pc, #8]	; (80030f4 <task_LCD+0x58>)
 80030ec:	6013      	str	r3, [r2, #0]
		if(mode != previous){
 80030ee:	e7d9      	b.n	80030a4 <task_LCD+0x8>
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20004d90 	.word	0x20004d90
 80030f8:	0801ea78 	.word	0x0801ea78
 80030fc:	0801ea84 	.word	0x0801ea84
 8003100:	0801ea90 	.word	0x0801ea90

08003104 <main>:
#endif


//=========================================================================
int main(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
  int ret=0;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  int tab_dist[2];

  HAL_Init();
 800310e:	f001 fe3b 	bl	8004d88 <HAL_Init>
  SystemClock_Config();
 8003112:	f001 fbc9 	bl	80048a8 <SystemClock_Config>
  MX_GPIO_Init();
 8003116:	f7fe ffe9 	bl	80020ec <MX_GPIO_Init>
  MX_DMA_Init();
 800311a:	f7ff f989 	bl	8002430 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800311e:	f7ff f933 	bl	8002388 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003122:	f7ff f95b 	bl	80023dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003126:	f7ff f87b 	bl	8002220 <MX_I2C1_Init>

  motorCommand_Init();
 800312a:	f000 fc25 	bl	8003978 <motorCommand_Init>
  quadEncoder_Init();
 800312e:	f000 fc9f 	bl	8003a70 <quadEncoder_Init>
  captDistIR_Init();
 8003132:	f7fe fbbb 	bl	80018ac <captDistIR_Init>

  HAL_Delay(500);
 8003136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800313a:	f001 fe67 	bl	8004e0c <HAL_Delay>

  // Affichage via UART2 sur Terminal série $ minicom -D /dev/ttyACM0
  printf("hello\r\n"); // REM : ne pas oublier le \n
 800313e:	4850      	ldr	r0, [pc, #320]	; (8003280 <main+0x17c>)
 8003140:	f017 fe3e 	bl	801adc0 <puts>

  VL53L0X_init();
 8003144:	f7fe f896 	bl	8001274 <VL53L0X_init>

  ret = VL53L0X_validateInterface();
 8003148:	f7fe f860 	bl	800120c <VL53L0X_validateInterface>
 800314c:	4603      	mov	r3, r0
 800314e:	617b      	str	r3, [r7, #20]
  if(ret ==0)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <main+0x5a>
  {
	  printf("VL53L0X OK\r\n");
 8003156:	484b      	ldr	r0, [pc, #300]	; (8003284 <main+0x180>)
 8003158:	f017 fe32 	bl	801adc0 <puts>
 800315c:	e002      	b.n	8003164 <main+0x60>
  }
  else
  {
	  printf("!! PROBLEME VL53L0X !!\r\n");
 800315e:	484a      	ldr	r0, [pc, #296]	; (8003288 <main+0x184>)
 8003160:	f017 fe2e 	bl	801adc0 <puts>
  }
  VL53L0X_startContinuous(0);
 8003164:	2000      	movs	r0, #0
 8003166:	f7fe fb49 	bl	80017fc <VL53L0X_startContinuous>

  int a, b;
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 800316a:	2200      	movs	r2, #0
 800316c:	2102      	movs	r1, #2
 800316e:	2010      	movs	r0, #16
 8003170:	f7ff f9b4 	bl	80024dc <groveLCD_begin>
  HAL_Delay(100);
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	f001 fe49 	bl	8004e0c <HAL_Delay>
  groveLCD_display();
 800317a:	f7ff fa65 	bl	8002648 <groveLCD_display>
  a=5; b=2;
 800317e:	2305      	movs	r3, #5
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	2302      	movs	r3, #2
 8003184:	60fb      	str	r3, [r7, #12]
  groveLCD_term_printf("%d+%d=%d",a,b,a+b);
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	6939      	ldr	r1, [r7, #16]
 8003190:	483e      	ldr	r0, [pc, #248]	; (800328c <main+0x188>)
 8003192:	f7ff fadd 	bl	8002750 <groveLCD_term_printf>
  groveLCD_setCursor(0,0);
 8003196:	2100      	movs	r1, #0
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff fa31 	bl	8002600 <groveLCD_setCursor>
  groveLCD_term_printf("hello");
 800319e:	483c      	ldr	r0, [pc, #240]	; (8003290 <main+0x18c>)
 80031a0:	f7ff fad6 	bl	8002750 <groveLCD_term_printf>


  HAL_Delay(50);
 80031a4:	2032      	movs	r0, #50	; 0x32
 80031a6:	f001 fe31 	bl	8004e0c <HAL_Delay>

	 speed = quadEncoder_GetSpeedL();
	 speed = quadEncoder_GetSpeedR();
#endif

  osKernelInitialize();
 80031aa:	f008 fb99 	bl	800b8e0 <osKernelInitialize>

  xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  25, NULL );
 80031ae:	2300      	movs	r3, #0
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2319      	movs	r3, #25
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80031bc:	4935      	ldr	r1, [pc, #212]	; (8003294 <main+0x190>)
 80031be:	4836      	ldr	r0, [pc, #216]	; (8003298 <main+0x194>)
 80031c0:	f009 fb83 	bl	800c8ca <xTaskCreate>
  //
  //xTaskCreate( task_A, ( const portCHAR * ) "task A", 128 /* stack size */, NULL, 28, NULL );
 // xTaskCreate( task_B, ( const portCHAR * ) "task B", 128 /* stack size */, NULL, 27, NULL );
#if SYNCHRO_EX == EX1
    xTaskCreate( task_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 24, NULL );
 80031c4:	2300      	movs	r3, #0
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2318      	movs	r3, #24
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	4932      	ldr	r1, [pc, #200]	; (800329c <main+0x198>)
 80031d2:	4833      	ldr	r0, [pc, #204]	; (80032a0 <main+0x19c>)
 80031d4:	f009 fb79 	bl	800c8ca <xTaskCreate>
	xTaskCreate( task_MG, ( const portCHAR * ) "task_MG", 128 /* stack size */, NULL, 27, NULL );
 80031d8:	2300      	movs	r3, #0
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	231b      	movs	r3, #27
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	492f      	ldr	r1, [pc, #188]	; (80032a4 <main+0x1a0>)
 80031e6:	4830      	ldr	r0, [pc, #192]	; (80032a8 <main+0x1a4>)
 80031e8:	f009 fb6f 	bl	800c8ca <xTaskCreate>
	xTaskCreate( task_MD, ( const portCHAR * ) "task_MD", 128 /* stack size */, NULL, 26, NULL );
 80031ec:	2300      	movs	r3, #0
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	231a      	movs	r3, #26
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2300      	movs	r3, #0
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	492c      	ldr	r1, [pc, #176]	; (80032ac <main+0x1a8>)
 80031fa:	482d      	ldr	r0, [pc, #180]	; (80032b0 <main+0x1ac>)
 80031fc:	f009 fb65 	bl	800c8ca <xTaskCreate>
	xTaskCreate( task_Superviseur, ( signed portCHAR * ) "task_Superviseur", 128 /* stack size */, NULL, 28, NULL );
 8003200:	2300      	movs	r3, #0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	231c      	movs	r3, #28
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	4929      	ldr	r1, [pc, #164]	; (80032b4 <main+0x1b0>)
 800320e:	482a      	ldr	r0, [pc, #168]	; (80032b8 <main+0x1b4>)
 8003210:	f009 fb5b 	bl	800c8ca <xTaskCreate>
#elif SYNCHRO_EX == EX3
	xTaskCreate( task_E, ( signed portCHAR * ) "task E", 128 /* stack size */, NULL, 30, NULL );
	xTaskCreate( task_F, ( signed portCHAR * ) "task F", 128 /* stack size */, NULL, 29, NULL );
#endif

	vSemaphoreCreateBinary(xSemaphore);
 8003214:	2203      	movs	r2, #3
 8003216:	2100      	movs	r1, #0
 8003218:	2001      	movs	r0, #1
 800321a:	f008 fd8f 	bl	800bd3c <xQueueGenericCreate>
 800321e:	4603      	mov	r3, r0
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <main+0x1b8>)
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <main+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <main+0x136>
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <main+0x1b8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	f008 fddf 	bl	800bdf8 <xQueueGenericSend>
	xSemaphoreTake( xSemaphore, portMAX_DELAY );
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <main+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003242:	4618      	mov	r0, r3
 8003244:	f009 f852 	bl	800c2ec <xQueueSemaphoreTake>

	qh = xQueueCreate( 1, sizeof(struct AMessage ) );
 8003248:	2200      	movs	r2, #0
 800324a:	2108      	movs	r1, #8
 800324c:	2001      	movs	r0, #1
 800324e:	f008 fd75 	bl	800bd3c <xQueueGenericCreate>
 8003252:	4603      	mov	r3, r0
 8003254:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <main+0x1bc>)
 8003256:	6013      	str	r3, [r2, #0]

#if SYNCHRO_EX == EX1
	qhL = xQueueCreate( 1, sizeof(struct AMessage ) );
 8003258:	2200      	movs	r2, #0
 800325a:	2108      	movs	r1, #8
 800325c:	2001      	movs	r0, #1
 800325e:	f008 fd6d 	bl	800bd3c <xQueueGenericCreate>
 8003262:	4603      	mov	r3, r0
 8003264:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <main+0x1c0>)
 8003266:	6013      	str	r3, [r2, #0]
	qhR = xQueueCreate( 1, sizeof(struct AMessage ) );
 8003268:	2200      	movs	r2, #0
 800326a:	2108      	movs	r1, #8
 800326c:	2001      	movs	r0, #1
 800326e:	f008 fd65 	bl	800bd3c <xQueueGenericCreate>
 8003272:	4603      	mov	r3, r0
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <main+0x1c4>)
 8003276:	6013      	str	r3, [r2, #0]
#endif

  osKernelStart();
 8003278:	f008 fb56 	bl	800b928 <osKernelStart>

  while (1)
 800327c:	e7fe      	b.n	800327c <main+0x178>
 800327e:	bf00      	nop
 8003280:	0801ea9c 	.word	0x0801ea9c
 8003284:	0801eaa4 	.word	0x0801eaa4
 8003288:	0801eab0 	.word	0x0801eab0
 800328c:	0801eac8 	.word	0x0801eac8
 8003290:	0801ead4 	.word	0x0801ead4
 8003294:	0801eadc 	.word	0x0801eadc
 8003298:	08003359 	.word	0x08003359
 800329c:	0801eaec 	.word	0x0801eaec
 80032a0:	0800309d 	.word	0x0800309d
 80032a4:	0801eaf8 	.word	0x0801eaf8
 80032a8:	08002b31 	.word	0x08002b31
 80032ac:	0801eb00 	.word	0x0801eb00
 80032b0:	08002c71 	.word	0x08002c71
 80032b4:	0801eb08 	.word	0x0801eb08
 80032b8:	08002db1 	.word	0x08002db1
 80032bc:	20004d64 	.word	0x20004d64
 80032c0:	20004d68 	.word	0x20004d68
 80032c4:	20004d6c 	.word	0x20004d6c
 80032c8:	20004d70 	.word	0x20004d70

080032cc <subscription_callback1>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void subscription_callback1(const void * msgin)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
  // Process message
  //printf("Received from HOST: %s\n\r", msg->data.data);
  mode = process_vitess_data(msg->data.data);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fb81 	bl	80019e4 <process_vitess_data>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4a02      	ldr	r2, [pc, #8]	; (80032f0 <subscription_callback1+0x24>)
 80032e6:	6013      	str	r3, [r2, #0]
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000000 	.word	0x20000000

080032f4 <subscription_callback2>:

void subscription_callback2(const void * msgin)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60fb      	str	r3, [r7, #12]

  // Process message
  //printf("Received from HOST: %s\n\r", msg->data.data);
  command_received = process_command_data(msg->data.data);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fb47 	bl	8001998 <process_command_data>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <subscription_callback2+0x38>)
 8003310:	701a      	strb	r2, [r3, #0]
  speed_received = process_vitess_data(msg->data.data);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fb64 	bl	80019e4 <process_vitess_data>
 800331c:	4603      	mov	r3, r0
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <subscription_callback2+0x3c>)
 8003320:	6013      	str	r3, [r2, #0]

}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20004d80 	.word	0x20004d80
 8003330:	20004d84 	.word	0x20004d84

08003334 <subscription_callback3>:

void subscription_callback3(const void * msgin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60fb      	str	r3, [r7, #12]
  get_xy(msg->data.data, values_xy);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <subscription_callback3+0x20>)
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fb92 	bl	8001a70 <get_xy>
  // Process message
  //printf("Received from HOST: %f\n\r",values_xy[0]);
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20004d88 	.word	0x20004d88

08003358 <microros_task>:

void microros_task(void *argument)
{
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b0e2      	sub	sp, #392	; 0x188
 800335c:	af02      	add	r7, sp, #8
 800335e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003362:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003366:	6018      	str	r0, [r3, #0]
  rmw_uros_set_custom_transport( true, (void *) &huart1, cubemx_transport_open,  cubemx_transport_close,  cubemx_transport_write, cubemx_transport_read);
 8003368:	4baa      	ldr	r3, [pc, #680]	; (8003614 <microros_task+0x2bc>)
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	4baa      	ldr	r3, [pc, #680]	; (8003618 <microros_task+0x2c0>)
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	4baa      	ldr	r3, [pc, #680]	; (800361c <microros_task+0x2c4>)
 8003372:	4aab      	ldr	r2, [pc, #684]	; (8003620 <microros_task+0x2c8>)
 8003374:	49ab      	ldr	r1, [pc, #684]	; (8003624 <microros_task+0x2cc>)
 8003376:	2001      	movs	r0, #1
 8003378:	f00c fb90 	bl	800fa9c <rmw_uros_set_custom_transport>

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800337c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003380:	4618      	mov	r0, r3
 8003382:	f00c f8f7 	bl	800f574 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8003386:	4ba8      	ldr	r3, [pc, #672]	; (8003628 <microros_task+0x2d0>)
 8003388:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  freeRTOS_allocator.deallocate = microros_deallocate;
 800338c:	4ba7      	ldr	r3, [pc, #668]	; (800362c <microros_task+0x2d4>)
 800338e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  freeRTOS_allocator.reallocate = microros_reallocate;
 8003392:	4ba7      	ldr	r3, [pc, #668]	; (8003630 <microros_task+0x2d8>)
 8003394:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8003398:	4ba6      	ldr	r3, [pc, #664]	; (8003634 <microros_task+0x2dc>)
 800339a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800339e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80033a2:	4618      	mov	r0, r3
 80033a4:	f00c f8f4 	bl	800f590 <rcutils_set_default_allocator>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f083 0301 	eor.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <microros_task+0x66>
      printf("Error on default allocators (line %d)\n", __LINE__);
 80033b4:	f240 2121 	movw	r1, #545	; 0x221
 80033b8:	489f      	ldr	r0, [pc, #636]	; (8003638 <microros_task+0x2e0>)
 80033ba:	f017 fc7b 	bl	801acb4 <iprintf>
  }

  // micro-ROS app
  rclc_support_t support;
  rcl_allocator_t allocator;
  allocator = rcl_get_default_allocator();
 80033be:	463b      	mov	r3, r7
 80033c0:	4618      	mov	r0, r3
 80033c2:	f00c f905 	bl	800f5d0 <rcutils_get_default_allocator>
 80033c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80033ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033ce:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80033d2:	461d      	mov	r5, r3
 80033d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	6023      	str	r3, [r4, #0]

  // create node
  rcl_node_t node;
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 80033dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f00b fb11 	bl	800ea08 <rcl_node_get_default_options>
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 80033e6:	f00b f9e9 	bl	800e7bc <rcl_get_zero_initialized_init_options>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  rcl_init_options_init(&init_options, allocator);
 80033f0:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80033f4:	466a      	mov	r2, sp
 80033f6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80033fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8003402:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003408:	4620      	mov	r0, r4
 800340a:	f00b f9d9 	bl	800e7c0 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, ROS_DOMAIN_ID);
 800340e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003412:	2104      	movs	r1, #4
 8003414:	4618      	mov	r0, r3
 8003416:	f00b faef 	bl	800e9f8 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800341a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800341e:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8003422:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	f00b ffb9 	bl	800f3a4 <rclc_support_init_with_options>
  rclc_node_init_default(&node, "STM32_Node","", &support);
 8003432:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003436:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800343a:	4a80      	ldr	r2, [pc, #512]	; (800363c <microros_task+0x2e4>)
 800343c:	4980      	ldr	r1, [pc, #512]	; (8003640 <microros_task+0x2e8>)
 800343e:	f00b ffed 	bl	800f41c <rclc_node_init_default>

  // create publisher
   rcl_publisher_t publisher1;
   std_msgs__msg__String sensor_speed__msg;
   rclc_publisher_init_default(&publisher1, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/sensor/motor_speed");
 8003442:	f00d fcfb 	bl	8010e3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8003446:	4602      	mov	r2, r0
 8003448:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800344c:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 8003450:	4b7c      	ldr	r3, [pc, #496]	; (8003644 <microros_task+0x2ec>)
 8003452:	f00c f81f 	bl	800f494 <rclc_publisher_init_default>

   rcl_publisher_t publisher2;
   std_msgs__msg__String sensor_obs_msg;
   rclc_publisher_init_default(&publisher2, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/sensor/recive_obstacl");
 8003456:	f00d fcf1 	bl	8010e3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 800345a:	4602      	mov	r2, r0
 800345c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003460:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8003464:	4b78      	ldr	r3, [pc, #480]	; (8003648 <microros_task+0x2f0>)
 8003466:	f00c f815 	bl	800f494 <rclc_publisher_init_default>

   // create subscriber
   rcl_subscription_t subscriber1;
   std_msgs__msg__String str_msg1;
   rclc_subscription_init_default(&subscriber1,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/command/mode");
 800346a:	f00d fce7 	bl	8010e3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 800346e:	4602      	mov	r2, r0
 8003470:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003474:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8003478:	4b74      	ldr	r3, [pc, #464]	; (800364c <microros_task+0x2f4>)
 800347a:	f00c f83f 	bl	800f4fc <rclc_subscription_init_default>
   rcl_subscription_t subscriber2;
   std_msgs__msg__String str_msg2;
   rclc_subscription_init_default(&subscriber2,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/command/move");
 800347e:	f00d fcdd 	bl	8010e3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8003482:	4602      	mov	r2, r0
 8003484:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003488:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 800348c:	4b70      	ldr	r3, [pc, #448]	; (8003650 <microros_task+0x2f8>)
 800348e:	f00c f835 	bl	800f4fc <rclc_subscription_init_default>
   rcl_subscription_t subscriber3;
    std_msgs__msg__String str_msg3;
    rclc_subscription_init_default(&subscriber3,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/camera/src_xy");
 8003492:	f00d fcd3 	bl	8010e3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8003496:	4602      	mov	r2, r0
 8003498:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800349c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80034a0:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <microros_task+0x2fc>)
 80034a2:	f00c f82b 	bl	800f4fc <rclc_subscription_init_default>
   // Add subscription to the executor
   rclc_executor_t executor;
   rclc_executor_init(&executor, &support.context, 3, &allocator); // ! 'NUMBER OF HANDLES' A MODIFIER EN FONCTION DU NOMBRE DE TOPICS
 80034a6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80034aa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80034ae:	1d19      	adds	r1, r3, #4
 80034b0:	f107 0020 	add.w	r0, r7, #32
 80034b4:	4613      	mov	r3, r2
 80034b6:	2203      	movs	r2, #3
 80034b8:	f00b fd16 	bl	800eee8 <rclc_executor_init>
   rclc_executor_add_subscription(&executor, &subscriber1, &str_msg1, &subscription_callback1, ON_NEW_DATA);
 80034bc:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80034c0:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80034c4:	f107 0020 	add.w	r0, r7, #32
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	4b62      	ldr	r3, [pc, #392]	; (8003658 <microros_task+0x300>)
 80034ce:	f00b fd7f 	bl	800efd0 <rclc_executor_add_subscription>
   rclc_executor_add_subscription(&executor, &subscriber2, &str_msg2, &subscription_callback2, ON_NEW_DATA);
 80034d2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80034d6:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80034da:	f107 0020 	add.w	r0, r7, #32
 80034de:	2300      	movs	r3, #0
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4b5e      	ldr	r3, [pc, #376]	; (800365c <microros_task+0x304>)
 80034e4:	f00b fd74 	bl	800efd0 <rclc_executor_add_subscription>
   rclc_executor_add_subscription(&executor, &subscriber3, &str_msg3, &subscription_callback3, ON_NEW_DATA);
 80034e8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80034ec:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80034f0:	f107 0020 	add.w	r0, r7, #32
 80034f4:	2300      	movs	r3, #0
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <microros_task+0x308>)
 80034fa:	f00b fd69 	bl	800efd0 <rclc_executor_add_subscription>


   sensor_speed__msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 80034fe:	2064      	movs	r0, #100	; 0x64
 8003500:	f016 fc28 	bl	8019d54 <malloc>
 8003504:	4603      	mov	r3, r0
 8003506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   sensor_speed__msg.data.size = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   sensor_speed__msg.data.capacity = ARRAY_LEN;
 8003510:	2364      	movs	r3, #100	; 0x64
 8003512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

   sensor_obs_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8003516:	2064      	movs	r0, #100	; 0x64
 8003518:	f016 fc1c 	bl	8019d54 <malloc>
 800351c:	4603      	mov	r3, r0
 800351e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   sensor_obs_msg.data.size = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   sensor_obs_msg.data.capacity = ARRAY_LEN;
 8003528:	2364      	movs	r3, #100	; 0x64
 800352a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

   str_msg1.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 800352e:	2064      	movs	r0, #100	; 0x64
 8003530:	f016 fc10 	bl	8019d54 <malloc>
 8003534:	4603      	mov	r3, r0
 8003536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   str_msg1.data.size = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   str_msg1.data.capacity = ARRAY_LEN;
 8003540:	2364      	movs	r3, #100	; 0x64
 8003542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

   str_msg2.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8003546:	2064      	movs	r0, #100	; 0x64
 8003548:	f016 fc04 	bl	8019d54 <malloc>
 800354c:	4603      	mov	r3, r0
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   str_msg2.data.size = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   str_msg2.data.capacity = ARRAY_LEN;
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

   str_msg3.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 800355e:	2064      	movs	r0, #100	; 0x64
 8003560:	f016 fbf8 	bl	8019d54 <malloc>
 8003564:	4603      	mov	r3, r0
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   str_msg3.data.size = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   str_msg3.data.capacity = ARRAY_LEN;
 8003570:	2364      	movs	r3, #100	; 0x64
 8003572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(;;)
  {
//	  sprintf(sensor_speed__msg.data.data, "from STM32 : speedL=#%d , speedR=#%d", (int32_t)speed_L,(int32_t)speed_R);
	  sprintf(sensor_speed__msg.data.data, "speedL=#%d , speedR=#%d", (int32_t)speed_L,(int32_t)speed_R);
 8003576:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800357a:	4b3a      	ldr	r3, [pc, #232]	; (8003664 <microros_task+0x30c>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <microros_task+0x310>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	493a      	ldr	r1, [pc, #232]	; (800366c <microros_task+0x314>)
 8003584:	f017 fd4c 	bl	801b020 <siprintf>
	  sensor_speed__msg.data.size = strlen(sensor_speed__msg.data.data);
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc fe31 	bl	80001f4 <strlen>
 8003592:	4603      	mov	r3, r0
 8003594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//	  sprintf(sensor_obs_msg.data.data, "from STM32 : obstacle detected : #%d", (int32_t)obstacle_detected);
	  sprintf(sensor_obs_msg.data.data, "#%d", (int32_t)obstacle_detected);
 8003598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800359c:	4a34      	ldr	r2, [pc, #208]	; (8003670 <microros_task+0x318>)
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	4934      	ldr	r1, [pc, #208]	; (8003674 <microros_task+0x31c>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f017 fd3c 	bl	801b020 <siprintf>
	  sensor_obs_msg.data.size = strlen(sensor_obs_msg.data.data);
 80035a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc fe21 	bl	80001f4 <strlen>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	  // Publish sensor data
	  rcl_ret_t pub_ret1 = rcl_publish(&publisher1, &sensor_speed__msg, NULL);
 80035b8:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80035bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035c0:	2200      	movs	r2, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f00b fb78 	bl	800ecb8 <rcl_publish>
 80035c8:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  rcl_ret_t pub_ret2 = rcl_publish(&publisher2, &sensor_obs_msg, NULL);
 80035cc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80035d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80035d4:	2200      	movs	r2, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f00b fb6e 	bl	800ecb8 <rcl_publish>
 80035dc:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178

	  if (pub_ret1 != RCL_RET_OK || pub_ret2 != RCL_RET_OK) {
 80035e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <microros_task+0x298>
 80035e8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <microros_task+0x2a2>
		  printf("Error publishing (line %d)\n\r", __LINE__);
 80035f0:	f44f 711c 	mov.w	r1, #624	; 0x270
 80035f4:	4820      	ldr	r0, [pc, #128]	; (8003678 <microros_task+0x320>)
 80035f6:	f017 fb5d 	bl	801acb4 <iprintf>
	  }
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 80035fa:	f107 0120 	add.w	r1, r7, #32
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <microros_task+0x324>)
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	4608      	mov	r0, r1
 8003606:	f00b fe97 	bl	800f338 <rclc_executor_spin_some>
    osDelay(10);
 800360a:	200a      	movs	r0, #10
 800360c:	f008 f9b2 	bl	800b974 <osDelay>
  {
 8003610:	e7b1      	b.n	8003576 <microros_task+0x21e>
 8003612:	bf00      	nop
 8003614:	08002045 	.word	0x08002045
 8003618:	08001fdd 	.word	0x08001fdd
 800361c:	08001fbd 	.word	0x08001fbd
 8003620:	08001f91 	.word	0x08001f91
 8003624:	20004b54 	.word	0x20004b54
 8003628:	080036b1 	.word	0x080036b1
 800362c:	080036f5 	.word	0x080036f5
 8003630:	0800372d 	.word	0x0800372d
 8003634:	08003799 	.word	0x08003799
 8003638:	0801eb1c 	.word	0x0801eb1c
 800363c:	0801eb44 	.word	0x0801eb44
 8003640:	0801eb48 	.word	0x0801eb48
 8003644:	0801eb54 	.word	0x0801eb54
 8003648:	0801eb68 	.word	0x0801eb68
 800364c:	0801eb80 	.word	0x0801eb80
 8003650:	0801eb90 	.word	0x0801eb90
 8003654:	0801eba0 	.word	0x0801eba0
 8003658:	080032cd 	.word	0x080032cd
 800365c:	080032f5 	.word	0x080032f5
 8003660:	08003335 	.word	0x08003335
 8003664:	20004d98 	.word	0x20004d98
 8003668:	20004d9c 	.word	0x20004d9c
 800366c:	0801ebb0 	.word	0x0801ebb0
 8003670:	20004d7c 	.word	0x20004d7c
 8003674:	0801ebc8 	.word	0x0801ebc8
 8003678:	0801ebcc 	.word	0x0801ebcc
 800367c:	00989680 	.word	0x00989680

08003680 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003692:	f001 fb9b 	bl	8004dcc <HAL_IncTick>
  }
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40000800 	.word	0x40000800

080036a4 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036a8:	b672      	cpsid	i
}
 80036aa:	bf00      	nop
  __disable_irq();
  while (1)
 80036ac:	e7fe      	b.n	80036ac <Error_Handler+0x8>
	...

080036b0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <microros_allocate+0x3c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <microros_allocate+0x3c>)
 80036c8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <microros_allocate+0x40>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <microros_allocate+0x40>)
 80036d8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fe fa02 	bl	8001ae4 <pvPortMallocMicroROS>
 80036e0:	4603      	mov	r3, r0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20004da8 	.word	0x20004da8
 80036f0:	20004dac 	.word	0x20004dac

080036f4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fe fb0b 	bl	8001d20 <getBlockSize>
 800370a:	4603      	mov	r3, r0
 800370c:	4a06      	ldr	r2, [pc, #24]	; (8003728 <microros_deallocate+0x34>)
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	461a      	mov	r2, r3
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <microros_deallocate+0x34>)
 8003716:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fe faa7 	bl	8001c6c <vPortFreeMicroROS>
  }
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20004dac 	.word	0x20004dac

0800372c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <microros_reallocate+0x64>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4413      	add	r3, r2
 8003742:	461a      	mov	r2, r3
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <microros_reallocate+0x64>)
 8003746:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <microros_reallocate+0x68>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4413      	add	r3, r2
 8003752:	461a      	mov	r2, r3
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <microros_reallocate+0x68>)
 8003756:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7fe f9c0 	bl	8001ae4 <pvPortMallocMicroROS>
 8003764:	4603      	mov	r3, r0
 8003766:	e00e      	b.n	8003786 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7fe fad9 	bl	8001d20 <getBlockSize>
 800376e:	4603      	mov	r3, r0
 8003770:	4a08      	ldr	r2, [pc, #32]	; (8003794 <microros_reallocate+0x68>)
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	461a      	mov	r2, r3
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <microros_reallocate+0x68>)
 800377a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7fe faec 	bl	8001d5c <pvPortReallocMicroROS>
 8003784:	4603      	mov	r3, r0
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20004da8 	.word	0x20004da8
 8003794:	20004dac 	.word	0x20004dac

08003798 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	4a0c      	ldr	r2, [pc, #48]	; (80037e0 <microros_zero_allocate+0x48>)
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <microros_zero_allocate+0x48>)
 80037b6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <microros_zero_allocate+0x4c>)
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <microros_zero_allocate+0x4c>)
 80037ca:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7fe fafe 	bl	8001dd0 <pvPortCallocMicroROS>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20004da8 	.word	0x20004da8
 80037e4:	20004dac 	.word	0x20004dac

080037e8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80037e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80037fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037fe:	a320      	add	r3, pc, #128	; (adr r3, 8003880 <UTILS_NanosecondsToTimespec+0x98>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fd fa58 	bl	8000cb8 <__aeabi_ldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003816:	a31a      	add	r3, pc, #104	; (adr r3, 8003880 <UTILS_NanosecondsToTimespec+0x98>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fd fa4c 	bl	8000cb8 <__aeabi_ldivmod>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	da20      	bge.n	800386e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <UTILS_NanosecondsToTimespec+0x90>)
 8003832:	fb82 1203 	smull	r1, r2, r2, r3
 8003836:	1712      	asrs	r2, r2, #28
 8003838:	17db      	asrs	r3, r3, #31
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	6979      	ldr	r1, [r7, #20]
 8003848:	17c8      	asrs	r0, r1, #31
 800384a:	460c      	mov	r4, r1
 800384c:	4605      	mov	r5, r0
 800384e:	ebb2 0804 	subs.w	r8, r2, r4
 8003852:	eb63 0905 	sbc.w	r9, r3, r5
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4906      	ldr	r1, [pc, #24]	; (800387c <UTILS_NanosecondsToTimespec+0x94>)
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
    }
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003878:	44b82fa1 	.word	0x44b82fa1
 800387c:	3b9aca00 	.word	0x3b9aca00
 8003880:	3b9aca00 	.word	0x3b9aca00
 8003884:	00000000 	.word	0x00000000

08003888 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b08e      	sub	sp, #56	; 0x38
 800388e:	af00      	add	r7, sp, #0
 8003890:	6278      	str	r0, [r7, #36]	; 0x24
 8003892:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003894:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003898:	2300      	movs	r3, #0
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80038aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038ae:	4618      	mov	r0, r3
 80038b0:	f009 fc98 	bl	800d1e4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	17da      	asrs	r2, r3, #31
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	61fa      	str	r2, [r7, #28]
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	69b9      	ldr	r1, [r7, #24]
 80038c6:	000b      	movs	r3, r1
 80038c8:	2200      	movs	r2, #0
 80038ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	2200      	movs	r2, #0
 80038d2:	461c      	mov	r4, r3
 80038d4:	4615      	mov	r5, r2
 80038d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038da:	1911      	adds	r1, r2, r4
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	416b      	adcs	r3, r5
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80038e6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80038ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	f04f 0400 	mov.w	r4, #0
 80038f6:	f04f 0500 	mov.w	r5, #0
 80038fa:	015d      	lsls	r5, r3, #5
 80038fc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003900:	0154      	lsls	r4, r2, #5
 8003902:	4622      	mov	r2, r4
 8003904:	462b      	mov	r3, r5
 8003906:	ebb2 0800 	subs.w	r8, r2, r0
 800390a:	eb63 0901 	sbc.w	r9, r3, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800391a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800391e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003922:	4690      	mov	r8, r2
 8003924:	4699      	mov	r9, r3
 8003926:	eb18 0a00 	adds.w	sl, r8, r0
 800392a:	eb49 0b01 	adc.w	fp, r9, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800393a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800393e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003942:	ebb2 040a 	subs.w	r4, r2, sl
 8003946:	603c      	str	r4, [r7, #0]
 8003948:	eb63 030b 	sbc.w	r3, r3, fp
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003952:	4623      	mov	r3, r4
 8003954:	181b      	adds	r3, r3, r0
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	462b      	mov	r3, r5
 800395a:	eb41 0303 	adc.w	r3, r1, r3
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003966:	f7ff ff3f 	bl	80037e8 <UTILS_NanosecondsToTimespec>

    return 0;
 800396a:	2300      	movs	r3, #0
 800396c:	4618      	mov	r0, r3
 800396e:	3738      	adds	r7, #56	; 0x38
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003978 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8003982:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <motorCommand_Init+0xa0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <motorCommand_Init+0xa4>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	0d9b      	lsrs	r3, r3, #22
 800398e:	3b01      	subs	r3, #1
 8003990:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <motorCommand_Init+0xa8>)
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <motorCommand_Init+0xac>)
 8003996:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <motorCommand_Init+0xa8>)
 800399a:	22c7      	movs	r2, #199	; 0xc7
 800399c:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 800399e:	4a20      	ldr	r2, [pc, #128]	; (8003a20 <motorCommand_Init+0xa8>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 80039a4:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <motorCommand_Init+0xa8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <motorCommand_Init+0xa8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 80039b0:	481b      	ldr	r0, [pc, #108]	; (8003a20 <motorCommand_Init+0xa8>)
 80039b2:	f005 fd01 	bl	80093b8 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <motorCommand_Init+0xb0>)
 80039b8:	2260      	movs	r2, #96	; 0x60
 80039ba:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 80039bc:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <motorCommand_Init+0xb0>)
 80039be:	2205      	movs	r2, #5
 80039c0:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <motorCommand_Init+0xb0>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039c8:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <motorCommand_Init+0xb0>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 80039ce:	2200      	movs	r2, #0
 80039d0:	4915      	ldr	r1, [pc, #84]	; (8003a28 <motorCommand_Init+0xb0>)
 80039d2:	4813      	ldr	r0, [pc, #76]	; (8003a20 <motorCommand_Init+0xa8>)
 80039d4:	f006 f8a2 	bl	8009b1c <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 80039d8:	2204      	movs	r2, #4
 80039da:	4913      	ldr	r1, [pc, #76]	; (8003a28 <motorCommand_Init+0xb0>)
 80039dc:	4810      	ldr	r0, [pc, #64]	; (8003a20 <motorCommand_Init+0xa8>)
 80039de:	f006 f89d 	bl	8009b1c <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <motorCommand_Init+0xa8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2264      	movs	r2, #100	; 0x64
 80039e8:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <motorCommand_Init+0xa8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2264      	movs	r2, #100	; 0x64
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 80039f2:	2100      	movs	r1, #0
 80039f4:	480a      	ldr	r0, [pc, #40]	; (8003a20 <motorCommand_Init+0xa8>)
 80039f6:	f005 fd9b 	bl	8009530 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 80039fa:	2104      	movs	r1, #4
 80039fc:	4808      	ldr	r0, [pc, #32]	; (8003a20 <motorCommand_Init+0xa8>)
 80039fe:	f005 fd97 	bl	8009530 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <motorCommand_Init+0xb4>)
 8003a0a:	f002 fb69 	bl	80060e0 <HAL_GPIO_WritePin>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	2000000c 	.word	0x2000000c
 8003a1c:	6b5fca6b 	.word	0x6b5fca6b
 8003a20:	20004db0 	.word	0x20004db0
 8003a24:	40000400 	.word	0x40000400
 8003a28:	20004df8 	.word	0x20004df8
 8003a2c:	40020000 	.word	0x40020000

08003a30 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <motorLeft_SetDuty+0x1c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	20004db0 	.word	0x20004db0

08003a50 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <motorRight_SetDuty+0x1c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20004db0 	.word	0x20004db0

08003a70 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8003a76:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003a78:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <quadEncoder_Init+0xe0>)
 8003a7a:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8003a7c:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a82:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8003a88:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a90:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a96:	2303      	movs	r3, #3
 8003a98:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003aa6:	230f      	movs	r3, #15
 8003aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003ab6:	230f      	movs	r3, #15
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4823      	ldr	r0, [pc, #140]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003ac0:	f005 fde6 	bl	8009690 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003acc:	2100      	movs	r1, #0
 8003ace:	481f      	ldr	r0, [pc, #124]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003ad0:	f005 fe8e 	bl	80097f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	481d      	ldr	r0, [pc, #116]	; (8003b4c <quadEncoder_Init+0xdc>)
 8003ad8:	f005 fe8a 	bl	80097f0 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ae2:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8003af0:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003afe:	2303      	movs	r3, #3
 8003b00:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b06:	2301      	movs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003b0e:	230f      	movs	r3, #15
 8003b10:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003b16:	2301      	movs	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003b1e:	230f      	movs	r3, #15
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	480b      	ldr	r0, [pc, #44]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003b28:	f005 fdb2 	bl	8009690 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2200      	movs	r2, #0
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003b34:	2100      	movs	r1, #0
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003b38:	f005 fe5a 	bl	80097f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4805      	ldr	r0, [pc, #20]	; (8003b54 <quadEncoder_Init+0xe4>)
 8003b40:	f005 fe56 	bl	80097f0 <HAL_TIM_Encoder_Start>
}
 8003b44:	bf00      	nop
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20004e14 	.word	0x20004e14
 8003b50:	40010000 	.word	0x40010000
 8003b54:	20004e5c 	.word	0x20004e5c

08003b58 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <quadEncoder_PosCalcL+0x40>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f641 129b 	movw	r2, #6555	; 0x199b
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <quadEncoder_PosCalcL+0x44>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	461a      	mov	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	601a      	str	r2, [r3, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	10624dd3 	.word	0x10624dd3

08003ba0 <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8003bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f641 129b 	movw	r2, #6555	; 0x199b
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <quadEncoder_PosCalcR+0x44>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	10624dd3 	.word	0x10624dd3

08003be8 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8003bec:	4824      	ldr	r0, [pc, #144]	; (8003c80 <quadEncoder_GetSpeedL+0x98>)
 8003bee:	f7ff ffb3 	bl	8003b58 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <quadEncoder_GetSpeedL+0x98>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <quadEncoder_GetSpeedL+0x98>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	b21a      	sxth	r2, r3
 8003c04:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c06:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8003c08:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	db10      	blt.n	8003c34 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1c:	db1a      	blt.n	8003c54 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b21a      	sxth	r2, r3
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	e00f      	b.n	8003c54 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c3a:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003c3e:	da09      	bge.n	8003c54 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b21a      	sxth	r2, r3
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c52:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <quadEncoder_GetSpeedL+0xa0>)
 8003c66:	fb82 1203 	smull	r1, r2, r2, r3
 8003c6a:	1412      	asrs	r2, r2, #16
 8003c6c:	17db      	asrs	r3, r3, #31
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	b21a      	sxth	r2, r3
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c74:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8003c76:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <quadEncoder_GetSpeedL+0x9c>)
 8003c78:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20004eac 	.word	0x20004eac
 8003c84:	20004eb4 	.word	0x20004eb4
 8003c88:	66673335 	.word	0x66673335

08003c8c <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8003c90:	4824      	ldr	r0, [pc, #144]	; (8003d24 <quadEncoder_GetSpeedR+0x98>)
 8003c92:	f7ff ff85 	bl	8003ba0 <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8003c96:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <quadEncoder_GetSpeedR+0x98>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <quadEncoder_GetSpeedR+0x98>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	b21a      	sxth	r2, r3
 8003ca8:	4b1f      	ldr	r3, [pc, #124]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003caa:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8003cac:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	db10      	blt.n	8003cd8 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc0:	db1a      	blt.n	8003cf8 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b21a      	sxth	r2, r3
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003cd4:	801a      	strh	r2, [r3, #0]
 8003cd6:	e00f      	b.n	8003cf8 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cde:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003ce2:	da09      	bge.n	8003cf8 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b21a      	sxth	r2, r3
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003cf6:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <quadEncoder_GetSpeedR+0xa0>)
 8003d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8003d0e:	1412      	asrs	r2, r2, #16
 8003d10:	17db      	asrs	r3, r3, #31
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	b21a      	sxth	r2, r3
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003d18:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8003d1a:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <quadEncoder_GetSpeedR+0x9c>)
 8003d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20004eb8 	.word	0x20004eb8
 8003d28:	20004ec0 	.word	0x20004ec0
 8003d2c:	66673335 	.word	0x66673335

08003d30 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <quadEncoder_CallbackIndexL+0x4c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d105      	bne.n	8003d4e <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <quadEncoder_CallbackIndexL+0x50>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <quadEncoder_CallbackIndexL+0x50>)
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e004      	b.n	8003d58 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <quadEncoder_CallbackIndexL+0x50>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <quadEncoder_CallbackIndexL+0x50>)
 8003d56:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <quadEncoder_CallbackIndexL+0x4c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003d60:	2100      	movs	r1, #0
 8003d62:	4806      	ldr	r0, [pc, #24]	; (8003d7c <quadEncoder_CallbackIndexL+0x4c>)
 8003d64:	f005 fd44 	bl	80097f0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003d68:	2104      	movs	r1, #4
 8003d6a:	4804      	ldr	r0, [pc, #16]	; (8003d7c <quadEncoder_CallbackIndexL+0x4c>)
 8003d6c:	f005 fd40 	bl	80097f0 <HAL_TIM_Encoder_Start>

				Left_first_index_reached = 1;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <quadEncoder_CallbackIndexL+0x54>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20004e14 	.word	0x20004e14
 8003d80:	20004ea4 	.word	0x20004ea4
 8003d84:	20004d74 	.word	0x20004d74

08003d88 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <quadEncoder_CallbackIndexR+0x4c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d105      	bne.n	8003da6 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8003d9a:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <quadEncoder_CallbackIndexR+0x50>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <quadEncoder_CallbackIndexR+0x50>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e004      	b.n	8003db0 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <quadEncoder_CallbackIndexR+0x50>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <quadEncoder_CallbackIndexR+0x50>)
 8003dae:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <quadEncoder_CallbackIndexR+0x4c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2200      	movs	r2, #0
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003db8:	2100      	movs	r1, #0
 8003dba:	4806      	ldr	r0, [pc, #24]	; (8003dd4 <quadEncoder_CallbackIndexR+0x4c>)
 8003dbc:	f005 fd18 	bl	80097f0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <quadEncoder_CallbackIndexR+0x4c>)
 8003dc4:	f005 fd14 	bl	80097f0 <HAL_TIM_Encoder_Start>

				Right_first_index_reached = 1;
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <quadEncoder_CallbackIndexR+0x54>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20004e5c 	.word	0x20004e5c
 8003dd8:	20004ea8 	.word	0x20004ea8
 8003ddc:	20004d78 	.word	0x20004d78

08003de0 <detect_obstacle_forward>:
    }
    robot_state = STOPPED;
}

// Returns 0 if obstacle detected on left, 1 for right, -1 if no obstacle
int detect_obstacle_forward() {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
    int tab[2];
    int threshold = 2000;
 8003de6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003dea:	60bb      	str	r3, [r7, #8]
    //tab[0] = left
    //tab[1] = droit
    captDistIR_Get(tab);
 8003dec:	463b      	mov	r3, r7
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fd8e 	bl	8001910 <captDistIR_Get>
    if (tab) {
        for (int i = 0; i < 2; i++) {
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e00d      	b.n	8003e16 <detect_obstacle_forward+0x36>
            if (tab[i] > threshold) {
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3310      	adds	r3, #16
 8003e00:	443b      	add	r3, r7
 8003e02:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	da01      	bge.n	8003e10 <detect_obstacle_forward+0x30>
                return i;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	e007      	b.n	8003e20 <detect_obstacle_forward+0x40>
        for (int i = 0; i < 2; i++) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	ddee      	ble.n	8003dfa <detect_obstacle_forward+0x1a>
            }
        }
    }
    return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <detect_obstacle_backward>:


int detect_obstacle_backward() {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
    uint16_t range = VL53L0X_readRangeContinuousMillimeters();
 8003e2e:	f7fd fd2b 	bl	8001888 <VL53L0X_readRangeContinuousMillimeters>
 8003e32:	4603      	mov	r3, r0
 8003e34:	80fb      	strh	r3, [r7, #6]
    uint16_t threshold = 100;
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	80bb      	strh	r3, [r7, #4]
    if (range > 0 && range < threshold) {
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <detect_obstacle_backward+0x24>
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	88bb      	ldrh	r3, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d201      	bcs.n	8003e4c <detect_obstacle_backward+0x24>
        return 1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <detect_obstacle_backward+0x26>
    }
    return 0;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_MspInit>:
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);
void HAL_GPIO_MspInit(void);

void HAL_MspInit(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	4b33      	ldr	r3, [pc, #204]	; (8003f30 <HAL_MspInit+0xd8>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4a32      	ldr	r2, [pc, #200]	; (8003f30 <HAL_MspInit+0xd8>)
 8003e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_MspInit+0xd8>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <HAL_MspInit+0xd8>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <HAL_MspInit+0xd8>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <HAL_MspInit+0xd8>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_MspInit+0xd8>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ea0:	f043 0304 	orr.w	r3, r3, #4
 8003ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <HAL_MspInit+0xd8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ede:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	607b      	str	r3, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <HAL_MspInit+0xd8>)
 8003ef4:	f043 0302 	orr.w	r3, r3, #2
 8003ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_MspInit+0xd8>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f06:	2200      	movs	r2, #0
 8003f08:	210f      	movs	r1, #15
 8003f0a:	f06f 0001 	mvn.w	r0, #1
 8003f0e:	f001 fb29 	bl	8005564 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003f12:	f000 f8a3 	bl	800405c <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003f16:	f000 f823 	bl	8003f60 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8003f1a:	f000 f861 	bl	8003fe0 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003f1e:	f000 f8ff 	bl	8004120 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8003f22:	f000 f807 	bl	8003f34 <HAL_GPIO_MspInit>

}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 8003f3e:	2301      	movs	r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f46:	2301      	movs	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4803      	ldr	r0, [pc, #12]	; (8003f5c <HAL_GPIO_MspInit+0x28>)
 8003f50:	f001 ff42 	bl	8005dd8 <HAL_GPIO_Init>

}
 8003f54:	bf00      	nop
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40020400 	.word	0x40020400

08003f60 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6453      	str	r3, [r2, #68]	; 0x44
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f86:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003f88:	2302      	movs	r3, #2
 8003f8a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003f90:	2301      	movs	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480e      	ldr	r0, [pc, #56]	; (8003fd8 <HAL_Encoder_Timer1_MspInit+0x78>)
 8003f9e:	f001 ff1b 	bl	8005dd8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003fa8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003fac:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4809      	ldr	r0, [pc, #36]	; (8003fdc <HAL_Encoder_Timer1_MspInit+0x7c>)
 8003fb8:	f001 ff0e 	bl	8005dd8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2107      	movs	r1, #7
 8003fc0:	2028      	movs	r0, #40	; 0x28
 8003fc2:	f001 facf 	bl	8005564 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fc6:	2028      	movs	r0, #40	; 0x28
 8003fc8:	f001 fae8 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 8003fcc:	bf00      	nop
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400

08003fe0 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004002:	2303      	movs	r3, #3
 8004004:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8004006:	2302      	movs	r3, #2
 8004008:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800400a:	2301      	movs	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800400e:	2301      	movs	r3, #1
 8004010:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8004012:	2301      	movs	r3, #1
 8004014:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	4619      	mov	r1, r3
 800401a:	480e      	ldr	r0, [pc, #56]	; (8004054 <HAL_Encoder_Timer2_MspInit+0x74>)
 800401c:	f001 fedc 	bl	8005dd8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004020:	2301      	movs	r3, #1
 8004022:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004024:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004028:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4809      	ldr	r0, [pc, #36]	; (8004058 <HAL_Encoder_Timer2_MspInit+0x78>)
 8004034:	f001 fed0 	bl	8005dd8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8004038:	2200      	movs	r2, #0
 800403a:	2106      	movs	r1, #6
 800403c:	2006      	movs	r0, #6
 800403e:	f001 fa91 	bl	8005564 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004042:	2006      	movs	r0, #6
 8004044:	f001 faaa 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40023800 	.word	0x40023800
 8004054:	40020000 	.word	0x40020000
 8004058:	40020800 	.word	0x40020800

0800405c <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <HAL_PWM_Timer3_MspInit+0xb4>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a29      	ldr	r2, [pc, #164]	; (8004110 <HAL_PWM_Timer3_MspInit+0xb4>)
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_PWM_Timer3_MspInit+0xb4>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800407e:	2340      	movs	r3, #64	; 0x40
 8004080:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004082:	2302      	movs	r3, #2
 8004084:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004086:	2301      	movs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800408a:	2301      	movs	r3, #1
 800408c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 800408e:	2302      	movs	r3, #2
 8004090:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	4619      	mov	r1, r3
 8004096:	481f      	ldr	r0, [pc, #124]	; (8004114 <HAL_PWM_Timer3_MspInit+0xb8>)
 8004098:	f001 fe9e 	bl	8005dd8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a0:	2302      	movs	r3, #2
 80040a2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a4:	2301      	movs	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80040a8:	2301      	movs	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80040ac:	2302      	movs	r3, #2
 80040ae:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4818      	ldr	r0, [pc, #96]	; (8004118 <HAL_PWM_Timer3_MspInit+0xbc>)
 80040b6:	f001 fe8f 	bl	8005dd8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pull = GPIO_NOPULL;

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);*/

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80040ba:	2308      	movs	r3, #8
 80040bc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80040c6:	2302      	movs	r3, #2
 80040c8:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4813      	ldr	r0, [pc, #76]	; (800411c <HAL_PWM_Timer3_MspInit+0xc0>)
 80040d0:	f001 fe82 	bl	8005dd8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80040d4:	2201      	movs	r2, #1
 80040d6:	2108      	movs	r1, #8
 80040d8:	4810      	ldr	r0, [pc, #64]	; (800411c <HAL_PWM_Timer3_MspInit+0xc0>)
 80040da:	f002 f801 	bl	80060e0 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e4:	2301      	movs	r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80040ec:	2302      	movs	r3, #2
 80040ee:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4807      	ldr	r0, [pc, #28]	; (8004114 <HAL_PWM_Timer3_MspInit+0xb8>)
 80040f6:	f001 fe6f 	bl	8005dd8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80040fa:	2201      	movs	r2, #1
 80040fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004100:	4804      	ldr	r0, [pc, #16]	; (8004114 <HAL_PWM_Timer3_MspInit+0xb8>)
 8004102:	f001 ffed 	bl	80060e0 <HAL_GPIO_WritePin>




}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800
 8004114:	40020000 	.word	0x40020000
 8004118:	40020800 	.word	0x40020800
 800411c:	40020400 	.word	0x40020400

08004120 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_adcir_MspInit+0x58>)
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <HAL_adcir_MspInit+0x58>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6453      	str	r3, [r2, #68]	; 0x44
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_adcir_MspInit+0x58>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8004142:	2310      	movs	r3, #16
 8004144:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004146:	2303      	movs	r3, #3
 8004148:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	4619      	mov	r1, r3
 8004152:	480a      	ldr	r0, [pc, #40]	; (800417c <HAL_adcir_MspInit+0x5c>)
 8004154:	f001 fe40 	bl	8005dd8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8004158:	2301      	movs	r3, #1
 800415a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800415c:	2303      	movs	r3, #3
 800415e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4805      	ldr	r0, [pc, #20]	; (8004180 <HAL_adcir_MspInit+0x60>)
 800416a:	f001 fe35 	bl	8005dd8 <HAL_GPIO_Init>

}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	40020000 	.word	0x40020000
 8004180:	40020400 	.word	0x40020400

08004184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a21      	ldr	r2, [pc, #132]	; (8004228 <HAL_I2C_MspInit+0xa4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d13c      	bne.n	8004220 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_I2C_MspInit+0xa8>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <HAL_I2C_MspInit+0xa8>)
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	6313      	str	r3, [r2, #48]	; 0x30
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_I2C_MspInit+0xa8>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041c8:	2312      	movs	r3, #18
 80041ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d0:	2303      	movs	r3, #3
 80041d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041d4:	2304      	movs	r3, #4
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d8:	f107 0314 	add.w	r3, r7, #20
 80041dc:	4619      	mov	r1, r3
 80041de:	4814      	ldr	r0, [pc, #80]	; (8004230 <HAL_I2C_MspInit+0xac>)
 80041e0:	f001 fdfa 	bl	8005dd8 <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_I2C_MspInit+0xa8>)
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	4a0f      	ldr	r2, [pc, #60]	; (800422c <HAL_I2C_MspInit+0xa8>)
 80041ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041f2:	6413      	str	r3, [r2, #64]	; 0x40
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_I2C_MspInit+0xa8>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8004200:	2200      	movs	r2, #0
 8004202:	2102      	movs	r1, #2
 8004204:	2020      	movs	r0, #32
 8004206:	f001 f9ad 	bl	8005564 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800420a:	2020      	movs	r0, #32
 800420c:	f001 f9c6 	bl	800559c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	210b      	movs	r1, #11
 8004214:	201f      	movs	r0, #31
 8004216:	f001 f9a5 	bl	8005564 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800421a:	201f      	movs	r0, #31
 800421c:	f001 f9be 	bl	800559c <HAL_NVIC_EnableIRQ>
  }

}
 8004220:	bf00      	nop
 8004222:	3728      	adds	r7, #40	; 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40005400 	.word	0x40005400
 800422c:	40023800 	.word	0x40023800
 8004230:	40020400 	.word	0x40020400

08004234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	f107 031c 	add.w	r3, r7, #28
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4aa2      	ldr	r2, [pc, #648]	; (80044dc <HAL_UART_MspInit+0x2a8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	f040 80a5 	bne.w	80043a2 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	4ba0      	ldr	r3, [pc, #640]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	4a9f      	ldr	r2, [pc, #636]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 8004262:	f043 0310 	orr.w	r3, r3, #16
 8004266:	6453      	str	r3, [r2, #68]	; 0x44
 8004268:	4b9d      	ldr	r3, [pc, #628]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	4b99      	ldr	r3, [pc, #612]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	4a98      	ldr	r2, [pc, #608]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 800427e:	f043 0301 	orr.w	r3, r3, #1
 8004282:	6313      	str	r3, [r2, #48]	; 0x30
 8004284:	4b96      	ldr	r3, [pc, #600]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004296:	2302      	movs	r3, #2
 8004298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800429e:	2303      	movs	r3, #3
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042a2:	2307      	movs	r3, #7
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	f107 031c 	add.w	r3, r7, #28
 80042aa:	4619      	mov	r1, r3
 80042ac:	488d      	ldr	r0, [pc, #564]	; (80044e4 <HAL_UART_MspInit+0x2b0>)
 80042ae:	f001 fd93 	bl	8005dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b6:	2302      	movs	r3, #2
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042be:	2303      	movs	r3, #3
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042c2:	2307      	movs	r3, #7
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	4619      	mov	r1, r3
 80042cc:	4886      	ldr	r0, [pc, #536]	; (80044e8 <HAL_UART_MspInit+0x2b4>)
 80042ce:	f001 fd83 	bl	8005dd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80042d2:	4b86      	ldr	r3, [pc, #536]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 80042d4:	4a86      	ldr	r2, [pc, #536]	; (80044f0 <HAL_UART_MspInit+0x2bc>)
 80042d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80042d8:	4b84      	ldr	r3, [pc, #528]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 80042da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042e0:	4b82      	ldr	r3, [pc, #520]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042e6:	4b81      	ldr	r3, [pc, #516]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ec:	4b7f      	ldr	r3, [pc, #508]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 80042ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042f4:	4b7d      	ldr	r3, [pc, #500]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042fa:	4b7c      	ldr	r3, [pc, #496]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004300:	4b7a      	ldr	r3, [pc, #488]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 8004302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004306:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004308:	4b78      	ldr	r3, [pc, #480]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 800430a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800430e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004310:	4b76      	ldr	r3, [pc, #472]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 8004312:	2200      	movs	r2, #0
 8004314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004316:	4875      	ldr	r0, [pc, #468]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 8004318:	f001 f94e 	bl	80055b8 <HAL_DMA_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8004322:	f7ff f9bf 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a70      	ldr	r2, [pc, #448]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
 800432c:	4a6f      	ldr	r2, [pc, #444]	; (80044ec <HAL_UART_MspInit+0x2b8>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004332:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004334:	4a70      	ldr	r2, [pc, #448]	; (80044f8 <HAL_UART_MspInit+0x2c4>)
 8004336:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004338:	4b6e      	ldr	r3, [pc, #440]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 800433a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800433e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004340:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004346:	4b6b      	ldr	r3, [pc, #428]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004348:	2200      	movs	r2, #0
 800434a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800434c:	4b69      	ldr	r3, [pc, #420]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 800434e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004352:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004354:	4b67      	ldr	r3, [pc, #412]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004356:	2200      	movs	r2, #0
 8004358:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800435a:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 800435c:	2200      	movs	r2, #0
 800435e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004360:	4b64      	ldr	r3, [pc, #400]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004366:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004368:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800436c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800436e:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004370:	2200      	movs	r2, #0
 8004372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004374:	485f      	ldr	r0, [pc, #380]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004376:	f001 f91f 	bl	80055b8 <HAL_DMA_Init>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8004380:	f7ff f990 	bl	80036a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a5b      	ldr	r2, [pc, #364]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 8004388:	635a      	str	r2, [r3, #52]	; 0x34
 800438a:	4a5a      	ldr	r2, [pc, #360]	; (80044f4 <HAL_UART_MspInit+0x2c0>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004390:	2200      	movs	r2, #0
 8004392:	2105      	movs	r1, #5
 8004394:	2025      	movs	r0, #37	; 0x25
 8004396:	f001 f8e5 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800439a:	2025      	movs	r0, #37	; 0x25
 800439c:	f001 f8fe 	bl	800559c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043a0:	e098      	b.n	80044d4 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a55      	ldr	r2, [pc, #340]	; (80044fc <HAL_UART_MspInit+0x2c8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	f040 8093 	bne.w	80044d4 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4a4a      	ldr	r2, [pc, #296]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043bc:	6413      	str	r3, [r2, #64]	; 0x40
 80043be:	4b48      	ldr	r3, [pc, #288]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a43      	ldr	r2, [pc, #268]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_UART_MspInit+0x2ac>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80043e6:	230c      	movs	r3, #12
 80043e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ea:	2302      	movs	r3, #2
 80043ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043f6:	2307      	movs	r3, #7
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fa:	f107 031c 	add.w	r3, r7, #28
 80043fe:	4619      	mov	r1, r3
 8004400:	4838      	ldr	r0, [pc, #224]	; (80044e4 <HAL_UART_MspInit+0x2b0>)
 8004402:	f001 fce9 	bl	8005dd8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004406:	4b3e      	ldr	r3, [pc, #248]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 8004408:	4a3e      	ldr	r2, [pc, #248]	; (8004504 <HAL_UART_MspInit+0x2d0>)
 800440a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800440c:	4b3c      	ldr	r3, [pc, #240]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 800440e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004412:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800441a:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 800441c:	2200      	movs	r2, #0
 800441e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004420:	4b37      	ldr	r3, [pc, #220]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 8004422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004426:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 800442a:	2200      	movs	r2, #0
 800442c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800442e:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 8004430:	2200      	movs	r2, #0
 8004432:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 8004436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800443a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800443c:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 800443e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004442:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004444:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 8004446:	2200      	movs	r2, #0
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800444a:	482d      	ldr	r0, [pc, #180]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 800444c:	f001 f8b4 	bl	80055b8 <HAL_DMA_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8004456:	f7ff f925 	bl	80036a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a28      	ldr	r2, [pc, #160]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <HAL_UART_MspInit+0x2cc>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004466:	4b28      	ldr	r3, [pc, #160]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 8004468:	4a28      	ldr	r2, [pc, #160]	; (800450c <HAL_UART_MspInit+0x2d8>)
 800446a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 800446e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004472:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 8004476:	2240      	movs	r2, #64	; 0x40
 8004478:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 800447c:	2200      	movs	r2, #0
 800447e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 8004482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004486:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004488:	4b1f      	ldr	r3, [pc, #124]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 800448a:	2200      	movs	r2, #0
 800448c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800448e:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 8004490:	2200      	movs	r2, #0
 8004492:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004494:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 8004496:	2200      	movs	r2, #0
 8004498:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800449a:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 800449c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80044a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044a2:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80044a8:	4817      	ldr	r0, [pc, #92]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 80044aa:	f001 f885 	bl	80055b8 <HAL_DMA_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80044b4:	f7ff f8f6 	bl	80036a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a13      	ldr	r2, [pc, #76]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 80044bc:	635a      	str	r2, [r3, #52]	; 0x34
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <HAL_UART_MspInit+0x2d4>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80044c4:	2200      	movs	r2, #0
 80044c6:	2105      	movs	r1, #5
 80044c8:	2026      	movs	r0, #38	; 0x26
 80044ca:	f001 f84b 	bl	8005564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044ce:	2026      	movs	r0, #38	; 0x26
 80044d0:	f001 f864 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 80044d4:	bf00      	nop
 80044d6:	3730      	adds	r7, #48	; 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40011000 	.word	0x40011000
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40020000 	.word	0x40020000
 80044e8:	40020400 	.word	0x40020400
 80044ec:	20004bdc 	.word	0x20004bdc
 80044f0:	40026440 	.word	0x40026440
 80044f4:	20004c3c 	.word	0x20004c3c
 80044f8:	400264b8 	.word	0x400264b8
 80044fc:	40004400 	.word	0x40004400
 8004500:	20004c9c 	.word	0x20004c9c
 8004504:	40026088 	.word	0x40026088
 8004508:	20004cfc 	.word	0x20004cfc
 800450c:	400260a0 	.word	0x400260a0

08004510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004520:	2300      	movs	r3, #0
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <HAL_InitTick+0xd4>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	4a2e      	ldr	r2, [pc, #184]	; (80045e4 <HAL_InitTick+0xd4>)
 800452a:	f043 0304 	orr.w	r3, r3, #4
 800452e:	6413      	str	r3, [r2, #64]	; 0x40
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_InitTick+0xd4>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800453c:	f107 020c 	add.w	r2, r7, #12
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f004 ff04 	bl	8009354 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800454c:	f004 feee 	bl	800932c <HAL_RCC_GetPCLK2Freq>
 8004550:	4603      	mov	r3, r0
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	4a23      	ldr	r2, [pc, #140]	; (80045e8 <HAL_InitTick+0xd8>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	0c9b      	lsrs	r3, r3, #18
 8004560:	3b01      	subs	r3, #1
 8004562:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8004564:	4b21      	ldr	r3, [pc, #132]	; (80045ec <HAL_InitTick+0xdc>)
 8004566:	4a22      	ldr	r2, [pc, #136]	; (80045f0 <HAL_InitTick+0xe0>)
 8004568:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_InitTick+0xdc>)
 800456c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004570:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_InitTick+0xdc>)
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004578:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <HAL_InitTick+0xdc>)
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800457e:	4b1b      	ldr	r3, [pc, #108]	; (80045ec <HAL_InitTick+0xdc>)
 8004580:	2200      	movs	r2, #0
 8004582:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_InitTick+0xdc>)
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800458a:	4818      	ldr	r0, [pc, #96]	; (80045ec <HAL_InitTick+0xdc>)
 800458c:	f004 ff14 	bl	80093b8 <HAL_TIM_Base_Init>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11b      	bne.n	80045d6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800459e:	4813      	ldr	r0, [pc, #76]	; (80045ec <HAL_InitTick+0xdc>)
 80045a0:	f004 ff64 	bl	800946c <HAL_TIM_Base_Start_IT>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80045aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d111      	bne.n	80045d6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045b2:	201e      	movs	r0, #30
 80045b4:	f000 fff2 	bl	800559c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	d808      	bhi.n	80045d0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80045be:	2200      	movs	r2, #0
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	201e      	movs	r0, #30
 80045c4:	f000 ffce 	bl	8005564 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <HAL_InitTick+0xe4>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e002      	b.n	80045d6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80045d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	; 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	431bde83 	.word	0x431bde83
 80045ec:	20004ec4 	.word	0x20004ec4
 80045f0:	40000800 	.word	0x40000800
 80045f4:	20000024 	.word	0x20000024

080045f8 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  while (1)
 80045fc:	e7fe      	b.n	80045fc <NMI_Handler+0x4>

080045fe <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0

  while (1)
 8004602:	e7fe      	b.n	8004602 <HardFault_Handler+0x4>

08004604 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  while (1)
 8004608:	e7fe      	b.n	8004608 <MemManage_Handler+0x4>

0800460a <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  while (1)
 800460e:	e7fe      	b.n	800460e <BusFault_Handler+0x4>

08004610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  while (1)
 8004614:	e7fe      	b.n	8004614 <UsageFault_Handler+0x4>

08004616 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004628:	4802      	ldr	r0, [pc, #8]	; (8004634 <DMA1_Stream5_IRQHandler+0x10>)
 800462a:	f001 f95d 	bl	80058e8 <HAL_DMA_IRQHandler>
}
 800462e:	bf00      	nop
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20004c9c 	.word	0x20004c9c

08004638 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800463c:	4802      	ldr	r0, [pc, #8]	; (8004648 <DMA1_Stream6_IRQHandler+0x10>)
 800463e:	f001 f953 	bl	80058e8 <HAL_DMA_IRQHandler>
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20004cfc 	.word	0x20004cfc

0800464c <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8004650:	4802      	ldr	r0, [pc, #8]	; (800465c <TIM4_IRQHandler+0x10>)
 8004652:	f005 f95b 	bl	800990c <HAL_TIM_IRQHandler>
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20004ec4 	.word	0x20004ec4

08004660 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8004664:	4802      	ldr	r0, [pc, #8]	; (8004670 <USART1_IRQHandler+0x10>)
 8004666:	f005 ff95 	bl	800a594 <HAL_UART_IRQHandler>
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20004b54 	.word	0x20004b54

08004674 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <USART2_IRQHandler+0x10>)
 800467a:	f005 ff8b 	bl	800a594 <HAL_UART_IRQHandler>
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20004b98 	.word	0x20004b98

08004688 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800468c:	4802      	ldr	r0, [pc, #8]	; (8004698 <DMA2_Stream2_IRQHandler+0x10>)
 800468e:	f001 f92b 	bl	80058e8 <HAL_DMA_IRQHandler>
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20004bdc 	.word	0x20004bdc

0800469c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80046a0:	4802      	ldr	r0, [pc, #8]	; (80046ac <DMA2_Stream7_IRQHandler+0x10>)
 80046a2:	f001 f921 	bl	80058e8 <HAL_DMA_IRQHandler>
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20004c3c 	.word	0x20004c3c

080046b0 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80046b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046b8:	f001 fd2c 	bl	8006114 <HAL_GPIO_EXTI_IRQHandler>
}
 80046bc:	bf00      	nop
 80046be:	bd80      	pop	{r7, pc}

080046c0 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80046c4:	2001      	movs	r0, #1
 80046c6:	f001 fd25 	bl	8006114 <HAL_GPIO_EXTI_IRQHandler>
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046d4:	4802      	ldr	r0, [pc, #8]	; (80046e0 <I2C1_EV_IRQHandler+0x10>)
 80046d6:	f002 f99d 	bl	8006a14 <HAL_I2C_EV_IRQHandler>
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20004b00 	.word	0x20004b00

080046e4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <I2C1_ER_IRQHandler+0x10>)
 80046ea:	f002 fb04 	bl	8006cf6 <HAL_I2C_ER_IRQHandler>
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20004b00 	.word	0x20004b00

080046f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
	return 1;
 80046fc:	2301      	movs	r3, #1
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <_kill>:

int _kill(int pid, int sig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004712:	f015 f9b3 	bl	8019a7c <__errno>
 8004716:	4603      	mov	r3, r0
 8004718:	2216      	movs	r2, #22
 800471a:	601a      	str	r2, [r3, #0]
	return -1;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <_exit>:

void _exit (int status)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ffe7 	bl	8004708 <_kill>
	while (1) {}		/* Make sure we hang here */
 800473a:	e7fe      	b.n	800473a <_exit+0x12>

0800473c <_read>:
}

//__attribute__((weak)) int _read(int file, char *ptr, int len)
int _read(int file, char *ptr, int len)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e00a      	b.n	8004764 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800474e:	f3af 8000 	nop.w
 8004752:	4601      	mov	r1, r0
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	60ba      	str	r2, [r7, #8]
 800475a:	b2ca      	uxtb	r2, r1
 800475c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3301      	adds	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	dbf0      	blt.n	800474e <_read+0x12>
	}

return len;
 800476c:	687b      	ldr	r3, [r7, #4]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_write>:

//__attribute__((weak)) int _write(int file, char *ptr, int len)
int _write(int file, char *ptr, int len)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e009      	b.n	800479c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	60ba      	str	r2, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7fd fde7 	bl	8002364 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3301      	adds	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	dbf1      	blt.n	8004788 <_write+0x12>
	}
	return len;
 80047a4:	687b      	ldr	r3, [r7, #4]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <_close>:

int _close(int file)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
	return -1;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047d6:	605a      	str	r2, [r3, #4]
	return 0;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <_isatty>:

int _isatty(int file)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
	return 1;
 80047ee:	2301      	movs	r3, #1
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
	return 0;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <_sbrk+0x5c>)
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <_sbrk+0x60>)
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <_sbrk+0x64>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <_sbrk+0x64>)
 8004836:	4a12      	ldr	r2, [pc, #72]	; (8004880 <_sbrk+0x68>)
 8004838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800483a:	4b10      	ldr	r3, [pc, #64]	; (800487c <_sbrk+0x64>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d207      	bcs.n	8004858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004848:	f015 f918 	bl	8019a7c <__errno>
 800484c:	4603      	mov	r3, r0
 800484e:	220c      	movs	r2, #12
 8004850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004856:	e009      	b.n	800486c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <_sbrk+0x64>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <_sbrk+0x64>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	4a05      	ldr	r2, [pc, #20]	; (800487c <_sbrk+0x64>)
 8004868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20020000 	.word	0x20020000
 8004878:	00000400 	.word	0x00000400
 800487c:	20004f10 	.word	0x20004f10
 8004880:	2000e8f8 	.word	0x2000e8f8

08004884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <SystemInit+0x20>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	4a05      	ldr	r2, [pc, #20]	; (80048a4 <SystemInit+0x20>)
 8004890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b094      	sub	sp, #80	; 0x50
 80048ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048ae:	f107 0320 	add.w	r3, r7, #32
 80048b2:	2230      	movs	r2, #48	; 0x30
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f015 fa84 	bl	8019dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048bc:	f107 030c 	add.w	r3, r7, #12
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <SystemClock_Config+0xcc>)
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	4a27      	ldr	r2, [pc, #156]	; (8004974 <SystemClock_Config+0xcc>)
 80048d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048da:	6413      	str	r3, [r2, #64]	; 0x40
 80048dc:	4b25      	ldr	r3, [pc, #148]	; (8004974 <SystemClock_Config+0xcc>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e8:	2300      	movs	r3, #0
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	4b22      	ldr	r3, [pc, #136]	; (8004978 <SystemClock_Config+0xd0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a21      	ldr	r2, [pc, #132]	; (8004978 <SystemClock_Config+0xd0>)
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <SystemClock_Config+0xd0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004904:	2301      	movs	r3, #1
 8004906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004908:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800490e:	2302      	movs	r3, #2
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004918:	2308      	movs	r3, #8
 800491a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800491c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004920:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004922:	2306      	movs	r3, #6
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004926:	2304      	movs	r3, #4
 8004928:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800492a:	f107 0320 	add.w	r3, r7, #32
 800492e:	4618      	mov	r0, r3
 8004930:	f004 f878 	bl	8008a24 <HAL_RCC_OscConfig>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800493a:	f7fe feb3 	bl	80036a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800493e:	230f      	movs	r3, #15
 8004940:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004942:	2302      	movs	r3, #2
 8004944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800494a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800494e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004950:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004956:	f107 030c 	add.w	r3, r7, #12
 800495a:	2102      	movs	r1, #2
 800495c:	4618      	mov	r0, r3
 800495e:	f004 fad9 	bl	8008f14 <HAL_RCC_ClockConfig>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004968:	f7fe fe9c 	bl	80036a4 <Error_Handler>
  }
}
 800496c:	bf00      	nop
 800496e:	3750      	adds	r7, #80	; 0x50
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000

0800497c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	fbb3 f2f2 	udiv	r2, r3, r2
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	fb01 f202 	mul.w	r2, r1, r2
 800499c:	1a9a      	subs	r2, r3, r2
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1c59      	adds	r1, r3, #1
 80049a2:	60f9      	str	r1, [r7, #12]
 80049a4:	4936      	ldr	r1, [pc, #216]	; (8004a80 <num2str+0x104>)
 80049a6:	5c8a      	ldrb	r2, [r1, r2]
 80049a8:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e9      	bne.n	800498e <num2str+0x12>
        *s='\0';
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e01a      	b.n	8004a04 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	4413      	add	r3, r2
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	76fb      	strb	r3, [r7, #27]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	441a      	add	r2, r3
 80049e4:	6979      	ldr	r1, [r7, #20]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	440b      	add	r3, r1
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	7efa      	ldrb	r2, [r7, #27]
 80049fc:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3301      	adds	r3, #1
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d3df      	bcc.n	80049ce <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d22d      	bcs.n	8004a72 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e00e      	b.n	8004a3a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	441a      	add	r2, r3
 8004a22:	69f9      	ldr	r1, [r7, #28]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	4419      	add	r1, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1acb      	subs	r3, r1, r3
 8004a2c:	6979      	ldr	r1, [r7, #20]
 8004a2e:	440b      	add	r3, r1
 8004a30:	7812      	ldrb	r2, [r2, #0]
 8004a32:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ed      	beq.n	8004a1c <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <num2str+0xd0>
 8004a46:	2320      	movs	r3, #32
 8004a48:	76fb      	strb	r3, [r7, #27]
 8004a4a:	e001      	b.n	8004a50 <num2str+0xd4>
 8004a4c:	2330      	movs	r3, #48	; 0x30
 8004a4e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e007      	b.n	8004a66 <num2str+0xea>
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	7efa      	ldrb	r2, [r7, #27]
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d3f1      	bcc.n	8004a56 <num2str+0xda>
        }
}
 8004a72:	bf00      	nop
 8004a74:	3724      	adds	r7, #36	; 0x24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000010 	.word	0x20000010

08004a84 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004a9c:	e02e      	b.n	8004afc <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b2f      	cmp	r3, #47	; 0x2f
 8004aa2:	d906      	bls.n	8004ab2 <str2num+0x2e>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b39      	cmp	r3, #57	; 0x39
 8004aa8:	d803      	bhi.n	8004ab2 <str2num+0x2e>
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	3b30      	subs	r3, #48	; 0x30
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	e018      	b.n	8004ae4 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d109      	bne.n	8004acc <str2num+0x48>
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d906      	bls.n	8004acc <str2num+0x48>
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b46      	cmp	r3, #70	; 0x46
 8004ac2:	d803      	bhi.n	8004acc <str2num+0x48>
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	3b37      	subs	r3, #55	; 0x37
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e00b      	b.n	8004ae4 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d117      	bne.n	8004b02 <str2num+0x7e>
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d914      	bls.n	8004b02 <str2num+0x7e>
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b66      	cmp	r3, #102	; 0x66
 8004adc:	d811      	bhi.n	8004b02 <str2num+0x7e>
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	3b57      	subs	r3, #87	; 0x57
 8004ae2:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1cd      	bne.n	8004a9e <str2num+0x1a>
	}
	return u;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004b24:	e018      	b.n	8004b58 <reverse+0x48>
    {
        temp = str[i];
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	441a      	add	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	440b      	add	r3, r1
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	dbe2      	blt.n	8004b26 <reverse+0x16>
    }
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
    while (x)
 8004b80:	e01d      	b.n	8004bbe <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <intToStr+0x8c>)
 8004b86:	fb83 1302 	smull	r1, r3, r3, r2
 8004b8a:	1099      	asrs	r1, r3, #2
 8004b8c:	17d3      	asrs	r3, r2, #31
 8004b8e:	1ac9      	subs	r1, r1, r3
 8004b90:	460b      	mov	r3, r1
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	1ad1      	subs	r1, r2, r3
 8004b9a:	b2ca      	uxtb	r2, r1
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	1c59      	adds	r1, r3, #1
 8004ba0:	6179      	str	r1, [r7, #20]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	440b      	add	r3, r1
 8004ba8:	3230      	adds	r2, #48	; 0x30
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <intToStr+0x8c>)
 8004bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8004bb6:	1092      	asrs	r2, r2, #2
 8004bb8:	17db      	asrs	r3, r3, #31
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	60fb      	str	r3, [r7, #12]
    while (x)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1de      	bne.n	8004b82 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004bc4:	e007      	b.n	8004bd6 <intToStr+0x66>
        str[i++] = '0';
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	617a      	str	r2, [r7, #20]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	2230      	movs	r2, #48	; 0x30
 8004bd4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	dbf3      	blt.n	8004bc6 <intToStr+0x56>

    reverse(str, i);
 8004bde:	6979      	ldr	r1, [r7, #20]
 8004be0:	68b8      	ldr	r0, [r7, #8]
 8004be2:	f7ff ff95 	bl	8004b10 <reverse>
    str[i] = '\0';
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	4413      	add	r3, r2
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
    return i;
 8004bf0:	697b      	ldr	r3, [r7, #20]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	66666667 	.word	0x66666667

08004c00 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c0c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8004c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c16:	ee17 3a90 	vmov	r3, s15
 8004c1a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c26:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c2e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8004c32:	2200      	movs	r2, #0
 8004c34:	68f9      	ldr	r1, [r7, #12]
 8004c36:	69f8      	ldr	r0, [r7, #28]
 8004c38:	f7ff ff9a 	bl	8004b70 <intToStr>
 8004c3c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d025      	beq.n	8004c90 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	222e      	movs	r2, #46	; 0x2e
 8004c4c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004c98 <float2str+0x98>
 8004c54:	f000 f824 	bl	8004ca0 <myPow>
 8004c58:	ec53 2b10 	vmov	r2, r3, d0
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7fb ffda 	bl	8000c18 <__aeabi_d2f>
 8004c64:	ee07 0a10 	vmov	s14, r0
 8004c68:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c70:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004c74:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4619      	mov	r1, r3
 8004c88:	ee17 0a90 	vmov	r0, s15
 8004c8c:	f7ff ff70 	bl	8004b70 <intToStr>
    }
}
 8004c90:	bf00      	nop
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00000000 	.word	0x00000000
 8004c9c:	40240000 	.word	0x40240000

08004ca0 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	ed87 0b02 	vstr	d0, [r7, #8]
 8004caa:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bfb8      	it	lt
 8004cb2:	425b      	neglt	r3, r3
 8004cb4:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <myPow+0x90>)
 8004cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004cc0:	e01b      	b.n	8004cfa <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <myPow+0x40>
        {
            result = result * x;
 8004ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004cd4:	f7fb fca8 	bl	8000628 <__aeabi_dmul>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8004ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cee:	f7fb fc9b 	bl	8000628 <__aeabi_dmul>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e0      	bne.n	8004cc2 <myPow+0x22>
    }

    if(n < 0)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	da09      	bge.n	8004d1a <myPow+0x7a>
    {
        return 1/result;
 8004d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d0a:	f04f 0000 	mov.w	r0, #0
 8004d0e:	4908      	ldr	r1, [pc, #32]	; (8004d30 <myPow+0x90>)
 8004d10:	f7fb fdb4 	bl	800087c <__aeabi_ddiv>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	e001      	b.n	8004d1e <myPow+0x7e>
    }
    return result;
 8004d1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004d1e:	ec43 2b17 	vmov	d7, r2, r3
 8004d22:	eeb0 0a47 	vmov.f32	s0, s14
 8004d26:	eef0 0a67 	vmov.f32	s1, s15
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	3ff00000 	.word	0x3ff00000

08004d34 <Reset_Handler>:
 8004d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d6c <LoopFillZerobss+0x12>
 8004d38:	480d      	ldr	r0, [pc, #52]	; (8004d70 <LoopFillZerobss+0x16>)
 8004d3a:	490e      	ldr	r1, [pc, #56]	; (8004d74 <LoopFillZerobss+0x1a>)
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <LoopFillZerobss+0x1e>)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e002      	b.n	8004d48 <LoopCopyDataInit>

08004d42 <CopyDataInit>:
 8004d42:	58d4      	ldr	r4, [r2, r3]
 8004d44:	50c4      	str	r4, [r0, r3]
 8004d46:	3304      	adds	r3, #4

08004d48 <LoopCopyDataInit>:
 8004d48:	18c4      	adds	r4, r0, r3
 8004d4a:	428c      	cmp	r4, r1
 8004d4c:	d3f9      	bcc.n	8004d42 <CopyDataInit>
 8004d4e:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <LoopFillZerobss+0x22>)
 8004d50:	4c0b      	ldr	r4, [pc, #44]	; (8004d80 <LoopFillZerobss+0x26>)
 8004d52:	2300      	movs	r3, #0
 8004d54:	e001      	b.n	8004d5a <LoopFillZerobss>

08004d56 <FillZerobss>:
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	3204      	adds	r2, #4

08004d5a <LoopFillZerobss>:
 8004d5a:	42a2      	cmp	r2, r4
 8004d5c:	d3fb      	bcc.n	8004d56 <FillZerobss>
 8004d5e:	f7ff fd91 	bl	8004884 <SystemInit>
 8004d62:	f014 ffcf 	bl	8019d04 <__libc_init_array>
 8004d66:	f7fe f9cd 	bl	8003104 <main>
 8004d6a:	4770      	bx	lr
 8004d6c:	20020000 	.word	0x20020000
 8004d70:	20000000 	.word	0x20000000
 8004d74:	2000025c 	.word	0x2000025c
 8004d78:	0801fb10 	.word	0x0801fb10
 8004d7c:	20000260 	.word	0x20000260
 8004d80:	2000e8f8 	.word	0x2000e8f8

08004d84 <ADC_IRQHandler>:
 8004d84:	e7fe      	b.n	8004d84 <ADC_IRQHandler>
	...

08004d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <HAL_Init+0x40>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0d      	ldr	r2, [pc, #52]	; (8004dc8 <HAL_Init+0x40>)
 8004d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_Init+0x40>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_Init+0x40>)
 8004d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <HAL_Init+0x40>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a07      	ldr	r2, [pc, #28]	; (8004dc8 <HAL_Init+0x40>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004db0:	2003      	movs	r0, #3
 8004db2:	f000 fbcc 	bl	800554e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004db6:	200f      	movs	r0, #15
 8004db8:	f7ff fbaa 	bl	8004510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dbc:	f7ff f84c 	bl	8003e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023c00 	.word	0x40023c00

08004dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <HAL_IncTick+0x20>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_IncTick+0x24>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4413      	add	r3, r2
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <HAL_IncTick+0x24>)
 8004dde:	6013      	str	r3, [r2, #0]
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000028 	.word	0x20000028
 8004df0:	20004f14 	.word	0x20004f14

08004df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return uwTick;
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_GetTick+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20004f14 	.word	0x20004f14

08004e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7ff ffee 	bl	8004df4 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e24:	d005      	beq.n	8004e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <HAL_Delay+0x44>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e32:	bf00      	nop
 8004e34:	f7ff ffde 	bl	8004df4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d8f7      	bhi.n	8004e34 <HAL_Delay+0x28>
  {
  }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000028 	.word	0x20000028

08004e54 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e01b      	b.n	8004e9e <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f817 	bl	8004ea6 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f9d7 	bl	8005234 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_ADC_Start+0x1a>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e053      	b.n	8004f7e <HAL_ADC_Start+0xc2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b22      	cmp	r3, #34	; 0x22
 8004ee8:	d104      	bne.n	8004ef4 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2232      	movs	r2, #50	; 0x32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ef2:	e003      	b.n	8004efc <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2212      	movs	r2, #18
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d010      	beq.n	8004f2c <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8004f1a:	e003      	b.n	8004f24 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8004f1c:	bf00      	nop
    for(; i <= 540; i++)
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
 8004f20:	3301      	adds	r3, #1
 8004f22:	81fb      	strh	r3, [r7, #14]
 8004f24:	89fb      	ldrh	r3, [r7, #14]
 8004f26:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8004f2a:	d9f7      	bls.n	8004f1c <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <HAL_ADC_Start+0xd0>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d119      	bne.n	8004f74 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	e010      	b.n	8004f74 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <HAL_ADC_Start+0xd4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10b      	bne.n	8004f74 <HAL_ADC_Start+0xb8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d107      	bne.n	8004f74 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f72:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40012300 	.word	0x40012300
 8004f90:	40012000 	.word	0x40012000

08004f94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004fa2:	f7ff ff27 	bl	8004df4 <HAL_GetTick>
 8004fa6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fa8:	e018      	b.n	8004fdc <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb0:	d014      	beq.n	8004fdc <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_ADC_PollForConversion+0x34>
 8004fb8:	f7ff ff1c 	bl	8004df4 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d209      	bcs.n	8004fdc <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e016      	b.n	800500a <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d1df      	bne.n	8004faa <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b25      	cmp	r3, #37	; 0x25
 8004ff4:	d104      	bne.n	8005000 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2235      	movs	r2, #53	; 0x35
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ffe:	e003      	b.n	8005008 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2215      	movs	r2, #21
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_ADC_ConfigChannel+0x18>
 8005040:	2302      	movs	r3, #2
 8005042:	e0ed      	b.n	8005220 <HAL_ADC_ConfigChannel+0x1f4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b09      	cmp	r3, #9
 8005052:	d925      	bls.n	80050a0 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68d9      	ldr	r1, [r3, #12]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	3b1e      	subs	r3, #30
 800506a:	2207      	movs	r2, #7
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43da      	mvns	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	400a      	ands	r2, r1
 8005078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68d9      	ldr	r1, [r3, #12]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	4618      	mov	r0, r3
 800508c:	4603      	mov	r3, r0
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4403      	add	r3, r0
 8005092:	3b1e      	subs	r3, #30
 8005094:	409a      	lsls	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e022      	b.n	80050e6 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6919      	ldr	r1, [r3, #16]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	2207      	movs	r2, #7
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43da      	mvns	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	400a      	ands	r2, r1
 80050c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6919      	ldr	r1, [r3, #16]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	4618      	mov	r0, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4403      	add	r3, r0
 80050dc:	409a      	lsls	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d824      	bhi.n	8005138 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	3b05      	subs	r3, #5
 8005100:	221f      	movs	r2, #31
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43da      	mvns	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	400a      	ands	r2, r1
 800510e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	4618      	mov	r0, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	3b05      	subs	r3, #5
 800512a:	fa00 f203 	lsl.w	r2, r0, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	635a      	str	r2, [r3, #52]	; 0x34
 8005136:	e04c      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d824      	bhi.n	800518a <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	3b23      	subs	r3, #35	; 0x23
 8005152:	221f      	movs	r2, #31
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43da      	mvns	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	400a      	ands	r2, r1
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	4618      	mov	r0, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	3b23      	subs	r3, #35	; 0x23
 800517c:	fa00 f203 	lsl.w	r2, r0, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
 8005188:	e023      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	3b41      	subs	r3, #65	; 0x41
 800519c:	221f      	movs	r2, #31
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43da      	mvns	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	400a      	ands	r2, r1
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4618      	mov	r0, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	3b41      	subs	r3, #65	; 0x41
 80051c6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a15      	ldr	r2, [pc, #84]	; (800522c <HAL_ADC_ConfigChannel+0x200>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d109      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x1c4>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b12      	cmp	r3, #18
 80051e2:	d105      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_ADC_ConfigChannel+0x204>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a11      	ldr	r2, [pc, #68]	; (8005230 <HAL_ADC_ConfigChannel+0x204>)
 80051ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051ee:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0d      	ldr	r2, [pc, #52]	; (800522c <HAL_ADC_ConfigChannel+0x200>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10d      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x1ea>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d003      	beq.n	800520a <HAL_ADC_ConfigChannel+0x1de>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b11      	cmp	r3, #17
 8005208:	d105      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_ADC_ConfigChannel+0x204>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <HAL_ADC_ConfigChannel+0x204>)
 8005210:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005214:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	40012000 	.word	0x40012000
 8005230:	40012300 	.word	0x40012300

08005234 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800523c:	4b6c      	ldr	r3, [pc, #432]	; (80053f0 <ADC_Init+0x1bc>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4a6b      	ldr	r2, [pc, #428]	; (80053f0 <ADC_Init+0x1bc>)
 8005242:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005246:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005248:	4b69      	ldr	r3, [pc, #420]	; (80053f0 <ADC_Init+0x1bc>)
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4967      	ldr	r1, [pc, #412]	; (80053f0 <ADC_Init+0x1bc>)
 8005252:	4313      	orrs	r3, r2
 8005254:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	021a      	lsls	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6899      	ldr	r1, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6899      	ldr	r1, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0202 	bic.w	r2, r2, #2
 8005310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6899      	ldr	r1, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01b      	beq.n	8005366 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800533c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800534c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	035a      	lsls	r2, r3, #13
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	e007      	b.n	8005376 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005374:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005384:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	3b01      	subs	r3, #1
 8005392:	051a      	lsls	r2, r3, #20
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6899      	ldr	r1, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	025a      	lsls	r2, r3, #9
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	029a      	lsls	r2, r3, #10
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40012300 	.word	0x40012300

080053f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005410:	4013      	ands	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800541c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005426:	4a04      	ldr	r2, [pc, #16]	; (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	60d3      	str	r3, [r2, #12]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <__NVIC_GetPriorityGrouping+0x18>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 0307 	and.w	r3, r3, #7
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	2b00      	cmp	r3, #0
 8005468:	db0b      	blt.n	8005482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	f003 021f 	and.w	r2, r3, #31
 8005470:	4907      	ldr	r1, [pc, #28]	; (8005490 <__NVIC_EnableIRQ+0x38>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2001      	movs	r0, #1
 800547a:	fa00 f202 	lsl.w	r2, r0, r2
 800547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e100 	.word	0xe000e100

08005494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db0a      	blt.n	80054be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	490c      	ldr	r1, [pc, #48]	; (80054e0 <__NVIC_SetPriority+0x4c>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	440b      	add	r3, r1
 80054b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054bc:	e00a      	b.n	80054d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4908      	ldr	r1, [pc, #32]	; (80054e4 <__NVIC_SetPriority+0x50>)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3b04      	subs	r3, #4
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	761a      	strb	r2, [r3, #24]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f1c3 0307 	rsb	r3, r3, #7
 8005502:	2b04      	cmp	r3, #4
 8005504:	bf28      	it	cs
 8005506:	2304      	movcs	r3, #4
 8005508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3304      	adds	r3, #4
 800550e:	2b06      	cmp	r3, #6
 8005510:	d902      	bls.n	8005518 <NVIC_EncodePriority+0x30>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3b03      	subs	r3, #3
 8005516:	e000      	b.n	800551a <NVIC_EncodePriority+0x32>
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	401a      	ands	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	43d9      	mvns	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	4313      	orrs	r3, r2
         );
}
 8005542:	4618      	mov	r0, r3
 8005544:	3724      	adds	r7, #36	; 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff4c 	bl	80053f4 <__NVIC_SetPriorityGrouping>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005576:	f7ff ff61 	bl	800543c <__NVIC_GetPriorityGrouping>
 800557a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	6978      	ldr	r0, [r7, #20]
 8005582:	f7ff ffb1 	bl	80054e8 <NVIC_EncodePriority>
 8005586:	4602      	mov	r2, r0
 8005588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff ff80 	bl	8005494 <__NVIC_SetPriority>
}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ff54 	bl	8005458 <__NVIC_EnableIRQ>
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055c4:	f7ff fc16 	bl	8004df4 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e099      	b.n	8005708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055f4:	e00f      	b.n	8005616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055f6:	f7ff fbfd 	bl	8004df4 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b05      	cmp	r3, #5
 8005602:	d908      	bls.n	8005616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2203      	movs	r2, #3
 800560e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e078      	b.n	8005708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e8      	bne.n	80055f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4b38      	ldr	r3, [pc, #224]	; (8005710 <HAL_DMA_Init+0x158>)
 8005630:	4013      	ands	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800565a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	2b04      	cmp	r3, #4
 800566e:	d107      	bne.n	8005680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	4313      	orrs	r3, r2
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0307 	bic.w	r3, r3, #7
 8005696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d117      	bne.n	80056da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00e      	beq.n	80056da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb0f 	bl	8005ce0 <DMA_CheckFifoParam>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2240      	movs	r2, #64	; 0x40
 80056cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056d6:	2301      	movs	r3, #1
 80056d8:	e016      	b.n	8005708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fac6 	bl	8005c74 <DMA_CalcBaseAndBitshift>
 80056e8:	4603      	mov	r3, r0
 80056ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f0:	223f      	movs	r2, #63	; 0x3f
 80056f2:	409a      	lsls	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	f010803f 	.word	0xf010803f

08005714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_DMA_Start_IT+0x26>
 8005736:	2302      	movs	r3, #2
 8005738:	e040      	b.n	80057bc <HAL_DMA_Start_IT+0xa8>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	d12f      	bne.n	80057ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fa58 	bl	8005c18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	223f      	movs	r2, #63	; 0x3f
 800576e:	409a      	lsls	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0216 	orr.w	r2, r2, #22
 8005782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0208 	orr.w	r2, r2, #8
 800579a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e005      	b.n	80057ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057b6:	2302      	movs	r3, #2
 80057b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057d2:	f7ff fb0f 	bl	8004df4 <HAL_GetTick>
 80057d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d008      	beq.n	80057f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2280      	movs	r2, #128	; 0x80
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e052      	b.n	800589c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0216 	bic.w	r2, r2, #22
 8005804:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005814:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <HAL_DMA_Abort+0x62>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0208 	bic.w	r2, r2, #8
 8005834:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005846:	e013      	b.n	8005870 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005848:	f7ff fad4 	bl	8004df4 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b05      	cmp	r3, #5
 8005854:	d90c      	bls.n	8005870 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2203      	movs	r2, #3
 8005860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e015      	b.n	800589c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e4      	bne.n	8005848 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	223f      	movs	r2, #63	; 0x3f
 8005884:	409a      	lsls	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d004      	beq.n	80058c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2280      	movs	r2, #128	; 0x80
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e00c      	b.n	80058dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2205      	movs	r2, #5
 80058c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058f4:	4b8e      	ldr	r3, [pc, #568]	; (8005b30 <HAL_DMA_IRQHandler+0x248>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a8e      	ldr	r2, [pc, #568]	; (8005b34 <HAL_DMA_IRQHandler+0x24c>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	0a9b      	lsrs	r3, r3, #10
 8005900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005912:	2208      	movs	r2, #8
 8005914:	409a      	lsls	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01a      	beq.n	8005954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0204 	bic.w	r2, r2, #4
 800593a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	2208      	movs	r2, #8
 8005942:	409a      	lsls	r2, r3
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594c:	f043 0201 	orr.w	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	2201      	movs	r2, #1
 800595a:	409a      	lsls	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d012      	beq.n	800598a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005976:	2201      	movs	r2, #1
 8005978:	409a      	lsls	r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	f043 0202 	orr.w	r2, r3, #2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	2204      	movs	r2, #4
 8005990:	409a      	lsls	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4013      	ands	r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ac:	2204      	movs	r2, #4
 80059ae:	409a      	lsls	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	f043 0204 	orr.w	r2, r3, #4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c4:	2210      	movs	r2, #16
 80059c6:	409a      	lsls	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d043      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d03c      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e2:	2210      	movs	r2, #16
 80059e4:	409a      	lsls	r2, r3
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d108      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d024      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
 8005a16:	e01f      	b.n	8005a58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01b      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
 8005a28:	e016      	b.n	8005a58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d107      	bne.n	8005a48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0208 	bic.w	r2, r2, #8
 8005a46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	409a      	lsls	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4013      	ands	r3, r2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 808f 	beq.w	8005b88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8087 	beq.w	8005b88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7e:	2220      	movs	r2, #32
 8005a80:	409a      	lsls	r2, r3
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d136      	bne.n	8005b00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0216 	bic.w	r2, r2, #22
 8005aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <HAL_DMA_IRQHandler+0x1da>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0208 	bic.w	r2, r2, #8
 8005ad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad6:	223f      	movs	r2, #63	; 0x3f
 8005ad8:	409a      	lsls	r2, r3
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d07e      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
        }
        return;
 8005afe:	e079      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01d      	beq.n	8005b4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10d      	bne.n	8005b38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d031      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
 8005b2c:	e02c      	b.n	8005b88 <HAL_DMA_IRQHandler+0x2a0>
 8005b2e:	bf00      	nop
 8005b30:	2000000c 	.word	0x2000000c
 8005b34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d023      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
 8005b48:	e01e      	b.n	8005b88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10f      	bne.n	8005b78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0210 	bic.w	r2, r2, #16
 8005b66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d032      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d022      	beq.n	8005be2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2205      	movs	r2, #5
 8005ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d307      	bcc.n	8005bd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f2      	bne.n	8005bb4 <HAL_DMA_IRQHandler+0x2cc>
 8005bce:	e000      	b.n	8005bd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
 8005bf2:	e000      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bf4:	bf00      	nop
    }
  }
}
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c0a:	b2db      	uxtb	r3, r3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b40      	cmp	r3, #64	; 0x40
 8005c44:	d108      	bne.n	8005c58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c56:	e007      	b.n	8005c68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	3b10      	subs	r3, #16
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <DMA_CalcBaseAndBitshift+0x64>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c8e:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <DMA_CalcBaseAndBitshift+0x68>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d909      	bls.n	8005cb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	1d1a      	adds	r2, r3, #4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	659a      	str	r2, [r3, #88]	; 0x58
 8005cb4:	e007      	b.n	8005cc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	aaaaaaab 	.word	0xaaaaaaab
 8005cdc:	0801ec58 	.word	0x0801ec58

08005ce0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11f      	bne.n	8005d3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d856      	bhi.n	8005dae <DMA_CheckFifoParam+0xce>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <DMA_CheckFifoParam+0x28>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d2b 	.word	0x08005d2b
 8005d10:	08005d19 	.word	0x08005d19
 8005d14:	08005daf 	.word	0x08005daf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d046      	beq.n	8005db2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d28:	e043      	b.n	8005db2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d32:	d140      	bne.n	8005db6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d38:	e03d      	b.n	8005db6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d42:	d121      	bne.n	8005d88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d837      	bhi.n	8005dba <DMA_CheckFifoParam+0xda>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <DMA_CheckFifoParam+0x70>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d67 	.word	0x08005d67
 8005d58:	08005d61 	.word	0x08005d61
 8005d5c:	08005d79 	.word	0x08005d79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      break;
 8005d64:	e030      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d025      	beq.n	8005dbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d76:	e022      	b.n	8005dbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d80:	d11f      	bne.n	8005dc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d86:	e01c      	b.n	8005dc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d903      	bls.n	8005d96 <DMA_CheckFifoParam+0xb6>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d003      	beq.n	8005d9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d94:	e018      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9a:	e015      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dac:	e00b      	b.n	8005dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8005dae:	bf00      	nop
 8005db0:	e00a      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005db2:	bf00      	nop
 8005db4:	e008      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005db6:	bf00      	nop
 8005db8:	e006      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e004      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e002      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005dc6:	bf00      	nop
    }
  } 
  
  return status; 
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop

08005dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b089      	sub	sp, #36	; 0x24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	e159      	b.n	80060a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005df4:	2201      	movs	r2, #1
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4013      	ands	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	f040 8148 	bne.w	80060a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d005      	beq.n	8005e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d130      	bne.n	8005e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	2203      	movs	r2, #3
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e60:	2201      	movs	r2, #1
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 0201 	and.w	r2, r3, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d017      	beq.n	8005ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4013      	ands	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d123      	bne.n	8005f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	08da      	lsrs	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3208      	adds	r2, #8
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	220f      	movs	r2, #15
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	08da      	lsrs	r2, r3, #3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3208      	adds	r2, #8
 8005f16:	69b9      	ldr	r1, [r7, #24]
 8005f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	2203      	movs	r2, #3
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 0203 	and.w	r2, r3, #3
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80a2 	beq.w	80060a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <HAL_GPIO_Init+0x2e8>)
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	4a56      	ldr	r2, [pc, #344]	; (80060c0 <HAL_GPIO_Init+0x2e8>)
 8005f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f6e:	4b54      	ldr	r3, [pc, #336]	; (80060c0 <HAL_GPIO_Init+0x2e8>)
 8005f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f7a:	4a52      	ldr	r2, [pc, #328]	; (80060c4 <HAL_GPIO_Init+0x2ec>)
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	089b      	lsrs	r3, r3, #2
 8005f80:	3302      	adds	r3, #2
 8005f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	220f      	movs	r2, #15
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	43db      	mvns	r3, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a49      	ldr	r2, [pc, #292]	; (80060c8 <HAL_GPIO_Init+0x2f0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d019      	beq.n	8005fda <HAL_GPIO_Init+0x202>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a48      	ldr	r2, [pc, #288]	; (80060cc <HAL_GPIO_Init+0x2f4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_GPIO_Init+0x1fe>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a47      	ldr	r2, [pc, #284]	; (80060d0 <HAL_GPIO_Init+0x2f8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00d      	beq.n	8005fd2 <HAL_GPIO_Init+0x1fa>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a46      	ldr	r2, [pc, #280]	; (80060d4 <HAL_GPIO_Init+0x2fc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d007      	beq.n	8005fce <HAL_GPIO_Init+0x1f6>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a45      	ldr	r2, [pc, #276]	; (80060d8 <HAL_GPIO_Init+0x300>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <HAL_GPIO_Init+0x1f2>
 8005fc6:	2304      	movs	r3, #4
 8005fc8:	e008      	b.n	8005fdc <HAL_GPIO_Init+0x204>
 8005fca:	2307      	movs	r3, #7
 8005fcc:	e006      	b.n	8005fdc <HAL_GPIO_Init+0x204>
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e004      	b.n	8005fdc <HAL_GPIO_Init+0x204>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e002      	b.n	8005fdc <HAL_GPIO_Init+0x204>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <HAL_GPIO_Init+0x204>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	f002 0203 	and.w	r2, r2, #3
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	4093      	lsls	r3, r2
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fec:	4935      	ldr	r1, [pc, #212]	; (80060c4 <HAL_GPIO_Init+0x2ec>)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	3302      	adds	r3, #2
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ffa:	4b38      	ldr	r3, [pc, #224]	; (80060dc <HAL_GPIO_Init+0x304>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	43db      	mvns	r3, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800601e:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <HAL_GPIO_Init+0x304>)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006024:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <HAL_GPIO_Init+0x304>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006048:	4a24      	ldr	r2, [pc, #144]	; (80060dc <HAL_GPIO_Init+0x304>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800604e:	4b23      	ldr	r3, [pc, #140]	; (80060dc <HAL_GPIO_Init+0x304>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006072:	4a1a      	ldr	r2, [pc, #104]	; (80060dc <HAL_GPIO_Init+0x304>)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <HAL_GPIO_Init+0x304>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	43db      	mvns	r3, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4013      	ands	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800609c:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <HAL_GPIO_Init+0x304>)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	f67f aea2 	bls.w	8005df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	3724      	adds	r7, #36	; 0x24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40013800 	.word	0x40013800
 80060c8:	40020000 	.word	0x40020000
 80060cc:	40020400 	.word	0x40020400
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020c00 	.word	0x40020c00
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40013c00 	.word	0x40013c00

080060e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060f0:	787b      	ldrb	r3, [r7, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060fc:	e003      	b.n	8006106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	041a      	lsls	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	619a      	str	r2, [r3, #24]
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d006      	beq.n	8006138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800612a:	4a05      	ldr	r2, [pc, #20]	; (8006140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	4618      	mov	r0, r3
 8006134:	f7fc f848 	bl	80021c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40013c00 	.word	0x40013c00

08006144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e12b      	b.n	80063ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fe f80a 	bl	8004184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061a8:	f003 f8ac 	bl	8009304 <HAL_RCC_GetPCLK1Freq>
 80061ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4a81      	ldr	r2, [pc, #516]	; (80063b8 <HAL_I2C_Init+0x274>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d807      	bhi.n	80061c8 <HAL_I2C_Init+0x84>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a80      	ldr	r2, [pc, #512]	; (80063bc <HAL_I2C_Init+0x278>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	bf94      	ite	ls
 80061c0:	2301      	movls	r3, #1
 80061c2:	2300      	movhi	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e006      	b.n	80061d6 <HAL_I2C_Init+0x92>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a7d      	ldr	r2, [pc, #500]	; (80063c0 <HAL_I2C_Init+0x27c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	bf94      	ite	ls
 80061d0:	2301      	movls	r3, #1
 80061d2:	2300      	movhi	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0e7      	b.n	80063ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a78      	ldr	r2, [pc, #480]	; (80063c4 <HAL_I2C_Init+0x280>)
 80061e2:	fba2 2303 	umull	r2, r3, r2, r3
 80061e6:	0c9b      	lsrs	r3, r3, #18
 80061e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a6a      	ldr	r2, [pc, #424]	; (80063b8 <HAL_I2C_Init+0x274>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d802      	bhi.n	8006218 <HAL_I2C_Init+0xd4>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	3301      	adds	r3, #1
 8006216:	e009      	b.n	800622c <HAL_I2C_Init+0xe8>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	4a69      	ldr	r2, [pc, #420]	; (80063c8 <HAL_I2C_Init+0x284>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	099b      	lsrs	r3, r3, #6
 800622a:	3301      	adds	r3, #1
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800623e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	495c      	ldr	r1, [pc, #368]	; (80063b8 <HAL_I2C_Init+0x274>)
 8006248:	428b      	cmp	r3, r1
 800624a:	d819      	bhi.n	8006280 <HAL_I2C_Init+0x13c>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1e59      	subs	r1, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	fbb1 f3f3 	udiv	r3, r1, r3
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006260:	400b      	ands	r3, r1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_I2C_Init+0x138>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1e59      	subs	r1, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	fbb1 f3f3 	udiv	r3, r1, r3
 8006274:	3301      	adds	r3, #1
 8006276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627a:	e051      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 800627c:	2304      	movs	r3, #4
 800627e:	e04f      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d111      	bne.n	80062ac <HAL_I2C_Init+0x168>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1e58      	subs	r0, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	440b      	add	r3, r1
 8006296:	fbb0 f3f3 	udiv	r3, r0, r3
 800629a:	3301      	adds	r3, #1
 800629c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e012      	b.n	80062d2 <HAL_I2C_Init+0x18e>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1e58      	subs	r0, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6859      	ldr	r1, [r3, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	0099      	lsls	r1, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	fbb0 f3f3 	udiv	r3, r0, r3
 80062c2:	3301      	adds	r3, #1
 80062c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Init+0x196>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e022      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10e      	bne.n	8006300 <HAL_I2C_Init+0x1bc>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1e58      	subs	r0, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	440b      	add	r3, r1
 80062f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fe:	e00f      	b.n	8006320 <HAL_I2C_Init+0x1dc>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1e58      	subs	r0, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6859      	ldr	r1, [r3, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	0099      	lsls	r1, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	fbb0 f3f3 	udiv	r3, r0, r3
 8006316:	3301      	adds	r3, #1
 8006318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800631c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	6809      	ldr	r1, [r1, #0]
 8006324:	4313      	orrs	r3, r2
 8006326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800634e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6911      	ldr	r1, [r2, #16]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68d2      	ldr	r2, [r2, #12]
 800635a:	4311      	orrs	r1, r2
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	000186a0 	.word	0x000186a0
 80063bc:	001e847f 	.word	0x001e847f
 80063c0:	003d08ff 	.word	0x003d08ff
 80063c4:	431bde83 	.word	0x431bde83
 80063c8:	10624dd3 	.word	0x10624dd3

080063cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	461a      	mov	r2, r3
 80063d8:	460b      	mov	r3, r1
 80063da:	817b      	strh	r3, [r7, #10]
 80063dc:	4613      	mov	r3, r2
 80063de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063e0:	f7fe fd08 	bl	8004df4 <HAL_GetTick>
 80063e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	f040 80e0 	bne.w	80065b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2319      	movs	r3, #25
 80063fa:	2201      	movs	r2, #1
 80063fc:	4970      	ldr	r1, [pc, #448]	; (80065c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f002 f8e6 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
 800640c:	e0d3      	b.n	80065b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_I2C_Master_Transmit+0x50>
 8006418:	2302      	movs	r3, #2
 800641a:	e0cc      	b.n	80065b6 <HAL_I2C_Master_Transmit+0x1ea>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b01      	cmp	r3, #1
 8006430:	d007      	beq.n	8006442 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0201 	orr.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2221      	movs	r2, #33	; 0x21
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2210      	movs	r2, #16
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	893a      	ldrh	r2, [r7, #8]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a50      	ldr	r2, [pc, #320]	; (80065c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006484:	8979      	ldrh	r1, [r7, #10]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f001 fea8 	bl	80081e0 <I2C_MasterRequestWrite>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e08d      	b.n	80065b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80064b0:	e066      	b.n	8006580 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	6a39      	ldr	r1, [r7, #32]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f002 f960 	bl	800877c <I2C_WaitOnTXEFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d107      	bne.n	80064da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e06b      	b.n	80065b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b04      	cmp	r3, #4
 800651a:	d11b      	bne.n	8006554 <HAL_I2C_Master_Transmit+0x188>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d017      	beq.n	8006554 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	781a      	ldrb	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	6a39      	ldr	r1, [r7, #32]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f002 f950 	bl	80087fe <I2C_WaitOnBTFFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00d      	beq.n	8006580 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	2b04      	cmp	r3, #4
 800656a:	d107      	bne.n	800657c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e01a      	b.n	80065b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	d194      	bne.n	80064b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e000      	b.n	80065b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
  }
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	00100002 	.word	0x00100002
 80065c4:	ffff0000 	.word	0xffff0000

080065c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	; 0x30
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	461a      	mov	r2, r3
 80065d4:	460b      	mov	r3, r1
 80065d6:	817b      	strh	r3, [r7, #10]
 80065d8:	4613      	mov	r3, r2
 80065da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065dc:	f7fe fc0a 	bl	8004df4 <HAL_GetTick>
 80065e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	f040 820b 	bne.w	8006a06 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2319      	movs	r3, #25
 80065f6:	2201      	movs	r2, #1
 80065f8:	497c      	ldr	r1, [pc, #496]	; (80067ec <HAL_I2C_Master_Receive+0x224>)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f001 ffe8 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	e1fe      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006610:	2b01      	cmp	r3, #1
 8006612:	d101      	bne.n	8006618 <HAL_I2C_Master_Receive+0x50>
 8006614:	2302      	movs	r3, #2
 8006616:	e1f7      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d007      	beq.n	800663e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800664c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2222      	movs	r2, #34	; 0x22
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2210      	movs	r2, #16
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	893a      	ldrh	r2, [r7, #8]
 800666e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4a5c      	ldr	r2, [pc, #368]	; (80067f0 <HAL_I2C_Master_Receive+0x228>)
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006680:	8979      	ldrh	r1, [r7, #10]
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f001 fe2c 	bl	80082e4 <I2C_MasterRequestRead>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e1b8      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d113      	bne.n	80066c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669e:	2300      	movs	r3, #0
 80066a0:	623b      	str	r3, [r7, #32]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	623b      	str	r3, [r7, #32]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e18c      	b.n	80069e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d11b      	bne.n	8006706 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e16c      	b.n	80069e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	2b02      	cmp	r3, #2
 800670c:	d11b      	bne.n	8006746 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800672c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672e:	2300      	movs	r3, #0
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	e14c      	b.n	80069e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800676c:	e138      	b.n	80069e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006772:	2b03      	cmp	r3, #3
 8006774:	f200 80f1 	bhi.w	800695a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677c:	2b01      	cmp	r3, #1
 800677e:	d123      	bne.n	80067c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f002 f8ad 	bl	80088e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e139      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067c6:	e10b      	b.n	80069e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d14e      	bne.n	800686e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	2200      	movs	r2, #0
 80067d8:	4906      	ldr	r1, [pc, #24]	; (80067f4 <HAL_I2C_Master_Receive+0x22c>)
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f001 fef8 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d008      	beq.n	80067f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e10e      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
 80067ea:	bf00      	nop
 80067ec:	00100002 	.word	0x00100002
 80067f0:	ffff0000 	.word	0xffff0000
 80067f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691a      	ldr	r2, [r3, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800686c:	e0b8      	b.n	80069e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	2200      	movs	r2, #0
 8006876:	4966      	ldr	r1, [pc, #408]	; (8006a10 <HAL_I2C_Master_Receive+0x448>)
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f001 fea9 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0bf      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2200      	movs	r2, #0
 80068d2:	494f      	ldr	r1, [pc, #316]	; (8006a10 <HAL_I2C_Master_Receive+0x448>)
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f001 fe7b 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e091      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006958:	e042      	b.n	80069e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800695a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f001 ffc0 	bl	80088e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e04c      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691a      	ldr	r2, [r3, #16]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d118      	bne.n	80069e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f47f aec2 	bne.w	800676e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a06:	2302      	movs	r3, #2
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3728      	adds	r7, #40	; 0x28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	00010004 	.word	0x00010004

08006a14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d003      	beq.n	8006a4c <HAL_I2C_EV_IRQHandler+0x38>
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	f040 80c1 	bne.w	8006bce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10d      	bne.n	8006a82 <HAL_I2C_EV_IRQHandler+0x6e>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a6c:	d003      	beq.n	8006a76 <HAL_I2C_EV_IRQHandler+0x62>
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a74:	d101      	bne.n	8006a7a <HAL_I2C_EV_IRQHandler+0x66>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_I2C_EV_IRQHandler+0x68>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f000 8132 	beq.w	8006ce6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00c      	beq.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x92>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	0a5b      	lsrs	r3, r3, #9
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 ffa8 	bl	80089ee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fd83 	bl	80075aa <I2C_Master_SB>
 8006aa4:	e092      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	08db      	lsrs	r3, r3, #3
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	0a5b      	lsrs	r3, r3, #9
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fdf9 	bl	80076b6 <I2C_Master_ADD10>
 8006ac4:	e082      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	0a5b      	lsrs	r3, r3, #9
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fe13 	bl	800770a <I2C_Master_ADDR>
 8006ae4:	e072      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	089b      	lsrs	r3, r3, #2
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d03b      	beq.n	8006b6a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b00:	f000 80f3 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00f      	beq.n	8006b30 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	0a9b      	lsrs	r3, r3, #10
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d009      	beq.n	8006b30 <HAL_I2C_EV_IRQHandler+0x11c>
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	089b      	lsrs	r3, r3, #2
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f9f3 	bl	8006f14 <I2C_MasterTransmit_TXE>
 8006b2e:	e04d      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80d6 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	0a5b      	lsrs	r3, r3, #9
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 80cf 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	2b21      	cmp	r3, #33	; 0x21
 8006b50:	d103      	bne.n	8006b5a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa7a 	bl	800704c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b58:	e0c7      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	f040 80c4 	bne.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fae8 	bl	8007138 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b68:	e0bf      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b78:	f000 80b7 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	099b      	lsrs	r3, r3, #6
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <HAL_I2C_EV_IRQHandler+0x194>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	0a9b      	lsrs	r3, r3, #10
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d009      	beq.n	8006ba8 <HAL_I2C_EV_IRQHandler+0x194>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d103      	bne.n	8006ba8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fb5d 	bl	8007260 <I2C_MasterReceive_RXNE>
 8006ba6:	e011      	b.n	8006bcc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 809a 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	0a5b      	lsrs	r3, r3, #9
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8093 	beq.w	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc06 	bl	80073d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bca:	e08e      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
 8006bcc:	e08d      	b.n	8006cea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	e007      	b.n	8006bf0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d012      	beq.n	8006c22 <HAL_I2C_EV_IRQHandler+0x20e>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	0a5b      	lsrs	r3, r3, #9
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006c18:	69b9      	ldr	r1, [r7, #24]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 ffc4 	bl	8007ba8 <I2C_Slave_ADDR>
 8006c20:	e066      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	091b      	lsrs	r3, r3, #4
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d009      	beq.n	8006c42 <HAL_I2C_EV_IRQHandler+0x22e>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	0a5b      	lsrs	r3, r3, #9
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fffe 	bl	8007c3c <I2C_Slave_STOPF>
 8006c40:	e056      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b21      	cmp	r3, #33	; 0x21
 8006c46:	d002      	beq.n	8006c4e <HAL_I2C_EV_IRQHandler+0x23a>
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b29      	cmp	r3, #41	; 0x29
 8006c4c:	d125      	bne.n	8006c9a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	09db      	lsrs	r3, r3, #7
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00f      	beq.n	8006c7a <HAL_I2C_EV_IRQHandler+0x266>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	0a9b      	lsrs	r3, r3, #10
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <HAL_I2C_EV_IRQHandler+0x266>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	089b      	lsrs	r3, r3, #2
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 feda 	bl	8007a2c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c78:	e039      	b.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	089b      	lsrs	r3, r3, #2
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d033      	beq.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	0a5b      	lsrs	r3, r3, #9
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d02d      	beq.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 ff07 	bl	8007aa6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c98:	e029      	b.n	8006cee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	099b      	lsrs	r3, r3, #6
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00f      	beq.n	8006cc6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	0a9b      	lsrs	r3, r3, #10
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	089b      	lsrs	r3, r3, #2
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 ff12 	bl	8007ae8 <I2C_SlaveReceive_RXNE>
 8006cc4:	e014      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	089b      	lsrs	r3, r3, #2
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	0a5b      	lsrs	r3, r3, #9
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 ff40 	bl	8007b64 <I2C_SlaveReceive_BTF>
 8006ce4:	e004      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006ce6:	bf00      	nop
 8006ce8:	e002      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b08a      	sub	sp, #40	; 0x28
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	0a1b      	lsrs	r3, r3, #8
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00e      	beq.n	8006d44 <HAL_I2C_ER_IRQHandler+0x4e>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d008      	beq.n	8006d44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	0a5b      	lsrs	r3, r3, #9
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00e      	beq.n	8006d6e <HAL_I2C_ER_IRQHandler+0x78>
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006d6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	0a9b      	lsrs	r3, r3, #10
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d03f      	beq.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d039      	beq.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006d86:	7efb      	ldrb	r3, [r7, #27]
 8006d88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006da0:	7ebb      	ldrb	r3, [r7, #26]
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d112      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10f      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	2b21      	cmp	r3, #33	; 0x21
 8006db0:	d008      	beq.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	2b29      	cmp	r3, #41	; 0x29
 8006db6:	d005      	beq.n	8006dc4 <HAL_I2C_ER_IRQHandler+0xce>
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	2b28      	cmp	r3, #40	; 0x28
 8006dbc:	d106      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b21      	cmp	r3, #33	; 0x21
 8006dc2:	d103      	bne.n	8006dcc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 f869 	bl	8007e9c <I2C_Slave_AF>
 8006dca:	e016      	b.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dd4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	f043 0304 	orr.w	r3, r3, #4
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dde:	7efb      	ldrb	r3, [r7, #27]
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d002      	beq.n	8006dea <HAL_I2C_ER_IRQHandler+0xf4>
 8006de4:	7efb      	ldrb	r3, [r7, #27]
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d107      	bne.n	8006dfa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	0adb      	lsrs	r3, r3, #11
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <HAL_I2C_ER_IRQHandler+0x12e>
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	f043 0308 	orr.w	r3, r3, #8
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006e22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d008      	beq.n	8006e3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 f8a0 	bl	8007f7c <I2C_ITError>
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3728      	adds	r7, #40	; 0x28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d150      	bne.n	8006fdc <I2C_MasterTransmit_TXE+0xc8>
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b21      	cmp	r3, #33	; 0x21
 8006f3e:	d14d      	bne.n	8006fdc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d01d      	beq.n	8006f82 <I2C_MasterTransmit_TXE+0x6e>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d01a      	beq.n	8006f82 <I2C_MasterTransmit_TXE+0x6e>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f52:	d016      	beq.n	8006f82 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f62:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2211      	movs	r2, #17
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff ff62 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f80:	e060      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f90:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d107      	bne.n	8006fcc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff7d 	bl	8006ec4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fca:	e03b      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff35 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fda:	e033      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b21      	cmp	r3, #33	; 0x21
 8006fe0:	d005      	beq.n	8006fee <I2C_MasterTransmit_TXE+0xda>
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d12d      	bne.n	8007044 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b22      	cmp	r3, #34	; 0x22
 8006fec:	d12a      	bne.n	8007044 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d108      	bne.n	800700a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007006:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007008:	e01c      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d103      	bne.n	800701e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f88e 	bl	8007138 <I2C_MemoryTransmit_TXE_BTF>
}
 800701c:	e012      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	781a      	ldrb	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007042:	e7ff      	b.n	8007044 <I2C_MasterTransmit_TXE+0x130>
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b21      	cmp	r3, #33	; 0x21
 8007064:	d164      	bne.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	781a      	ldrb	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007094:	e04c      	b.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d01d      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d01a      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070a8:	d016      	beq.n	80070d8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070b8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2211      	movs	r2, #17
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff feb7 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
}
 80070d6:	e02b      	b.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070e6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070f6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d107      	bne.n	8007122 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fed2 	bl	8006ec4 <HAL_I2C_MemTxCpltCallback>
}
 8007120:	e006      	b.n	8007130 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fe8a 	bl	8006e44 <HAL_I2C_MasterTxCpltCallback>
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007146:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800714c:	2b00      	cmp	r3, #0
 800714e:	d11d      	bne.n	800718c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10b      	bne.n	8007170 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715c:	b2da      	uxtb	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	1c9a      	adds	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800716e:	e073      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007174:	b29b      	uxth	r3, r3
 8007176:	121b      	asrs	r3, r3, #8
 8007178:	b2da      	uxtb	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	651a      	str	r2, [r3, #80]	; 0x50
}
 800718a:	e065      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10b      	bne.n	80071ac <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071aa:	e055      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d151      	bne.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b22      	cmp	r3, #34	; 0x22
 80071b8:	d10d      	bne.n	80071d6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071c8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071d4:	e040      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d015      	beq.n	800720c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	2b21      	cmp	r3, #33	; 0x21
 80071e4:	d112      	bne.n	800720c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800720a:	e025      	b.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d120      	bne.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	2b21      	cmp	r3, #33	; 0x21
 800721a:	d11d      	bne.n	8007258 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800722a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800723a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fe36 	bl	8006ec4 <HAL_I2C_MemTxCpltCallback>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b22      	cmp	r3, #34	; 0x22
 8007272:	f040 80ac 	bne.w	80073ce <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727a:	b29b      	uxth	r3, r3
 800727c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d921      	bls.n	80072c8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	f040 808c 	bne.w	80073ce <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80072c6:	e082      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d075      	beq.n	80073bc <I2C_MasterReceive_RXNE+0x15c>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d002      	beq.n	80072dc <I2C_MasterReceive_RXNE+0x7c>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d16f      	bne.n	80073bc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 facf 	bl	8008880 <I2C_WaitOnSTOPRequestThroughIT>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d142      	bne.n	800736e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007306:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691a      	ldr	r2, [r3, #16]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d10a      	bne.n	8007358 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fdc1 	bl	8006ed8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007356:	e03a      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2212      	movs	r2, #18
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff fd76 	bl	8006e58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800736c:	e02f      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800737c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff fd99 	bl	8006eec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073ba:	e008      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ca:	605a      	str	r2, [r3, #4]
}
 80073cc:	e7ff      	b.n	80073ce <I2C_MasterReceive_RXNE+0x16e>
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d11b      	bne.n	8007426 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007424:	e0bd      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b03      	cmp	r3, #3
 800742e:	d129      	bne.n	8007484 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d00a      	beq.n	800745c <I2C_MasterReceive_BTF+0x86>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d007      	beq.n	800745c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007482:	e08e      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d176      	bne.n	800757c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d002      	beq.n	800749a <I2C_MasterReceive_BTF+0xc4>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b10      	cmp	r3, #16
 8007498:	d108      	bne.n	80074ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e019      	b.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d002      	beq.n	80074b8 <I2C_MasterReceive_BTF+0xe2>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d108      	bne.n	80074ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e00a      	b.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d007      	beq.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800753a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d10a      	bne.n	8007566 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fcba 	bl	8006ed8 <HAL_I2C_MemRxCpltCallback>
}
 8007564:	e01d      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2212      	movs	r2, #18
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fc6f 	bl	8006e58 <HAL_I2C_MasterRxCpltCallback>
}
 800757a:	e012      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d117      	bne.n	80075ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80075d8:	e067      	b.n	80076aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	611a      	str	r2, [r3, #16]
}
 80075ec:	e05d      	b.n	80076aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075f6:	d133      	bne.n	8007660 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b21      	cmp	r3, #33	; 0x21
 8007602:	d109      	bne.n	8007618 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	b2db      	uxtb	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007614:	611a      	str	r2, [r3, #16]
 8007616:	e008      	b.n	800762a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f043 0301 	orr.w	r3, r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <I2C_Master_SB+0x92>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d108      	bne.n	800764e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d032      	beq.n	80076aa <I2C_Master_SB+0x100>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d02d      	beq.n	80076aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765c:	605a      	str	r2, [r3, #4]
}
 800765e:	e024      	b.n	80076aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10e      	bne.n	8007686 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766c:	b29b      	uxth	r3, r3
 800766e:	11db      	asrs	r3, r3, #7
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 0306 	and.w	r3, r3, #6
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f063 030f 	orn	r3, r3, #15
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	611a      	str	r2, [r3, #16]
}
 8007684:	e011      	b.n	80076aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10d      	bne.n	80076aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	b29b      	uxth	r3, r3
 8007694:	11db      	asrs	r3, r3, #7
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0306 	and.w	r3, r3, #6
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f063 030e 	orn	r3, r3, #14
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	611a      	str	r2, [r3, #16]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <I2C_Master_ADD10+0x26>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d108      	bne.n	80076ee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00c      	beq.n	80076fe <I2C_Master_ADD10+0x48>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076fc:	605a      	str	r2, [r3, #4]
  }
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800770a:	b480      	push	{r7}
 800770c:	b091      	sub	sp, #68	; 0x44
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b22      	cmp	r3, #34	; 0x22
 8007732:	f040 8169 	bne.w	8007a08 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <I2C_Master_ADDR+0x54>
 800773e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d10b      	bne.n	800775e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007746:	2300      	movs	r3, #0
 8007748:	633b      	str	r3, [r7, #48]	; 0x30
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	e160      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11d      	bne.n	80077a2 <I2C_Master_ADDR+0x98>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800776e:	d118      	bne.n	80077a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007770:	2300      	movs	r3, #0
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007794:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	651a      	str	r2, [r3, #80]	; 0x50
 80077a0:	e13e      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d113      	bne.n	80077d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ac:	2300      	movs	r3, #0
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e115      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	f040 808a 	bne.w	80078f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077e6:	d137      	bne.n	8007858 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007806:	d113      	bne.n	8007830 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	e0e7      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007830:	2300      	movs	r3, #0
 8007832:	623b      	str	r3, [r7, #32]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	e0d3      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	2b08      	cmp	r3, #8
 800785c:	d02e      	beq.n	80078bc <I2C_Master_ADDR+0x1b2>
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	2b20      	cmp	r3, #32
 8007862:	d02b      	beq.n	80078bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	2b12      	cmp	r3, #18
 8007868:	d102      	bne.n	8007870 <I2C_Master_ADDR+0x166>
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	2b01      	cmp	r3, #1
 800786e:	d125      	bne.n	80078bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00e      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	2b02      	cmp	r3, #2
 800787a:	d00b      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	2b10      	cmp	r3, #16
 8007880:	d008      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e007      	b.n	80078a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	e0a1      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e085      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d14d      	bne.n	800799a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2b04      	cmp	r3, #4
 8007902:	d016      	beq.n	8007932 <I2C_Master_ADDR+0x228>
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	2b02      	cmp	r3, #2
 8007908:	d013      	beq.n	8007932 <I2C_Master_ADDR+0x228>
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	2b10      	cmp	r3, #16
 800790e:	d010      	beq.n	8007932 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800791e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e007      	b.n	8007942 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007940:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007950:	d117      	bne.n	8007982 <I2C_Master_ADDR+0x278>
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007958:	d00b      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	2b01      	cmp	r3, #1
 800795e:	d008      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	2b08      	cmp	r3, #8
 8007964:	d005      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	2b10      	cmp	r3, #16
 800796a:	d002      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	2b20      	cmp	r3, #32
 8007970:	d107      	bne.n	8007982 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007980:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	e032      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b8:	d117      	bne.n	80079ea <I2C_Master_ADDR+0x2e0>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079c0:	d00b      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d008      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d005      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d002      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d107      	bne.n	80079ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ea:	2300      	movs	r3, #0
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a06:	e00b      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
}
 8007a1e:	e7ff      	b.n	8007a20 <I2C_Master_ADDR+0x316>
 8007a20:	bf00      	nop
 8007a22:	3744      	adds	r7, #68	; 0x44
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02b      	beq.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	781a      	ldrb	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d114      	bne.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b29      	cmp	r3, #41	; 0x29
 8007a78:	d111      	bne.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a88:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2221      	movs	r2, #33	; 0x21
 8007a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2228      	movs	r2, #40	; 0x28
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff f9e7 	bl	8006e6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d011      	beq.n	8007adc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02c      	beq.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d114      	bne.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b2a      	cmp	r3, #42	; 0x2a
 8007b36:	d111      	bne.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2222      	movs	r2, #34	; 0x22
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2228      	movs	r2, #40	; 0x28
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff f992 	bl	8006e80 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d012      	beq.n	8007b9c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bc2:	2b28      	cmp	r3, #40	; 0x28
 8007bc4:	d127      	bne.n	8007c16 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	089b      	lsrs	r3, r3, #2
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	09db      	lsrs	r3, r3, #7
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	81bb      	strh	r3, [r7, #12]
 8007bf8:	e002      	b.n	8007c00 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c08:	89ba      	ldrh	r2, [r7, #12]
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff f940 	bl	8006e94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c14:	e00e      	b.n	8007c34 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0201 	orr.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c98:	d172      	bne.n	8007d80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b22      	cmp	r3, #34	; 0x22
 8007c9e:	d002      	beq.n	8007ca6 <I2C_Slave_STOPF+0x6a>
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ca4:	d135      	bne.n	8007d12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	f043 0204 	orr.w	r2, r3, #4
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd ff8c 	bl	8005bfc <HAL_DMA_GetState>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d049      	beq.n	8007d7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	4a69      	ldr	r2, [pc, #420]	; (8007e94 <I2C_Slave_STOPF+0x258>)
 8007cf0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fd fdd4 	bl	80058a4 <HAL_DMA_Abort_IT>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03d      	beq.n	8007d7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d10:	e035      	b.n	8007d7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f043 0204 	orr.w	r2, r3, #4
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd ff56 	bl	8005bfc <HAL_DMA_GetState>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d014      	beq.n	8007d80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	4a4e      	ldr	r2, [pc, #312]	; (8007e94 <I2C_Slave_STOPF+0x258>)
 8007d5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd fd9e 	bl	80058a4 <HAL_DMA_Abort_IT>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	e000      	b.n	8007d80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d03e      	beq.n	8007e08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d112      	bne.n	8007dbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d112      	bne.n	8007df2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	f043 0204 	orr.w	r2, r3, #4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f8b3 	bl	8007f7c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e16:	e039      	b.n	8007e8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d109      	bne.n	8007e32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2228      	movs	r2, #40	; 0x28
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff f827 	bl	8006e80 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b28      	cmp	r3, #40	; 0x28
 8007e3c:	d111      	bne.n	8007e62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <I2C_Slave_STOPF+0x25c>)
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff f828 	bl	8006eb0 <HAL_I2C_ListenCpltCallback>
}
 8007e60:	e014      	b.n	8007e8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	2b22      	cmp	r3, #34	; 0x22
 8007e68:	d002      	beq.n	8007e70 <I2C_Slave_STOPF+0x234>
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b22      	cmp	r3, #34	; 0x22
 8007e6e:	d10d      	bne.n	8007e8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe fffa 	bl	8006e80 <HAL_I2C_SlaveRxCpltCallback>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	08008481 	.word	0x08008481
 8007e98:	ffff0000 	.word	0xffff0000

08007e9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d002      	beq.n	8007ebe <I2C_Slave_AF+0x22>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d129      	bne.n	8007f12 <I2C_Slave_AF+0x76>
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	2b28      	cmp	r3, #40	; 0x28
 8007ec2:	d126      	bne.n	8007f12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a2c      	ldr	r2, [pc, #176]	; (8007f78 <I2C_Slave_AF+0xdc>)
 8007ec8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ed8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ee2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fe ffd0 	bl	8006eb0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007f10:	e02e      	b.n	8007f70 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b21      	cmp	r3, #33	; 0x21
 8007f16:	d126      	bne.n	8007f66 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <I2C_Slave_AF+0xdc>)
 8007f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2221      	movs	r2, #33	; 0x21
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fe ff84 	bl	8006e6c <HAL_I2C_SlaveTxCpltCallback>
}
 8007f64:	e004      	b.n	8007f70 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f6e:	615a      	str	r2, [r3, #20]
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	ffff0000 	.word	0xffff0000

08007f7c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d002      	beq.n	8007fa0 <I2C_ITError+0x24>
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b40      	cmp	r3, #64	; 0x40
 8007f9e:	d10a      	bne.n	8007fb6 <I2C_ITError+0x3a>
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b22      	cmp	r3, #34	; 0x22
 8007fa4:	d107      	bne.n	8007fb6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fb4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fbc:	2b28      	cmp	r3, #40	; 0x28
 8007fbe:	d107      	bne.n	8007fd0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2228      	movs	r2, #40	; 0x28
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fce:	e015      	b.n	8007ffc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fde:	d00a      	beq.n	8007ff6 <I2C_ITError+0x7a>
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b60      	cmp	r3, #96	; 0x60
 8007fe4:	d007      	beq.n	8007ff6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800a:	d162      	bne.n	80080d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800801a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b01      	cmp	r3, #1
 8008028:	d020      	beq.n	800806c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802e:	4a6a      	ldr	r2, [pc, #424]	; (80081d8 <I2C_ITError+0x25c>)
 8008030:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008036:	4618      	mov	r0, r3
 8008038:	f7fd fc34 	bl	80058a4 <HAL_DMA_Abort_IT>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8089 	beq.w	8008156 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008066:	4610      	mov	r0, r2
 8008068:	4798      	blx	r3
 800806a:	e074      	b.n	8008156 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	4a59      	ldr	r2, [pc, #356]	; (80081d8 <I2C_ITError+0x25c>)
 8008072:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	4618      	mov	r0, r3
 800807a:	f7fd fc13 	bl	80058a4 <HAL_DMA_Abort_IT>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d068      	beq.n	8008156 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d10b      	bne.n	80080aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691a      	ldr	r2, [r3, #16]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080cc:	4610      	mov	r0, r2
 80080ce:	4798      	blx	r3
 80080d0:	e041      	b.n	8008156 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b60      	cmp	r3, #96	; 0x60
 80080dc:	d125      	bne.n	800812a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d10b      	bne.n	8008112 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fe feec 	bl	8006f00 <HAL_I2C_AbortCpltCallback>
 8008128:	e015      	b.n	8008156 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008134:	2b40      	cmp	r3, #64	; 0x40
 8008136:	d10b      	bne.n	8008150 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7fe fecb 	bl	8006eec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10e      	bne.n	8008184 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008192:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d113      	bne.n	80081d0 <I2C_ITError+0x254>
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	2b28      	cmp	r3, #40	; 0x28
 80081ac:	d110      	bne.n	80081d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <I2C_ITError+0x260>)
 80081b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7fe fe70 	bl	8006eb0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	08008481 	.word	0x08008481
 80081dc:	ffff0000 	.word	0xffff0000

080081e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	460b      	mov	r3, r1
 80081ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d006      	beq.n	800820a <I2C_MasterRequestWrite+0x2a>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d003      	beq.n	800820a <I2C_MasterRequestWrite+0x2a>
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008208:	d108      	bne.n	800821c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e00b      	b.n	8008234 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008220:	2b12      	cmp	r3, #18
 8008222:	d107      	bne.n	8008234 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f9c5 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00d      	beq.n	8008268 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800825a:	d103      	bne.n	8008264 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e035      	b.n	80082d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008270:	d108      	bne.n	8008284 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008272:	897b      	ldrh	r3, [r7, #10]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008280:	611a      	str	r2, [r3, #16]
 8008282:	e01b      	b.n	80082bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008284:	897b      	ldrh	r3, [r7, #10]
 8008286:	11db      	asrs	r3, r3, #7
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0306 	and.w	r3, r3, #6
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f063 030f 	orn	r3, r3, #15
 8008294:	b2da      	uxtb	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	490e      	ldr	r1, [pc, #56]	; (80082dc <I2C_MasterRequestWrite+0xfc>)
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f9eb 	bl	800867e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e010      	b.n	80082d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082b2:	897b      	ldrh	r3, [r7, #10]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	4907      	ldr	r1, [pc, #28]	; (80082e0 <I2C_MasterRequestWrite+0x100>)
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f9db 	bl	800867e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e000      	b.n	80082d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	00010008 	.word	0x00010008
 80082e0:	00010002 	.word	0x00010002

080082e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	607a      	str	r2, [r7, #4]
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	460b      	mov	r3, r1
 80082f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008308:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b08      	cmp	r3, #8
 800830e:	d006      	beq.n	800831e <I2C_MasterRequestRead+0x3a>
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d003      	beq.n	800831e <I2C_MasterRequestRead+0x3a>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800831c:	d108      	bne.n	8008330 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e00b      	b.n	8008348 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	2b11      	cmp	r3, #17
 8008336:	d107      	bne.n	8008348 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f93b 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00d      	beq.n	800837c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800836e:	d103      	bne.n	8008378 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e079      	b.n	8008470 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008384:	d108      	bne.n	8008398 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008386:	897b      	ldrh	r3, [r7, #10]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	b2da      	uxtb	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	611a      	str	r2, [r3, #16]
 8008396:	e05f      	b.n	8008458 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008398:	897b      	ldrh	r3, [r7, #10]
 800839a:	11db      	asrs	r3, r3, #7
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f003 0306 	and.w	r3, r3, #6
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	f063 030f 	orn	r3, r3, #15
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	4930      	ldr	r1, [pc, #192]	; (8008478 <I2C_MasterRequestRead+0x194>)
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f961 	bl	800867e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e054      	b.n	8008470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80083c6:	897b      	ldrh	r3, [r7, #10]
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4929      	ldr	r1, [pc, #164]	; (800847c <I2C_MasterRequestRead+0x198>)
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 f951 	bl	800867e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e044      	b.n	8008470 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083e6:	2300      	movs	r3, #0
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	613b      	str	r3, [r7, #16]
 80083fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800840a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 f8d9 	bl	80085d0 <I2C_WaitOnFlagUntilTimeout>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00d      	beq.n	8008440 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008432:	d103      	bne.n	800843c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800843a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e017      	b.n	8008470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008440:	897b      	ldrh	r3, [r7, #10]
 8008442:	11db      	asrs	r3, r3, #7
 8008444:	b2db      	uxtb	r3, r3
 8008446:	f003 0306 	and.w	r3, r3, #6
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f063 030e 	orn	r3, r3, #14
 8008450:	b2da      	uxtb	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	4907      	ldr	r1, [pc, #28]	; (800847c <I2C_MasterRequestRead+0x198>)
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f90d 	bl	800867e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	00010008 	.word	0x00010008
 800847c:	00010002 	.word	0x00010002

08008480 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008498:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800849a:	4b4b      	ldr	r3, [pc, #300]	; (80085c8 <I2C_DMAAbort+0x148>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	4a4a      	ldr	r2, [pc, #296]	; (80085cc <I2C_DMAAbort+0x14c>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	0a1a      	lsrs	r2, r3, #8
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	00da      	lsls	r2, r3, #3
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	f043 0220 	orr.w	r2, r3, #32
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80084c6:	e00a      	b.n	80084de <I2C_DMAAbort+0x5e>
    }
    count--;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084dc:	d0ea      	beq.n	80084b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ea:	2200      	movs	r2, #0
 80084ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	2200      	movs	r2, #0
 80084fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800850c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2200      	movs	r2, #0
 8008512:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	2200      	movs	r2, #0
 8008522:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	2200      	movs	r2, #0
 8008532:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0201 	bic.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b60      	cmp	r3, #96	; 0x60
 800854e:	d10e      	bne.n	800856e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2200      	movs	r2, #0
 8008564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008566:	6978      	ldr	r0, [r7, #20]
 8008568:	f7fe fcca 	bl	8006f00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800856c:	e027      	b.n	80085be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800856e:	7cfb      	ldrb	r3, [r7, #19]
 8008570:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008574:	2b28      	cmp	r3, #40	; 0x28
 8008576:	d117      	bne.n	80085a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0201 	orr.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008596:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2228      	movs	r2, #40	; 0x28
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085a6:	e007      	b.n	80085b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80085b8:	6978      	ldr	r0, [r7, #20]
 80085ba:	f7fe fc97 	bl	8006eec <HAL_I2C_ErrorCallback>
}
 80085be:	bf00      	nop
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	2000000c 	.word	0x2000000c
 80085cc:	14f8b589 	.word	0x14f8b589

080085d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	4613      	mov	r3, r2
 80085de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e0:	e025      	b.n	800862e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e8:	d021      	beq.n	800862e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ea:	f7fc fc03 	bl	8004df4 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d302      	bcc.n	8008600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d116      	bne.n	800862e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f043 0220 	orr.w	r2, r3, #32
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e023      	b.n	8008676 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	0c1b      	lsrs	r3, r3, #16
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	d10d      	bne.n	8008654 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	43da      	mvns	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4013      	ands	r3, r2
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	bf0c      	ite	eq
 800864a:	2301      	moveq	r3, #1
 800864c:	2300      	movne	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	e00c      	b.n	800866e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	43da      	mvns	r2, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4013      	ands	r3, r2
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	bf0c      	ite	eq
 8008666:	2301      	moveq	r3, #1
 8008668:	2300      	movne	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	429a      	cmp	r2, r3
 8008672:	d0b6      	beq.n	80085e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	607a      	str	r2, [r7, #4]
 800868a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800868c:	e051      	b.n	8008732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869c:	d123      	bne.n	80086e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	f043 0204 	orr.w	r2, r3, #4
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e046      	b.n	8008774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ec:	d021      	beq.n	8008732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ee:	f7fc fb81 	bl	8004df4 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d116      	bne.n	8008732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2220      	movs	r2, #32
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	f043 0220 	orr.w	r2, r3, #32
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e020      	b.n	8008774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	0c1b      	lsrs	r3, r3, #16
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b01      	cmp	r3, #1
 800873a:	d10c      	bne.n	8008756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	43da      	mvns	r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4013      	ands	r3, r2
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	bf14      	ite	ne
 800874e:	2301      	movne	r3, #1
 8008750:	2300      	moveq	r3, #0
 8008752:	b2db      	uxtb	r3, r3
 8008754:	e00b      	b.n	800876e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	43da      	mvns	r2, r3
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	4013      	ands	r3, r2
 8008762:	b29b      	uxth	r3, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	bf14      	ite	ne
 8008768:	2301      	movne	r3, #1
 800876a:	2300      	moveq	r3, #0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d18d      	bne.n	800868e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008788:	e02d      	b.n	80087e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f900 	bl	8008990 <I2C_IsAcknowledgeFailed>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e02d      	b.n	80087f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087a0:	d021      	beq.n	80087e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a2:	f7fc fb27 	bl	8004df4 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d302      	bcc.n	80087b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d116      	bne.n	80087e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e007      	b.n	80087f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f0:	2b80      	cmp	r3, #128	; 0x80
 80087f2:	d1ca      	bne.n	800878a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800880a:	e02d      	b.n	8008868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f8bf 	bl	8008990 <I2C_IsAcknowledgeFailed>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e02d      	b.n	8008878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008822:	d021      	beq.n	8008868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008824:	f7fc fae6 	bl	8004df4 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	429a      	cmp	r2, r3
 8008832:	d302      	bcc.n	800883a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d116      	bne.n	8008868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2220      	movs	r2, #32
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	f043 0220 	orr.w	r2, r3, #32
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e007      	b.n	8008878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d1ca      	bne.n	800880c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800888c:	4b13      	ldr	r3, [pc, #76]	; (80088dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	08db      	lsrs	r3, r3, #3
 8008892:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	0a1a      	lsrs	r2, r3, #8
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d107      	bne.n	80088be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	f043 0220 	orr.w	r2, r3, #32
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e008      	b.n	80088d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088cc:	d0e9      	beq.n	80088a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	2000000c 	.word	0x2000000c
 80088e0:	14f8b589 	.word	0x14f8b589

080088e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088f0:	e042      	b.n	8008978 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	f003 0310 	and.w	r3, r3, #16
 80088fc:	2b10      	cmp	r3, #16
 80088fe:	d119      	bne.n	8008934 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0210 	mvn.w	r2, #16
 8008908:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2220      	movs	r2, #32
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e029      	b.n	8008988 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008934:	f7fc fa5e 	bl	8004df4 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	429a      	cmp	r2, r3
 8008942:	d302      	bcc.n	800894a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d116      	bne.n	8008978 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2220      	movs	r2, #32
 8008954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	f043 0220 	orr.w	r2, r3, #32
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e007      	b.n	8008988 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d1b5      	bne.n	80088f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089a6:	d11b      	bne.n	80089e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	f043 0204 	orr.w	r2, r3, #4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e000      	b.n	80089e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80089fe:	d103      	bne.n	8008a08 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a06:	e007      	b.n	8008a18 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a10:	d102      	bne.n	8008a18 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2208      	movs	r2, #8
 8008a16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e267      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d075      	beq.n	8008b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a42:	4b88      	ldr	r3, [pc, #544]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 030c 	and.w	r3, r3, #12
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d00c      	beq.n	8008a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a4e:	4b85      	ldr	r3, [pc, #532]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	d112      	bne.n	8008a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a5a:	4b82      	ldr	r3, [pc, #520]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a66:	d10b      	bne.n	8008a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a68:	4b7e      	ldr	r3, [pc, #504]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d05b      	beq.n	8008b2c <HAL_RCC_OscConfig+0x108>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d157      	bne.n	8008b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e242      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a88:	d106      	bne.n	8008a98 <HAL_RCC_OscConfig+0x74>
 8008a8a:	4b76      	ldr	r3, [pc, #472]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a75      	ldr	r2, [pc, #468]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	e01d      	b.n	8008ad4 <HAL_RCC_OscConfig+0xb0>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008aa0:	d10c      	bne.n	8008abc <HAL_RCC_OscConfig+0x98>
 8008aa2:	4b70      	ldr	r3, [pc, #448]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a6f      	ldr	r2, [pc, #444]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	4b6d      	ldr	r3, [pc, #436]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a6c      	ldr	r2, [pc, #432]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e00b      	b.n	8008ad4 <HAL_RCC_OscConfig+0xb0>
 8008abc:	4b69      	ldr	r3, [pc, #420]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a68      	ldr	r2, [pc, #416]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	4b66      	ldr	r3, [pc, #408]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a65      	ldr	r2, [pc, #404]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d013      	beq.n	8008b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008adc:	f7fc f98a 	bl	8004df4 <HAL_GetTick>
 8008ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ae4:	f7fc f986 	bl	8004df4 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b64      	cmp	r3, #100	; 0x64
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e207      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008af6:	4b5b      	ldr	r3, [pc, #364]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f0      	beq.n	8008ae4 <HAL_RCC_OscConfig+0xc0>
 8008b02:	e014      	b.n	8008b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b04:	f7fc f976 	bl	8004df4 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b0c:	f7fc f972 	bl	8004df4 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b64      	cmp	r3, #100	; 0x64
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e1f3      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b1e:	4b51      	ldr	r3, [pc, #324]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1f0      	bne.n	8008b0c <HAL_RCC_OscConfig+0xe8>
 8008b2a:	e000      	b.n	8008b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d063      	beq.n	8008c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b3a:	4b4a      	ldr	r3, [pc, #296]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 030c 	and.w	r3, r3, #12
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00b      	beq.n	8008b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b46:	4b47      	ldr	r3, [pc, #284]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008b4e:	2b08      	cmp	r3, #8
 8008b50:	d11c      	bne.n	8008b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b52:	4b44      	ldr	r3, [pc, #272]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d116      	bne.n	8008b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b5e:	4b41      	ldr	r3, [pc, #260]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <HAL_RCC_OscConfig+0x152>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d001      	beq.n	8008b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e1c7      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b76:	4b3b      	ldr	r3, [pc, #236]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	4937      	ldr	r1, [pc, #220]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b8a:	e03a      	b.n	8008c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d020      	beq.n	8008bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b94:	4b34      	ldr	r3, [pc, #208]	; (8008c68 <HAL_RCC_OscConfig+0x244>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b9a:	f7fc f92b 	bl	8004df4 <HAL_GetTick>
 8008b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ba2:	f7fc f927 	bl	8004df4 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e1a8      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bb4:	4b2b      	ldr	r3, [pc, #172]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0f0      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc0:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4925      	ldr	r1, [pc, #148]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	600b      	str	r3, [r1, #0]
 8008bd4:	e015      	b.n	8008c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bd6:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <HAL_RCC_OscConfig+0x244>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bdc:	f7fc f90a 	bl	8004df4 <HAL_GetTick>
 8008be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008be4:	f7fc f906 	bl	8004df4 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e187      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bf6:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0302 	and.w	r3, r3, #2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d036      	beq.n	8008c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d016      	beq.n	8008c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c16:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <HAL_RCC_OscConfig+0x248>)
 8008c18:	2201      	movs	r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c1c:	f7fc f8ea 	bl	8004df4 <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c24:	f7fc f8e6 	bl	8004df4 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e167      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <HAL_RCC_OscConfig+0x240>)
 8008c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0f0      	beq.n	8008c24 <HAL_RCC_OscConfig+0x200>
 8008c42:	e01b      	b.n	8008c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c44:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <HAL_RCC_OscConfig+0x248>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c4a:	f7fc f8d3 	bl	8004df4 <HAL_GetTick>
 8008c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c50:	e00e      	b.n	8008c70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c52:	f7fc f8cf 	bl	8004df4 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d907      	bls.n	8008c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e150      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
 8008c64:	40023800 	.word	0x40023800
 8008c68:	42470000 	.word	0x42470000
 8008c6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c70:	4b88      	ldr	r3, [pc, #544]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1ea      	bne.n	8008c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8097 	beq.w	8008db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c8e:	4b81      	ldr	r3, [pc, #516]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10f      	bne.n	8008cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	4b7d      	ldr	r3, [pc, #500]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	4a7c      	ldr	r2, [pc, #496]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8008caa:	4b7a      	ldr	r3, [pc, #488]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb2:	60bb      	str	r3, [r7, #8]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cba:	4b77      	ldr	r3, [pc, #476]	; (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d118      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cc6:	4b74      	ldr	r3, [pc, #464]	; (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a73      	ldr	r2, [pc, #460]	; (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cd2:	f7fc f88f 	bl	8004df4 <HAL_GetTick>
 8008cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cd8:	e008      	b.n	8008cec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cda:	f7fc f88b 	bl	8004df4 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d901      	bls.n	8008cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e10c      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cec:	4b6a      	ldr	r3, [pc, #424]	; (8008e98 <HAL_RCC_OscConfig+0x474>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0f0      	beq.n	8008cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d106      	bne.n	8008d0e <HAL_RCC_OscConfig+0x2ea>
 8008d00:	4b64      	ldr	r3, [pc, #400]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d04:	4a63      	ldr	r2, [pc, #396]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d0c:	e01c      	b.n	8008d48 <HAL_RCC_OscConfig+0x324>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b05      	cmp	r3, #5
 8008d14:	d10c      	bne.n	8008d30 <HAL_RCC_OscConfig+0x30c>
 8008d16:	4b5f      	ldr	r3, [pc, #380]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1a:	4a5e      	ldr	r2, [pc, #376]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d1c:	f043 0304 	orr.w	r3, r3, #4
 8008d20:	6713      	str	r3, [r2, #112]	; 0x70
 8008d22:	4b5c      	ldr	r3, [pc, #368]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	4a5b      	ldr	r2, [pc, #364]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d28:	f043 0301 	orr.w	r3, r3, #1
 8008d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d2e:	e00b      	b.n	8008d48 <HAL_RCC_OscConfig+0x324>
 8008d30:	4b58      	ldr	r3, [pc, #352]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d34:	4a57      	ldr	r2, [pc, #348]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d36:	f023 0301 	bic.w	r3, r3, #1
 8008d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d3c:	4b55      	ldr	r3, [pc, #340]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d40:	4a54      	ldr	r2, [pc, #336]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d42:	f023 0304 	bic.w	r3, r3, #4
 8008d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d015      	beq.n	8008d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d50:	f7fc f850 	bl	8004df4 <HAL_GetTick>
 8008d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d56:	e00a      	b.n	8008d6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d58:	f7fc f84c 	bl	8004df4 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e0cb      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d6e:	4b49      	ldr	r3, [pc, #292]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d72:	f003 0302 	and.w	r3, r3, #2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ee      	beq.n	8008d58 <HAL_RCC_OscConfig+0x334>
 8008d7a:	e014      	b.n	8008da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d7c:	f7fc f83a 	bl	8004df4 <HAL_GetTick>
 8008d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d82:	e00a      	b.n	8008d9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d84:	f7fc f836 	bl	8004df4 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e0b5      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d9a:	4b3e      	ldr	r3, [pc, #248]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1ee      	bne.n	8008d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d105      	bne.n	8008db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dac:	4b39      	ldr	r3, [pc, #228]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db0:	4a38      	ldr	r2, [pc, #224]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008db6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 80a1 	beq.w	8008f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008dc2:	4b34      	ldr	r3, [pc, #208]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 030c 	and.w	r3, r3, #12
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d05c      	beq.n	8008e88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d141      	bne.n	8008e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dd6:	4b31      	ldr	r3, [pc, #196]	; (8008e9c <HAL_RCC_OscConfig+0x478>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ddc:	f7fc f80a 	bl	8004df4 <HAL_GetTick>
 8008de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008de2:	e008      	b.n	8008df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008de4:	f7fc f806 	bl	8004df4 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d901      	bls.n	8008df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e087      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008df6:	4b27      	ldr	r3, [pc, #156]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1f0      	bne.n	8008de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	69da      	ldr	r2, [r3, #28]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	019b      	lsls	r3, r3, #6
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e18:	085b      	lsrs	r3, r3, #1
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	041b      	lsls	r3, r3, #16
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	061b      	lsls	r3, r3, #24
 8008e26:	491b      	ldr	r1, [pc, #108]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e2c:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <HAL_RCC_OscConfig+0x478>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e32:	f7fb ffdf 	bl	8004df4 <HAL_GetTick>
 8008e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e38:	e008      	b.n	8008e4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e3a:	f7fb ffdb 	bl	8004df4 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e05c      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e4c:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0f0      	beq.n	8008e3a <HAL_RCC_OscConfig+0x416>
 8008e58:	e054      	b.n	8008f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5a:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <HAL_RCC_OscConfig+0x478>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e60:	f7fb ffc8 	bl	8004df4 <HAL_GetTick>
 8008e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e68:	f7fb ffc4 	bl	8004df4 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e045      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e7a:	4b06      	ldr	r3, [pc, #24]	; (8008e94 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f0      	bne.n	8008e68 <HAL_RCC_OscConfig+0x444>
 8008e86:	e03d      	b.n	8008f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d107      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e038      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
 8008e94:	40023800 	.word	0x40023800
 8008e98:	40007000 	.word	0x40007000
 8008e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ea0:	4b1b      	ldr	r3, [pc, #108]	; (8008f10 <HAL_RCC_OscConfig+0x4ec>)
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d028      	beq.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d121      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d11a      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d111      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee6:	085b      	lsrs	r3, r3, #1
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d107      	bne.n	8008f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d001      	beq.n	8008f04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	40023800 	.word	0x40023800

08008f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0cc      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f28:	4b68      	ldr	r3, [pc, #416]	; (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d90c      	bls.n	8008f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f36:	4b65      	ldr	r3, [pc, #404]	; (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f3e:	4b63      	ldr	r3, [pc, #396]	; (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d001      	beq.n	8008f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e0b8      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d020      	beq.n	8008f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f68:	4b59      	ldr	r3, [pc, #356]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	4a58      	ldr	r2, [pc, #352]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0308 	and.w	r3, r3, #8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f80:	4b53      	ldr	r3, [pc, #332]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	4a52      	ldr	r2, [pc, #328]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f8c:	4b50      	ldr	r3, [pc, #320]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	494d      	ldr	r1, [pc, #308]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d044      	beq.n	8009034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d107      	bne.n	8008fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fb2:	4b47      	ldr	r3, [pc, #284]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d119      	bne.n	8008ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e07f      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d003      	beq.n	8008fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d107      	bne.n	8008fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fd2:	4b3f      	ldr	r3, [pc, #252]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e06f      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fe2:	4b3b      	ldr	r3, [pc, #236]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e067      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ff2:	4b37      	ldr	r3, [pc, #220]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f023 0203 	bic.w	r2, r3, #3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4934      	ldr	r1, [pc, #208]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009000:	4313      	orrs	r3, r2
 8009002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009004:	f7fb fef6 	bl	8004df4 <HAL_GetTick>
 8009008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800900a:	e00a      	b.n	8009022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800900c:	f7fb fef2 	bl	8004df4 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	f241 3288 	movw	r2, #5000	; 0x1388
 800901a:	4293      	cmp	r3, r2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e04f      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009022:	4b2b      	ldr	r3, [pc, #172]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 020c 	and.w	r2, r3, #12
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	429a      	cmp	r2, r3
 8009032:	d1eb      	bne.n	800900c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009034:	4b25      	ldr	r3, [pc, #148]	; (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d20c      	bcs.n	800905c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009042:	4b22      	ldr	r3, [pc, #136]	; (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800904a:	4b20      	ldr	r3, [pc, #128]	; (80090cc <HAL_RCC_ClockConfig+0x1b8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	429a      	cmp	r2, r3
 8009056:	d001      	beq.n	800905c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e032      	b.n	80090c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b00      	cmp	r3, #0
 8009066:	d008      	beq.n	800907a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009068:	4b19      	ldr	r3, [pc, #100]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	4916      	ldr	r1, [pc, #88]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009076:	4313      	orrs	r3, r2
 8009078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009086:	4b12      	ldr	r3, [pc, #72]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	490e      	ldr	r1, [pc, #56]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 8009096:	4313      	orrs	r3, r2
 8009098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800909a:	f000 f821 	bl	80090e0 <HAL_RCC_GetSysClockFreq>
 800909e:	4602      	mov	r2, r0
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <HAL_RCC_ClockConfig+0x1bc>)
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	091b      	lsrs	r3, r3, #4
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	490a      	ldr	r1, [pc, #40]	; (80090d4 <HAL_RCC_ClockConfig+0x1c0>)
 80090ac:	5ccb      	ldrb	r3, [r1, r3]
 80090ae:	fa22 f303 	lsr.w	r3, r2, r3
 80090b2:	4a09      	ldr	r2, [pc, #36]	; (80090d8 <HAL_RCC_ClockConfig+0x1c4>)
 80090b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80090b6:	4b09      	ldr	r3, [pc, #36]	; (80090dc <HAL_RCC_ClockConfig+0x1c8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fb fa28 	bl	8004510 <HAL_InitTick>

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	40023c00 	.word	0x40023c00
 80090d0:	40023800 	.word	0x40023800
 80090d4:	0801ec40 	.word	0x0801ec40
 80090d8:	2000000c 	.word	0x2000000c
 80090dc:	20000024 	.word	0x20000024

080090e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090e4:	b094      	sub	sp, #80	; 0x50
 80090e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	647b      	str	r3, [r7, #68]	; 0x44
 80090ec:	2300      	movs	r3, #0
 80090ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090f0:	2300      	movs	r3, #0
 80090f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090f8:	4b79      	ldr	r3, [pc, #484]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 030c 	and.w	r3, r3, #12
 8009100:	2b08      	cmp	r3, #8
 8009102:	d00d      	beq.n	8009120 <HAL_RCC_GetSysClockFreq+0x40>
 8009104:	2b08      	cmp	r3, #8
 8009106:	f200 80e1 	bhi.w	80092cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_RCC_GetSysClockFreq+0x34>
 800910e:	2b04      	cmp	r3, #4
 8009110:	d003      	beq.n	800911a <HAL_RCC_GetSysClockFreq+0x3a>
 8009112:	e0db      	b.n	80092cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009114:	4b73      	ldr	r3, [pc, #460]	; (80092e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009116:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009118:	e0db      	b.n	80092d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800911a:	4b73      	ldr	r3, [pc, #460]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800911c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800911e:	e0d8      	b.n	80092d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009120:	4b6f      	ldr	r3, [pc, #444]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009128:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800912a:	4b6d      	ldr	r3, [pc, #436]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d063      	beq.n	80091fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009136:	4b6a      	ldr	r3, [pc, #424]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	099b      	lsrs	r3, r3, #6
 800913c:	2200      	movs	r2, #0
 800913e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009140:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009148:	633b      	str	r3, [r7, #48]	; 0x30
 800914a:	2300      	movs	r3, #0
 800914c:	637b      	str	r3, [r7, #52]	; 0x34
 800914e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	f04f 0000 	mov.w	r0, #0
 800915a:	f04f 0100 	mov.w	r1, #0
 800915e:	0159      	lsls	r1, r3, #5
 8009160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009164:	0150      	lsls	r0, r2, #5
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4621      	mov	r1, r4
 800916c:	1a51      	subs	r1, r2, r1
 800916e:	6139      	str	r1, [r7, #16]
 8009170:	4629      	mov	r1, r5
 8009172:	eb63 0301 	sbc.w	r3, r3, r1
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	f04f 0300 	mov.w	r3, #0
 8009180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009184:	4659      	mov	r1, fp
 8009186:	018b      	lsls	r3, r1, #6
 8009188:	4651      	mov	r1, sl
 800918a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800918e:	4651      	mov	r1, sl
 8009190:	018a      	lsls	r2, r1, #6
 8009192:	4651      	mov	r1, sl
 8009194:	ebb2 0801 	subs.w	r8, r2, r1
 8009198:	4659      	mov	r1, fp
 800919a:	eb63 0901 	sbc.w	r9, r3, r1
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	f04f 0300 	mov.w	r3, #0
 80091a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091b2:	4690      	mov	r8, r2
 80091b4:	4699      	mov	r9, r3
 80091b6:	4623      	mov	r3, r4
 80091b8:	eb18 0303 	adds.w	r3, r8, r3
 80091bc:	60bb      	str	r3, [r7, #8]
 80091be:	462b      	mov	r3, r5
 80091c0:	eb49 0303 	adc.w	r3, r9, r3
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	f04f 0200 	mov.w	r2, #0
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80091d2:	4629      	mov	r1, r5
 80091d4:	024b      	lsls	r3, r1, #9
 80091d6:	4621      	mov	r1, r4
 80091d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80091dc:	4621      	mov	r1, r4
 80091de:	024a      	lsls	r2, r1, #9
 80091e0:	4610      	mov	r0, r2
 80091e2:	4619      	mov	r1, r3
 80091e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e6:	2200      	movs	r2, #0
 80091e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091f0:	f7f7 fdb2 	bl	8000d58 <__aeabi_uldivmod>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4613      	mov	r3, r2
 80091fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091fc:	e058      	b.n	80092b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091fe:	4b38      	ldr	r3, [pc, #224]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	099b      	lsrs	r3, r3, #6
 8009204:	2200      	movs	r2, #0
 8009206:	4618      	mov	r0, r3
 8009208:	4611      	mov	r1, r2
 800920a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800920e:	623b      	str	r3, [r7, #32]
 8009210:	2300      	movs	r3, #0
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
 8009214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	f04f 0000 	mov.w	r0, #0
 8009220:	f04f 0100 	mov.w	r1, #0
 8009224:	0159      	lsls	r1, r3, #5
 8009226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800922a:	0150      	lsls	r0, r2, #5
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4641      	mov	r1, r8
 8009232:	ebb2 0a01 	subs.w	sl, r2, r1
 8009236:	4649      	mov	r1, r9
 8009238:	eb63 0b01 	sbc.w	fp, r3, r1
 800923c:	f04f 0200 	mov.w	r2, #0
 8009240:	f04f 0300 	mov.w	r3, #0
 8009244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800924c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009250:	ebb2 040a 	subs.w	r4, r2, sl
 8009254:	eb63 050b 	sbc.w	r5, r3, fp
 8009258:	f04f 0200 	mov.w	r2, #0
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	00eb      	lsls	r3, r5, #3
 8009262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009266:	00e2      	lsls	r2, r4, #3
 8009268:	4614      	mov	r4, r2
 800926a:	461d      	mov	r5, r3
 800926c:	4643      	mov	r3, r8
 800926e:	18e3      	adds	r3, r4, r3
 8009270:	603b      	str	r3, [r7, #0]
 8009272:	464b      	mov	r3, r9
 8009274:	eb45 0303 	adc.w	r3, r5, r3
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	f04f 0200 	mov.w	r2, #0
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009286:	4629      	mov	r1, r5
 8009288:	028b      	lsls	r3, r1, #10
 800928a:	4621      	mov	r1, r4
 800928c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009290:	4621      	mov	r1, r4
 8009292:	028a      	lsls	r2, r1, #10
 8009294:	4610      	mov	r0, r2
 8009296:	4619      	mov	r1, r3
 8009298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929a:	2200      	movs	r2, #0
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	61fa      	str	r2, [r7, #28]
 80092a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092a4:	f7f7 fd58 	bl	8000d58 <__aeabi_uldivmod>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4613      	mov	r3, r2
 80092ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80092b0:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	0c1b      	lsrs	r3, r3, #16
 80092b6:	f003 0303 	and.w	r3, r3, #3
 80092ba:	3301      	adds	r3, #1
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80092c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80092ca:	e002      	b.n	80092d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80092ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80092d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3750      	adds	r7, #80	; 0x50
 80092d8:	46bd      	mov	sp, r7
 80092da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092de:	bf00      	nop
 80092e0:	40023800 	.word	0x40023800
 80092e4:	00f42400 	.word	0x00f42400
 80092e8:	007a1200 	.word	0x007a1200

080092ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092f0:	4b03      	ldr	r3, [pc, #12]	; (8009300 <HAL_RCC_GetHCLKFreq+0x14>)
 80092f2:	681b      	ldr	r3, [r3, #0]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	2000000c 	.word	0x2000000c

08009304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009308:	f7ff fff0 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 800930c:	4602      	mov	r2, r0
 800930e:	4b05      	ldr	r3, [pc, #20]	; (8009324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	0a9b      	lsrs	r3, r3, #10
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	4903      	ldr	r1, [pc, #12]	; (8009328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800931a:	5ccb      	ldrb	r3, [r1, r3]
 800931c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009320:	4618      	mov	r0, r3
 8009322:	bd80      	pop	{r7, pc}
 8009324:	40023800 	.word	0x40023800
 8009328:	0801ec50 	.word	0x0801ec50

0800932c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009330:	f7ff ffdc 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 8009334:	4602      	mov	r2, r0
 8009336:	4b05      	ldr	r3, [pc, #20]	; (800934c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	0b5b      	lsrs	r3, r3, #13
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	4903      	ldr	r1, [pc, #12]	; (8009350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009342:	5ccb      	ldrb	r3, [r1, r3]
 8009344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009348:	4618      	mov	r0, r3
 800934a:	bd80      	pop	{r7, pc}
 800934c:	40023800 	.word	0x40023800
 8009350:	0801ec50 	.word	0x0801ec50

08009354 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	220f      	movs	r2, #15
 8009362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009364:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 0203 	and.w	r2, r3, #3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009370:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <HAL_RCC_GetClockConfig+0x5c>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800937c:	4b0c      	ldr	r3, [pc, #48]	; (80093b0 <HAL_RCC_GetClockConfig+0x5c>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009388:	4b09      	ldr	r3, [pc, #36]	; (80093b0 <HAL_RCC_GetClockConfig+0x5c>)
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	08db      	lsrs	r3, r3, #3
 800938e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009396:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <HAL_RCC_GetClockConfig+0x60>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0207 	and.w	r2, r3, #7
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	601a      	str	r2, [r3, #0]
}
 80093a2:	bf00      	nop
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	40023800 	.word	0x40023800
 80093b4:	40023c00 	.word	0x40023c00

080093b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e041      	b.n	800944e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f839 	bl	8009456 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3304      	adds	r3, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f000 fc7a 	bl	8009cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
	...

0800946c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b01      	cmp	r3, #1
 800947e:	d001      	beq.n	8009484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e044      	b.n	800950e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0201 	orr.w	r2, r2, #1
 800949a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a1e      	ldr	r2, [pc, #120]	; (800951c <HAL_TIM_Base_Start_IT+0xb0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d018      	beq.n	80094d8 <HAL_TIM_Base_Start_IT+0x6c>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ae:	d013      	beq.n	80094d8 <HAL_TIM_Base_Start_IT+0x6c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a1a      	ldr	r2, [pc, #104]	; (8009520 <HAL_TIM_Base_Start_IT+0xb4>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00e      	beq.n	80094d8 <HAL_TIM_Base_Start_IT+0x6c>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a19      	ldr	r2, [pc, #100]	; (8009524 <HAL_TIM_Base_Start_IT+0xb8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d009      	beq.n	80094d8 <HAL_TIM_Base_Start_IT+0x6c>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a17      	ldr	r2, [pc, #92]	; (8009528 <HAL_TIM_Base_Start_IT+0xbc>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d004      	beq.n	80094d8 <HAL_TIM_Base_Start_IT+0x6c>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a16      	ldr	r2, [pc, #88]	; (800952c <HAL_TIM_Base_Start_IT+0xc0>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d111      	bne.n	80094fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b06      	cmp	r3, #6
 80094e8:	d010      	beq.n	800950c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f042 0201 	orr.w	r2, r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fa:	e007      	b.n	800950c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f042 0201 	orr.w	r2, r2, #1
 800950a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40010000 	.word	0x40010000
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40000c00 	.word	0x40000c00
 800952c:	40014000 	.word	0x40014000

08009530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d109      	bne.n	8009554 <HAL_TIM_PWM_Start+0x24>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b01      	cmp	r3, #1
 800954a:	bf14      	ite	ne
 800954c:	2301      	movne	r3, #1
 800954e:	2300      	moveq	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	e022      	b.n	800959a <HAL_TIM_PWM_Start+0x6a>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2b04      	cmp	r3, #4
 8009558:	d109      	bne.n	800956e <HAL_TIM_PWM_Start+0x3e>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b01      	cmp	r3, #1
 8009564:	bf14      	ite	ne
 8009566:	2301      	movne	r3, #1
 8009568:	2300      	moveq	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	e015      	b.n	800959a <HAL_TIM_PWM_Start+0x6a>
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b08      	cmp	r3, #8
 8009572:	d109      	bne.n	8009588 <HAL_TIM_PWM_Start+0x58>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b01      	cmp	r3, #1
 800957e:	bf14      	ite	ne
 8009580:	2301      	movne	r3, #1
 8009582:	2300      	moveq	r3, #0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	e008      	b.n	800959a <HAL_TIM_PWM_Start+0x6a>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b01      	cmp	r3, #1
 8009592:	bf14      	ite	ne
 8009594:	2301      	movne	r3, #1
 8009596:	2300      	moveq	r3, #0
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e068      	b.n	8009674 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <HAL_TIM_PWM_Start+0x82>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095b0:	e013      	b.n	80095da <HAL_TIM_PWM_Start+0xaa>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d104      	bne.n	80095c2 <HAL_TIM_PWM_Start+0x92>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095c0:	e00b      	b.n	80095da <HAL_TIM_PWM_Start+0xaa>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d104      	bne.n	80095d2 <HAL_TIM_PWM_Start+0xa2>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095d0:	e003      	b.n	80095da <HAL_TIM_PWM_Start+0xaa>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2202      	movs	r2, #2
 80095d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2201      	movs	r2, #1
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fd90 	bl	800a108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a23      	ldr	r2, [pc, #140]	; (800967c <HAL_TIM_PWM_Start+0x14c>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d107      	bne.n	8009602 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1d      	ldr	r2, [pc, #116]	; (800967c <HAL_TIM_PWM_Start+0x14c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d018      	beq.n	800963e <HAL_TIM_PWM_Start+0x10e>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009614:	d013      	beq.n	800963e <HAL_TIM_PWM_Start+0x10e>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a19      	ldr	r2, [pc, #100]	; (8009680 <HAL_TIM_PWM_Start+0x150>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00e      	beq.n	800963e <HAL_TIM_PWM_Start+0x10e>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a17      	ldr	r2, [pc, #92]	; (8009684 <HAL_TIM_PWM_Start+0x154>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d009      	beq.n	800963e <HAL_TIM_PWM_Start+0x10e>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a16      	ldr	r2, [pc, #88]	; (8009688 <HAL_TIM_PWM_Start+0x158>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d004      	beq.n	800963e <HAL_TIM_PWM_Start+0x10e>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a14      	ldr	r2, [pc, #80]	; (800968c <HAL_TIM_PWM_Start+0x15c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d111      	bne.n	8009662 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b06      	cmp	r3, #6
 800964e:	d010      	beq.n	8009672 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009660:	e007      	b.n	8009672 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0201 	orr.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	40010000 	.word	0x40010000
 8009680:	40000400 	.word	0x40000400
 8009684:	40000800 	.word	0x40000800
 8009688:	40000c00 	.word	0x40000c00
 800968c:	40014000 	.word	0x40014000

08009690 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e097      	b.n	80097d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d106      	bne.n	80096be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f88f 	bl	80097dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2202      	movs	r2, #2
 80096c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6812      	ldr	r2, [r2, #0]
 80096d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d4:	f023 0307 	bic.w	r3, r3, #7
 80096d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f000 fb03 	bl	8009cf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	4313      	orrs	r3, r2
 800970a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	4313      	orrs	r3, r2
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009730:	f023 030c 	bic.w	r3, r3, #12
 8009734:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800973c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	4313      	orrs	r3, r2
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4313      	orrs	r3, r2
 8009752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	011a      	lsls	r2, r3, #4
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	031b      	lsls	r3, r3, #12
 8009760:	4313      	orrs	r3, r2
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800976e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009776:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	4313      	orrs	r3, r2
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009800:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009808:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009810:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009818:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d110      	bne.n	8009842 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d102      	bne.n	800982c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009826:	7b7b      	ldrb	r3, [r7, #13]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d001      	beq.n	8009830 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e069      	b.n	8009904 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009840:	e031      	b.n	80098a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b04      	cmp	r3, #4
 8009846:	d110      	bne.n	800986a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d102      	bne.n	8009854 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800984e:	7b3b      	ldrb	r3, [r7, #12]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d001      	beq.n	8009858 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e055      	b.n	8009904 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009868:	e01d      	b.n	80098a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d108      	bne.n	8009882 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d105      	bne.n	8009882 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009876:	7b7b      	ldrb	r3, [r7, #13]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d102      	bne.n	8009882 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800987c:	7b3b      	ldrb	r3, [r7, #12]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d001      	beq.n	8009886 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e03e      	b.n	8009904 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2202      	movs	r2, #2
 800989a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2202      	movs	r2, #2
 80098a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <HAL_TIM_Encoder_Start+0xc4>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	d008      	beq.n	80098c4 <HAL_TIM_Encoder_Start+0xd4>
 80098b2:	e00f      	b.n	80098d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2201      	movs	r2, #1
 80098ba:	2100      	movs	r1, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fc23 	bl	800a108 <TIM_CCxChannelCmd>
      break;
 80098c2:	e016      	b.n	80098f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2201      	movs	r2, #1
 80098ca:	2104      	movs	r1, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fc1b 	bl	800a108 <TIM_CCxChannelCmd>
      break;
 80098d2:	e00e      	b.n	80098f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2201      	movs	r2, #1
 80098da:	2100      	movs	r1, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fc13 	bl	800a108 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2201      	movs	r2, #1
 80098e8:	2104      	movs	r1, #4
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fc0c 	bl	800a108 <TIM_CCxChannelCmd>
      break;
 80098f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f042 0201 	orr.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b02      	cmp	r3, #2
 8009920:	d122      	bne.n	8009968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f003 0302 	and.w	r3, r3, #2
 800992c:	2b02      	cmp	r3, #2
 800992e:	d11b      	bne.n	8009968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f06f 0202 	mvn.w	r2, #2
 8009938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f9b0 	bl	8009cb4 <HAL_TIM_IC_CaptureCallback>
 8009954:	e005      	b.n	8009962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f9a2 	bl	8009ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9b3 	bl	8009cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b04      	cmp	r3, #4
 8009974:	d122      	bne.n	80099bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b04      	cmp	r3, #4
 8009982:	d11b      	bne.n	80099bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f06f 0204 	mvn.w	r2, #4
 800998c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2202      	movs	r2, #2
 8009992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f986 	bl	8009cb4 <HAL_TIM_IC_CaptureCallback>
 80099a8:	e005      	b.n	80099b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f978 	bl	8009ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f989 	bl	8009cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b08      	cmp	r3, #8
 80099c8:	d122      	bne.n	8009a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d11b      	bne.n	8009a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f06f 0208 	mvn.w	r2, #8
 80099e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2204      	movs	r2, #4
 80099e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f95c 	bl	8009cb4 <HAL_TIM_IC_CaptureCallback>
 80099fc:	e005      	b.n	8009a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f94e 	bl	8009ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f95f 	bl	8009cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	f003 0310 	and.w	r3, r3, #16
 8009a1a:	2b10      	cmp	r3, #16
 8009a1c:	d122      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d11b      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f06f 0210 	mvn.w	r2, #16
 8009a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2208      	movs	r2, #8
 8009a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d003      	beq.n	8009a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f932 	bl	8009cb4 <HAL_TIM_IC_CaptureCallback>
 8009a50:	e005      	b.n	8009a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f924 	bl	8009ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f935 	bl	8009cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d10e      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d107      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0201 	mvn.w	r2, #1
 8009a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7f9 fdf8 	bl	8003680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a9a:	2b80      	cmp	r3, #128	; 0x80
 8009a9c:	d10e      	bne.n	8009abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa8:	2b80      	cmp	r3, #128	; 0x80
 8009aaa:	d107      	bne.n	8009abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fb55 	bl	800a166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac6:	2b40      	cmp	r3, #64	; 0x40
 8009ac8:	d10e      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad4:	2b40      	cmp	r3, #64	; 0x40
 8009ad6:	d107      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f8fa 	bl	8009cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	f003 0320 	and.w	r3, r3, #32
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d10e      	bne.n	8009b14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d107      	bne.n	8009b14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f06f 0220 	mvn.w	r2, #32
 8009b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fb1f 	bl	800a152 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d101      	bne.n	8009b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b36:	2302      	movs	r3, #2
 8009b38:	e0ae      	b.n	8009c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b0c      	cmp	r3, #12
 8009b46:	f200 809f 	bhi.w	8009c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b4a:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009b85 	.word	0x08009b85
 8009b54:	08009c89 	.word	0x08009c89
 8009b58:	08009c89 	.word	0x08009c89
 8009b5c:	08009c89 	.word	0x08009c89
 8009b60:	08009bc5 	.word	0x08009bc5
 8009b64:	08009c89 	.word	0x08009c89
 8009b68:	08009c89 	.word	0x08009c89
 8009b6c:	08009c89 	.word	0x08009c89
 8009b70:	08009c07 	.word	0x08009c07
 8009b74:	08009c89 	.word	0x08009c89
 8009b78:	08009c89 	.word	0x08009c89
 8009b7c:	08009c89 	.word	0x08009c89
 8009b80:	08009c47 	.word	0x08009c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f930 	bl	8009df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	699a      	ldr	r2, [r3, #24]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0208 	orr.w	r2, r2, #8
 8009b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699a      	ldr	r2, [r3, #24]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0204 	bic.w	r2, r2, #4
 8009bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6999      	ldr	r1, [r3, #24]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	691a      	ldr	r2, [r3, #16]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	619a      	str	r2, [r3, #24]
      break;
 8009bc2:	e064      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f976 	bl	8009ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699a      	ldr	r2, [r3, #24]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6999      	ldr	r1, [r3, #24]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	021a      	lsls	r2, r3, #8
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	619a      	str	r2, [r3, #24]
      break;
 8009c04:	e043      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68b9      	ldr	r1, [r7, #8]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 f9c1 	bl	8009f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69da      	ldr	r2, [r3, #28]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0208 	orr.w	r2, r2, #8
 8009c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69da      	ldr	r2, [r3, #28]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0204 	bic.w	r2, r2, #4
 8009c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69d9      	ldr	r1, [r3, #28]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	61da      	str	r2, [r3, #28]
      break;
 8009c44:	e023      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fa0b 	bl	800a068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69d9      	ldr	r1, [r3, #28]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	021a      	lsls	r2, r3, #8
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	61da      	str	r2, [r3, #28]
      break;
 8009c86:	e002      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a34      	ldr	r2, [pc, #208]	; (8009dd4 <TIM_Base_SetConfig+0xe4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00f      	beq.n	8009d28 <TIM_Base_SetConfig+0x38>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d0e:	d00b      	beq.n	8009d28 <TIM_Base_SetConfig+0x38>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a31      	ldr	r2, [pc, #196]	; (8009dd8 <TIM_Base_SetConfig+0xe8>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d007      	beq.n	8009d28 <TIM_Base_SetConfig+0x38>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a30      	ldr	r2, [pc, #192]	; (8009ddc <TIM_Base_SetConfig+0xec>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d003      	beq.n	8009d28 <TIM_Base_SetConfig+0x38>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a2f      	ldr	r2, [pc, #188]	; (8009de0 <TIM_Base_SetConfig+0xf0>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d108      	bne.n	8009d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a25      	ldr	r2, [pc, #148]	; (8009dd4 <TIM_Base_SetConfig+0xe4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d01b      	beq.n	8009d7a <TIM_Base_SetConfig+0x8a>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d48:	d017      	beq.n	8009d7a <TIM_Base_SetConfig+0x8a>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a22      	ldr	r2, [pc, #136]	; (8009dd8 <TIM_Base_SetConfig+0xe8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d013      	beq.n	8009d7a <TIM_Base_SetConfig+0x8a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a21      	ldr	r2, [pc, #132]	; (8009ddc <TIM_Base_SetConfig+0xec>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d00f      	beq.n	8009d7a <TIM_Base_SetConfig+0x8a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a20      	ldr	r2, [pc, #128]	; (8009de0 <TIM_Base_SetConfig+0xf0>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00b      	beq.n	8009d7a <TIM_Base_SetConfig+0x8a>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a1f      	ldr	r2, [pc, #124]	; (8009de4 <TIM_Base_SetConfig+0xf4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d007      	beq.n	8009d7a <TIM_Base_SetConfig+0x8a>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a1e      	ldr	r2, [pc, #120]	; (8009de8 <TIM_Base_SetConfig+0xf8>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d003      	beq.n	8009d7a <TIM_Base_SetConfig+0x8a>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a1d      	ldr	r2, [pc, #116]	; (8009dec <TIM_Base_SetConfig+0xfc>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d108      	bne.n	8009d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689a      	ldr	r2, [r3, #8]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a08      	ldr	r2, [pc, #32]	; (8009dd4 <TIM_Base_SetConfig+0xe4>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d103      	bne.n	8009dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	615a      	str	r2, [r3, #20]
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	40010000 	.word	0x40010000
 8009dd8:	40000400 	.word	0x40000400
 8009ddc:	40000800 	.word	0x40000800
 8009de0:	40000c00 	.word	0x40000c00
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40014400 	.word	0x40014400
 8009dec:	40014800 	.word	0x40014800

08009df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f023 0201 	bic.w	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f023 0302 	bic.w	r3, r3, #2
 8009e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <TIM_OC1_SetConfig+0xc8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d10c      	bne.n	8009e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f023 0308 	bic.w	r3, r3, #8
 8009e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f023 0304 	bic.w	r3, r3, #4
 8009e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a13      	ldr	r2, [pc, #76]	; (8009eb8 <TIM_OC1_SetConfig+0xc8>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d111      	bne.n	8009e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	621a      	str	r2, [r3, #32]
}
 8009eac:	bf00      	nop
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	40010000 	.word	0x40010000

08009ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	f023 0210 	bic.w	r2, r3, #16
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f023 0320 	bic.w	r3, r3, #32
 8009f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	011b      	lsls	r3, r3, #4
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a1e      	ldr	r2, [pc, #120]	; (8009f90 <TIM_OC2_SetConfig+0xd4>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d10d      	bne.n	8009f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a15      	ldr	r2, [pc, #84]	; (8009f90 <TIM_OC2_SetConfig+0xd4>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d113      	bne.n	8009f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	621a      	str	r2, [r3, #32]
}
 8009f82:	bf00      	nop
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40010000 	.word	0x40010000

08009f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a1d      	ldr	r2, [pc, #116]	; (800a064 <TIM_OC3_SetConfig+0xd0>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d10d      	bne.n	800a00e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a00c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a14      	ldr	r2, [pc, #80]	; (800a064 <TIM_OC3_SetConfig+0xd0>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d113      	bne.n	800a03e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a01c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	4313      	orrs	r3, r2
 800a030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	621a      	str	r2, [r3, #32]
}
 800a058:	bf00      	nop
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	40010000 	.word	0x40010000

0800a068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	021b      	lsls	r3, r3, #8
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	031b      	lsls	r3, r3, #12
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a10      	ldr	r2, [pc, #64]	; (800a104 <TIM_OC4_SetConfig+0x9c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d109      	bne.n	800a0dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	019b      	lsls	r3, r3, #6
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	621a      	str	r2, [r3, #32]
}
 800a0f6:	bf00      	nop
 800a0f8:	371c      	adds	r7, #28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	40010000 	.word	0x40010000

0800a108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f003 031f 	and.w	r3, r3, #31
 800a11a:	2201      	movs	r2, #1
 800a11c:	fa02 f303 	lsl.w	r3, r2, r3
 800a120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1a      	ldr	r2, [r3, #32]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	43db      	mvns	r3, r3
 800a12a:	401a      	ands	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1a      	ldr	r2, [r3, #32]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	fa01 f303 	lsl.w	r3, r1, r3
 800a140:	431a      	orrs	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	621a      	str	r2, [r3, #32]
}
 800a146:	bf00      	nop
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a166:	b480      	push	{r7}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e03f      	b.n	800a20c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7fa f847 	bl	8004234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2224      	movs	r2, #36	; 0x24
 800a1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f001 f8d6 	bl	800b370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	691a      	ldr	r2, [r3, #16]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	695a      	ldr	r2, [r3, #20]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2220      	movs	r2, #32
 800a206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08a      	sub	sp, #40	; 0x28
 800a218:	af02      	add	r7, sp, #8
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	4613      	mov	r3, r2
 800a222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a224:	2300      	movs	r3, #0
 800a226:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b20      	cmp	r3, #32
 800a232:	d17c      	bne.n	800a32e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <HAL_UART_Transmit+0x2c>
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e075      	b.n	800a330 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_UART_Transmit+0x3e>
 800a24e:	2302      	movs	r3, #2
 800a250:	e06e      	b.n	800a330 <HAL_UART_Transmit+0x11c>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2221      	movs	r2, #33	; 0x21
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a268:	f7fa fdc4 	bl	8004df4 <HAL_GetTick>
 800a26c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	88fa      	ldrh	r2, [r7, #6]
 800a272:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	88fa      	ldrh	r2, [r7, #6]
 800a278:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a282:	d108      	bne.n	800a296 <HAL_UART_Transmit+0x82>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d104      	bne.n	800a296 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a28c:	2300      	movs	r3, #0
 800a28e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	61bb      	str	r3, [r7, #24]
 800a294:	e003      	b.n	800a29e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a2a6:	e02a      	b.n	800a2fe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2180      	movs	r1, #128	; 0x80
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fd8d 	bl	800add2 <UART_WaitOnFlagUntilTimeout>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e036      	b.n	800a330 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10b      	bne.n	800a2e0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	3302      	adds	r3, #2
 800a2dc:	61bb      	str	r3, [r7, #24]
 800a2de:	e007      	b.n	800a2f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a302:	b29b      	uxth	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1cf      	bne.n	800a2a8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2200      	movs	r2, #0
 800a310:	2140      	movs	r1, #64	; 0x40
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f000 fd5d 	bl	800add2 <UART_WaitOnFlagUntilTimeout>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e006      	b.n	800a330 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e000      	b.n	800a330 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a32e:	2302      	movs	r3, #2
  }
}
 800a330:	4618      	mov	r0, r3
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08c      	sub	sp, #48	; 0x30
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b20      	cmp	r3, #32
 800a350:	d165      	bne.n	800a41e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <HAL_UART_Transmit_DMA+0x26>
 800a358:	88fb      	ldrh	r3, [r7, #6]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e05e      	b.n	800a420 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_UART_Transmit_DMA+0x38>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e057      	b.n	800a420 <HAL_UART_Transmit_DMA+0xe8>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	88fa      	ldrh	r2, [r7, #6]
 800a382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	88fa      	ldrh	r2, [r7, #6]
 800a388:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2221      	movs	r2, #33	; 0x21
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39c:	4a22      	ldr	r2, [pc, #136]	; (800a428 <HAL_UART_Transmit_DMA+0xf0>)
 800a39e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	4a21      	ldr	r2, [pc, #132]	; (800a42c <HAL_UART_Transmit_DMA+0xf4>)
 800a3a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ac:	4a20      	ldr	r2, [pc, #128]	; (800a430 <HAL_UART_Transmit_DMA+0xf8>)
 800a3ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a3b8:	f107 0308 	add.w	r3, r7, #8
 800a3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	6819      	ldr	r1, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	88fb      	ldrh	r3, [r7, #6]
 800a3d0:	f7fb f9a0 	bl	8005714 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3314      	adds	r3, #20
 800a404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a406:	627a      	str	r2, [r7, #36]	; 0x24
 800a408:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6a39      	ldr	r1, [r7, #32]
 800a40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	61fb      	str	r3, [r7, #28]
   return(result);
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e000      	b.n	800a420 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a41e:	2302      	movs	r3, #2
  }
}
 800a420:	4618      	mov	r0, r3
 800a422:	3730      	adds	r7, #48	; 0x30
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	0800ab2d 	.word	0x0800ab2d
 800a42c:	0800abc7 	.word	0x0800abc7
 800a430:	0800ad3f 	.word	0x0800ad3f

0800a434 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d11d      	bne.n	800a48a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <HAL_UART_Receive_DMA+0x26>
 800a454:	88fb      	ldrh	r3, [r7, #6]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e016      	b.n	800a48c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a464:	2b01      	cmp	r3, #1
 800a466:	d101      	bne.n	800a46c <HAL_UART_Receive_DMA+0x38>
 800a468:	2302      	movs	r3, #2
 800a46a:	e00f      	b.n	800a48c <HAL_UART_Receive_DMA+0x58>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a47a:	88fb      	ldrh	r3, [r7, #6]
 800a47c:	461a      	mov	r2, r3
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 fd15 	bl	800aeb0 <UART_Start_Receive_DMA>
 800a486:	4603      	mov	r3, r0
 800a488:	e000      	b.n	800a48c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a48a:	2302      	movs	r3, #2
  }
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b090      	sub	sp, #64	; 0x40
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4aa:	2b80      	cmp	r3, #128	; 0x80
 800a4ac:	bf0c      	ite	eq
 800a4ae:	2301      	moveq	r3, #1
 800a4b0:	2300      	movne	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b21      	cmp	r3, #33	; 0x21
 800a4c0:	d128      	bne.n	800a514 <HAL_UART_DMAStop+0x80>
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d025      	beq.n	800a514 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3314      	adds	r3, #20
 800a4ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	e853 3f00 	ldrex	r3, [r3]
 800a4d6:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4de:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4e8:	633a      	str	r2, [r7, #48]	; 0x30
 800a4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f0:	e841 2300 	strex	r3, r2, [r1]
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e5      	bne.n	800a4c8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fb f95b 	bl	80057c4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fd6c 	bl	800afec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51e:	2b40      	cmp	r3, #64	; 0x40
 800a520:	bf0c      	ite	eq
 800a522:	2301      	moveq	r3, #1
 800a524:	2300      	movne	r3, #0
 800a526:	b2db      	uxtb	r3, r3
 800a528:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a530:	b2db      	uxtb	r3, r3
 800a532:	2b22      	cmp	r3, #34	; 0x22
 800a534:	d128      	bne.n	800a588 <HAL_UART_DMAStop+0xf4>
 800a536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d025      	beq.n	800a588 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3314      	adds	r3, #20
 800a542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	e853 3f00 	ldrex	r3, [r3]
 800a54a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a552:	637b      	str	r3, [r7, #52]	; 0x34
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3314      	adds	r3, #20
 800a55a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a55c:	61fa      	str	r2, [r7, #28]
 800a55e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	69b9      	ldr	r1, [r7, #24]
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	617b      	str	r3, [r7, #20]
   return(result);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e5      	bne.n	800a53c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fb f921 	bl	80057c4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fd5a 	bl	800b03c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3740      	adds	r7, #64	; 0x40
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
	...

0800a594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b0ba      	sub	sp, #232	; 0xe8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a5d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10f      	bne.n	800a5fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <HAL_UART_IRQHandler+0x66>
 800a5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fe01 	bl	800b1fa <UART_Receive_IT>
      return;
 800a5f8:	e256      	b.n	800aaa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a5fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 80de 	beq.w	800a7c0 <HAL_UART_IRQHandler+0x22c>
 800a604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d106      	bne.n	800a61e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80d1 	beq.w	800a7c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00b      	beq.n	800a642 <HAL_UART_IRQHandler+0xae>
 800a62a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a62e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	f043 0201 	orr.w	r2, r3, #1
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00b      	beq.n	800a666 <HAL_UART_IRQHandler+0xd2>
 800a64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d005      	beq.n	800a666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	f043 0202 	orr.w	r2, r3, #2
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <HAL_UART_IRQHandler+0xf6>
 800a672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a682:	f043 0204 	orr.w	r2, r3, #4
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	2b00      	cmp	r3, #0
 800a694:	d011      	beq.n	800a6ba <HAL_UART_IRQHandler+0x126>
 800a696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a69a:	f003 0320 	and.w	r3, r3, #32
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d105      	bne.n	800a6ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a6a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d005      	beq.n	800a6ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	f043 0208 	orr.w	r2, r3, #8
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 81ed 	beq.w	800aa9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c8:	f003 0320 	and.w	r3, r3, #32
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d008      	beq.n	800a6e2 <HAL_UART_IRQHandler+0x14e>
 800a6d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6d4:	f003 0320 	and.w	r3, r3, #32
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fd8c 	bl	800b1fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ec:	2b40      	cmp	r3, #64	; 0x40
 800a6ee:	bf0c      	ite	eq
 800a6f0:	2301      	moveq	r3, #1
 800a6f2:	2300      	movne	r3, #0
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fe:	f003 0308 	and.w	r3, r3, #8
 800a702:	2b00      	cmp	r3, #0
 800a704:	d103      	bne.n	800a70e <HAL_UART_IRQHandler+0x17a>
 800a706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d04f      	beq.n	800a7ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fc94 	bl	800b03c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71e:	2b40      	cmp	r3, #64	; 0x40
 800a720:	d141      	bne.n	800a7a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3314      	adds	r3, #20
 800a728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a73c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3314      	adds	r3, #20
 800a74a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a74e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a75a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1d9      	bne.n	800a722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a772:	2b00      	cmp	r3, #0
 800a774:	d013      	beq.n	800a79e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	4a7d      	ldr	r2, [pc, #500]	; (800a970 <HAL_UART_IRQHandler+0x3dc>)
 800a77c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a782:	4618      	mov	r0, r3
 800a784:	f7fb f88e 	bl	80058a4 <HAL_DMA_Abort_IT>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d016      	beq.n	800a7bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a79c:	e00e      	b.n	800a7bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f9ae 	bl	800ab00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a4:	e00a      	b.n	800a7bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f9aa 	bl	800ab00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ac:	e006      	b.n	800a7bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f9a6 	bl	800ab00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a7ba:	e170      	b.n	800aa9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7bc:	bf00      	nop
    return;
 800a7be:	e16e      	b.n	800aa9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	f040 814a 	bne.w	800aa5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ce:	f003 0310 	and.w	r3, r3, #16
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 8143 	beq.w	800aa5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7dc:	f003 0310 	and.w	r3, r3, #16
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 813c 	beq.w	800aa5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60bb      	str	r3, [r7, #8]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60bb      	str	r3, [r7, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	60bb      	str	r3, [r7, #8]
 800a7fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a806:	2b40      	cmp	r3, #64	; 0x40
 800a808:	f040 80b4 	bne.w	800a974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 8140 	beq.w	800aaa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a82a:	429a      	cmp	r2, r3
 800a82c:	f080 8139 	bcs.w	800aaa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a842:	f000 8088 	beq.w	800a956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	330c      	adds	r3, #12
 800a84c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a85c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	330c      	adds	r3, #12
 800a86e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a87e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a88a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1d9      	bne.n	800a846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3314      	adds	r3, #20
 800a898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a89c:	e853 3f00 	ldrex	r3, [r3]
 800a8a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a8a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8a4:	f023 0301 	bic.w	r3, r3, #1
 800a8a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3314      	adds	r3, #20
 800a8b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a8b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8c2:	e841 2300 	strex	r3, r2, [r1]
 800a8c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e1      	bne.n	800a892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3314      	adds	r3, #20
 800a8d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a8de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3314      	adds	r3, #20
 800a8ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a8f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e3      	bne.n	800a8ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2220      	movs	r2, #32
 800a90a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	330c      	adds	r3, #12
 800a91a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a926:	f023 0310 	bic.w	r3, r3, #16
 800a92a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	330c      	adds	r3, #12
 800a934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a938:	65ba      	str	r2, [r7, #88]	; 0x58
 800a93a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a93e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a940:	e841 2300 	strex	r3, r2, [r1]
 800a944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e3      	bne.n	800a914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	4618      	mov	r0, r3
 800a952:	f7fa ff37 	bl	80057c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a95e:	b29b      	uxth	r3, r3
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	b29b      	uxth	r3, r3
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8d4 	bl	800ab14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a96c:	e099      	b.n	800aaa2 <HAL_UART_IRQHandler+0x50e>
 800a96e:	bf00      	nop
 800a970:	0800b103 	.word	0x0800b103
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	1ad3      	subs	r3, r2, r3
 800a980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a988:	b29b      	uxth	r3, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 808b 	beq.w	800aaa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 8086 	beq.w	800aaa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	330c      	adds	r3, #12
 800a9a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	e853 3f00 	ldrex	r3, [r3]
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	330c      	adds	r3, #12
 800a9ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a9be:	647a      	str	r2, [r7, #68]	; 0x44
 800a9c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e3      	bne.n	800a99a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3314      	adds	r3, #20
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	f023 0301 	bic.w	r3, r3, #1
 800a9e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3314      	adds	r3, #20
 800a9f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9f6:	633a      	str	r2, [r7, #48]	; 0x30
 800a9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e3      	bne.n	800a9d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f023 0310 	bic.w	r3, r3, #16
 800aa2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	330c      	adds	r3, #12
 800aa38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aa3c:	61fa      	str	r2, [r7, #28]
 800aa3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa40:	69b9      	ldr	r1, [r7, #24]
 800aa42:	69fa      	ldr	r2, [r7, #28]
 800aa44:	e841 2300 	strex	r3, r2, [r1]
 800aa48:	617b      	str	r3, [r7, #20]
   return(result);
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1e3      	bne.n	800aa18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f85c 	bl	800ab14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa5c:	e023      	b.n	800aaa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <HAL_UART_IRQHandler+0x4ea>
 800aa6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fb57 	bl	800b12a <UART_Transmit_IT>
    return;
 800aa7c:	e014      	b.n	800aaa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00e      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x514>
 800aa8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d008      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fb97 	bl	800b1ca <UART_EndTransmit_IT>
    return;
 800aa9c:	e004      	b.n	800aaa8 <HAL_UART_IRQHandler+0x514>
    return;
 800aa9e:	bf00      	nop
 800aaa0:	e002      	b.n	800aaa8 <HAL_UART_IRQHandler+0x514>
      return;
 800aaa2:	bf00      	nop
 800aaa4:	e000      	b.n	800aaa8 <HAL_UART_IRQHandler+0x514>
      return;
 800aaa6:	bf00      	nop
  }
}
 800aaa8:	37e8      	adds	r7, #232	; 0xe8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop

0800aab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b090      	sub	sp, #64	; 0x40
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab38:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d137      	bne.n	800abb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ab48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3314      	adds	r3, #20
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab64:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3314      	adds	r3, #20
 800ab6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab6e:	633a      	str	r2, [r7, #48]	; 0x30
 800ab70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e5      	bne.n	800ab4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	330c      	adds	r3, #12
 800ab88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	e853 3f00 	ldrex	r3, [r3]
 800ab90:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab98:	637b      	str	r3, [r7, #52]	; 0x34
 800ab9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	330c      	adds	r3, #12
 800aba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aba2:	61fa      	str	r2, [r7, #28]
 800aba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba6:	69b9      	ldr	r1, [r7, #24]
 800aba8:	69fa      	ldr	r2, [r7, #28]
 800abaa:	e841 2300 	strex	r3, r2, [r1]
 800abae:	617b      	str	r3, [r7, #20]
   return(result);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e5      	bne.n	800ab82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abb6:	e002      	b.n	800abbe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800abb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800abba:	f7ff ff79 	bl	800aab0 <HAL_UART_TxCpltCallback>
}
 800abbe:	bf00      	nop
 800abc0:	3740      	adds	r7, #64	; 0x40
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f7ff ff75 	bl	800aac4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abda:	bf00      	nop
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b09c      	sub	sp, #112	; 0x70
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d172      	bne.n	800ace4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800abfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac00:	2200      	movs	r2, #0
 800ac02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	330c      	adds	r3, #12
 800ac0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	330c      	adds	r3, #12
 800ac22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac24:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac2c:	e841 2300 	strex	r3, r2, [r1]
 800ac30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e5      	bne.n	800ac04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3314      	adds	r3, #20
 800ac3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4a:	f023 0301 	bic.w	r3, r3, #1
 800ac4e:	667b      	str	r3, [r7, #100]	; 0x64
 800ac50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3314      	adds	r3, #20
 800ac56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac58:	647a      	str	r2, [r7, #68]	; 0x44
 800ac5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e5      	bne.n	800ac38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3314      	adds	r3, #20
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	623b      	str	r3, [r7, #32]
   return(result);
 800ac7c:	6a3b      	ldr	r3, [r7, #32]
 800ac7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac82:	663b      	str	r3, [r7, #96]	; 0x60
 800ac84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3314      	adds	r3, #20
 800ac8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac8c:	633a      	str	r2, [r7, #48]	; 0x30
 800ac8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e5      	bne.n	800ac6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca2:	2220      	movs	r2, #32
 800aca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	2b01      	cmp	r3, #1
 800acae:	d119      	bne.n	800ace4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	330c      	adds	r3, #12
 800acb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	e853 3f00 	ldrex	r3, [r3]
 800acbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 0310 	bic.w	r3, r3, #16
 800acc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	330c      	adds	r3, #12
 800acce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acd0:	61fa      	str	r2, [r7, #28]
 800acd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd4:	69b9      	ldr	r1, [r7, #24]
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	e841 2300 	strex	r3, r2, [r1]
 800acdc:	617b      	str	r3, [r7, #20]
   return(result);
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e5      	bne.n	800acb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ace4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d106      	bne.n	800acfa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800acf0:	4619      	mov	r1, r3
 800acf2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acf4:	f7ff ff0e 	bl	800ab14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acf8:	e002      	b.n	800ad00 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800acfa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acfc:	f7ff feec 	bl	800aad8 <HAL_UART_RxCpltCallback>
}
 800ad00:	bf00      	nop
 800ad02:	3770      	adds	r7, #112	; 0x70
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d108      	bne.n	800ad30 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad22:	085b      	lsrs	r3, r3, #1
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	4619      	mov	r1, r3
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fef3 	bl	800ab14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad2e:	e002      	b.n	800ad36 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f7ff fedb 	bl	800aaec <HAL_UART_RxHalfCpltCallback>
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad5a:	2b80      	cmp	r3, #128	; 0x80
 800ad5c:	bf0c      	ite	eq
 800ad5e:	2301      	moveq	r3, #1
 800ad60:	2300      	movne	r3, #0
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b21      	cmp	r3, #33	; 0x21
 800ad70:	d108      	bne.n	800ad84 <UART_DMAError+0x46>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ad7e:	68b8      	ldr	r0, [r7, #8]
 800ad80:	f000 f934 	bl	800afec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8e:	2b40      	cmp	r3, #64	; 0x40
 800ad90:	bf0c      	ite	eq
 800ad92:	2301      	moveq	r3, #1
 800ad94:	2300      	movne	r3, #0
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b22      	cmp	r3, #34	; 0x22
 800ada4:	d108      	bne.n	800adb8 <UART_DMAError+0x7a>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d005      	beq.n	800adb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2200      	movs	r2, #0
 800adb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800adb2:	68b8      	ldr	r0, [r7, #8]
 800adb4:	f000 f942 	bl	800b03c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	f043 0210 	orr.w	r2, r3, #16
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adc4:	68b8      	ldr	r0, [r7, #8]
 800adc6:	f7ff fe9b 	bl	800ab00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adca:	bf00      	nop
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b090      	sub	sp, #64	; 0x40
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	603b      	str	r3, [r7, #0]
 800adde:	4613      	mov	r3, r2
 800ade0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade2:	e050      	b.n	800ae86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ade4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adea:	d04c      	beq.n	800ae86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800adec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d007      	beq.n	800ae02 <UART_WaitOnFlagUntilTimeout+0x30>
 800adf2:	f7f9 ffff 	bl	8004df4 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d241      	bcs.n	800ae86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	330c      	adds	r3, #12
 800ae08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	e853 3f00 	ldrex	r3, [r3]
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	330c      	adds	r3, #12
 800ae20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae22:	637a      	str	r2, [r7, #52]	; 0x34
 800ae24:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae2a:	e841 2300 	strex	r3, r2, [r1]
 800ae2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1e5      	bne.n	800ae02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3314      	adds	r3, #20
 800ae3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	613b      	str	r3, [r7, #16]
   return(result);
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f023 0301 	bic.w	r3, r3, #1
 800ae4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3314      	adds	r3, #20
 800ae54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae56:	623a      	str	r2, [r7, #32]
 800ae58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	69f9      	ldr	r1, [r7, #28]
 800ae5c:	6a3a      	ldr	r2, [r7, #32]
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e5      	bne.n	800ae36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2220      	movs	r2, #32
 800ae76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e00f      	b.n	800aea6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	bf0c      	ite	eq
 800ae96:	2301      	moveq	r3, #1
 800ae98:	2300      	movne	r3, #0
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d09f      	beq.n	800ade4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3740      	adds	r7, #64	; 0x40
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b098      	sub	sp, #96	; 0x60
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	4613      	mov	r3, r2
 800aebc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	88fa      	ldrh	r2, [r7, #6]
 800aec8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2222      	movs	r2, #34	; 0x22
 800aed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aedc:	4a40      	ldr	r2, [pc, #256]	; (800afe0 <UART_Start_Receive_DMA+0x130>)
 800aede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee4:	4a3f      	ldr	r2, [pc, #252]	; (800afe4 <UART_Start_Receive_DMA+0x134>)
 800aee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeec:	4a3e      	ldr	r2, [pc, #248]	; (800afe8 <UART_Start_Receive_DMA+0x138>)
 800aeee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef4:	2200      	movs	r2, #0
 800aef6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aef8:	f107 0308 	add.w	r3, r7, #8
 800aefc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3304      	adds	r3, #4
 800af08:	4619      	mov	r1, r3
 800af0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	88fb      	ldrh	r3, [r7, #6]
 800af10:	f7fa fc00 	bl	8005714 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af14:	2300      	movs	r3, #0
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	613b      	str	r3, [r7, #16]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	613b      	str	r3, [r7, #16]
 800af28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d019      	beq.n	800af6e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	330c      	adds	r3, #12
 800af40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af44:	e853 3f00 	ldrex	r3, [r3]
 800af48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af50:	65bb      	str	r3, [r7, #88]	; 0x58
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	330c      	adds	r3, #12
 800af58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800af5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af62:	e841 2300 	strex	r3, r2, [r1]
 800af66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800af68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d1e5      	bne.n	800af3a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3314      	adds	r3, #20
 800af74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af80:	f043 0301 	orr.w	r3, r3, #1
 800af84:	657b      	str	r3, [r7, #84]	; 0x54
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3314      	adds	r3, #20
 800af8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af8e:	63ba      	str	r2, [r7, #56]	; 0x38
 800af90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1e5      	bne.n	800af6e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	3314      	adds	r3, #20
 800afa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	617b      	str	r3, [r7, #20]
   return(result);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb8:	653b      	str	r3, [r7, #80]	; 0x50
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3314      	adds	r3, #20
 800afc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afc2:	627a      	str	r2, [r7, #36]	; 0x24
 800afc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6a39      	ldr	r1, [r7, #32]
 800afc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	61fb      	str	r3, [r7, #28]
   return(result);
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e5      	bne.n	800afa2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3760      	adds	r7, #96	; 0x60
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	0800abe3 	.word	0x0800abe3
 800afe4:	0800ad09 	.word	0x0800ad09
 800afe8:	0800ad3f 	.word	0x0800ad3f

0800afec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b089      	sub	sp, #36	; 0x24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	330c      	adds	r3, #12
 800affa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	e853 3f00 	ldrex	r3, [r3]
 800b002:	60bb      	str	r3, [r7, #8]
   return(result);
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b00a:	61fb      	str	r3, [r7, #28]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	330c      	adds	r3, #12
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	61ba      	str	r2, [r7, #24]
 800b016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b018:	6979      	ldr	r1, [r7, #20]
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	e841 2300 	strex	r3, r2, [r1]
 800b020:	613b      	str	r3, [r7, #16]
   return(result);
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1e5      	bne.n	800aff4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2220      	movs	r2, #32
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b030:	bf00      	nop
 800b032:	3724      	adds	r7, #36	; 0x24
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b095      	sub	sp, #84	; 0x54
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	330c      	adds	r3, #12
 800b04a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04e:	e853 3f00 	ldrex	r3, [r3]
 800b052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b05a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	330c      	adds	r3, #12
 800b062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b064:	643a      	str	r2, [r7, #64]	; 0x40
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b068:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b06a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b06c:	e841 2300 	strex	r3, r2, [r1]
 800b070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e5      	bne.n	800b044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3314      	adds	r3, #20
 800b07e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	e853 3f00 	ldrex	r3, [r3]
 800b086:	61fb      	str	r3, [r7, #28]
   return(result);
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	f023 0301 	bic.w	r3, r3, #1
 800b08e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3314      	adds	r3, #20
 800b096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b09a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0a0:	e841 2300 	strex	r3, r2, [r1]
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1e5      	bne.n	800b078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d119      	bne.n	800b0e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	330c      	adds	r3, #12
 800b0ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f023 0310 	bic.w	r3, r3, #16
 800b0ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0d4:	61ba      	str	r2, [r7, #24]
 800b0d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	6979      	ldr	r1, [r7, #20]
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e5      	bne.n	800b0b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b0f6:	bf00      	nop
 800b0f8:	3754      	adds	r7, #84	; 0x54
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7ff fcef 	bl	800ab00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b085      	sub	sp, #20
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b21      	cmp	r3, #33	; 0x21
 800b13c:	d13e      	bne.n	800b1bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b146:	d114      	bne.n	800b172 <UART_Transmit_IT+0x48>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d110      	bne.n	800b172 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b164:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	1c9a      	adds	r2, r3, #2
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	621a      	str	r2, [r3, #32]
 800b170:	e008      	b.n	800b184 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	1c59      	adds	r1, r3, #1
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	6211      	str	r1, [r2, #32]
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b188:	b29b      	uxth	r3, r3
 800b18a:	3b01      	subs	r3, #1
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	4619      	mov	r1, r3
 800b192:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10f      	bne.n	800b1b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68da      	ldr	r2, [r3, #12]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e000      	b.n	800b1be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1bc:	2302      	movs	r3, #2
  }
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b082      	sub	sp, #8
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fc60 	bl	800aab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b08c      	sub	sp, #48	; 0x30
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b22      	cmp	r3, #34	; 0x22
 800b20c:	f040 80ab 	bne.w	800b366 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b218:	d117      	bne.n	800b24a <UART_Receive_IT+0x50>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d113      	bne.n	800b24a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b222:	2300      	movs	r3, #0
 800b224:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	b29b      	uxth	r3, r3
 800b234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b238:	b29a      	uxth	r2, r3
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b242:	1c9a      	adds	r2, r3, #2
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	629a      	str	r2, [r3, #40]	; 0x28
 800b248:	e026      	b.n	800b298 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b250:	2300      	movs	r3, #0
 800b252:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b25c:	d007      	beq.n	800b26e <UART_Receive_IT+0x74>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10a      	bne.n	800b27c <UART_Receive_IT+0x82>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	b2da      	uxtb	r2, r3
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	e008      	b.n	800b28e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d15a      	bne.n	800b362 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 0220 	bic.w	r2, r2, #32
 800b2ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	695a      	ldr	r2, [r3, #20]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f022 0201 	bic.w	r2, r2, #1
 800b2da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d135      	bne.n	800b358 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	330c      	adds	r3, #12
 800b2f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	613b      	str	r3, [r7, #16]
   return(result);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f023 0310 	bic.w	r3, r3, #16
 800b308:	627b      	str	r3, [r7, #36]	; 0x24
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	330c      	adds	r3, #12
 800b310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b312:	623a      	str	r2, [r7, #32]
 800b314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	69f9      	ldr	r1, [r7, #28]
 800b318:	6a3a      	ldr	r2, [r7, #32]
 800b31a:	e841 2300 	strex	r3, r2, [r1]
 800b31e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1e5      	bne.n	800b2f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 0310 	and.w	r3, r3, #16
 800b330:	2b10      	cmp	r3, #16
 800b332:	d10a      	bne.n	800b34a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	60fb      	str	r3, [r7, #12]
 800b348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff fbdf 	bl	800ab14 <HAL_UARTEx_RxEventCallback>
 800b356:	e002      	b.n	800b35e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff fbbd 	bl	800aad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	e002      	b.n	800b368 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	e000      	b.n	800b368 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b366:	2302      	movs	r3, #2
  }
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3730      	adds	r7, #48	; 0x30
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b374:	b0c0      	sub	sp, #256	; 0x100
 800b376:	af00      	add	r7, sp, #0
 800b378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b38c:	68d9      	ldr	r1, [r3, #12]
 800b38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	ea40 0301 	orr.w	r3, r0, r1
 800b398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b39e:	689a      	ldr	r2, [r3, #8]
 800b3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b4:	69db      	ldr	r3, [r3, #28]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b3c8:	f021 010c 	bic.w	r1, r1, #12
 800b3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b3d6:	430b      	orrs	r3, r1
 800b3d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ea:	6999      	ldr	r1, [r3, #24]
 800b3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	ea40 0301 	orr.w	r3, r0, r1
 800b3f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	4b8f      	ldr	r3, [pc, #572]	; (800b63c <UART_SetConfig+0x2cc>)
 800b400:	429a      	cmp	r2, r3
 800b402:	d005      	beq.n	800b410 <UART_SetConfig+0xa0>
 800b404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	4b8d      	ldr	r3, [pc, #564]	; (800b640 <UART_SetConfig+0x2d0>)
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d104      	bne.n	800b41a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b410:	f7fd ff8c 	bl	800932c <HAL_RCC_GetPCLK2Freq>
 800b414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b418:	e003      	b.n	800b422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b41a:	f7fd ff73 	bl	8009304 <HAL_RCC_GetPCLK1Freq>
 800b41e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b426:	69db      	ldr	r3, [r3, #28]
 800b428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b42c:	f040 810c 	bne.w	800b648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b434:	2200      	movs	r2, #0
 800b436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b43a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b43e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b442:	4622      	mov	r2, r4
 800b444:	462b      	mov	r3, r5
 800b446:	1891      	adds	r1, r2, r2
 800b448:	65b9      	str	r1, [r7, #88]	; 0x58
 800b44a:	415b      	adcs	r3, r3
 800b44c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b44e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b452:	4621      	mov	r1, r4
 800b454:	eb12 0801 	adds.w	r8, r2, r1
 800b458:	4629      	mov	r1, r5
 800b45a:	eb43 0901 	adc.w	r9, r3, r1
 800b45e:	f04f 0200 	mov.w	r2, #0
 800b462:	f04f 0300 	mov.w	r3, #0
 800b466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b46a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b46e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b472:	4690      	mov	r8, r2
 800b474:	4699      	mov	r9, r3
 800b476:	4623      	mov	r3, r4
 800b478:	eb18 0303 	adds.w	r3, r8, r3
 800b47c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b480:	462b      	mov	r3, r5
 800b482:	eb49 0303 	adc.w	r3, r9, r3
 800b486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b49a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b49e:	460b      	mov	r3, r1
 800b4a0:	18db      	adds	r3, r3, r3
 800b4a2:	653b      	str	r3, [r7, #80]	; 0x50
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	eb42 0303 	adc.w	r3, r2, r3
 800b4aa:	657b      	str	r3, [r7, #84]	; 0x54
 800b4ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b4b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b4b4:	f7f5 fc50 	bl	8000d58 <__aeabi_uldivmod>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4b61      	ldr	r3, [pc, #388]	; (800b644 <UART_SetConfig+0x2d4>)
 800b4be:	fba3 2302 	umull	r2, r3, r3, r2
 800b4c2:	095b      	lsrs	r3, r3, #5
 800b4c4:	011c      	lsls	r4, r3, #4
 800b4c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b4d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b4d8:	4642      	mov	r2, r8
 800b4da:	464b      	mov	r3, r9
 800b4dc:	1891      	adds	r1, r2, r2
 800b4de:	64b9      	str	r1, [r7, #72]	; 0x48
 800b4e0:	415b      	adcs	r3, r3
 800b4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b4e8:	4641      	mov	r1, r8
 800b4ea:	eb12 0a01 	adds.w	sl, r2, r1
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	eb43 0b01 	adc.w	fp, r3, r1
 800b4f4:	f04f 0200 	mov.w	r2, #0
 800b4f8:	f04f 0300 	mov.w	r3, #0
 800b4fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b508:	4692      	mov	sl, r2
 800b50a:	469b      	mov	fp, r3
 800b50c:	4643      	mov	r3, r8
 800b50e:	eb1a 0303 	adds.w	r3, sl, r3
 800b512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b516:	464b      	mov	r3, r9
 800b518:	eb4b 0303 	adc.w	r3, fp, r3
 800b51c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b52c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b534:	460b      	mov	r3, r1
 800b536:	18db      	adds	r3, r3, r3
 800b538:	643b      	str	r3, [r7, #64]	; 0x40
 800b53a:	4613      	mov	r3, r2
 800b53c:	eb42 0303 	adc.w	r3, r2, r3
 800b540:	647b      	str	r3, [r7, #68]	; 0x44
 800b542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b54a:	f7f5 fc05 	bl	8000d58 <__aeabi_uldivmod>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4611      	mov	r1, r2
 800b554:	4b3b      	ldr	r3, [pc, #236]	; (800b644 <UART_SetConfig+0x2d4>)
 800b556:	fba3 2301 	umull	r2, r3, r3, r1
 800b55a:	095b      	lsrs	r3, r3, #5
 800b55c:	2264      	movs	r2, #100	; 0x64
 800b55e:	fb02 f303 	mul.w	r3, r2, r3
 800b562:	1acb      	subs	r3, r1, r3
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b56a:	4b36      	ldr	r3, [pc, #216]	; (800b644 <UART_SetConfig+0x2d4>)
 800b56c:	fba3 2302 	umull	r2, r3, r3, r2
 800b570:	095b      	lsrs	r3, r3, #5
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b578:	441c      	add	r4, r3
 800b57a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b57e:	2200      	movs	r2, #0
 800b580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b58c:	4642      	mov	r2, r8
 800b58e:	464b      	mov	r3, r9
 800b590:	1891      	adds	r1, r2, r2
 800b592:	63b9      	str	r1, [r7, #56]	; 0x38
 800b594:	415b      	adcs	r3, r3
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b59c:	4641      	mov	r1, r8
 800b59e:	1851      	adds	r1, r2, r1
 800b5a0:	6339      	str	r1, [r7, #48]	; 0x30
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	414b      	adcs	r3, r1
 800b5a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a8:	f04f 0200 	mov.w	r2, #0
 800b5ac:	f04f 0300 	mov.w	r3, #0
 800b5b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b5b4:	4659      	mov	r1, fp
 800b5b6:	00cb      	lsls	r3, r1, #3
 800b5b8:	4651      	mov	r1, sl
 800b5ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5be:	4651      	mov	r1, sl
 800b5c0:	00ca      	lsls	r2, r1, #3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	4642      	mov	r2, r8
 800b5ca:	189b      	adds	r3, r3, r2
 800b5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5d0:	464b      	mov	r3, r9
 800b5d2:	460a      	mov	r2, r1
 800b5d4:	eb42 0303 	adc.w	r3, r2, r3
 800b5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b5e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b5ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	18db      	adds	r3, r3, r3
 800b5f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	eb42 0303 	adc.w	r3, r2, r3
 800b5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b606:	f7f5 fba7 	bl	8000d58 <__aeabi_uldivmod>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <UART_SetConfig+0x2d4>)
 800b610:	fba3 1302 	umull	r1, r3, r3, r2
 800b614:	095b      	lsrs	r3, r3, #5
 800b616:	2164      	movs	r1, #100	; 0x64
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	3332      	adds	r3, #50	; 0x32
 800b622:	4a08      	ldr	r2, [pc, #32]	; (800b644 <UART_SetConfig+0x2d4>)
 800b624:	fba2 2303 	umull	r2, r3, r2, r3
 800b628:	095b      	lsrs	r3, r3, #5
 800b62a:	f003 0207 	and.w	r2, r3, #7
 800b62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4422      	add	r2, r4
 800b636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b638:	e105      	b.n	800b846 <UART_SetConfig+0x4d6>
 800b63a:	bf00      	nop
 800b63c:	40011000 	.word	0x40011000
 800b640:	40011400 	.word	0x40011400
 800b644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b64c:	2200      	movs	r2, #0
 800b64e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b65a:	4642      	mov	r2, r8
 800b65c:	464b      	mov	r3, r9
 800b65e:	1891      	adds	r1, r2, r2
 800b660:	6239      	str	r1, [r7, #32]
 800b662:	415b      	adcs	r3, r3
 800b664:	627b      	str	r3, [r7, #36]	; 0x24
 800b666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b66a:	4641      	mov	r1, r8
 800b66c:	1854      	adds	r4, r2, r1
 800b66e:	4649      	mov	r1, r9
 800b670:	eb43 0501 	adc.w	r5, r3, r1
 800b674:	f04f 0200 	mov.w	r2, #0
 800b678:	f04f 0300 	mov.w	r3, #0
 800b67c:	00eb      	lsls	r3, r5, #3
 800b67e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b682:	00e2      	lsls	r2, r4, #3
 800b684:	4614      	mov	r4, r2
 800b686:	461d      	mov	r5, r3
 800b688:	4643      	mov	r3, r8
 800b68a:	18e3      	adds	r3, r4, r3
 800b68c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b690:	464b      	mov	r3, r9
 800b692:	eb45 0303 	adc.w	r3, r5, r3
 800b696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b6aa:	f04f 0200 	mov.w	r2, #0
 800b6ae:	f04f 0300 	mov.w	r3, #0
 800b6b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	008b      	lsls	r3, r1, #2
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	008a      	lsls	r2, r1, #2
 800b6c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b6c8:	f7f5 fb46 	bl	8000d58 <__aeabi_uldivmod>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4b60      	ldr	r3, [pc, #384]	; (800b854 <UART_SetConfig+0x4e4>)
 800b6d2:	fba3 2302 	umull	r2, r3, r3, r2
 800b6d6:	095b      	lsrs	r3, r3, #5
 800b6d8:	011c      	lsls	r4, r3, #4
 800b6da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b6e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	1891      	adds	r1, r2, r2
 800b6f2:	61b9      	str	r1, [r7, #24]
 800b6f4:	415b      	adcs	r3, r3
 800b6f6:	61fb      	str	r3, [r7, #28]
 800b6f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	1851      	adds	r1, r2, r1
 800b700:	6139      	str	r1, [r7, #16]
 800b702:	4649      	mov	r1, r9
 800b704:	414b      	adcs	r3, r1
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	f04f 0200 	mov.w	r2, #0
 800b70c:	f04f 0300 	mov.w	r3, #0
 800b710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b714:	4659      	mov	r1, fp
 800b716:	00cb      	lsls	r3, r1, #3
 800b718:	4651      	mov	r1, sl
 800b71a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b71e:	4651      	mov	r1, sl
 800b720:	00ca      	lsls	r2, r1, #3
 800b722:	4610      	mov	r0, r2
 800b724:	4619      	mov	r1, r3
 800b726:	4603      	mov	r3, r0
 800b728:	4642      	mov	r2, r8
 800b72a:	189b      	adds	r3, r3, r2
 800b72c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b730:	464b      	mov	r3, r9
 800b732:	460a      	mov	r2, r1
 800b734:	eb42 0303 	adc.w	r3, r2, r3
 800b738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	67bb      	str	r3, [r7, #120]	; 0x78
 800b746:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	f04f 0300 	mov.w	r3, #0
 800b750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b754:	4649      	mov	r1, r9
 800b756:	008b      	lsls	r3, r1, #2
 800b758:	4641      	mov	r1, r8
 800b75a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b75e:	4641      	mov	r1, r8
 800b760:	008a      	lsls	r2, r1, #2
 800b762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b766:	f7f5 faf7 	bl	8000d58 <__aeabi_uldivmod>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	4b39      	ldr	r3, [pc, #228]	; (800b854 <UART_SetConfig+0x4e4>)
 800b770:	fba3 1302 	umull	r1, r3, r3, r2
 800b774:	095b      	lsrs	r3, r3, #5
 800b776:	2164      	movs	r1, #100	; 0x64
 800b778:	fb01 f303 	mul.w	r3, r1, r3
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	011b      	lsls	r3, r3, #4
 800b780:	3332      	adds	r3, #50	; 0x32
 800b782:	4a34      	ldr	r2, [pc, #208]	; (800b854 <UART_SetConfig+0x4e4>)
 800b784:	fba2 2303 	umull	r2, r3, r2, r3
 800b788:	095b      	lsrs	r3, r3, #5
 800b78a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b78e:	441c      	add	r4, r3
 800b790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b794:	2200      	movs	r2, #0
 800b796:	673b      	str	r3, [r7, #112]	; 0x70
 800b798:	677a      	str	r2, [r7, #116]	; 0x74
 800b79a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b79e:	4642      	mov	r2, r8
 800b7a0:	464b      	mov	r3, r9
 800b7a2:	1891      	adds	r1, r2, r2
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	415b      	adcs	r3, r3
 800b7a8:	60fb      	str	r3, [r7, #12]
 800b7aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	1851      	adds	r1, r2, r1
 800b7b2:	6039      	str	r1, [r7, #0]
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	414b      	adcs	r3, r1
 800b7b8:	607b      	str	r3, [r7, #4]
 800b7ba:	f04f 0200 	mov.w	r2, #0
 800b7be:	f04f 0300 	mov.w	r3, #0
 800b7c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b7c6:	4659      	mov	r1, fp
 800b7c8:	00cb      	lsls	r3, r1, #3
 800b7ca:	4651      	mov	r1, sl
 800b7cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7d0:	4651      	mov	r1, sl
 800b7d2:	00ca      	lsls	r2, r1, #3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	4603      	mov	r3, r0
 800b7da:	4642      	mov	r2, r8
 800b7dc:	189b      	adds	r3, r3, r2
 800b7de:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7e0:	464b      	mov	r3, r9
 800b7e2:	460a      	mov	r2, r1
 800b7e4:	eb42 0303 	adc.w	r3, r2, r3
 800b7e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	663b      	str	r3, [r7, #96]	; 0x60
 800b7f4:	667a      	str	r2, [r7, #100]	; 0x64
 800b7f6:	f04f 0200 	mov.w	r2, #0
 800b7fa:	f04f 0300 	mov.w	r3, #0
 800b7fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b802:	4649      	mov	r1, r9
 800b804:	008b      	lsls	r3, r1, #2
 800b806:	4641      	mov	r1, r8
 800b808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b80c:	4641      	mov	r1, r8
 800b80e:	008a      	lsls	r2, r1, #2
 800b810:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b814:	f7f5 faa0 	bl	8000d58 <__aeabi_uldivmod>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <UART_SetConfig+0x4e4>)
 800b81e:	fba3 1302 	umull	r1, r3, r3, r2
 800b822:	095b      	lsrs	r3, r3, #5
 800b824:	2164      	movs	r1, #100	; 0x64
 800b826:	fb01 f303 	mul.w	r3, r1, r3
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	011b      	lsls	r3, r3, #4
 800b82e:	3332      	adds	r3, #50	; 0x32
 800b830:	4a08      	ldr	r2, [pc, #32]	; (800b854 <UART_SetConfig+0x4e4>)
 800b832:	fba2 2303 	umull	r2, r3, r2, r3
 800b836:	095b      	lsrs	r3, r3, #5
 800b838:	f003 020f 	and.w	r2, r3, #15
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4422      	add	r2, r4
 800b844:	609a      	str	r2, [r3, #8]
}
 800b846:	bf00      	nop
 800b848:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b84c:	46bd      	mov	sp, r7
 800b84e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b852:	bf00      	nop
 800b854:	51eb851f 	.word	0x51eb851f

0800b858 <__NVIC_SetPriority>:
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	6039      	str	r1, [r7, #0]
 800b862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	db0a      	blt.n	800b882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	490c      	ldr	r1, [pc, #48]	; (800b8a4 <__NVIC_SetPriority+0x4c>)
 800b872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b876:	0112      	lsls	r2, r2, #4
 800b878:	b2d2      	uxtb	r2, r2
 800b87a:	440b      	add	r3, r1
 800b87c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b880:	e00a      	b.n	800b898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	b2da      	uxtb	r2, r3
 800b886:	4908      	ldr	r1, [pc, #32]	; (800b8a8 <__NVIC_SetPriority+0x50>)
 800b888:	79fb      	ldrb	r3, [r7, #7]
 800b88a:	f003 030f 	and.w	r3, r3, #15
 800b88e:	3b04      	subs	r3, #4
 800b890:	0112      	lsls	r2, r2, #4
 800b892:	b2d2      	uxtb	r2, r2
 800b894:	440b      	add	r3, r1
 800b896:	761a      	strb	r2, [r3, #24]
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	e000e100 	.word	0xe000e100
 800b8a8:	e000ed00 	.word	0xe000ed00

0800b8ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <SysTick_Handler+0x1c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b8b4:	f001 fe1a 	bl	800d4ec <xTaskGetSchedulerState>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d001      	beq.n	800b8c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b8be:	f002 fd03 	bl	800e2c8 <xPortSysTickHandler>
  }
}
 800b8c2:	bf00      	nop
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	e000e010 	.word	0xe000e010

0800b8cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	f06f 0004 	mvn.w	r0, #4
 800b8d6:	f7ff ffbf 	bl	800b858 <__NVIC_SetPriority>
#endif
}
 800b8da:	bf00      	nop
 800b8dc:	bd80      	pop	{r7, pc}
	...

0800b8e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8e6:	f3ef 8305 	mrs	r3, IPSR
 800b8ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b8ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d003      	beq.n	800b8fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b8f2:	f06f 0305 	mvn.w	r3, #5
 800b8f6:	607b      	str	r3, [r7, #4]
 800b8f8:	e00c      	b.n	800b914 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <osKernelInitialize+0x44>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d105      	bne.n	800b90e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b902:	4b08      	ldr	r3, [pc, #32]	; (800b924 <osKernelInitialize+0x44>)
 800b904:	2201      	movs	r2, #1
 800b906:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b908:	2300      	movs	r3, #0
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	e002      	b.n	800b914 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b90e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b912:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b914:	687b      	ldr	r3, [r7, #4]
}
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	20004f18 	.word	0x20004f18

0800b928 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b92e:	f3ef 8305 	mrs	r3, IPSR
 800b932:	603b      	str	r3, [r7, #0]
  return(result);
 800b934:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b93a:	f06f 0305 	mvn.w	r3, #5
 800b93e:	607b      	str	r3, [r7, #4]
 800b940:	e010      	b.n	800b964 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b942:	4b0b      	ldr	r3, [pc, #44]	; (800b970 <osKernelStart+0x48>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d109      	bne.n	800b95e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b94a:	f7ff ffbf 	bl	800b8cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b94e:	4b08      	ldr	r3, [pc, #32]	; (800b970 <osKernelStart+0x48>)
 800b950:	2202      	movs	r2, #2
 800b952:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b954:	f001 f948 	bl	800cbe8 <vTaskStartScheduler>
      stat = osOK;
 800b958:	2300      	movs	r3, #0
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	e002      	b.n	800b964 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b962:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b964:	687b      	ldr	r3, [r7, #4]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20004f18 	.word	0x20004f18

0800b974 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b97c:	f3ef 8305 	mrs	r3, IPSR
 800b980:	60bb      	str	r3, [r7, #8]
  return(result);
 800b982:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b984:	2b00      	cmp	r3, #0
 800b986:	d003      	beq.n	800b990 <osDelay+0x1c>
    stat = osErrorISR;
 800b988:	f06f 0305 	mvn.w	r3, #5
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	e007      	b.n	800b9a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b990:	2300      	movs	r3, #0
 800b992:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 f8f0 	bl	800cb80 <vTaskDelay>
    }
  }

  return (stat);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4a07      	ldr	r2, [pc, #28]	; (800b9d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b9bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	4a06      	ldr	r2, [pc, #24]	; (800b9dc <vApplicationGetIdleTaskMemory+0x30>)
 800b9c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2280      	movs	r2, #128	; 0x80
 800b9c8:	601a      	str	r2, [r3, #0]
}
 800b9ca:	bf00      	nop
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	20004f1c 	.word	0x20004f1c
 800b9dc:	20004fd8 	.word	0x20004fd8

0800b9e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4a07      	ldr	r2, [pc, #28]	; (800ba0c <vApplicationGetTimerTaskMemory+0x2c>)
 800b9f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	4a06      	ldr	r2, [pc, #24]	; (800ba10 <vApplicationGetTimerTaskMemory+0x30>)
 800b9f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9fe:	601a      	str	r2, [r3, #0]
}
 800ba00:	bf00      	nop
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	200051d8 	.word	0x200051d8
 800ba10:	20005294 	.word	0x20005294

0800ba14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f103 0208 	add.w	r2, r3, #8
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f103 0208 	add.w	r2, r3, #8
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f103 0208 	add.w	r2, r3, #8
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba62:	bf00      	nop
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	689a      	ldr	r2, [r3, #8]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	601a      	str	r2, [r3, #0]
}
 800baaa:	bf00      	nop
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bacc:	d103      	bne.n	800bad6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	e00c      	b.n	800baf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3308      	adds	r3, #8
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	e002      	b.n	800bae4 <vListInsert+0x2e>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	429a      	cmp	r2, r3
 800baee:	d2f6      	bcs.n	800bade <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	1c5a      	adds	r2, r3, #1
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	601a      	str	r2, [r3, #0]
}
 800bb1c:	bf00      	nop
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	6892      	ldr	r2, [r2, #8]
 800bb3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	6852      	ldr	r2, [r2, #4]
 800bb48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d103      	bne.n	800bb5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689a      	ldr	r2, [r3, #8]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	1e5a      	subs	r2, r3, #1
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3714      	adds	r7, #20
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10a      	bne.n	800bba6 <xQueueGenericReset+0x2a>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	60bb      	str	r3, [r7, #8]
}
 800bba2:	bf00      	nop
 800bba4:	e7fe      	b.n	800bba4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bba6:	f002 fafd 	bl	800e1a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb2:	68f9      	ldr	r1, [r7, #12]
 800bbb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbb6:	fb01 f303 	mul.w	r3, r1, r3
 800bbba:	441a      	add	r2, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	68f9      	ldr	r1, [r7, #12]
 800bbda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbdc:	fb01 f303 	mul.w	r3, r1, r3
 800bbe0:	441a      	add	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	22ff      	movs	r2, #255	; 0xff
 800bbea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	22ff      	movs	r2, #255	; 0xff
 800bbf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d114      	bne.n	800bc26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01a      	beq.n	800bc3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	3310      	adds	r3, #16
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f001 fa87 	bl	800d11c <xTaskRemoveFromEventList>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d012      	beq.n	800bc3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc14:	4b0c      	ldr	r3, [pc, #48]	; (800bc48 <xQueueGenericReset+0xcc>)
 800bc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	e009      	b.n	800bc3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	3310      	adds	r3, #16
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fef2 	bl	800ba14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3324      	adds	r3, #36	; 0x24
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7ff feed 	bl	800ba14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc3a:	f002 fae3 	bl	800e204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc3e:	2301      	movs	r3, #1
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	e000ed04 	.word	0xe000ed04

0800bc4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08e      	sub	sp, #56	; 0x38
 800bc50:	af02      	add	r7, sp, #8
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10a      	bne.n	800bc76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <xQueueGenericCreateStatic+0x52>
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d001      	beq.n	800bca2 <xQueueGenericCreateStatic+0x56>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e000      	b.n	800bca4 <xQueueGenericCreateStatic+0x58>
 800bca2:	2300      	movs	r3, #0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10a      	bne.n	800bcbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	623b      	str	r3, [r7, #32]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d102      	bne.n	800bcca <xQueueGenericCreateStatic+0x7e>
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <xQueueGenericCreateStatic+0x82>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <xQueueGenericCreateStatic+0x84>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10a      	bne.n	800bcea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	61fb      	str	r3, [r7, #28]
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bcea:	2350      	movs	r3, #80	; 0x50
 800bcec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2b50      	cmp	r3, #80	; 0x50
 800bcf2:	d00a      	beq.n	800bd0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	f383 8811 	msr	BASEPRI, r3
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	61bb      	str	r3, [r7, #24]
}
 800bd06:	bf00      	nop
 800bd08:	e7fe      	b.n	800bd08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00d      	beq.n	800bd32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	4613      	mov	r3, r2
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 f83f 	bl	800bdb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3730      	adds	r7, #48	; 0x30
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08a      	sub	sp, #40	; 0x28
 800bd40:	af02      	add	r7, sp, #8
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	613b      	str	r3, [r7, #16]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	fb02 f303 	mul.w	r3, r2, r3
 800bd6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	3350      	adds	r3, #80	; 0x50
 800bd74:	4618      	mov	r0, r3
 800bd76:	f002 fb37 	bl	800e3e8 <pvPortMalloc>
 800bd7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d011      	beq.n	800bda6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	3350      	adds	r3, #80	; 0x50
 800bd8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd94:	79fa      	ldrb	r2, [r7, #7]
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	68b9      	ldr	r1, [r7, #8]
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 f805 	bl	800bdb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bda6:	69bb      	ldr	r3, [r7, #24]
	}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3720      	adds	r7, #32
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
 800bdbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d103      	bne.n	800bdcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	e002      	b.n	800bdd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdde:	2101      	movs	r1, #1
 800bde0:	69b8      	ldr	r0, [r7, #24]
 800bde2:	f7ff fecb 	bl	800bb7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	78fa      	ldrb	r2, [r7, #3]
 800bdea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bdee:	bf00      	nop
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08e      	sub	sp, #56	; 0x38
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be06:	2300      	movs	r3, #0
 800be08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10a      	bne.n	800be2a <xQueueGenericSend+0x32>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <xQueueGenericSend+0x40>
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <xQueueGenericSend+0x44>
 800be38:	2301      	movs	r3, #1
 800be3a:	e000      	b.n	800be3e <xQueueGenericSend+0x46>
 800be3c:	2300      	movs	r3, #0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <xQueueGenericSend+0x60>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d103      	bne.n	800be66 <xQueueGenericSend+0x6e>
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be62:	2b01      	cmp	r3, #1
 800be64:	d101      	bne.n	800be6a <xQueueGenericSend+0x72>
 800be66:	2301      	movs	r3, #1
 800be68:	e000      	b.n	800be6c <xQueueGenericSend+0x74>
 800be6a:	2300      	movs	r3, #0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10a      	bne.n	800be86 <xQueueGenericSend+0x8e>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	623b      	str	r3, [r7, #32]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be86:	f001 fb31 	bl	800d4ec <xTaskGetSchedulerState>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d102      	bne.n	800be96 <xQueueGenericSend+0x9e>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d101      	bne.n	800be9a <xQueueGenericSend+0xa2>
 800be96:	2301      	movs	r3, #1
 800be98:	e000      	b.n	800be9c <xQueueGenericSend+0xa4>
 800be9a:	2300      	movs	r3, #0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	61fb      	str	r3, [r7, #28]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800beb6:	f002 f975 	bl	800e1a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d302      	bcc.n	800becc <xQueueGenericSend+0xd4>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b02      	cmp	r3, #2
 800beca:	d129      	bne.n	800bf20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	68b9      	ldr	r1, [r7, #8]
 800bed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bed2:	f000 fb2f 	bl	800c534 <prvCopyDataToQueue>
 800bed6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d010      	beq.n	800bf02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	3324      	adds	r3, #36	; 0x24
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 f919 	bl	800d11c <xTaskRemoveFromEventList>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d013      	beq.n	800bf18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bef0:	4b3f      	ldr	r3, [pc, #252]	; (800bff0 <xQueueGenericSend+0x1f8>)
 800bef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	e00a      	b.n	800bf18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf08:	4b39      	ldr	r3, [pc, #228]	; (800bff0 <xQueueGenericSend+0x1f8>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf18:	f002 f974 	bl	800e204 <vPortExitCritical>
				return pdPASS;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e063      	b.n	800bfe8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf26:	f002 f96d 	bl	800e204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e05c      	b.n	800bfe8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d106      	bne.n	800bf42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf34:	f107 0314 	add.w	r3, r7, #20
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f001 f979 	bl	800d230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf42:	f002 f95f 	bl	800e204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf46:	f000 febf 	bl	800ccc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf4a:	f002 f92b 	bl	800e1a4 <vPortEnterCritical>
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf54:	b25b      	sxtb	r3, r3
 800bf56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf5a:	d103      	bne.n	800bf64 <xQueueGenericSend+0x16c>
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf6a:	b25b      	sxtb	r3, r3
 800bf6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf70:	d103      	bne.n	800bf7a <xQueueGenericSend+0x182>
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf7a:	f002 f943 	bl	800e204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf7e:	1d3a      	adds	r2, r7, #4
 800bf80:	f107 0314 	add.w	r3, r7, #20
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f001 f968 	bl	800d25c <xTaskCheckForTimeOut>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d124      	bne.n	800bfdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf94:	f000 fbc6 	bl	800c724 <prvIsQueueFull>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d018      	beq.n	800bfd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	3310      	adds	r3, #16
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f001 f868 	bl	800d07c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfae:	f000 fb51 	bl	800c654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfb2:	f000 fe97 	bl	800cce4 <xTaskResumeAll>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f47f af7c 	bne.w	800beb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfbe:	4b0c      	ldr	r3, [pc, #48]	; (800bff0 <xQueueGenericSend+0x1f8>)
 800bfc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	e772      	b.n	800beb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfd2:	f000 fb3f 	bl	800c654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfd6:	f000 fe85 	bl	800cce4 <xTaskResumeAll>
 800bfda:	e76c      	b.n	800beb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bfdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfde:	f000 fb39 	bl	800c654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfe2:	f000 fe7f 	bl	800cce4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bfe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3738      	adds	r7, #56	; 0x38
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	e000ed04 	.word	0xe000ed04

0800bff4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b090      	sub	sp, #64	; 0x40
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10a      	bne.n	800c022 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d103      	bne.n	800c030 <xQueueGenericSendFromISR+0x3c>
 800c028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <xQueueGenericSendFromISR+0x40>
 800c030:	2301      	movs	r3, #1
 800c032:	e000      	b.n	800c036 <xQueueGenericSendFromISR+0x42>
 800c034:	2300      	movs	r3, #0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10a      	bne.n	800c050 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c04c:	bf00      	nop
 800c04e:	e7fe      	b.n	800c04e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d103      	bne.n	800c05e <xQueueGenericSendFromISR+0x6a>
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d101      	bne.n	800c062 <xQueueGenericSendFromISR+0x6e>
 800c05e:	2301      	movs	r3, #1
 800c060:	e000      	b.n	800c064 <xQueueGenericSendFromISR+0x70>
 800c062:	2300      	movs	r3, #0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10a      	bne.n	800c07e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06c:	f383 8811 	msr	BASEPRI, r3
 800c070:	f3bf 8f6f 	isb	sy
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	623b      	str	r3, [r7, #32]
}
 800c07a:	bf00      	nop
 800c07c:	e7fe      	b.n	800c07c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c07e:	f002 f973 	bl	800e368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c082:	f3ef 8211 	mrs	r2, BASEPRI
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	61fa      	str	r2, [r7, #28]
 800c098:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c09a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c09c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d302      	bcc.n	800c0b0 <xQueueGenericSendFromISR+0xbc>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d12f      	bne.n	800c110 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0c6:	f000 fa35 	bl	800c534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0d2:	d112      	bne.n	800c0fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d016      	beq.n	800c10a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	3324      	adds	r3, #36	; 0x24
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f001 f81b 	bl	800d11c <xTaskRemoveFromEventList>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00e      	beq.n	800c10a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00b      	beq.n	800c10a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	601a      	str	r2, [r3, #0]
 800c0f8:	e007      	b.n	800c10a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0fe:	3301      	adds	r3, #1
 800c100:	b2db      	uxtb	r3, r3
 800c102:	b25a      	sxtb	r2, r3
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c10a:	2301      	movs	r3, #1
 800c10c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c10e:	e001      	b.n	800c114 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c110:	2300      	movs	r3, #0
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c116:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c11e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c122:	4618      	mov	r0, r3
 800c124:	3740      	adds	r7, #64	; 0x40
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
	...

0800c12c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08c      	sub	sp, #48	; 0x30
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c138:	2300      	movs	r3, #0
 800c13a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	2b00      	cmp	r3, #0
 800c144:	d10a      	bne.n	800c15c <xQueueReceive+0x30>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	623b      	str	r3, [r7, #32]
}
 800c158:	bf00      	nop
 800c15a:	e7fe      	b.n	800c15a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d103      	bne.n	800c16a <xQueueReceive+0x3e>
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <xQueueReceive+0x42>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e000      	b.n	800c170 <xQueueReceive+0x44>
 800c16e:	2300      	movs	r3, #0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <xQueueReceive+0x5e>
	__asm volatile
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	f383 8811 	msr	BASEPRI, r3
 800c17c:	f3bf 8f6f 	isb	sy
 800c180:	f3bf 8f4f 	dsb	sy
 800c184:	61fb      	str	r3, [r7, #28]
}
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c18a:	f001 f9af 	bl	800d4ec <xTaskGetSchedulerState>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d102      	bne.n	800c19a <xQueueReceive+0x6e>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <xQueueReceive+0x72>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e000      	b.n	800c1a0 <xQueueReceive+0x74>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <xQueueReceive+0x8e>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	61bb      	str	r3, [r7, #24]
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1ba:	f001 fff3 	bl	800e1a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d01f      	beq.n	800c20a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1ca:	68b9      	ldr	r1, [r7, #8]
 800c1cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ce:	f000 fa1b 	bl	800c608 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	1e5a      	subs	r2, r3, #1
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00f      	beq.n	800c202 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e4:	3310      	adds	r3, #16
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 ff98 	bl	800d11c <xTaskRemoveFromEventList>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d007      	beq.n	800c202 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1f2:	4b3d      	ldr	r3, [pc, #244]	; (800c2e8 <xQueueReceive+0x1bc>)
 800c1f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c202:	f001 ffff 	bl	800e204 <vPortExitCritical>
				return pdPASS;
 800c206:	2301      	movs	r3, #1
 800c208:	e069      	b.n	800c2de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c210:	f001 fff8 	bl	800e204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c214:	2300      	movs	r3, #0
 800c216:	e062      	b.n	800c2de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d106      	bne.n	800c22c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c21e:	f107 0310 	add.w	r3, r7, #16
 800c222:	4618      	mov	r0, r3
 800c224:	f001 f804 	bl	800d230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c228:	2301      	movs	r3, #1
 800c22a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c22c:	f001 ffea 	bl	800e204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c230:	f000 fd4a 	bl	800ccc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c234:	f001 ffb6 	bl	800e1a4 <vPortEnterCritical>
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c23e:	b25b      	sxtb	r3, r3
 800c240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c244:	d103      	bne.n	800c24e <xQueueReceive+0x122>
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c254:	b25b      	sxtb	r3, r3
 800c256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c25a:	d103      	bne.n	800c264 <xQueueReceive+0x138>
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c264:	f001 ffce 	bl	800e204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c268:	1d3a      	adds	r2, r7, #4
 800c26a:	f107 0310 	add.w	r3, r7, #16
 800c26e:	4611      	mov	r1, r2
 800c270:	4618      	mov	r0, r3
 800c272:	f000 fff3 	bl	800d25c <xTaskCheckForTimeOut>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d123      	bne.n	800c2c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c27c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c27e:	f000 fa3b 	bl	800c6f8 <prvIsQueueEmpty>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d017      	beq.n	800c2b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28a:	3324      	adds	r3, #36	; 0x24
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	4611      	mov	r1, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f000 fef3 	bl	800d07c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c298:	f000 f9dc 	bl	800c654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c29c:	f000 fd22 	bl	800cce4 <xTaskResumeAll>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d189      	bne.n	800c1ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <xQueueReceive+0x1bc>)
 800c2a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ac:	601a      	str	r2, [r3, #0]
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	e780      	b.n	800c1ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ba:	f000 f9cb 	bl	800c654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2be:	f000 fd11 	bl	800cce4 <xTaskResumeAll>
 800c2c2:	e77a      	b.n	800c1ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c6:	f000 f9c5 	bl	800c654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2ca:	f000 fd0b 	bl	800cce4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d0:	f000 fa12 	bl	800c6f8 <prvIsQueueEmpty>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f43f af6f 	beq.w	800c1ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3730      	adds	r7, #48	; 0x30
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	e000ed04 	.word	0xe000ed04

0800c2ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08e      	sub	sp, #56	; 0x38
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c2fe:	2300      	movs	r3, #0
 800c300:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	623b      	str	r3, [r7, #32]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00a      	beq.n	800c33c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	61fb      	str	r3, [r7, #28]
}
 800c338:	bf00      	nop
 800c33a:	e7fe      	b.n	800c33a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c33c:	f001 f8d6 	bl	800d4ec <xTaskGetSchedulerState>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d102      	bne.n	800c34c <xQueueSemaphoreTake+0x60>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <xQueueSemaphoreTake+0x64>
 800c34c:	2301      	movs	r3, #1
 800c34e:	e000      	b.n	800c352 <xQueueSemaphoreTake+0x66>
 800c350:	2300      	movs	r3, #0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10a      	bne.n	800c36c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	61bb      	str	r3, [r7, #24]
}
 800c368:	bf00      	nop
 800c36a:	e7fe      	b.n	800c36a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c36c:	f001 ff1a 	bl	800e1a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c374:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d024      	beq.n	800c3c6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37e:	1e5a      	subs	r2, r3, #1
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d104      	bne.n	800c396 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c38c:	f001 fa24 	bl	800d7d8 <pvTaskIncrementMutexHeldCount>
 800c390:	4602      	mov	r2, r0
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00f      	beq.n	800c3be <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a0:	3310      	adds	r3, #16
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 feba 	bl	800d11c <xTaskRemoveFromEventList>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d007      	beq.n	800c3be <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3ae:	4b54      	ldr	r3, [pc, #336]	; (800c500 <xQueueSemaphoreTake+0x214>)
 800c3b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3be:	f001 ff21 	bl	800e204 <vPortExitCritical>
				return pdPASS;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e097      	b.n	800c4f6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d111      	bne.n	800c3f0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00a      	beq.n	800c3e8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	617b      	str	r3, [r7, #20]
}
 800c3e4:	bf00      	nop
 800c3e6:	e7fe      	b.n	800c3e6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3e8:	f001 ff0c 	bl	800e204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	e082      	b.n	800c4f6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3f6:	f107 030c 	add.w	r3, r7, #12
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 ff18 	bl	800d230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c400:	2301      	movs	r3, #1
 800c402:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c404:	f001 fefe 	bl	800e204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c408:	f000 fc5e 	bl	800ccc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c40c:	f001 feca 	bl	800e1a4 <vPortEnterCritical>
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c416:	b25b      	sxtb	r3, r3
 800c418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c41c:	d103      	bne.n	800c426 <xQueueSemaphoreTake+0x13a>
 800c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c42c:	b25b      	sxtb	r3, r3
 800c42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c432:	d103      	bne.n	800c43c <xQueueSemaphoreTake+0x150>
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c43c:	f001 fee2 	bl	800e204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c440:	463a      	mov	r2, r7
 800c442:	f107 030c 	add.w	r3, r7, #12
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 ff07 	bl	800d25c <xTaskCheckForTimeOut>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d132      	bne.n	800c4ba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c456:	f000 f94f 	bl	800c6f8 <prvIsQueueEmpty>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d026      	beq.n	800c4ae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c468:	f001 fe9c 	bl	800e1a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	4618      	mov	r0, r3
 800c472:	f001 f859 	bl	800d528 <xTaskPriorityInherit>
 800c476:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c478:	f001 fec4 	bl	800e204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47e:	3324      	adds	r3, #36	; 0x24
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	4611      	mov	r1, r2
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fdf9 	bl	800d07c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c48a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c48c:	f000 f8e2 	bl	800c654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c490:	f000 fc28 	bl	800cce4 <xTaskResumeAll>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	f47f af68 	bne.w	800c36c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c49c:	4b18      	ldr	r3, [pc, #96]	; (800c500 <xQueueSemaphoreTake+0x214>)
 800c49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	e75e      	b.n	800c36c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b0:	f000 f8d0 	bl	800c654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4b4:	f000 fc16 	bl	800cce4 <xTaskResumeAll>
 800c4b8:	e758      	b.n	800c36c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4bc:	f000 f8ca 	bl	800c654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4c0:	f000 fc10 	bl	800cce4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4c6:	f000 f917 	bl	800c6f8 <prvIsQueueEmpty>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f43f af4d 	beq.w	800c36c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00d      	beq.n	800c4f4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c4d8:	f001 fe64 	bl	800e1a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4de:	f000 f811 	bl	800c504 <prvGetDisinheritPriorityAfterTimeout>
 800c4e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f001 f8f2 	bl	800d6d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4f0:	f001 fe88 	bl	800e204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3738      	adds	r7, #56	; 0x38
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	e000ed04 	.word	0xe000ed04

0800c504 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c510:	2b00      	cmp	r3, #0
 800c512:	d006      	beq.n	800c522 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e001      	b.n	800c526 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c522:	2300      	movs	r3, #0
 800c524:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c526:	68fb      	ldr	r3, [r7, #12]
	}
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c540:	2300      	movs	r3, #0
 800c542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10d      	bne.n	800c56e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d14d      	bne.n	800c5f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 f84a 	bl	800d5f8 <xTaskPriorityDisinherit>
 800c564:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	609a      	str	r2, [r3, #8]
 800c56c:	e043      	b.n	800c5f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d119      	bne.n	800c5a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6858      	ldr	r0, [r3, #4]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57c:	461a      	mov	r2, r3
 800c57e:	68b9      	ldr	r1, [r7, #8]
 800c580:	f00d fbf8 	bl	8019d74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58c:	441a      	add	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d32b      	bcc.n	800c5f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	605a      	str	r2, [r3, #4]
 800c5a6:	e026      	b.n	800c5f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	68d8      	ldr	r0, [r3, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	68b9      	ldr	r1, [r7, #8]
 800c5b4:	f00d fbde 	bl	8019d74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68da      	ldr	r2, [r3, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c0:	425b      	negs	r3, r3
 800c5c2:	441a      	add	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	68da      	ldr	r2, [r3, #12]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d207      	bcs.n	800c5e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	689a      	ldr	r2, [r3, #8]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5dc:	425b      	negs	r3, r3
 800c5de:	441a      	add	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d105      	bne.n	800c5f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5fe:	697b      	ldr	r3, [r7, #20]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3718      	adds	r7, #24
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	2b00      	cmp	r3, #0
 800c618:	d018      	beq.n	800c64c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	441a      	add	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68da      	ldr	r2, [r3, #12]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	429a      	cmp	r2, r3
 800c632:	d303      	bcc.n	800c63c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	68d9      	ldr	r1, [r3, #12]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c644:	461a      	mov	r2, r3
 800c646:	6838      	ldr	r0, [r7, #0]
 800c648:	f00d fb94 	bl	8019d74 <memcpy>
	}
}
 800c64c:	bf00      	nop
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c65c:	f001 fda2 	bl	800e1a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c668:	e011      	b.n	800c68e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d012      	beq.n	800c698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3324      	adds	r3, #36	; 0x24
 800c676:	4618      	mov	r0, r3
 800c678:	f000 fd50 	bl	800d11c <xTaskRemoveFromEventList>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c682:	f000 fe4d 	bl	800d320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	3b01      	subs	r3, #1
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c692:	2b00      	cmp	r3, #0
 800c694:	dce9      	bgt.n	800c66a <prvUnlockQueue+0x16>
 800c696:	e000      	b.n	800c69a <prvUnlockQueue+0x46>
					break;
 800c698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	22ff      	movs	r2, #255	; 0xff
 800c69e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c6a2:	f001 fdaf 	bl	800e204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6a6:	f001 fd7d 	bl	800e1a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6b2:	e011      	b.n	800c6d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d012      	beq.n	800c6e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	3310      	adds	r3, #16
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 fd2b 	bl	800d11c <xTaskRemoveFromEventList>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6cc:	f000 fe28 	bl	800d320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6d0:	7bbb      	ldrb	r3, [r7, #14]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dce9      	bgt.n	800c6b4 <prvUnlockQueue+0x60>
 800c6e0:	e000      	b.n	800c6e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	22ff      	movs	r2, #255	; 0xff
 800c6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6ec:	f001 fd8a 	bl	800e204 <vPortExitCritical>
}
 800c6f0:	bf00      	nop
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c700:	f001 fd50 	bl	800e1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d102      	bne.n	800c712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c70c:	2301      	movs	r3, #1
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	e001      	b.n	800c716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c712:	2300      	movs	r3, #0
 800c714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c716:	f001 fd75 	bl	800e204 <vPortExitCritical>

	return xReturn;
 800c71a:	68fb      	ldr	r3, [r7, #12]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c72c:	f001 fd3a 	bl	800e1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c738:	429a      	cmp	r2, r3
 800c73a:	d102      	bne.n	800c742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	e001      	b.n	800c746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c746:	f001 fd5d 	bl	800e204 <vPortExitCritical>

	return xReturn;
 800c74a:	68fb      	ldr	r3, [r7, #12]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
 800c762:	e014      	b.n	800c78e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c764:	4a0f      	ldr	r2, [pc, #60]	; (800c7a4 <vQueueAddToRegistry+0x50>)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10b      	bne.n	800c788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c770:	490c      	ldr	r1, [pc, #48]	; (800c7a4 <vQueueAddToRegistry+0x50>)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c77a:	4a0a      	ldr	r2, [pc, #40]	; (800c7a4 <vQueueAddToRegistry+0x50>)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	4413      	add	r3, r2
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c786:	e006      	b.n	800c796 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3301      	adds	r3, #1
 800c78c:	60fb      	str	r3, [r7, #12]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2b07      	cmp	r3, #7
 800c792:	d9e7      	bls.n	800c764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	20005694 	.word	0x20005694

0800c7a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b086      	sub	sp, #24
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7b8:	f001 fcf4 	bl	800e1a4 <vPortEnterCritical>
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c2:	b25b      	sxtb	r3, r3
 800c7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c8:	d103      	bne.n	800c7d2 <vQueueWaitForMessageRestricted+0x2a>
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7d8:	b25b      	sxtb	r3, r3
 800c7da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7de:	d103      	bne.n	800c7e8 <vQueueWaitForMessageRestricted+0x40>
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7e8:	f001 fd0c 	bl	800e204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d106      	bne.n	800c802 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	3324      	adds	r3, #36	; 0x24
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	68b9      	ldr	r1, [r7, #8]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fc61 	bl	800d0c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c802:	6978      	ldr	r0, [r7, #20]
 800c804:	f7ff ff26 	bl	800c654 <prvUnlockQueue>
	}
 800c808:	bf00      	nop
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08e      	sub	sp, #56	; 0x38
 800c814:	af04      	add	r7, sp, #16
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	623b      	str	r3, [r7, #32]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10a      	bne.n	800c856 <xTaskCreateStatic+0x46>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	61fb      	str	r3, [r7, #28]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c856:	23bc      	movs	r3, #188	; 0xbc
 800c858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	2bbc      	cmp	r3, #188	; 0xbc
 800c85e:	d00a      	beq.n	800c876 <xTaskCreateStatic+0x66>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	61bb      	str	r3, [r7, #24]
}
 800c872:	bf00      	nop
 800c874:	e7fe      	b.n	800c874 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c876:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d01e      	beq.n	800c8bc <xTaskCreateStatic+0xac>
 800c87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c880:	2b00      	cmp	r3, #0
 800c882:	d01b      	beq.n	800c8bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c88c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	2202      	movs	r2, #2
 800c892:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c896:	2300      	movs	r3, #0
 800c898:	9303      	str	r3, [sp, #12]
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	9302      	str	r3, [sp, #8]
 800c89e:	f107 0314 	add.w	r3, r7, #20
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 f850 	bl	800c954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8b6:	f000 f8f3 	bl	800caa0 <prvAddNewTaskToReadyList>
 800c8ba:	e001      	b.n	800c8c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8c0:	697b      	ldr	r3, [r7, #20]
	}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3728      	adds	r7, #40	; 0x28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b08c      	sub	sp, #48	; 0x30
 800c8ce:	af04      	add	r7, sp, #16
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	603b      	str	r3, [r7, #0]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8da:	88fb      	ldrh	r3, [r7, #6]
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f001 fd82 	bl	800e3e8 <pvPortMalloc>
 800c8e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00e      	beq.n	800c90a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8ec:	20bc      	movs	r0, #188	; 0xbc
 800c8ee:	f001 fd7b 	bl	800e3e8 <pvPortMalloc>
 800c8f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	631a      	str	r2, [r3, #48]	; 0x30
 800c900:	e005      	b.n	800c90e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c902:	6978      	ldr	r0, [r7, #20]
 800c904:	f001 fe3c 	bl	800e580 <vPortFree>
 800c908:	e001      	b.n	800c90e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c90a:	2300      	movs	r3, #0
 800c90c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d017      	beq.n	800c944 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	2200      	movs	r2, #0
 800c918:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c91c:	88fa      	ldrh	r2, [r7, #6]
 800c91e:	2300      	movs	r3, #0
 800c920:	9303      	str	r3, [sp, #12]
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	9302      	str	r3, [sp, #8]
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	68b9      	ldr	r1, [r7, #8]
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f000 f80e 	bl	800c954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c938:	69f8      	ldr	r0, [r7, #28]
 800c93a:	f000 f8b1 	bl	800caa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c93e:	2301      	movs	r3, #1
 800c940:	61bb      	str	r3, [r7, #24]
 800c942:	e002      	b.n	800c94a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c948:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c94a:	69bb      	ldr	r3, [r7, #24]
	}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3720      	adds	r7, #32
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	461a      	mov	r2, r3
 800c96c:	21a5      	movs	r1, #165	; 0xa5
 800c96e:	f00d fa29 	bl	8019dc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c97c:	3b01      	subs	r3, #1
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	f023 0307 	bic.w	r3, r3, #7
 800c98a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	f003 0307 	and.w	r3, r3, #7
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	617b      	str	r3, [r7, #20]
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d01f      	beq.n	800c9f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	61fb      	str	r3, [r7, #28]
 800c9b6:	e012      	b.n	800c9de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	4413      	add	r3, r2
 800c9be:	7819      	ldrb	r1, [r3, #0]
 800c9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	3334      	adds	r3, #52	; 0x34
 800c9c8:	460a      	mov	r2, r1
 800c9ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d006      	beq.n	800c9e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	61fb      	str	r3, [r7, #28]
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	2b0f      	cmp	r3, #15
 800c9e2:	d9e9      	bls.n	800c9b8 <prvInitialiseNewTask+0x64>
 800c9e4:	e000      	b.n	800c9e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800c9e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9f0:	e003      	b.n	800c9fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	2b37      	cmp	r3, #55	; 0x37
 800c9fe:	d901      	bls.n	800ca04 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca00:	2337      	movs	r3, #55	; 0x37
 800ca02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca12:	2200      	movs	r2, #0
 800ca14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff f81a 	bl	800ba54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	3318      	adds	r3, #24
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7ff f815 	bl	800ba54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	2200      	movs	r2, #0
 800ca44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	3354      	adds	r3, #84	; 0x54
 800ca54:	2260      	movs	r2, #96	; 0x60
 800ca56:	2100      	movs	r1, #0
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f00d f9b3 	bl	8019dc4 <memset>
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	4a0c      	ldr	r2, [pc, #48]	; (800ca94 <prvInitialiseNewTask+0x140>)
 800ca62:	659a      	str	r2, [r3, #88]	; 0x58
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	4a0c      	ldr	r2, [pc, #48]	; (800ca98 <prvInitialiseNewTask+0x144>)
 800ca68:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	4a0b      	ldr	r2, [pc, #44]	; (800ca9c <prvInitialiseNewTask+0x148>)
 800ca6e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	68f9      	ldr	r1, [r7, #12]
 800ca74:	69b8      	ldr	r0, [r7, #24]
 800ca76:	f001 fa65 	bl	800df44 <pxPortInitialiseStack>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca8c:	bf00      	nop
 800ca8e:	3720      	adds	r7, #32
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	0801f6c4 	.word	0x0801f6c4
 800ca98:	0801f6e4 	.word	0x0801f6e4
 800ca9c:	0801f6a4 	.word	0x0801f6a4

0800caa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800caa8:	f001 fb7c 	bl	800e1a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800caac:	4b2d      	ldr	r3, [pc, #180]	; (800cb64 <prvAddNewTaskToReadyList+0xc4>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	3301      	adds	r3, #1
 800cab2:	4a2c      	ldr	r2, [pc, #176]	; (800cb64 <prvAddNewTaskToReadyList+0xc4>)
 800cab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cab6:	4b2c      	ldr	r3, [pc, #176]	; (800cb68 <prvAddNewTaskToReadyList+0xc8>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d109      	bne.n	800cad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cabe:	4a2a      	ldr	r2, [pc, #168]	; (800cb68 <prvAddNewTaskToReadyList+0xc8>)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cac4:	4b27      	ldr	r3, [pc, #156]	; (800cb64 <prvAddNewTaskToReadyList+0xc4>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d110      	bne.n	800caee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cacc:	f000 fc4c 	bl	800d368 <prvInitialiseTaskLists>
 800cad0:	e00d      	b.n	800caee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cad2:	4b26      	ldr	r3, [pc, #152]	; (800cb6c <prvAddNewTaskToReadyList+0xcc>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d109      	bne.n	800caee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cada:	4b23      	ldr	r3, [pc, #140]	; (800cb68 <prvAddNewTaskToReadyList+0xc8>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d802      	bhi.n	800caee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cae8:	4a1f      	ldr	r2, [pc, #124]	; (800cb68 <prvAddNewTaskToReadyList+0xc8>)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800caee:	4b20      	ldr	r3, [pc, #128]	; (800cb70 <prvAddNewTaskToReadyList+0xd0>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3301      	adds	r3, #1
 800caf4:	4a1e      	ldr	r2, [pc, #120]	; (800cb70 <prvAddNewTaskToReadyList+0xd0>)
 800caf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800caf8:	4b1d      	ldr	r3, [pc, #116]	; (800cb70 <prvAddNewTaskToReadyList+0xd0>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb04:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <prvAddNewTaskToReadyList+0xd4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d903      	bls.n	800cb14 <prvAddNewTaskToReadyList+0x74>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	4a18      	ldr	r2, [pc, #96]	; (800cb74 <prvAddNewTaskToReadyList+0xd4>)
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb18:	4613      	mov	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4a15      	ldr	r2, [pc, #84]	; (800cb78 <prvAddNewTaskToReadyList+0xd8>)
 800cb22:	441a      	add	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3304      	adds	r3, #4
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	f7fe ff9f 	bl	800ba6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb30:	f001 fb68 	bl	800e204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb34:	4b0d      	ldr	r3, [pc, #52]	; (800cb6c <prvAddNewTaskToReadyList+0xcc>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00e      	beq.n	800cb5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <prvAddNewTaskToReadyList+0xc8>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d207      	bcs.n	800cb5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <prvAddNewTaskToReadyList+0xdc>)
 800cb4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb5a:	bf00      	nop
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20005ba8 	.word	0x20005ba8
 800cb68:	200056d4 	.word	0x200056d4
 800cb6c:	20005bb4 	.word	0x20005bb4
 800cb70:	20005bc4 	.word	0x20005bc4
 800cb74:	20005bb0 	.word	0x20005bb0
 800cb78:	200056d8 	.word	0x200056d8
 800cb7c:	e000ed04 	.word	0xe000ed04

0800cb80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d017      	beq.n	800cbc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb92:	4b13      	ldr	r3, [pc, #76]	; (800cbe0 <vTaskDelay+0x60>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00a      	beq.n	800cbb0 <vTaskDelay+0x30>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	60bb      	str	r3, [r7, #8]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cbb0:	f000 f88a 	bl	800ccc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fe22 	bl	800d800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbbc:	f000 f892 	bl	800cce4 <xTaskResumeAll>
 800cbc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d107      	bne.n	800cbd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cbc8:	4b06      	ldr	r3, [pc, #24]	; (800cbe4 <vTaskDelay+0x64>)
 800cbca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbce:	601a      	str	r2, [r3, #0]
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbd8:	bf00      	nop
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	20005bd0 	.word	0x20005bd0
 800cbe4:	e000ed04 	.word	0xe000ed04

0800cbe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b08a      	sub	sp, #40	; 0x28
 800cbec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbf6:	463a      	mov	r2, r7
 800cbf8:	1d39      	adds	r1, r7, #4
 800cbfa:	f107 0308 	add.w	r3, r7, #8
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fed4 	bl	800b9ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc04:	6839      	ldr	r1, [r7, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	9202      	str	r2, [sp, #8]
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	2300      	movs	r3, #0
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	2300      	movs	r3, #0
 800cc14:	460a      	mov	r2, r1
 800cc16:	4924      	ldr	r1, [pc, #144]	; (800cca8 <vTaskStartScheduler+0xc0>)
 800cc18:	4824      	ldr	r0, [pc, #144]	; (800ccac <vTaskStartScheduler+0xc4>)
 800cc1a:	f7ff fdf9 	bl	800c810 <xTaskCreateStatic>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	4a23      	ldr	r2, [pc, #140]	; (800ccb0 <vTaskStartScheduler+0xc8>)
 800cc22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc24:	4b22      	ldr	r3, [pc, #136]	; (800ccb0 <vTaskStartScheduler+0xc8>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	617b      	str	r3, [r7, #20]
 800cc30:	e001      	b.n	800cc36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d102      	bne.n	800cc42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc3c:	f000 fe34 	bl	800d8a8 <xTimerCreateTimerTask>
 800cc40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d11b      	bne.n	800cc80 <vTaskStartScheduler+0x98>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	613b      	str	r3, [r7, #16]
}
 800cc5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc5c:	4b15      	ldr	r3, [pc, #84]	; (800ccb4 <vTaskStartScheduler+0xcc>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3354      	adds	r3, #84	; 0x54
 800cc62:	4a15      	ldr	r2, [pc, #84]	; (800ccb8 <vTaskStartScheduler+0xd0>)
 800cc64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc66:	4b15      	ldr	r3, [pc, #84]	; (800ccbc <vTaskStartScheduler+0xd4>)
 800cc68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc6e:	4b14      	ldr	r3, [pc, #80]	; (800ccc0 <vTaskStartScheduler+0xd8>)
 800cc70:	2201      	movs	r2, #1
 800cc72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc74:	4b13      	ldr	r3, [pc, #76]	; (800ccc4 <vTaskStartScheduler+0xdc>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc7a:	f001 f9f1 	bl	800e060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc7e:	e00e      	b.n	800cc9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc86:	d10a      	bne.n	800cc9e <vTaskStartScheduler+0xb6>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	60fb      	str	r3, [r7, #12]
}
 800cc9a:	bf00      	nop
 800cc9c:	e7fe      	b.n	800cc9c <vTaskStartScheduler+0xb4>
}
 800cc9e:	bf00      	nop
 800cca0:	3718      	adds	r7, #24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	0801ebec 	.word	0x0801ebec
 800ccac:	0800d339 	.word	0x0800d339
 800ccb0:	20005bcc 	.word	0x20005bcc
 800ccb4:	200056d4 	.word	0x200056d4
 800ccb8:	20000088 	.word	0x20000088
 800ccbc:	20005bc8 	.word	0x20005bc8
 800ccc0:	20005bb4 	.word	0x20005bb4
 800ccc4:	20005bac 	.word	0x20005bac

0800ccc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ccc8:	b480      	push	{r7}
 800ccca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cccc:	4b04      	ldr	r3, [pc, #16]	; (800cce0 <vTaskSuspendAll+0x18>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	4a03      	ldr	r2, [pc, #12]	; (800cce0 <vTaskSuspendAll+0x18>)
 800ccd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccd6:	bf00      	nop
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	20005bd0 	.word	0x20005bd0

0800cce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccf2:	4b42      	ldr	r3, [pc, #264]	; (800cdfc <xTaskResumeAll+0x118>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10a      	bne.n	800cd10 <xTaskResumeAll+0x2c>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	603b      	str	r3, [r7, #0]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd10:	f001 fa48 	bl	800e1a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd14:	4b39      	ldr	r3, [pc, #228]	; (800cdfc <xTaskResumeAll+0x118>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	4a38      	ldr	r2, [pc, #224]	; (800cdfc <xTaskResumeAll+0x118>)
 800cd1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd1e:	4b37      	ldr	r3, [pc, #220]	; (800cdfc <xTaskResumeAll+0x118>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d162      	bne.n	800cdec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd26:	4b36      	ldr	r3, [pc, #216]	; (800ce00 <xTaskResumeAll+0x11c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d05e      	beq.n	800cdec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd2e:	e02f      	b.n	800cd90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd30:	4b34      	ldr	r3, [pc, #208]	; (800ce04 <xTaskResumeAll+0x120>)
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	3318      	adds	r3, #24
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fe fef3 	bl	800bb28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3304      	adds	r3, #4
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe feee 	bl	800bb28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd50:	4b2d      	ldr	r3, [pc, #180]	; (800ce08 <xTaskResumeAll+0x124>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d903      	bls.n	800cd60 <xTaskResumeAll+0x7c>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5c:	4a2a      	ldr	r2, [pc, #168]	; (800ce08 <xTaskResumeAll+0x124>)
 800cd5e:	6013      	str	r3, [r2, #0]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4a27      	ldr	r2, [pc, #156]	; (800ce0c <xTaskResumeAll+0x128>)
 800cd6e:	441a      	add	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	3304      	adds	r3, #4
 800cd74:	4619      	mov	r1, r3
 800cd76:	4610      	mov	r0, r2
 800cd78:	f7fe fe79 	bl	800ba6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd80:	4b23      	ldr	r3, [pc, #140]	; (800ce10 <xTaskResumeAll+0x12c>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d302      	bcc.n	800cd90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cd8a:	4b22      	ldr	r3, [pc, #136]	; (800ce14 <xTaskResumeAll+0x130>)
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd90:	4b1c      	ldr	r3, [pc, #112]	; (800ce04 <xTaskResumeAll+0x120>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1cb      	bne.n	800cd30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd9e:	f000 fb85 	bl	800d4ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cda2:	4b1d      	ldr	r3, [pc, #116]	; (800ce18 <xTaskResumeAll+0x134>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d010      	beq.n	800cdd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdae:	f000 f847 	bl	800ce40 <xTaskIncrementTick>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cdb8:	4b16      	ldr	r3, [pc, #88]	; (800ce14 <xTaskResumeAll+0x130>)
 800cdba:	2201      	movs	r2, #1
 800cdbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1f1      	bne.n	800cdae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cdca:	4b13      	ldr	r3, [pc, #76]	; (800ce18 <xTaskResumeAll+0x134>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cdd0:	4b10      	ldr	r3, [pc, #64]	; (800ce14 <xTaskResumeAll+0x130>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d009      	beq.n	800cdec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cddc:	4b0f      	ldr	r3, [pc, #60]	; (800ce1c <xTaskResumeAll+0x138>)
 800cdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdec:	f001 fa0a 	bl	800e204 <vPortExitCritical>

	return xAlreadyYielded;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20005bd0 	.word	0x20005bd0
 800ce00:	20005ba8 	.word	0x20005ba8
 800ce04:	20005b68 	.word	0x20005b68
 800ce08:	20005bb0 	.word	0x20005bb0
 800ce0c:	200056d8 	.word	0x200056d8
 800ce10:	200056d4 	.word	0x200056d4
 800ce14:	20005bbc 	.word	0x20005bbc
 800ce18:	20005bb8 	.word	0x20005bb8
 800ce1c:	e000ed04 	.word	0xe000ed04

0800ce20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce26:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <xTaskGetTickCount+0x1c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce2c:	687b      	ldr	r3, [r7, #4]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	20005bac 	.word	0x20005bac

0800ce40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce4a:	4b4f      	ldr	r3, [pc, #316]	; (800cf88 <xTaskIncrementTick+0x148>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f040 808f 	bne.w	800cf72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce54:	4b4d      	ldr	r3, [pc, #308]	; (800cf8c <xTaskIncrementTick+0x14c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce5c:	4a4b      	ldr	r2, [pc, #300]	; (800cf8c <xTaskIncrementTick+0x14c>)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d120      	bne.n	800ceaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce68:	4b49      	ldr	r3, [pc, #292]	; (800cf90 <xTaskIncrementTick+0x150>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00a      	beq.n	800ce88 <xTaskIncrementTick+0x48>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	603b      	str	r3, [r7, #0]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <xTaskIncrementTick+0x46>
 800ce88:	4b41      	ldr	r3, [pc, #260]	; (800cf90 <xTaskIncrementTick+0x150>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	60fb      	str	r3, [r7, #12]
 800ce8e:	4b41      	ldr	r3, [pc, #260]	; (800cf94 <xTaskIncrementTick+0x154>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a3f      	ldr	r2, [pc, #252]	; (800cf90 <xTaskIncrementTick+0x150>)
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	4a3f      	ldr	r2, [pc, #252]	; (800cf94 <xTaskIncrementTick+0x154>)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	4b3e      	ldr	r3, [pc, #248]	; (800cf98 <xTaskIncrementTick+0x158>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	4a3d      	ldr	r2, [pc, #244]	; (800cf98 <xTaskIncrementTick+0x158>)
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	f000 fb01 	bl	800d4ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceaa:	4b3c      	ldr	r3, [pc, #240]	; (800cf9c <xTaskIncrementTick+0x15c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d349      	bcc.n	800cf48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceb4:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <xTaskIncrementTick+0x150>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d104      	bne.n	800cec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cebe:	4b37      	ldr	r3, [pc, #220]	; (800cf9c <xTaskIncrementTick+0x15c>)
 800cec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cec4:	601a      	str	r2, [r3, #0]
					break;
 800cec6:	e03f      	b.n	800cf48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cec8:	4b31      	ldr	r3, [pc, #196]	; (800cf90 <xTaskIncrementTick+0x150>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ced8:	693a      	ldr	r2, [r7, #16]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d203      	bcs.n	800cee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cee0:	4a2e      	ldr	r2, [pc, #184]	; (800cf9c <xTaskIncrementTick+0x15c>)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cee6:	e02f      	b.n	800cf48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	3304      	adds	r3, #4
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fe1b 	bl	800bb28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d004      	beq.n	800cf04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	3318      	adds	r3, #24
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fe fe12 	bl	800bb28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf08:	4b25      	ldr	r3, [pc, #148]	; (800cfa0 <xTaskIncrementTick+0x160>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d903      	bls.n	800cf18 <xTaskIncrementTick+0xd8>
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf14:	4a22      	ldr	r2, [pc, #136]	; (800cfa0 <xTaskIncrementTick+0x160>)
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4a1f      	ldr	r2, [pc, #124]	; (800cfa4 <xTaskIncrementTick+0x164>)
 800cf26:	441a      	add	r2, r3
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	4610      	mov	r0, r2
 800cf30:	f7fe fd9d 	bl	800ba6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf38:	4b1b      	ldr	r3, [pc, #108]	; (800cfa8 <xTaskIncrementTick+0x168>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d3b8      	bcc.n	800ceb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf42:	2301      	movs	r3, #1
 800cf44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf46:	e7b5      	b.n	800ceb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf48:	4b17      	ldr	r3, [pc, #92]	; (800cfa8 <xTaskIncrementTick+0x168>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf4e:	4915      	ldr	r1, [pc, #84]	; (800cfa4 <xTaskIncrementTick+0x164>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d901      	bls.n	800cf64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cf60:	2301      	movs	r3, #1
 800cf62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf64:	4b11      	ldr	r3, [pc, #68]	; (800cfac <xTaskIncrementTick+0x16c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d007      	beq.n	800cf7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e004      	b.n	800cf7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf72:	4b0f      	ldr	r3, [pc, #60]	; (800cfb0 <xTaskIncrementTick+0x170>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3301      	adds	r3, #1
 800cf78:	4a0d      	ldr	r2, [pc, #52]	; (800cfb0 <xTaskIncrementTick+0x170>)
 800cf7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf7c:	697b      	ldr	r3, [r7, #20]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	20005bd0 	.word	0x20005bd0
 800cf8c:	20005bac 	.word	0x20005bac
 800cf90:	20005b60 	.word	0x20005b60
 800cf94:	20005b64 	.word	0x20005b64
 800cf98:	20005bc0 	.word	0x20005bc0
 800cf9c:	20005bc8 	.word	0x20005bc8
 800cfa0:	20005bb0 	.word	0x20005bb0
 800cfa4:	200056d8 	.word	0x200056d8
 800cfa8:	200056d4 	.word	0x200056d4
 800cfac:	20005bbc 	.word	0x20005bbc
 800cfb0:	20005bb8 	.word	0x20005bb8

0800cfb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfba:	4b2a      	ldr	r3, [pc, #168]	; (800d064 <vTaskSwitchContext+0xb0>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfc2:	4b29      	ldr	r3, [pc, #164]	; (800d068 <vTaskSwitchContext+0xb4>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfc8:	e046      	b.n	800d058 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cfca:	4b27      	ldr	r3, [pc, #156]	; (800d068 <vTaskSwitchContext+0xb4>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd0:	4b26      	ldr	r3, [pc, #152]	; (800d06c <vTaskSwitchContext+0xb8>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60fb      	str	r3, [r7, #12]
 800cfd6:	e010      	b.n	800cffa <vTaskSwitchContext+0x46>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d10a      	bne.n	800cff4 <vTaskSwitchContext+0x40>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	607b      	str	r3, [r7, #4]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <vTaskSwitchContext+0x3e>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	60fb      	str	r3, [r7, #12]
 800cffa:	491d      	ldr	r1, [pc, #116]	; (800d070 <vTaskSwitchContext+0xbc>)
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	4613      	mov	r3, r2
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4413      	add	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	440b      	add	r3, r1
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0e4      	beq.n	800cfd8 <vTaskSwitchContext+0x24>
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	4613      	mov	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4a15      	ldr	r2, [pc, #84]	; (800d070 <vTaskSwitchContext+0xbc>)
 800d01a:	4413      	add	r3, r2
 800d01c:	60bb      	str	r3, [r7, #8]
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	685a      	ldr	r2, [r3, #4]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	605a      	str	r2, [r3, #4]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	3308      	adds	r3, #8
 800d030:	429a      	cmp	r2, r3
 800d032:	d104      	bne.n	800d03e <vTaskSwitchContext+0x8a>
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	685a      	ldr	r2, [r3, #4]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	605a      	str	r2, [r3, #4]
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	4a0b      	ldr	r2, [pc, #44]	; (800d074 <vTaskSwitchContext+0xc0>)
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	4a08      	ldr	r2, [pc, #32]	; (800d06c <vTaskSwitchContext+0xb8>)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d04e:	4b09      	ldr	r3, [pc, #36]	; (800d074 <vTaskSwitchContext+0xc0>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3354      	adds	r3, #84	; 0x54
 800d054:	4a08      	ldr	r2, [pc, #32]	; (800d078 <vTaskSwitchContext+0xc4>)
 800d056:	6013      	str	r3, [r2, #0]
}
 800d058:	bf00      	nop
 800d05a:	3714      	adds	r7, #20
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr
 800d064:	20005bd0 	.word	0x20005bd0
 800d068:	20005bbc 	.word	0x20005bbc
 800d06c:	20005bb0 	.word	0x20005bb0
 800d070:	200056d8 	.word	0x200056d8
 800d074:	200056d4 	.word	0x200056d4
 800d078:	20000088 	.word	0x20000088

0800d07c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10a      	bne.n	800d0a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d090:	f383 8811 	msr	BASEPRI, r3
 800d094:	f3bf 8f6f 	isb	sy
 800d098:	f3bf 8f4f 	dsb	sy
 800d09c:	60fb      	str	r3, [r7, #12]
}
 800d09e:	bf00      	nop
 800d0a0:	e7fe      	b.n	800d0a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0a2:	4b07      	ldr	r3, [pc, #28]	; (800d0c0 <vTaskPlaceOnEventList+0x44>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	3318      	adds	r3, #24
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7fe fd03 	bl	800bab6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	6838      	ldr	r0, [r7, #0]
 800d0b4:	f000 fba4 	bl	800d800 <prvAddCurrentTaskToDelayedList>
}
 800d0b8:	bf00      	nop
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	200056d4 	.word	0x200056d4

0800d0c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10a      	bne.n	800d0ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	617b      	str	r3, [r7, #20]
}
 800d0e8:	bf00      	nop
 800d0ea:	e7fe      	b.n	800d0ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <vTaskPlaceOnEventListRestricted+0x54>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3318      	adds	r3, #24
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7fe fcba 	bl	800ba6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d104:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	68b8      	ldr	r0, [r7, #8]
 800d10a:	f000 fb79 	bl	800d800 <prvAddCurrentTaskToDelayedList>
	}
 800d10e:	bf00      	nop
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	200056d4 	.word	0x200056d4

0800d11c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10a      	bne.n	800d148 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	60fb      	str	r3, [r7, #12]
}
 800d144:	bf00      	nop
 800d146:	e7fe      	b.n	800d146 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	3318      	adds	r3, #24
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fe fceb 	bl	800bb28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d152:	4b1e      	ldr	r3, [pc, #120]	; (800d1cc <xTaskRemoveFromEventList+0xb0>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d11d      	bne.n	800d196 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	3304      	adds	r3, #4
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fe fce2 	bl	800bb28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d168:	4b19      	ldr	r3, [pc, #100]	; (800d1d0 <xTaskRemoveFromEventList+0xb4>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d903      	bls.n	800d178 <xTaskRemoveFromEventList+0x5c>
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d174:	4a16      	ldr	r2, [pc, #88]	; (800d1d0 <xTaskRemoveFromEventList+0xb4>)
 800d176:	6013      	str	r3, [r2, #0]
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4a13      	ldr	r2, [pc, #76]	; (800d1d4 <xTaskRemoveFromEventList+0xb8>)
 800d186:	441a      	add	r2, r3
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	3304      	adds	r3, #4
 800d18c:	4619      	mov	r1, r3
 800d18e:	4610      	mov	r0, r2
 800d190:	f7fe fc6d 	bl	800ba6e <vListInsertEnd>
 800d194:	e005      	b.n	800d1a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	3318      	adds	r3, #24
 800d19a:	4619      	mov	r1, r3
 800d19c:	480e      	ldr	r0, [pc, #56]	; (800d1d8 <xTaskRemoveFromEventList+0xbc>)
 800d19e:	f7fe fc66 	bl	800ba6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a6:	4b0d      	ldr	r3, [pc, #52]	; (800d1dc <xTaskRemoveFromEventList+0xc0>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d905      	bls.n	800d1bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1b4:	4b0a      	ldr	r3, [pc, #40]	; (800d1e0 <xTaskRemoveFromEventList+0xc4>)
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	e001      	b.n	800d1c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1c0:	697b      	ldr	r3, [r7, #20]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	20005bd0 	.word	0x20005bd0
 800d1d0:	20005bb0 	.word	0x20005bb0
 800d1d4:	200056d8 	.word	0x200056d8
 800d1d8:	20005b68 	.word	0x20005b68
 800d1dc:	200056d4 	.word	0x200056d4
 800d1e0:	20005bbc 	.word	0x20005bbc

0800d1e4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10a      	bne.n	800d208 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	60fb      	str	r3, [r7, #12]
}
 800d204:	bf00      	nop
 800d206:	e7fe      	b.n	800d206 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d208:	f000 ffcc 	bl	800e1a4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d20c:	4b06      	ldr	r3, [pc, #24]	; (800d228 <vTaskSetTimeOutState+0x44>)
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d214:	4b05      	ldr	r3, [pc, #20]	; (800d22c <vTaskSetTimeOutState+0x48>)
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d21c:	f000 fff2 	bl	800e204 <vPortExitCritical>
}
 800d220:	bf00      	nop
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	20005bc0 	.word	0x20005bc0
 800d22c:	20005bac 	.word	0x20005bac

0800d230 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d238:	4b06      	ldr	r3, [pc, #24]	; (800d254 <vTaskInternalSetTimeOutState+0x24>)
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d240:	4b05      	ldr	r3, [pc, #20]	; (800d258 <vTaskInternalSetTimeOutState+0x28>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	605a      	str	r2, [r3, #4]
}
 800d248:	bf00      	nop
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	20005bc0 	.word	0x20005bc0
 800d258:	20005bac 	.word	0x20005bac

0800d25c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b088      	sub	sp, #32
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10a      	bne.n	800d282 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d270:	f383 8811 	msr	BASEPRI, r3
 800d274:	f3bf 8f6f 	isb	sy
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	613b      	str	r3, [r7, #16]
}
 800d27e:	bf00      	nop
 800d280:	e7fe      	b.n	800d280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d10a      	bne.n	800d29e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	60fb      	str	r3, [r7, #12]
}
 800d29a:	bf00      	nop
 800d29c:	e7fe      	b.n	800d29c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d29e:	f000 ff81 	bl	800e1a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2a2:	4b1d      	ldr	r3, [pc, #116]	; (800d318 <xTaskCheckForTimeOut+0xbc>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	69ba      	ldr	r2, [r7, #24]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2ba:	d102      	bne.n	800d2c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	61fb      	str	r3, [r7, #28]
 800d2c0:	e023      	b.n	800d30a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	4b15      	ldr	r3, [pc, #84]	; (800d31c <xTaskCheckForTimeOut+0xc0>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d007      	beq.n	800d2de <xTaskCheckForTimeOut+0x82>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	69ba      	ldr	r2, [r7, #24]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d302      	bcc.n	800d2de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	61fb      	str	r3, [r7, #28]
 800d2dc:	e015      	b.n	800d30a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d20b      	bcs.n	800d300 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	1ad2      	subs	r2, r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff ff9b 	bl	800d230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	61fb      	str	r3, [r7, #28]
 800d2fe:	e004      	b.n	800d30a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2200      	movs	r2, #0
 800d304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d306:	2301      	movs	r3, #1
 800d308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d30a:	f000 ff7b 	bl	800e204 <vPortExitCritical>

	return xReturn;
 800d30e:	69fb      	ldr	r3, [r7, #28]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20005bac 	.word	0x20005bac
 800d31c:	20005bc0 	.word	0x20005bc0

0800d320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d320:	b480      	push	{r7}
 800d322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d324:	4b03      	ldr	r3, [pc, #12]	; (800d334 <vTaskMissedYield+0x14>)
 800d326:	2201      	movs	r2, #1
 800d328:	601a      	str	r2, [r3, #0]
}
 800d32a:	bf00      	nop
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	20005bbc 	.word	0x20005bbc

0800d338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d340:	f000 f852 	bl	800d3e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d344:	4b06      	ldr	r3, [pc, #24]	; (800d360 <prvIdleTask+0x28>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d9f9      	bls.n	800d340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d34c:	4b05      	ldr	r3, [pc, #20]	; (800d364 <prvIdleTask+0x2c>)
 800d34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d35c:	e7f0      	b.n	800d340 <prvIdleTask+0x8>
 800d35e:	bf00      	nop
 800d360:	200056d8 	.word	0x200056d8
 800d364:	e000ed04 	.word	0xe000ed04

0800d368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d36e:	2300      	movs	r3, #0
 800d370:	607b      	str	r3, [r7, #4]
 800d372:	e00c      	b.n	800d38e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	4613      	mov	r3, r2
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4413      	add	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4a12      	ldr	r2, [pc, #72]	; (800d3c8 <prvInitialiseTaskLists+0x60>)
 800d380:	4413      	add	r3, r2
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe fb46 	bl	800ba14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	3301      	adds	r3, #1
 800d38c:	607b      	str	r3, [r7, #4]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b37      	cmp	r3, #55	; 0x37
 800d392:	d9ef      	bls.n	800d374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d394:	480d      	ldr	r0, [pc, #52]	; (800d3cc <prvInitialiseTaskLists+0x64>)
 800d396:	f7fe fb3d 	bl	800ba14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d39a:	480d      	ldr	r0, [pc, #52]	; (800d3d0 <prvInitialiseTaskLists+0x68>)
 800d39c:	f7fe fb3a 	bl	800ba14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3a0:	480c      	ldr	r0, [pc, #48]	; (800d3d4 <prvInitialiseTaskLists+0x6c>)
 800d3a2:	f7fe fb37 	bl	800ba14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3a6:	480c      	ldr	r0, [pc, #48]	; (800d3d8 <prvInitialiseTaskLists+0x70>)
 800d3a8:	f7fe fb34 	bl	800ba14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3ac:	480b      	ldr	r0, [pc, #44]	; (800d3dc <prvInitialiseTaskLists+0x74>)
 800d3ae:	f7fe fb31 	bl	800ba14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d3b2:	4b0b      	ldr	r3, [pc, #44]	; (800d3e0 <prvInitialiseTaskLists+0x78>)
 800d3b4:	4a05      	ldr	r2, [pc, #20]	; (800d3cc <prvInitialiseTaskLists+0x64>)
 800d3b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <prvInitialiseTaskLists+0x7c>)
 800d3ba:	4a05      	ldr	r2, [pc, #20]	; (800d3d0 <prvInitialiseTaskLists+0x68>)
 800d3bc:	601a      	str	r2, [r3, #0]
}
 800d3be:	bf00      	nop
 800d3c0:	3708      	adds	r7, #8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	200056d8 	.word	0x200056d8
 800d3cc:	20005b38 	.word	0x20005b38
 800d3d0:	20005b4c 	.word	0x20005b4c
 800d3d4:	20005b68 	.word	0x20005b68
 800d3d8:	20005b7c 	.word	0x20005b7c
 800d3dc:	20005b94 	.word	0x20005b94
 800d3e0:	20005b60 	.word	0x20005b60
 800d3e4:	20005b64 	.word	0x20005b64

0800d3e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3ee:	e019      	b.n	800d424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3f0:	f000 fed8 	bl	800e1a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3f4:	4b10      	ldr	r3, [pc, #64]	; (800d438 <prvCheckTasksWaitingTermination+0x50>)
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3304      	adds	r3, #4
 800d400:	4618      	mov	r0, r3
 800d402:	f7fe fb91 	bl	800bb28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d406:	4b0d      	ldr	r3, [pc, #52]	; (800d43c <prvCheckTasksWaitingTermination+0x54>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3b01      	subs	r3, #1
 800d40c:	4a0b      	ldr	r2, [pc, #44]	; (800d43c <prvCheckTasksWaitingTermination+0x54>)
 800d40e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d410:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <prvCheckTasksWaitingTermination+0x58>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3b01      	subs	r3, #1
 800d416:	4a0a      	ldr	r2, [pc, #40]	; (800d440 <prvCheckTasksWaitingTermination+0x58>)
 800d418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d41a:	f000 fef3 	bl	800e204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f810 	bl	800d444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d424:	4b06      	ldr	r3, [pc, #24]	; (800d440 <prvCheckTasksWaitingTermination+0x58>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e1      	bne.n	800d3f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	20005b7c 	.word	0x20005b7c
 800d43c:	20005ba8 	.word	0x20005ba8
 800d440:	20005b90 	.word	0x20005b90

0800d444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3354      	adds	r3, #84	; 0x54
 800d450:	4618      	mov	r0, r3
 800d452:	f00d fd3f 	bl	801aed4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d108      	bne.n	800d472 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d464:	4618      	mov	r0, r3
 800d466:	f001 f88b 	bl	800e580 <vPortFree>
				vPortFree( pxTCB );
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f001 f888 	bl	800e580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d470:	e018      	b.n	800d4a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d103      	bne.n	800d484 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f001 f87f 	bl	800e580 <vPortFree>
	}
 800d482:	e00f      	b.n	800d4a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d00a      	beq.n	800d4a4 <prvDeleteTCB+0x60>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	60fb      	str	r3, [r7, #12]
}
 800d4a0:	bf00      	nop
 800d4a2:	e7fe      	b.n	800d4a2 <prvDeleteTCB+0x5e>
	}
 800d4a4:	bf00      	nop
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4b2:	4b0c      	ldr	r3, [pc, #48]	; (800d4e4 <prvResetNextTaskUnblockTime+0x38>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d104      	bne.n	800d4c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <prvResetNextTaskUnblockTime+0x3c>)
 800d4be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4c4:	e008      	b.n	800d4d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c6:	4b07      	ldr	r3, [pc, #28]	; (800d4e4 <prvResetNextTaskUnblockTime+0x38>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	4a04      	ldr	r2, [pc, #16]	; (800d4e8 <prvResetNextTaskUnblockTime+0x3c>)
 800d4d6:	6013      	str	r3, [r2, #0]
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	20005b60 	.word	0x20005b60
 800d4e8:	20005bc8 	.word	0x20005bc8

0800d4ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d4f2:	4b0b      	ldr	r3, [pc, #44]	; (800d520 <xTaskGetSchedulerState+0x34>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d102      	bne.n	800d500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	607b      	str	r3, [r7, #4]
 800d4fe:	e008      	b.n	800d512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d500:	4b08      	ldr	r3, [pc, #32]	; (800d524 <xTaskGetSchedulerState+0x38>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d102      	bne.n	800d50e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d508:	2302      	movs	r3, #2
 800d50a:	607b      	str	r3, [r7, #4]
 800d50c:	e001      	b.n	800d512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d50e:	2300      	movs	r3, #0
 800d510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d512:	687b      	ldr	r3, [r7, #4]
	}
 800d514:	4618      	mov	r0, r3
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	20005bb4 	.word	0x20005bb4
 800d524:	20005bd0 	.word	0x20005bd0

0800d528 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d534:	2300      	movs	r3, #0
 800d536:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d051      	beq.n	800d5e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d542:	4b2a      	ldr	r3, [pc, #168]	; (800d5ec <xTaskPriorityInherit+0xc4>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d548:	429a      	cmp	r2, r3
 800d54a:	d241      	bcs.n	800d5d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	2b00      	cmp	r3, #0
 800d552:	db06      	blt.n	800d562 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d554:	4b25      	ldr	r3, [pc, #148]	; (800d5ec <xTaskPriorityInherit+0xc4>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	6959      	ldr	r1, [r3, #20]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56a:	4613      	mov	r3, r2
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4413      	add	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	4a1f      	ldr	r2, [pc, #124]	; (800d5f0 <xTaskPriorityInherit+0xc8>)
 800d574:	4413      	add	r3, r2
 800d576:	4299      	cmp	r1, r3
 800d578:	d122      	bne.n	800d5c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	3304      	adds	r3, #4
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fe fad2 	bl	800bb28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d584:	4b19      	ldr	r3, [pc, #100]	; (800d5ec <xTaskPriorityInherit+0xc4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d592:	4b18      	ldr	r3, [pc, #96]	; (800d5f4 <xTaskPriorityInherit+0xcc>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d903      	bls.n	800d5a2 <xTaskPriorityInherit+0x7a>
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59e:	4a15      	ldr	r2, [pc, #84]	; (800d5f4 <xTaskPriorityInherit+0xcc>)
 800d5a0:	6013      	str	r3, [r2, #0]
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4413      	add	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	4a10      	ldr	r2, [pc, #64]	; (800d5f0 <xTaskPriorityInherit+0xc8>)
 800d5b0:	441a      	add	r2, r3
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f7fe fa58 	bl	800ba6e <vListInsertEnd>
 800d5be:	e004      	b.n	800d5ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <xTaskPriorityInherit+0xc4>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	e008      	b.n	800d5e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5d4:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <xTaskPriorityInherit+0xc4>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d201      	bcs.n	800d5e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
	}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3710      	adds	r7, #16
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	200056d4 	.word	0x200056d4
 800d5f0:	200056d8 	.word	0x200056d8
 800d5f4:	20005bb0 	.word	0x20005bb0

0800d5f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d056      	beq.n	800d6bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d60e:	4b2e      	ldr	r3, [pc, #184]	; (800d6c8 <xTaskPriorityDisinherit+0xd0>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	429a      	cmp	r2, r3
 800d616:	d00a      	beq.n	800d62e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61c:	f383 8811 	msr	BASEPRI, r3
 800d620:	f3bf 8f6f 	isb	sy
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	60fb      	str	r3, [r7, #12]
}
 800d62a:	bf00      	nop
 800d62c:	e7fe      	b.n	800d62c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10a      	bne.n	800d64c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	60bb      	str	r3, [r7, #8]
}
 800d648:	bf00      	nop
 800d64a:	e7fe      	b.n	800d64a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d650:	1e5a      	subs	r2, r3, #1
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d65e:	429a      	cmp	r2, r3
 800d660:	d02c      	beq.n	800d6bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d666:	2b00      	cmp	r3, #0
 800d668:	d128      	bne.n	800d6bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	3304      	adds	r3, #4
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fa5a 	bl	800bb28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	4b0f      	ldr	r3, [pc, #60]	; (800d6cc <xTaskPriorityDisinherit+0xd4>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	429a      	cmp	r2, r3
 800d692:	d903      	bls.n	800d69c <xTaskPriorityDisinherit+0xa4>
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	4a0c      	ldr	r2, [pc, #48]	; (800d6cc <xTaskPriorityDisinherit+0xd4>)
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	4413      	add	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4a09      	ldr	r2, [pc, #36]	; (800d6d0 <xTaskPriorityDisinherit+0xd8>)
 800d6aa:	441a      	add	r2, r3
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	f7fe f9db 	bl	800ba6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6bc:	697b      	ldr	r3, [r7, #20]
	}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	200056d4 	.word	0x200056d4
 800d6cc:	20005bb0 	.word	0x20005bb0
 800d6d0:	200056d8 	.word	0x200056d8

0800d6d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d06a      	beq.n	800d7c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10a      	bne.n	800d70a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f8:	f383 8811 	msr	BASEPRI, r3
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	f3bf 8f4f 	dsb	sy
 800d704:	60fb      	str	r3, [r7, #12]
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d70e:	683a      	ldr	r2, [r7, #0]
 800d710:	429a      	cmp	r2, r3
 800d712:	d902      	bls.n	800d71a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	61fb      	str	r3, [r7, #28]
 800d718:	e002      	b.n	800d720 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d71e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	69fa      	ldr	r2, [r7, #28]
 800d726:	429a      	cmp	r2, r3
 800d728:	d04b      	beq.n	800d7c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	429a      	cmp	r2, r3
 800d732:	d146      	bne.n	800d7c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d734:	4b25      	ldr	r3, [pc, #148]	; (800d7cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d10a      	bne.n	800d754 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	f383 8811 	msr	BASEPRI, r3
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	60bb      	str	r3, [r7, #8]
}
 800d750:	bf00      	nop
 800d752:	e7fe      	b.n	800d752 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d758:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	69fa      	ldr	r2, [r7, #28]
 800d75e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	2b00      	cmp	r3, #0
 800d766:	db04      	blt.n	800d772 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	6959      	ldr	r1, [r3, #20]
 800d776:	693a      	ldr	r2, [r7, #16]
 800d778:	4613      	mov	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4a13      	ldr	r2, [pc, #76]	; (800d7d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d782:	4413      	add	r3, r2
 800d784:	4299      	cmp	r1, r3
 800d786:	d11c      	bne.n	800d7c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	3304      	adds	r3, #4
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe f9cb 	bl	800bb28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d796:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d903      	bls.n	800d7a6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a2:	4a0c      	ldr	r2, [pc, #48]	; (800d7d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d7a4:	6013      	str	r3, [r2, #0]
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4a07      	ldr	r2, [pc, #28]	; (800d7d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d7b4:	441a      	add	r2, r3
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	4610      	mov	r0, r2
 800d7be:	f7fe f956 	bl	800ba6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7c2:	bf00      	nop
 800d7c4:	3720      	adds	r7, #32
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	200056d4 	.word	0x200056d4
 800d7d0:	200056d8 	.word	0x200056d8
 800d7d4:	20005bb0 	.word	0x20005bb0

0800d7d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d7d8:	b480      	push	{r7}
 800d7da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d7dc:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <pvTaskIncrementMutexHeldCount+0x24>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d004      	beq.n	800d7ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d7e4:	4b05      	ldr	r3, [pc, #20]	; (800d7fc <pvTaskIncrementMutexHeldCount+0x24>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7ea:	3201      	adds	r2, #1
 800d7ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d7ee:	4b03      	ldr	r3, [pc, #12]	; (800d7fc <pvTaskIncrementMutexHeldCount+0x24>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
	}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	200056d4 	.word	0x200056d4

0800d800 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d80a:	4b21      	ldr	r3, [pc, #132]	; (800d890 <prvAddCurrentTaskToDelayedList+0x90>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d810:	4b20      	ldr	r3, [pc, #128]	; (800d894 <prvAddCurrentTaskToDelayedList+0x94>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3304      	adds	r3, #4
 800d816:	4618      	mov	r0, r3
 800d818:	f7fe f986 	bl	800bb28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d822:	d10a      	bne.n	800d83a <prvAddCurrentTaskToDelayedList+0x3a>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d007      	beq.n	800d83a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d82a:	4b1a      	ldr	r3, [pc, #104]	; (800d894 <prvAddCurrentTaskToDelayedList+0x94>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3304      	adds	r3, #4
 800d830:	4619      	mov	r1, r3
 800d832:	4819      	ldr	r0, [pc, #100]	; (800d898 <prvAddCurrentTaskToDelayedList+0x98>)
 800d834:	f7fe f91b 	bl	800ba6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d838:	e026      	b.n	800d888 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4413      	add	r3, r2
 800d840:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d842:	4b14      	ldr	r3, [pc, #80]	; (800d894 <prvAddCurrentTaskToDelayedList+0x94>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d84a:	68ba      	ldr	r2, [r7, #8]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d209      	bcs.n	800d866 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d852:	4b12      	ldr	r3, [pc, #72]	; (800d89c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	4b0f      	ldr	r3, [pc, #60]	; (800d894 <prvAddCurrentTaskToDelayedList+0x94>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3304      	adds	r3, #4
 800d85c:	4619      	mov	r1, r3
 800d85e:	4610      	mov	r0, r2
 800d860:	f7fe f929 	bl	800bab6 <vListInsert>
}
 800d864:	e010      	b.n	800d888 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d866:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	4b0a      	ldr	r3, [pc, #40]	; (800d894 <prvAddCurrentTaskToDelayedList+0x94>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3304      	adds	r3, #4
 800d870:	4619      	mov	r1, r3
 800d872:	4610      	mov	r0, r2
 800d874:	f7fe f91f 	bl	800bab6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d878:	4b0a      	ldr	r3, [pc, #40]	; (800d8a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d202      	bcs.n	800d888 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d882:	4a08      	ldr	r2, [pc, #32]	; (800d8a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	6013      	str	r3, [r2, #0]
}
 800d888:	bf00      	nop
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	20005bac 	.word	0x20005bac
 800d894:	200056d4 	.word	0x200056d4
 800d898:	20005b94 	.word	0x20005b94
 800d89c:	20005b64 	.word	0x20005b64
 800d8a0:	20005b60 	.word	0x20005b60
 800d8a4:	20005bc8 	.word	0x20005bc8

0800d8a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b08a      	sub	sp, #40	; 0x28
 800d8ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8b2:	f000 fb07 	bl	800dec4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8b6:	4b1c      	ldr	r3, [pc, #112]	; (800d928 <xTimerCreateTimerTask+0x80>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d021      	beq.n	800d902 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8c6:	1d3a      	adds	r2, r7, #4
 800d8c8:	f107 0108 	add.w	r1, r7, #8
 800d8cc:	f107 030c 	add.w	r3, r7, #12
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe f885 	bl	800b9e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8d6:	6879      	ldr	r1, [r7, #4]
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	9202      	str	r2, [sp, #8]
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	2302      	movs	r3, #2
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	460a      	mov	r2, r1
 800d8e8:	4910      	ldr	r1, [pc, #64]	; (800d92c <xTimerCreateTimerTask+0x84>)
 800d8ea:	4811      	ldr	r0, [pc, #68]	; (800d930 <xTimerCreateTimerTask+0x88>)
 800d8ec:	f7fe ff90 	bl	800c810 <xTaskCreateStatic>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	4a10      	ldr	r2, [pc, #64]	; (800d934 <xTimerCreateTimerTask+0x8c>)
 800d8f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d8f6:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <xTimerCreateTimerTask+0x8c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d8fe:	2301      	movs	r3, #1
 800d900:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10a      	bne.n	800d91e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	613b      	str	r3, [r7, #16]
}
 800d91a:	bf00      	nop
 800d91c:	e7fe      	b.n	800d91c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d91e:	697b      	ldr	r3, [r7, #20]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3718      	adds	r7, #24
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	20005c04 	.word	0x20005c04
 800d92c:	0801ebf4 	.word	0x0801ebf4
 800d930:	0800da6d 	.word	0x0800da6d
 800d934:	20005c08 	.word	0x20005c08

0800d938 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08a      	sub	sp, #40	; 0x28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
 800d944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d946:	2300      	movs	r3, #0
 800d948:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10a      	bne.n	800d966 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	623b      	str	r3, [r7, #32]
}
 800d962:	bf00      	nop
 800d964:	e7fe      	b.n	800d964 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d966:	4b1a      	ldr	r3, [pc, #104]	; (800d9d0 <xTimerGenericCommand+0x98>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d02a      	beq.n	800d9c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2b05      	cmp	r3, #5
 800d97e:	dc18      	bgt.n	800d9b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d980:	f7ff fdb4 	bl	800d4ec <xTaskGetSchedulerState>
 800d984:	4603      	mov	r3, r0
 800d986:	2b02      	cmp	r3, #2
 800d988:	d109      	bne.n	800d99e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d98a:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <xTimerGenericCommand+0x98>)
 800d98c:	6818      	ldr	r0, [r3, #0]
 800d98e:	f107 0110 	add.w	r1, r7, #16
 800d992:	2300      	movs	r3, #0
 800d994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d996:	f7fe fa2f 	bl	800bdf8 <xQueueGenericSend>
 800d99a:	6278      	str	r0, [r7, #36]	; 0x24
 800d99c:	e012      	b.n	800d9c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d99e:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <xTimerGenericCommand+0x98>)
 800d9a0:	6818      	ldr	r0, [r3, #0]
 800d9a2:	f107 0110 	add.w	r1, r7, #16
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f7fe fa25 	bl	800bdf8 <xQueueGenericSend>
 800d9ae:	6278      	str	r0, [r7, #36]	; 0x24
 800d9b0:	e008      	b.n	800d9c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9b2:	4b07      	ldr	r3, [pc, #28]	; (800d9d0 <xTimerGenericCommand+0x98>)
 800d9b4:	6818      	ldr	r0, [r3, #0]
 800d9b6:	f107 0110 	add.w	r1, r7, #16
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	f7fe fb19 	bl	800bff4 <xQueueGenericSendFromISR>
 800d9c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3728      	adds	r7, #40	; 0x28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20005c04 	.word	0x20005c04

0800d9d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b088      	sub	sp, #32
 800d9d8:	af02      	add	r7, sp, #8
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9de:	4b22      	ldr	r3, [pc, #136]	; (800da68 <prvProcessExpiredTimer+0x94>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe f89b 	bl	800bb28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9f8:	f003 0304 	and.w	r3, r3, #4
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d022      	beq.n	800da46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	699a      	ldr	r2, [r3, #24]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	18d1      	adds	r1, r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	6978      	ldr	r0, [r7, #20]
 800da0e:	f000 f8d1 	bl	800dbb4 <prvInsertTimerInActiveList>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d01f      	beq.n	800da58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da18:	2300      	movs	r3, #0
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	2300      	movs	r3, #0
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	2100      	movs	r1, #0
 800da22:	6978      	ldr	r0, [r7, #20]
 800da24:	f7ff ff88 	bl	800d938 <xTimerGenericCommand>
 800da28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d113      	bne.n	800da58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da34:	f383 8811 	msr	BASEPRI, r3
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	60fb      	str	r3, [r7, #12]
}
 800da42:	bf00      	nop
 800da44:	e7fe      	b.n	800da44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da4c:	f023 0301 	bic.w	r3, r3, #1
 800da50:	b2da      	uxtb	r2, r3
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	6a1b      	ldr	r3, [r3, #32]
 800da5c:	6978      	ldr	r0, [r7, #20]
 800da5e:	4798      	blx	r3
}
 800da60:	bf00      	nop
 800da62:	3718      	adds	r7, #24
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	20005bfc 	.word	0x20005bfc

0800da6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da74:	f107 0308 	add.w	r3, r7, #8
 800da78:	4618      	mov	r0, r3
 800da7a:	f000 f857 	bl	800db2c <prvGetNextExpireTime>
 800da7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	4619      	mov	r1, r3
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 f803 	bl	800da90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da8a:	f000 f8d5 	bl	800dc38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da8e:	e7f1      	b.n	800da74 <prvTimerTask+0x8>

0800da90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da9a:	f7ff f915 	bl	800ccc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da9e:	f107 0308 	add.w	r3, r7, #8
 800daa2:	4618      	mov	r0, r3
 800daa4:	f000 f866 	bl	800db74 <prvSampleTimeNow>
 800daa8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d130      	bne.n	800db12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10a      	bne.n	800dacc <prvProcessTimerOrBlockTask+0x3c>
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d806      	bhi.n	800dacc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dabe:	f7ff f911 	bl	800cce4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dac2:	68f9      	ldr	r1, [r7, #12]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f7ff ff85 	bl	800d9d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800daca:	e024      	b.n	800db16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d008      	beq.n	800dae4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dad2:	4b13      	ldr	r3, [pc, #76]	; (800db20 <prvProcessTimerOrBlockTask+0x90>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <prvProcessTimerOrBlockTask+0x50>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <prvProcessTimerOrBlockTask+0x52>
 800dae0:	2300      	movs	r3, #0
 800dae2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dae4:	4b0f      	ldr	r3, [pc, #60]	; (800db24 <prvProcessTimerOrBlockTask+0x94>)
 800dae6:	6818      	ldr	r0, [r3, #0]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	1ad3      	subs	r3, r2, r3
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	4619      	mov	r1, r3
 800daf2:	f7fe fe59 	bl	800c7a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800daf6:	f7ff f8f5 	bl	800cce4 <xTaskResumeAll>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10a      	bne.n	800db16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db00:	4b09      	ldr	r3, [pc, #36]	; (800db28 <prvProcessTimerOrBlockTask+0x98>)
 800db02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db06:	601a      	str	r2, [r3, #0]
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	f3bf 8f6f 	isb	sy
}
 800db10:	e001      	b.n	800db16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db12:	f7ff f8e7 	bl	800cce4 <xTaskResumeAll>
}
 800db16:	bf00      	nop
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20005c00 	.word	0x20005c00
 800db24:	20005c04 	.word	0x20005c04
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db34:	4b0e      	ldr	r3, [pc, #56]	; (800db70 <prvGetNextExpireTime+0x44>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d101      	bne.n	800db42 <prvGetNextExpireTime+0x16>
 800db3e:	2201      	movs	r2, #1
 800db40:	e000      	b.n	800db44 <prvGetNextExpireTime+0x18>
 800db42:	2200      	movs	r2, #0
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d105      	bne.n	800db5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db50:	4b07      	ldr	r3, [pc, #28]	; (800db70 <prvGetNextExpireTime+0x44>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	60fb      	str	r3, [r7, #12]
 800db5a:	e001      	b.n	800db60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db60:	68fb      	ldr	r3, [r7, #12]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	20005bfc 	.word	0x20005bfc

0800db74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db7c:	f7ff f950 	bl	800ce20 <xTaskGetTickCount>
 800db80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db82:	4b0b      	ldr	r3, [pc, #44]	; (800dbb0 <prvSampleTimeNow+0x3c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d205      	bcs.n	800db98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db8c:	f000 f936 	bl	800ddfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	e002      	b.n	800db9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db9e:	4a04      	ldr	r2, [pc, #16]	; (800dbb0 <prvSampleTimeNow+0x3c>)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dba4:	68fb      	ldr	r3, [r7, #12]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20005c0c 	.word	0x20005c0c

0800dbb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
 800dbc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d812      	bhi.n	800dc00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	1ad2      	subs	r2, r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	699b      	ldr	r3, [r3, #24]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d302      	bcc.n	800dbee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	617b      	str	r3, [r7, #20]
 800dbec:	e01b      	b.n	800dc26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbee:	4b10      	ldr	r3, [pc, #64]	; (800dc30 <prvInsertTimerInActiveList+0x7c>)
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	f7fd ff5c 	bl	800bab6 <vListInsert>
 800dbfe:	e012      	b.n	800dc26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d206      	bcs.n	800dc16 <prvInsertTimerInActiveList+0x62>
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d302      	bcc.n	800dc16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc10:	2301      	movs	r3, #1
 800dc12:	617b      	str	r3, [r7, #20]
 800dc14:	e007      	b.n	800dc26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc16:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <prvInsertTimerInActiveList+0x80>)
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	4619      	mov	r1, r3
 800dc20:	4610      	mov	r0, r2
 800dc22:	f7fd ff48 	bl	800bab6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc26:	697b      	ldr	r3, [r7, #20]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	20005c00 	.word	0x20005c00
 800dc34:	20005bfc 	.word	0x20005bfc

0800dc38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08e      	sub	sp, #56	; 0x38
 800dc3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc3e:	e0ca      	b.n	800ddd6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	da18      	bge.n	800dc78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc46:	1d3b      	adds	r3, r7, #4
 800dc48:	3304      	adds	r3, #4
 800dc4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d10a      	bne.n	800dc68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	61fb      	str	r3, [r7, #28]
}
 800dc64:	bf00      	nop
 800dc66:	e7fe      	b.n	800dc66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc6e:	6850      	ldr	r0, [r2, #4]
 800dc70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc72:	6892      	ldr	r2, [r2, #8]
 800dc74:	4611      	mov	r1, r2
 800dc76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f2c0 80aa 	blt.w	800ddd4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc86:	695b      	ldr	r3, [r3, #20]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d004      	beq.n	800dc96 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8e:	3304      	adds	r3, #4
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fd ff49 	bl	800bb28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc96:	463b      	mov	r3, r7
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7ff ff6b 	bl	800db74 <prvSampleTimeNow>
 800dc9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b09      	cmp	r3, #9
 800dca4:	f200 8097 	bhi.w	800ddd6 <prvProcessReceivedCommands+0x19e>
 800dca8:	a201      	add	r2, pc, #4	; (adr r2, 800dcb0 <prvProcessReceivedCommands+0x78>)
 800dcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcae:	bf00      	nop
 800dcb0:	0800dcd9 	.word	0x0800dcd9
 800dcb4:	0800dcd9 	.word	0x0800dcd9
 800dcb8:	0800dcd9 	.word	0x0800dcd9
 800dcbc:	0800dd4d 	.word	0x0800dd4d
 800dcc0:	0800dd61 	.word	0x0800dd61
 800dcc4:	0800ddab 	.word	0x0800ddab
 800dcc8:	0800dcd9 	.word	0x0800dcd9
 800dccc:	0800dcd9 	.word	0x0800dcd9
 800dcd0:	0800dd4d 	.word	0x0800dd4d
 800dcd4:	0800dd61 	.word	0x0800dd61
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcde:	f043 0301 	orr.w	r3, r3, #1
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	18d1      	adds	r1, r2, r3
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcf8:	f7ff ff5c 	bl	800dbb4 <prvInsertTimerInActiveList>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d069      	beq.n	800ddd6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d05e      	beq.n	800ddd6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	441a      	add	r2, r3
 800dd20:	2300      	movs	r3, #0
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	2300      	movs	r3, #0
 800dd26:	2100      	movs	r1, #0
 800dd28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd2a:	f7ff fe05 	bl	800d938 <xTimerGenericCommand>
 800dd2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd30:	6a3b      	ldr	r3, [r7, #32]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d14f      	bne.n	800ddd6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3a:	f383 8811 	msr	BASEPRI, r3
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	61bb      	str	r3, [r7, #24]
}
 800dd48:	bf00      	nop
 800dd4a:	e7fe      	b.n	800dd4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd52:	f023 0301 	bic.w	r3, r3, #1
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd5e:	e03a      	b.n	800ddd6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd66:	f043 0301 	orr.w	r3, r3, #1
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd72:	68ba      	ldr	r2, [r7, #8]
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	699b      	ldr	r3, [r3, #24]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10a      	bne.n	800dd96 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	617b      	str	r3, [r7, #20]
}
 800dd92:	bf00      	nop
 800dd94:	e7fe      	b.n	800dd94 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd98:	699a      	ldr	r2, [r3, #24]
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	18d1      	adds	r1, r2, r3
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dda2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda4:	f7ff ff06 	bl	800dbb4 <prvInsertTimerInActiveList>
					break;
 800dda8:	e015      	b.n	800ddd6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d103      	bne.n	800ddc0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ddb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddba:	f000 fbe1 	bl	800e580 <vPortFree>
 800ddbe:	e00a      	b.n	800ddd6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddc6:	f023 0301 	bic.w	r3, r3, #1
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddd2:	e000      	b.n	800ddd6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ddd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddd6:	4b08      	ldr	r3, [pc, #32]	; (800ddf8 <prvProcessReceivedCommands+0x1c0>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	1d39      	adds	r1, r7, #4
 800dddc:	2200      	movs	r2, #0
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe f9a4 	bl	800c12c <xQueueReceive>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f47f af2a 	bne.w	800dc40 <prvProcessReceivedCommands+0x8>
	}
}
 800ddec:	bf00      	nop
 800ddee:	bf00      	nop
 800ddf0:	3730      	adds	r7, #48	; 0x30
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20005c04 	.word	0x20005c04

0800ddfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b088      	sub	sp, #32
 800de00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de02:	e048      	b.n	800de96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de04:	4b2d      	ldr	r3, [pc, #180]	; (800debc <prvSwitchTimerLists+0xc0>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de0e:	4b2b      	ldr	r3, [pc, #172]	; (800debc <prvSwitchTimerLists+0xc0>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3304      	adds	r3, #4
 800de1c:	4618      	mov	r0, r3
 800de1e:	f7fd fe83 	bl	800bb28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de30:	f003 0304 	and.w	r3, r3, #4
 800de34:	2b00      	cmp	r3, #0
 800de36:	d02e      	beq.n	800de96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	693a      	ldr	r2, [r7, #16]
 800de3e:	4413      	add	r3, r2
 800de40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	429a      	cmp	r2, r3
 800de48:	d90e      	bls.n	800de68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de56:	4b19      	ldr	r3, [pc, #100]	; (800debc <prvSwitchTimerLists+0xc0>)
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3304      	adds	r3, #4
 800de5e:	4619      	mov	r1, r3
 800de60:	4610      	mov	r0, r2
 800de62:	f7fd fe28 	bl	800bab6 <vListInsert>
 800de66:	e016      	b.n	800de96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de68:	2300      	movs	r3, #0
 800de6a:	9300      	str	r3, [sp, #0]
 800de6c:	2300      	movs	r3, #0
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	2100      	movs	r1, #0
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f7ff fd60 	bl	800d938 <xTimerGenericCommand>
 800de78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10a      	bne.n	800de96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800de80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	603b      	str	r3, [r7, #0]
}
 800de92:	bf00      	nop
 800de94:	e7fe      	b.n	800de94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de96:	4b09      	ldr	r3, [pc, #36]	; (800debc <prvSwitchTimerLists+0xc0>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1b1      	bne.n	800de04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dea0:	4b06      	ldr	r3, [pc, #24]	; (800debc <prvSwitchTimerLists+0xc0>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dea6:	4b06      	ldr	r3, [pc, #24]	; (800dec0 <prvSwitchTimerLists+0xc4>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a04      	ldr	r2, [pc, #16]	; (800debc <prvSwitchTimerLists+0xc0>)
 800deac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800deae:	4a04      	ldr	r2, [pc, #16]	; (800dec0 <prvSwitchTimerLists+0xc4>)
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	6013      	str	r3, [r2, #0]
}
 800deb4:	bf00      	nop
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	20005bfc 	.word	0x20005bfc
 800dec0:	20005c00 	.word	0x20005c00

0800dec4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800deca:	f000 f96b 	bl	800e1a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dece:	4b15      	ldr	r3, [pc, #84]	; (800df24 <prvCheckForValidListAndQueue+0x60>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d120      	bne.n	800df18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ded6:	4814      	ldr	r0, [pc, #80]	; (800df28 <prvCheckForValidListAndQueue+0x64>)
 800ded8:	f7fd fd9c 	bl	800ba14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dedc:	4813      	ldr	r0, [pc, #76]	; (800df2c <prvCheckForValidListAndQueue+0x68>)
 800dede:	f7fd fd99 	bl	800ba14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dee2:	4b13      	ldr	r3, [pc, #76]	; (800df30 <prvCheckForValidListAndQueue+0x6c>)
 800dee4:	4a10      	ldr	r2, [pc, #64]	; (800df28 <prvCheckForValidListAndQueue+0x64>)
 800dee6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dee8:	4b12      	ldr	r3, [pc, #72]	; (800df34 <prvCheckForValidListAndQueue+0x70>)
 800deea:	4a10      	ldr	r2, [pc, #64]	; (800df2c <prvCheckForValidListAndQueue+0x68>)
 800deec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800deee:	2300      	movs	r3, #0
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	4b11      	ldr	r3, [pc, #68]	; (800df38 <prvCheckForValidListAndQueue+0x74>)
 800def4:	4a11      	ldr	r2, [pc, #68]	; (800df3c <prvCheckForValidListAndQueue+0x78>)
 800def6:	2110      	movs	r1, #16
 800def8:	200a      	movs	r0, #10
 800defa:	f7fd fea7 	bl	800bc4c <xQueueGenericCreateStatic>
 800defe:	4603      	mov	r3, r0
 800df00:	4a08      	ldr	r2, [pc, #32]	; (800df24 <prvCheckForValidListAndQueue+0x60>)
 800df02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df04:	4b07      	ldr	r3, [pc, #28]	; (800df24 <prvCheckForValidListAndQueue+0x60>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d005      	beq.n	800df18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df0c:	4b05      	ldr	r3, [pc, #20]	; (800df24 <prvCheckForValidListAndQueue+0x60>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	490b      	ldr	r1, [pc, #44]	; (800df40 <prvCheckForValidListAndQueue+0x7c>)
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe fc1e 	bl	800c754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df18:	f000 f974 	bl	800e204 <vPortExitCritical>
}
 800df1c:	bf00      	nop
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	20005c04 	.word	0x20005c04
 800df28:	20005bd4 	.word	0x20005bd4
 800df2c:	20005be8 	.word	0x20005be8
 800df30:	20005bfc 	.word	0x20005bfc
 800df34:	20005c00 	.word	0x20005c00
 800df38:	20005cb0 	.word	0x20005cb0
 800df3c:	20005c10 	.word	0x20005c10
 800df40:	0801ebfc 	.word	0x0801ebfc

0800df44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3b04      	subs	r3, #4
 800df54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3b04      	subs	r3, #4
 800df62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	f023 0201 	bic.w	r2, r3, #1
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	3b04      	subs	r3, #4
 800df72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df74:	4a0c      	ldr	r2, [pc, #48]	; (800dfa8 <pxPortInitialiseStack+0x64>)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	3b14      	subs	r3, #20
 800df7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	3b04      	subs	r3, #4
 800df8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f06f 0202 	mvn.w	r2, #2
 800df92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	3b20      	subs	r3, #32
 800df98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df9a:	68fb      	ldr	r3, [r7, #12]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	0800dfad 	.word	0x0800dfad

0800dfac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfb6:	4b12      	ldr	r3, [pc, #72]	; (800e000 <prvTaskExitError+0x54>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfbe:	d00a      	beq.n	800dfd6 <prvTaskExitError+0x2a>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	60fb      	str	r3, [r7, #12]
}
 800dfd2:	bf00      	nop
 800dfd4:	e7fe      	b.n	800dfd4 <prvTaskExitError+0x28>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	60bb      	str	r3, [r7, #8]
}
 800dfe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfea:	bf00      	nop
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d0fc      	beq.n	800dfec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dff2:	bf00      	nop
 800dff4:	bf00      	nop
 800dff6:	3714      	adds	r7, #20
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	2000002c 	.word	0x2000002c
	...

0800e010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <pxCurrentTCBConst2>)
 800e012:	6819      	ldr	r1, [r3, #0]
 800e014:	6808      	ldr	r0, [r1, #0]
 800e016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01a:	f380 8809 	msr	PSP, r0
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	f04f 0000 	mov.w	r0, #0
 800e026:	f380 8811 	msr	BASEPRI, r0
 800e02a:	4770      	bx	lr
 800e02c:	f3af 8000 	nop.w

0800e030 <pxCurrentTCBConst2>:
 800e030:	200056d4 	.word	0x200056d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e034:	bf00      	nop
 800e036:	bf00      	nop

0800e038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e038:	4808      	ldr	r0, [pc, #32]	; (800e05c <prvPortStartFirstTask+0x24>)
 800e03a:	6800      	ldr	r0, [r0, #0]
 800e03c:	6800      	ldr	r0, [r0, #0]
 800e03e:	f380 8808 	msr	MSP, r0
 800e042:	f04f 0000 	mov.w	r0, #0
 800e046:	f380 8814 	msr	CONTROL, r0
 800e04a:	b662      	cpsie	i
 800e04c:	b661      	cpsie	f
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	df00      	svc	0
 800e058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e05a:	bf00      	nop
 800e05c:	e000ed08 	.word	0xe000ed08

0800e060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e066:	4b46      	ldr	r3, [pc, #280]	; (800e180 <xPortStartScheduler+0x120>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a46      	ldr	r2, [pc, #280]	; (800e184 <xPortStartScheduler+0x124>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d10a      	bne.n	800e086 <xPortStartScheduler+0x26>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	613b      	str	r3, [r7, #16]
}
 800e082:	bf00      	nop
 800e084:	e7fe      	b.n	800e084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e086:	4b3e      	ldr	r3, [pc, #248]	; (800e180 <xPortStartScheduler+0x120>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a3f      	ldr	r2, [pc, #252]	; (800e188 <xPortStartScheduler+0x128>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d10a      	bne.n	800e0a6 <xPortStartScheduler+0x46>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	60fb      	str	r3, [r7, #12]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0a6:	4b39      	ldr	r3, [pc, #228]	; (800e18c <xPortStartScheduler+0x12c>)
 800e0a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	22ff      	movs	r2, #255	; 0xff
 800e0b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0c0:	78fb      	ldrb	r3, [r7, #3]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	4b31      	ldr	r3, [pc, #196]	; (800e190 <xPortStartScheduler+0x130>)
 800e0cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0ce:	4b31      	ldr	r3, [pc, #196]	; (800e194 <xPortStartScheduler+0x134>)
 800e0d0:	2207      	movs	r2, #7
 800e0d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0d4:	e009      	b.n	800e0ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	; (800e194 <xPortStartScheduler+0x134>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	4a2d      	ldr	r2, [pc, #180]	; (800e194 <xPortStartScheduler+0x134>)
 800e0de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0ea:	78fb      	ldrb	r3, [r7, #3]
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0f2:	2b80      	cmp	r3, #128	; 0x80
 800e0f4:	d0ef      	beq.n	800e0d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0f6:	4b27      	ldr	r3, [pc, #156]	; (800e194 <xPortStartScheduler+0x134>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f1c3 0307 	rsb	r3, r3, #7
 800e0fe:	2b04      	cmp	r3, #4
 800e100:	d00a      	beq.n	800e118 <xPortStartScheduler+0xb8>
	__asm volatile
 800e102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e106:	f383 8811 	msr	BASEPRI, r3
 800e10a:	f3bf 8f6f 	isb	sy
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	60bb      	str	r3, [r7, #8]
}
 800e114:	bf00      	nop
 800e116:	e7fe      	b.n	800e116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e118:	4b1e      	ldr	r3, [pc, #120]	; (800e194 <xPortStartScheduler+0x134>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	021b      	lsls	r3, r3, #8
 800e11e:	4a1d      	ldr	r2, [pc, #116]	; (800e194 <xPortStartScheduler+0x134>)
 800e120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e122:	4b1c      	ldr	r3, [pc, #112]	; (800e194 <xPortStartScheduler+0x134>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e12a:	4a1a      	ldr	r2, [pc, #104]	; (800e194 <xPortStartScheduler+0x134>)
 800e12c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	b2da      	uxtb	r2, r3
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e136:	4b18      	ldr	r3, [pc, #96]	; (800e198 <xPortStartScheduler+0x138>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a17      	ldr	r2, [pc, #92]	; (800e198 <xPortStartScheduler+0x138>)
 800e13c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e142:	4b15      	ldr	r3, [pc, #84]	; (800e198 <xPortStartScheduler+0x138>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a14      	ldr	r2, [pc, #80]	; (800e198 <xPortStartScheduler+0x138>)
 800e148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e14c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e14e:	f000 f8dd 	bl	800e30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e152:	4b12      	ldr	r3, [pc, #72]	; (800e19c <xPortStartScheduler+0x13c>)
 800e154:	2200      	movs	r2, #0
 800e156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e158:	f000 f8fc 	bl	800e354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e15c:	4b10      	ldr	r3, [pc, #64]	; (800e1a0 <xPortStartScheduler+0x140>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a0f      	ldr	r2, [pc, #60]	; (800e1a0 <xPortStartScheduler+0x140>)
 800e162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e168:	f7ff ff66 	bl	800e038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e16c:	f7fe ff22 	bl	800cfb4 <vTaskSwitchContext>
	prvTaskExitError();
 800e170:	f7ff ff1c 	bl	800dfac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3718      	adds	r7, #24
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	e000ed00 	.word	0xe000ed00
 800e184:	410fc271 	.word	0x410fc271
 800e188:	410fc270 	.word	0x410fc270
 800e18c:	e000e400 	.word	0xe000e400
 800e190:	20005d00 	.word	0x20005d00
 800e194:	20005d04 	.word	0x20005d04
 800e198:	e000ed20 	.word	0xe000ed20
 800e19c:	2000002c 	.word	0x2000002c
 800e1a0:	e000ef34 	.word	0xe000ef34

0800e1a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b083      	sub	sp, #12
 800e1a8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	607b      	str	r3, [r7, #4]
}
 800e1bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1be:	4b0f      	ldr	r3, [pc, #60]	; (800e1fc <vPortEnterCritical+0x58>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	4a0d      	ldr	r2, [pc, #52]	; (800e1fc <vPortEnterCritical+0x58>)
 800e1c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1c8:	4b0c      	ldr	r3, [pc, #48]	; (800e1fc <vPortEnterCritical+0x58>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d10f      	bne.n	800e1f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1d0:	4b0b      	ldr	r3, [pc, #44]	; (800e200 <vPortEnterCritical+0x5c>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00a      	beq.n	800e1f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	603b      	str	r3, [r7, #0]
}
 800e1ec:	bf00      	nop
 800e1ee:	e7fe      	b.n	800e1ee <vPortEnterCritical+0x4a>
	}
}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr
 800e1fc:	2000002c 	.word	0x2000002c
 800e200:	e000ed04 	.word	0xe000ed04

0800e204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e20a:	4b12      	ldr	r3, [pc, #72]	; (800e254 <vPortExitCritical+0x50>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10a      	bne.n	800e228 <vPortExitCritical+0x24>
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	607b      	str	r3, [r7, #4]
}
 800e224:	bf00      	nop
 800e226:	e7fe      	b.n	800e226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e228:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <vPortExitCritical+0x50>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	4a09      	ldr	r2, [pc, #36]	; (800e254 <vPortExitCritical+0x50>)
 800e230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e232:	4b08      	ldr	r3, [pc, #32]	; (800e254 <vPortExitCritical+0x50>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d105      	bne.n	800e246 <vPortExitCritical+0x42>
 800e23a:	2300      	movs	r3, #0
 800e23c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	f383 8811 	msr	BASEPRI, r3
}
 800e244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e246:	bf00      	nop
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	2000002c 	.word	0x2000002c
	...

0800e260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e260:	f3ef 8009 	mrs	r0, PSP
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	4b15      	ldr	r3, [pc, #84]	; (800e2c0 <pxCurrentTCBConst>)
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	f01e 0f10 	tst.w	lr, #16
 800e270:	bf08      	it	eq
 800e272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27a:	6010      	str	r0, [r2, #0]
 800e27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e284:	f380 8811 	msr	BASEPRI, r0
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f7fe fe90 	bl	800cfb4 <vTaskSwitchContext>
 800e294:	f04f 0000 	mov.w	r0, #0
 800e298:	f380 8811 	msr	BASEPRI, r0
 800e29c:	bc09      	pop	{r0, r3}
 800e29e:	6819      	ldr	r1, [r3, #0]
 800e2a0:	6808      	ldr	r0, [r1, #0]
 800e2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a6:	f01e 0f10 	tst.w	lr, #16
 800e2aa:	bf08      	it	eq
 800e2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2b0:	f380 8809 	msr	PSP, r0
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	f3af 8000 	nop.w

0800e2c0 <pxCurrentTCBConst>:
 800e2c0:	200056d4 	.word	0x200056d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2c4:	bf00      	nop
 800e2c6:	bf00      	nop

0800e2c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	607b      	str	r3, [r7, #4]
}
 800e2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2e2:	f7fe fdad 	bl	800ce40 <xTaskIncrementTick>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d003      	beq.n	800e2f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2ec:	4b06      	ldr	r3, [pc, #24]	; (800e308 <xPortSysTickHandler+0x40>)
 800e2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	f383 8811 	msr	BASEPRI, r3
}
 800e2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e300:	bf00      	nop
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e30c:	b480      	push	{r7}
 800e30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e310:	4b0b      	ldr	r3, [pc, #44]	; (800e340 <vPortSetupTimerInterrupt+0x34>)
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e316:	4b0b      	ldr	r3, [pc, #44]	; (800e344 <vPortSetupTimerInterrupt+0x38>)
 800e318:	2200      	movs	r2, #0
 800e31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <vPortSetupTimerInterrupt+0x3c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a0a      	ldr	r2, [pc, #40]	; (800e34c <vPortSetupTimerInterrupt+0x40>)
 800e322:	fba2 2303 	umull	r2, r3, r2, r3
 800e326:	099b      	lsrs	r3, r3, #6
 800e328:	4a09      	ldr	r2, [pc, #36]	; (800e350 <vPortSetupTimerInterrupt+0x44>)
 800e32a:	3b01      	subs	r3, #1
 800e32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e32e:	4b04      	ldr	r3, [pc, #16]	; (800e340 <vPortSetupTimerInterrupt+0x34>)
 800e330:	2207      	movs	r2, #7
 800e332:	601a      	str	r2, [r3, #0]
}
 800e334:	bf00      	nop
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	e000e010 	.word	0xe000e010
 800e344:	e000e018 	.word	0xe000e018
 800e348:	2000000c 	.word	0x2000000c
 800e34c:	10624dd3 	.word	0x10624dd3
 800e350:	e000e014 	.word	0xe000e014

0800e354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e364 <vPortEnableVFP+0x10>
 800e358:	6801      	ldr	r1, [r0, #0]
 800e35a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e35e:	6001      	str	r1, [r0, #0]
 800e360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e362:	bf00      	nop
 800e364:	e000ed88 	.word	0xe000ed88

0800e368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e36e:	f3ef 8305 	mrs	r3, IPSR
 800e372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2b0f      	cmp	r3, #15
 800e378:	d914      	bls.n	800e3a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e37a:	4a17      	ldr	r2, [pc, #92]	; (800e3d8 <vPortValidateInterruptPriority+0x70>)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	4413      	add	r3, r2
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e384:	4b15      	ldr	r3, [pc, #84]	; (800e3dc <vPortValidateInterruptPriority+0x74>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	7afa      	ldrb	r2, [r7, #11]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d20a      	bcs.n	800e3a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	607b      	str	r3, [r7, #4]
}
 800e3a0:	bf00      	nop
 800e3a2:	e7fe      	b.n	800e3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3a4:	4b0e      	ldr	r3, [pc, #56]	; (800e3e0 <vPortValidateInterruptPriority+0x78>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3ac:	4b0d      	ldr	r3, [pc, #52]	; (800e3e4 <vPortValidateInterruptPriority+0x7c>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d90a      	bls.n	800e3ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	603b      	str	r3, [r7, #0]
}
 800e3c6:	bf00      	nop
 800e3c8:	e7fe      	b.n	800e3c8 <vPortValidateInterruptPriority+0x60>
	}
 800e3ca:	bf00      	nop
 800e3cc:	3714      	adds	r7, #20
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	e000e3f0 	.word	0xe000e3f0
 800e3dc:	20005d00 	.word	0x20005d00
 800e3e0:	e000ed0c 	.word	0xe000ed0c
 800e3e4:	20005d04 	.word	0x20005d04

0800e3e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b08a      	sub	sp, #40	; 0x28
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3f4:	f7fe fc68 	bl	800ccc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3f8:	4b5b      	ldr	r3, [pc, #364]	; (800e568 <pvPortMalloc+0x180>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d101      	bne.n	800e404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e400:	f000 f920 	bl	800e644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e404:	4b59      	ldr	r3, [pc, #356]	; (800e56c <pvPortMalloc+0x184>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4013      	ands	r3, r2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f040 8093 	bne.w	800e538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d01d      	beq.n	800e454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e418:	2208      	movs	r2, #8
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4413      	add	r3, r2
 800e41e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b00      	cmp	r3, #0
 800e428:	d014      	beq.n	800e454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f023 0307 	bic.w	r3, r3, #7
 800e430:	3308      	adds	r3, #8
 800e432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f003 0307 	and.w	r3, r3, #7
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00a      	beq.n	800e454 <pvPortMalloc+0x6c>
	__asm volatile
 800e43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	617b      	str	r3, [r7, #20]
}
 800e450:	bf00      	nop
 800e452:	e7fe      	b.n	800e452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d06e      	beq.n	800e538 <pvPortMalloc+0x150>
 800e45a:	4b45      	ldr	r3, [pc, #276]	; (800e570 <pvPortMalloc+0x188>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	429a      	cmp	r2, r3
 800e462:	d869      	bhi.n	800e538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e464:	4b43      	ldr	r3, [pc, #268]	; (800e574 <pvPortMalloc+0x18c>)
 800e466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e468:	4b42      	ldr	r3, [pc, #264]	; (800e574 <pvPortMalloc+0x18c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e46e:	e004      	b.n	800e47a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	429a      	cmp	r2, r3
 800e482:	d903      	bls.n	800e48c <pvPortMalloc+0xa4>
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1f1      	bne.n	800e470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e48c:	4b36      	ldr	r3, [pc, #216]	; (800e568 <pvPortMalloc+0x180>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e492:	429a      	cmp	r2, r3
 800e494:	d050      	beq.n	800e538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e496:	6a3b      	ldr	r3, [r7, #32]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2208      	movs	r2, #8
 800e49c:	4413      	add	r3, r2
 800e49e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	6a3b      	ldr	r3, [r7, #32]
 800e4a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	685a      	ldr	r2, [r3, #4]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	1ad2      	subs	r2, r2, r3
 800e4b0:	2308      	movs	r3, #8
 800e4b2:	005b      	lsls	r3, r3, #1
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d91f      	bls.n	800e4f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4413      	add	r3, r2
 800e4be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	f003 0307 	and.w	r3, r3, #7
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d00a      	beq.n	800e4e0 <pvPortMalloc+0xf8>
	__asm volatile
 800e4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ce:	f383 8811 	msr	BASEPRI, r3
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	613b      	str	r3, [r7, #16]
}
 800e4dc:	bf00      	nop
 800e4de:	e7fe      	b.n	800e4de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	685a      	ldr	r2, [r3, #4]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4f2:	69b8      	ldr	r0, [r7, #24]
 800e4f4:	f000 f908 	bl	800e708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4f8:	4b1d      	ldr	r3, [pc, #116]	; (800e570 <pvPortMalloc+0x188>)
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	4a1b      	ldr	r2, [pc, #108]	; (800e570 <pvPortMalloc+0x188>)
 800e504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e506:	4b1a      	ldr	r3, [pc, #104]	; (800e570 <pvPortMalloc+0x188>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	4b1b      	ldr	r3, [pc, #108]	; (800e578 <pvPortMalloc+0x190>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d203      	bcs.n	800e51a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e512:	4b17      	ldr	r3, [pc, #92]	; (800e570 <pvPortMalloc+0x188>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a18      	ldr	r2, [pc, #96]	; (800e578 <pvPortMalloc+0x190>)
 800e518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	4b13      	ldr	r3, [pc, #76]	; (800e56c <pvPortMalloc+0x184>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	431a      	orrs	r2, r3
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	2200      	movs	r2, #0
 800e52c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e52e:	4b13      	ldr	r3, [pc, #76]	; (800e57c <pvPortMalloc+0x194>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	3301      	adds	r3, #1
 800e534:	4a11      	ldr	r2, [pc, #68]	; (800e57c <pvPortMalloc+0x194>)
 800e536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e538:	f7fe fbd4 	bl	800cce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	f003 0307 	and.w	r3, r3, #7
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00a      	beq.n	800e55c <pvPortMalloc+0x174>
	__asm volatile
 800e546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54a:	f383 8811 	msr	BASEPRI, r3
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	60fb      	str	r3, [r7, #12]
}
 800e558:	bf00      	nop
 800e55a:	e7fe      	b.n	800e55a <pvPortMalloc+0x172>
	return pvReturn;
 800e55c:	69fb      	ldr	r3, [r7, #28]
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3728      	adds	r7, #40	; 0x28
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20009d10 	.word	0x20009d10
 800e56c:	20009d24 	.word	0x20009d24
 800e570:	20009d14 	.word	0x20009d14
 800e574:	20009d08 	.word	0x20009d08
 800e578:	20009d18 	.word	0x20009d18
 800e57c:	20009d1c 	.word	0x20009d1c

0800e580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d04d      	beq.n	800e62e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e592:	2308      	movs	r3, #8
 800e594:	425b      	negs	r3, r3
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	4413      	add	r3, r2
 800e59a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	685a      	ldr	r2, [r3, #4]
 800e5a4:	4b24      	ldr	r3, [pc, #144]	; (800e638 <vPortFree+0xb8>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d10a      	bne.n	800e5c4 <vPortFree+0x44>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	60fb      	str	r3, [r7, #12]
}
 800e5c0:	bf00      	nop
 800e5c2:	e7fe      	b.n	800e5c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00a      	beq.n	800e5e2 <vPortFree+0x62>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	60bb      	str	r3, [r7, #8]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	685a      	ldr	r2, [r3, #4]
 800e5e6:	4b14      	ldr	r3, [pc, #80]	; (800e638 <vPortFree+0xb8>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4013      	ands	r3, r2
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d01e      	beq.n	800e62e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d11a      	bne.n	800e62e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	685a      	ldr	r2, [r3, #4]
 800e5fc:	4b0e      	ldr	r3, [pc, #56]	; (800e638 <vPortFree+0xb8>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	43db      	mvns	r3, r3
 800e602:	401a      	ands	r2, r3
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e608:	f7fe fb5e 	bl	800ccc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	685a      	ldr	r2, [r3, #4]
 800e610:	4b0a      	ldr	r3, [pc, #40]	; (800e63c <vPortFree+0xbc>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4413      	add	r3, r2
 800e616:	4a09      	ldr	r2, [pc, #36]	; (800e63c <vPortFree+0xbc>)
 800e618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e61a:	6938      	ldr	r0, [r7, #16]
 800e61c:	f000 f874 	bl	800e708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e620:	4b07      	ldr	r3, [pc, #28]	; (800e640 <vPortFree+0xc0>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	3301      	adds	r3, #1
 800e626:	4a06      	ldr	r2, [pc, #24]	; (800e640 <vPortFree+0xc0>)
 800e628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e62a:	f7fe fb5b 	bl	800cce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e62e:	bf00      	nop
 800e630:	3718      	adds	r7, #24
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	20009d24 	.word	0x20009d24
 800e63c:	20009d14 	.word	0x20009d14
 800e640:	20009d20 	.word	0x20009d20

0800e644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e64a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e64e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e650:	4b27      	ldr	r3, [pc, #156]	; (800e6f0 <prvHeapInit+0xac>)
 800e652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f003 0307 	and.w	r3, r3, #7
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00c      	beq.n	800e678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3307      	adds	r3, #7
 800e662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f023 0307 	bic.w	r3, r3, #7
 800e66a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	4a1f      	ldr	r2, [pc, #124]	; (800e6f0 <prvHeapInit+0xac>)
 800e674:	4413      	add	r3, r2
 800e676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e67c:	4a1d      	ldr	r2, [pc, #116]	; (800e6f4 <prvHeapInit+0xb0>)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e682:	4b1c      	ldr	r3, [pc, #112]	; (800e6f4 <prvHeapInit+0xb0>)
 800e684:	2200      	movs	r2, #0
 800e686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	4413      	add	r3, r2
 800e68e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e690:	2208      	movs	r2, #8
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	1a9b      	subs	r3, r3, r2
 800e696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f023 0307 	bic.w	r3, r3, #7
 800e69e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4a15      	ldr	r2, [pc, #84]	; (800e6f8 <prvHeapInit+0xb4>)
 800e6a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6a6:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <prvHeapInit+0xb4>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6ae:	4b12      	ldr	r3, [pc, #72]	; (800e6f8 <prvHeapInit+0xb4>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	1ad2      	subs	r2, r2, r3
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6c4:	4b0c      	ldr	r3, [pc, #48]	; (800e6f8 <prvHeapInit+0xb4>)
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	4a0a      	ldr	r2, [pc, #40]	; (800e6fc <prvHeapInit+0xb8>)
 800e6d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	4a09      	ldr	r2, [pc, #36]	; (800e700 <prvHeapInit+0xbc>)
 800e6da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6dc:	4b09      	ldr	r3, [pc, #36]	; (800e704 <prvHeapInit+0xc0>)
 800e6de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6e2:	601a      	str	r2, [r3, #0]
}
 800e6e4:	bf00      	nop
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	20005d08 	.word	0x20005d08
 800e6f4:	20009d08 	.word	0x20009d08
 800e6f8:	20009d10 	.word	0x20009d10
 800e6fc:	20009d18 	.word	0x20009d18
 800e700:	20009d14 	.word	0x20009d14
 800e704:	20009d24 	.word	0x20009d24

0800e708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e710:	4b28      	ldr	r3, [pc, #160]	; (800e7b4 <prvInsertBlockIntoFreeList+0xac>)
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	e002      	b.n	800e71c <prvInsertBlockIntoFreeList+0x14>
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	60fb      	str	r3, [r7, #12]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	429a      	cmp	r2, r3
 800e724:	d8f7      	bhi.n	800e716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	4413      	add	r3, r2
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	429a      	cmp	r2, r3
 800e736:	d108      	bne.n	800e74a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	685a      	ldr	r2, [r3, #4]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	441a      	add	r2, r3
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	68ba      	ldr	r2, [r7, #8]
 800e754:	441a      	add	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d118      	bne.n	800e790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	4b15      	ldr	r3, [pc, #84]	; (800e7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	429a      	cmp	r2, r3
 800e768:	d00d      	beq.n	800e786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	685a      	ldr	r2, [r3, #4]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	441a      	add	r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	601a      	str	r2, [r3, #0]
 800e784:	e008      	b.n	800e798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e786:	4b0c      	ldr	r3, [pc, #48]	; (800e7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	e003      	b.n	800e798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d002      	beq.n	800e7a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7a6:	bf00      	nop
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	20009d08 	.word	0x20009d08
 800e7b8:	20009d10 	.word	0x20009d10

0800e7bc <rcl_get_zero_initialized_init_options>:
 800e7bc:	2000      	movs	r0, #0
 800e7be:	4770      	bx	lr

0800e7c0 <rcl_init_options_init>:
 800e7c0:	b084      	sub	sp, #16
 800e7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7c4:	b091      	sub	sp, #68	; 0x44
 800e7c6:	af17      	add	r7, sp, #92	; 0x5c
 800e7c8:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	d044      	beq.n	800e85a <rcl_init_options_init+0x9a>
 800e7d0:	6803      	ldr	r3, [r0, #0]
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	b133      	cbz	r3, 800e7e4 <rcl_init_options_init+0x24>
 800e7d6:	2464      	movs	r4, #100	; 0x64
 800e7d8:	4620      	mov	r0, r4
 800e7da:	b011      	add	sp, #68	; 0x44
 800e7dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e7e0:	b004      	add	sp, #16
 800e7e2:	4770      	bx	lr
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	f000 ff01 	bl	800f5ec <rcutils_allocator_is_valid>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d035      	beq.n	800e85a <rcl_init_options_init+0x9a>
 800e7ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e7f2:	2050      	movs	r0, #80	; 0x50
 800e7f4:	4798      	blx	r3
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	6030      	str	r0, [r6, #0]
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d02f      	beq.n	800e85e <rcl_init_options_init+0x9e>
 800e7fe:	46bc      	mov	ip, r7
 800e800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e804:	4625      	mov	r5, r4
 800e806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e808:	f8dc 3000 	ldr.w	r3, [ip]
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	a802      	add	r0, sp, #8
 800e810:	ad02      	add	r5, sp, #8
 800e812:	f001 f8a7 	bl	800f964 <rmw_get_zero_initialized_init_options>
 800e816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e818:	3418      	adds	r4, #24
 800e81a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e81c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e824:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e828:	6833      	ldr	r3, [r6, #0]
 800e82a:	e884 0003 	stmia.w	r4, {r0, r1}
 800e82e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800e832:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e836:	f103 0018 	add.w	r0, r3, #24
 800e83a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800e83e:	f001 f943 	bl	800fac8 <rmw_init_options_init>
 800e842:	4604      	mov	r4, r0
 800e844:	2800      	cmp	r0, #0
 800e846:	d0c7      	beq.n	800e7d8 <rcl_init_options_init+0x18>
 800e848:	6830      	ldr	r0, [r6, #0]
 800e84a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e84c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e84e:	4798      	blx	r3
 800e850:	4620      	mov	r0, r4
 800e852:	f006 f99b 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 800e856:	4604      	mov	r4, r0
 800e858:	e7be      	b.n	800e7d8 <rcl_init_options_init+0x18>
 800e85a:	240b      	movs	r4, #11
 800e85c:	e7bc      	b.n	800e7d8 <rcl_init_options_init+0x18>
 800e85e:	240a      	movs	r4, #10
 800e860:	e7ba      	b.n	800e7d8 <rcl_init_options_init+0x18>
 800e862:	bf00      	nop

0800e864 <rcl_init_options_fini>:
 800e864:	b570      	push	{r4, r5, r6, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	b1c0      	cbz	r0, 800e89c <rcl_init_options_fini+0x38>
 800e86a:	6804      	ldr	r4, [r0, #0]
 800e86c:	4606      	mov	r6, r0
 800e86e:	b1ac      	cbz	r4, 800e89c <rcl_init_options_fini+0x38>
 800e870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e872:	ad01      	add	r5, sp, #4
 800e874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e876:	6823      	ldr	r3, [r4, #0]
 800e878:	602b      	str	r3, [r5, #0]
 800e87a:	a801      	add	r0, sp, #4
 800e87c:	f000 feb6 	bl	800f5ec <rcutils_allocator_is_valid>
 800e880:	b160      	cbz	r0, 800e89c <rcl_init_options_fini+0x38>
 800e882:	6830      	ldr	r0, [r6, #0]
 800e884:	3018      	adds	r0, #24
 800e886:	f001 f9b9 	bl	800fbfc <rmw_init_options_fini>
 800e88a:	4604      	mov	r4, r0
 800e88c:	b950      	cbnz	r0, 800e8a4 <rcl_init_options_fini+0x40>
 800e88e:	6830      	ldr	r0, [r6, #0]
 800e890:	9b02      	ldr	r3, [sp, #8]
 800e892:	9905      	ldr	r1, [sp, #20]
 800e894:	4798      	blx	r3
 800e896:	4620      	mov	r0, r4
 800e898:	b006      	add	sp, #24
 800e89a:	bd70      	pop	{r4, r5, r6, pc}
 800e89c:	240b      	movs	r4, #11
 800e89e:	4620      	mov	r0, r4
 800e8a0:	b006      	add	sp, #24
 800e8a2:	bd70      	pop	{r4, r5, r6, pc}
 800e8a4:	f006 f972 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	e7f8      	b.n	800e89e <rcl_init_options_fini+0x3a>

0800e8ac <rcl_init_options_copy>:
 800e8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b0:	b096      	sub	sp, #88	; 0x58
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d063      	beq.n	800e97e <rcl_init_options_copy+0xd2>
 800e8b6:	6806      	ldr	r6, [r0, #0]
 800e8b8:	4605      	mov	r5, r0
 800e8ba:	2e00      	cmp	r6, #0
 800e8bc:	d05f      	beq.n	800e97e <rcl_init_options_copy+0xd2>
 800e8be:	460c      	mov	r4, r1
 800e8c0:	2900      	cmp	r1, #0
 800e8c2:	d05c      	beq.n	800e97e <rcl_init_options_copy+0xd2>
 800e8c4:	680b      	ldr	r3, [r1, #0]
 800e8c6:	b123      	cbz	r3, 800e8d2 <rcl_init_options_copy+0x26>
 800e8c8:	2664      	movs	r6, #100	; 0x64
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	b016      	add	sp, #88	; 0x58
 800e8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e8d4:	af11      	add	r7, sp, #68	; 0x44
 800e8d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e8d8:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800e8dc:	6833      	ldr	r3, [r6, #0]
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	f000 fe83 	bl	800f5ec <rcutils_allocator_is_valid>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d049      	beq.n	800e97e <rcl_init_options_copy+0xd2>
 800e8ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8ec:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e8ee:	2050      	movs	r0, #80	; 0x50
 800e8f0:	4798      	blx	r3
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	6020      	str	r0, [r4, #0]
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d077      	beq.n	800e9ea <rcl_init_options_copy+0x13e>
 800e8fa:	46c4      	mov	ip, r8
 800e8fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e900:	4637      	mov	r7, r6
 800e902:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e904:	f8dc 3000 	ldr.w	r3, [ip]
 800e908:	603b      	str	r3, [r7, #0]
 800e90a:	a802      	add	r0, sp, #8
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	f001 f829 	bl	800f964 <rmw_get_zero_initialized_init_options>
 800e912:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e914:	3618      	adds	r6, #24
 800e916:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e918:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e91a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e91c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e91e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e920:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e924:	ab16      	add	r3, sp, #88	; 0x58
 800e926:	e886 0003 	stmia.w	r6, {r0, r1}
 800e92a:	e913 0003 	ldmdb	r3, {r0, r1}
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e934:	f103 0018 	add.w	r0, r3, #24
 800e938:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800e93c:	f001 f8c4 	bl	800fac8 <rmw_init_options_init>
 800e940:	4606      	mov	r6, r0
 800e942:	bb08      	cbnz	r0, 800e988 <rcl_init_options_copy+0xdc>
 800e944:	682f      	ldr	r7, [r5, #0]
 800e946:	f8d4 c000 	ldr.w	ip, [r4]
 800e94a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e94c:	4666      	mov	r6, ip
 800e94e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	6033      	str	r3, [r6, #0]
 800e954:	f10c 0018 	add.w	r0, ip, #24
 800e958:	f001 f950 	bl	800fbfc <rmw_init_options_fini>
 800e95c:	4607      	mov	r7, r0
 800e95e:	b1f0      	cbz	r0, 800e99e <rcl_init_options_copy+0xf2>
 800e960:	f000 fe52 	bl	800f608 <rcutils_get_error_string>
 800e964:	f000 fe66 	bl	800f634 <rcutils_reset_error>
 800e968:	4620      	mov	r0, r4
 800e96a:	f7ff ff7b 	bl	800e864 <rcl_init_options_fini>
 800e96e:	4606      	mov	r6, r0
 800e970:	2800      	cmp	r0, #0
 800e972:	d1aa      	bne.n	800e8ca <rcl_init_options_copy+0x1e>
 800e974:	4638      	mov	r0, r7
 800e976:	f006 f909 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 800e97a:	4606      	mov	r6, r0
 800e97c:	e7a5      	b.n	800e8ca <rcl_init_options_copy+0x1e>
 800e97e:	260b      	movs	r6, #11
 800e980:	4630      	mov	r0, r6
 800e982:	b016      	add	sp, #88	; 0x58
 800e984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e98a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e98c:	6820      	ldr	r0, [r4, #0]
 800e98e:	4798      	blx	r3
 800e990:	4630      	mov	r0, r6
 800e992:	f006 f8fb 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 800e996:	4606      	mov	r6, r0
 800e998:	2800      	cmp	r0, #0
 800e99a:	d0d3      	beq.n	800e944 <rcl_init_options_copy+0x98>
 800e99c:	e795      	b.n	800e8ca <rcl_init_options_copy+0x1e>
 800e99e:	a802      	add	r0, sp, #8
 800e9a0:	ae02      	add	r6, sp, #8
 800e9a2:	6827      	ldr	r7, [r4, #0]
 800e9a4:	f000 ffde 	bl	800f964 <rmw_get_zero_initialized_init_options>
 800e9a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e9ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e9b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e9b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e9b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e9b6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e9ba:	682a      	ldr	r2, [r5, #0]
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	e887 0003 	stmia.w	r7, {r0, r1}
 800e9c2:	f102 0018 	add.w	r0, r2, #24
 800e9c6:	f103 0118 	add.w	r1, r3, #24
 800e9ca:	f001 f8d5 	bl	800fb78 <rmw_init_options_copy>
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	f43f af7a 	beq.w	800e8ca <rcl_init_options_copy+0x1e>
 800e9d6:	f000 fe17 	bl	800f608 <rcutils_get_error_string>
 800e9da:	f000 fe2b 	bl	800f634 <rcutils_reset_error>
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f7ff ff40 	bl	800e864 <rcl_init_options_fini>
 800e9e4:	b118      	cbz	r0, 800e9ee <rcl_init_options_copy+0x142>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	e76f      	b.n	800e8ca <rcl_init_options_copy+0x1e>
 800e9ea:	260a      	movs	r6, #10
 800e9ec:	e76d      	b.n	800e8ca <rcl_init_options_copy+0x1e>
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f006 f8cc 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 800e9f4:	4606      	mov	r6, r0
 800e9f6:	e768      	b.n	800e8ca <rcl_init_options_copy+0x1e>

0800e9f8 <rcl_init_options_set_domain_id>:
 800e9f8:	b120      	cbz	r0, 800ea04 <rcl_init_options_set_domain_id+0xc>
 800e9fa:	6803      	ldr	r3, [r0, #0]
 800e9fc:	b113      	cbz	r3, 800ea04 <rcl_init_options_set_domain_id+0xc>
 800e9fe:	6259      	str	r1, [r3, #36]	; 0x24
 800ea00:	2000      	movs	r0, #0
 800ea02:	4770      	bx	lr
 800ea04:	200b      	movs	r0, #11
 800ea06:	4770      	bx	lr

0800ea08 <rcl_node_get_default_options>:
 800ea08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	4607      	mov	r7, r0
 800ea0e:	466d      	mov	r5, sp
 800ea10:	4668      	mov	r0, sp
 800ea12:	f000 fddd 	bl	800f5d0 <rcutils_get_default_allocator>
 800ea16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea18:	4c08      	ldr	r4, [pc, #32]	; (800ea3c <rcl_node_get_default_options+0x34>)
 800ea1a:	f8d5 c000 	ldr.w	ip, [r5]
 800ea1e:	1d26      	adds	r6, r4, #4
 800ea20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea24:	463d      	mov	r5, r7
 800ea26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea28:	f8c6 c000 	str.w	ip, [r6]
 800ea2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ea30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ea34:	4638      	mov	r0, r7
 800ea36:	b007      	add	sp, #28
 800ea38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	20000030 	.word	0x20000030

0800ea40 <rcl_node_options_copy>:
 800ea40:	b1c8      	cbz	r0, 800ea76 <rcl_node_options_copy+0x36>
 800ea42:	b4f0      	push	{r4, r5, r6, r7}
 800ea44:	460f      	mov	r7, r1
 800ea46:	b199      	cbz	r1, 800ea70 <rcl_node_options_copy+0x30>
 800ea48:	4288      	cmp	r0, r1
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	d010      	beq.n	800ea70 <rcl_node_options_copy+0x30>
 800ea4e:	4605      	mov	r5, r0
 800ea50:	460c      	mov	r4, r1
 800ea52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea56:	f844 3b04 	str.w	r3, [r4], #4
 800ea5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea5e:	7e32      	ldrb	r2, [r6, #24]
 800ea60:	6829      	ldr	r1, [r5, #0]
 800ea62:	7e73      	ldrb	r3, [r6, #25]
 800ea64:	6021      	str	r1, [r4, #0]
 800ea66:	2000      	movs	r0, #0
 800ea68:	763a      	strb	r2, [r7, #24]
 800ea6a:	767b      	strb	r3, [r7, #25]
 800ea6c:	bcf0      	pop	{r4, r5, r6, r7}
 800ea6e:	4770      	bx	lr
 800ea70:	200b      	movs	r0, #11
 800ea72:	bcf0      	pop	{r4, r5, r6, r7}
 800ea74:	4770      	bx	lr
 800ea76:	200b      	movs	r0, #11
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop

0800ea7c <rcl_get_zero_initialized_publisher>:
 800ea7c:	4b01      	ldr	r3, [pc, #4]	; (800ea84 <rcl_get_zero_initialized_publisher+0x8>)
 800ea7e:	6818      	ldr	r0, [r3, #0]
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	0801ec60 	.word	0x0801ec60

0800ea88 <rcl_publisher_init>:
 800ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	b091      	sub	sp, #68	; 0x44
 800ea8e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ea90:	b3d7      	cbz	r7, 800eb08 <rcl_publisher_init+0x80>
 800ea92:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ea96:	4604      	mov	r4, r0
 800ea98:	4648      	mov	r0, r9
 800ea9a:	4688      	mov	r8, r1
 800ea9c:	4616      	mov	r6, r2
 800ea9e:	461d      	mov	r5, r3
 800eaa0:	f000 fda4 	bl	800f5ec <rcutils_allocator_is_valid>
 800eaa4:	b380      	cbz	r0, 800eb08 <rcl_publisher_init+0x80>
 800eaa6:	b37c      	cbz	r4, 800eb08 <rcl_publisher_init+0x80>
 800eaa8:	f8d4 a000 	ldr.w	sl, [r4]
 800eaac:	f1ba 0f00 	cmp.w	sl, #0
 800eab0:	d004      	beq.n	800eabc <rcl_publisher_init+0x34>
 800eab2:	2564      	movs	r5, #100	; 0x64
 800eab4:	4628      	mov	r0, r5
 800eab6:	b011      	add	sp, #68	; 0x44
 800eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabc:	4640      	mov	r0, r8
 800eabe:	f006 fcff 	bl	80154c0 <rcl_node_is_valid>
 800eac2:	b330      	cbz	r0, 800eb12 <rcl_publisher_init+0x8a>
 800eac4:	b306      	cbz	r6, 800eb08 <rcl_publisher_init+0x80>
 800eac6:	b1fd      	cbz	r5, 800eb08 <rcl_publisher_init+0x80>
 800eac8:	46ce      	mov	lr, r9
 800eaca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eace:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ead2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ead6:	f8de 3000 	ldr.w	r3, [lr]
 800eada:	f8cc 3000 	str.w	r3, [ip]
 800eade:	f000 fdc1 	bl	800f664 <rcutils_get_zero_initialized_string_map>
 800eae2:	ab10      	add	r3, sp, #64	; 0x40
 800eae4:	4684      	mov	ip, r0
 800eae6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800eaea:	f8cd c020 	str.w	ip, [sp, #32]
 800eaee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eaf2:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800eaf6:	4651      	mov	r1, sl
 800eaf8:	a808      	add	r0, sp, #32
 800eafa:	f000 fe2d 	bl	800f758 <rcutils_string_map_init>
 800eafe:	b150      	cbz	r0, 800eb16 <rcl_publisher_init+0x8e>
 800eb00:	280a      	cmp	r0, #10
 800eb02:	d013      	beq.n	800eb2c <rcl_publisher_init+0xa4>
 800eb04:	2501      	movs	r5, #1
 800eb06:	e7d5      	b.n	800eab4 <rcl_publisher_init+0x2c>
 800eb08:	250b      	movs	r5, #11
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	b011      	add	sp, #68	; 0x44
 800eb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb12:	25c8      	movs	r5, #200	; 0xc8
 800eb14:	e7ce      	b.n	800eab4 <rcl_publisher_init+0x2c>
 800eb16:	a808      	add	r0, sp, #32
 800eb18:	f006 fa26 	bl	8014f68 <rcl_get_default_topic_name_substitutions>
 800eb1c:	4682      	mov	sl, r0
 800eb1e:	b138      	cbz	r0, 800eb30 <rcl_publisher_init+0xa8>
 800eb20:	a808      	add	r0, sp, #32
 800eb22:	f000 fe59 	bl	800f7d8 <rcutils_string_map_fini>
 800eb26:	f1ba 0f0a 	cmp.w	sl, #10
 800eb2a:	d1eb      	bne.n	800eb04 <rcl_publisher_init+0x7c>
 800eb2c:	250a      	movs	r5, #10
 800eb2e:	e7c1      	b.n	800eab4 <rcl_publisher_init+0x2c>
 800eb30:	4640      	mov	r0, r8
 800eb32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800eb36:	f006 fccd 	bl	80154d4 <rcl_node_get_name>
 800eb3a:	4682      	mov	sl, r0
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	f006 fcd1 	bl	80154e4 <rcl_node_get_namespace>
 800eb42:	4686      	mov	lr, r0
 800eb44:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800eb48:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800eb4c:	46ec      	mov	ip, sp
 800eb4e:	f8cd b014 	str.w	fp, [sp, #20]
 800eb52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb56:	f8d9 3000 	ldr.w	r3, [r9]
 800eb5a:	f8cc 3000 	str.w	r3, [ip]
 800eb5e:	4628      	mov	r0, r5
 800eb60:	4651      	mov	r1, sl
 800eb62:	4672      	mov	r2, lr
 800eb64:	ab08      	add	r3, sp, #32
 800eb66:	f006 f899 	bl	8014c9c <rcl_expand_topic_name>
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	a808      	add	r0, sp, #32
 800eb6e:	f000 fe33 	bl	800f7d8 <rcutils_string_map_fini>
 800eb72:	b920      	cbnz	r0, 800eb7e <rcl_publisher_init+0xf6>
 800eb74:	b15d      	cbz	r5, 800eb8e <rcl_publisher_init+0x106>
 800eb76:	2d67      	cmp	r5, #103	; 0x67
 800eb78:	d002      	beq.n	800eb80 <rcl_publisher_init+0xf8>
 800eb7a:	2d69      	cmp	r5, #105	; 0x69
 800eb7c:	d05f      	beq.n	800ec3e <rcl_publisher_init+0x1b6>
 800eb7e:	2501      	movs	r5, #1
 800eb80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d096      	beq.n	800eab4 <rcl_publisher_init+0x2c>
 800eb86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eb8a:	4798      	blx	r3
 800eb8c:	e792      	b.n	800eab4 <rcl_publisher_init+0x2c>
 800eb8e:	4640      	mov	r0, r8
 800eb90:	f006 fcb0 	bl	80154f4 <rcl_node_get_options>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d0f2      	beq.n	800eb7e <rcl_publisher_init+0xf6>
 800eb98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb9a:	f7f1 fb2b 	bl	80001f4 <strlen>
 800eb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eba0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eba2:	3001      	adds	r0, #1
 800eba4:	4798      	blx	r3
 800eba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eba8:	9107      	str	r1, [sp, #28]
 800ebaa:	4681      	mov	r9, r0
 800ebac:	4608      	mov	r0, r1
 800ebae:	f7f1 fb21 	bl	80001f4 <strlen>
 800ebb2:	9907      	ldr	r1, [sp, #28]
 800ebb4:	1c42      	adds	r2, r0, #1
 800ebb6:	4648      	mov	r0, r9
 800ebb8:	f00b f8dc 	bl	8019d74 <memcpy>
 800ebbc:	462a      	mov	r2, r5
 800ebbe:	4648      	mov	r0, r9
 800ebc0:	a90a      	add	r1, sp, #40	; 0x28
 800ebc2:	f000 fee5 	bl	800f990 <rmw_validate_full_topic_name>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d137      	bne.n	800ec3a <rcl_publisher_init+0x1b2>
 800ebca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d138      	bne.n	800ec42 <rcl_publisher_init+0x1ba>
 800ebd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ebd4:	20c0      	movs	r0, #192	; 0xc0
 800ebd6:	4798      	blx	r3
 800ebd8:	6020      	str	r0, [r4, #0]
 800ebda:	b3a0      	cbz	r0, 800ec46 <rcl_publisher_init+0x1be>
 800ebdc:	4640      	mov	r0, r8
 800ebde:	f006 fc91 	bl	8015504 <rcl_node_get_rmw_handle>
 800ebe2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	4631      	mov	r1, r6
 800ebea:	463b      	mov	r3, r7
 800ebec:	464a      	mov	r2, r9
 800ebee:	6825      	ldr	r5, [r4, #0]
 800ebf0:	f001 fb24 	bl	801023c <rmw_create_publisher>
 800ebf4:	6821      	ldr	r1, [r4, #0]
 800ebf6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800ebfa:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800ebfe:	b388      	cbz	r0, 800ec64 <rcl_publisher_init+0x1dc>
 800ec00:	3168      	adds	r1, #104	; 0x68
 800ec02:	f001 fbf9 	bl	80103f8 <rmw_publisher_get_actual_qos>
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	4605      	mov	r5, r0
 800ec0a:	b9f0      	cbnz	r0, 800ec4a <rcl_publisher_init+0x1c2>
 800ec0c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ec10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800ec14:	4618      	mov	r0, r3
 800ec16:	2268      	movs	r2, #104	; 0x68
 800ec18:	4639      	mov	r1, r7
 800ec1a:	f00b f8ab 	bl	8019d74 <memcpy>
 800ec1e:	f8d8 2000 	ldr.w	r2, [r8]
 800ec22:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ec26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec28:	b110      	cbz	r0, 800ec30 <rcl_publisher_init+0x1a8>
 800ec2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec2e:	4798      	blx	r3
 800ec30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec34:	4648      	mov	r0, r9
 800ec36:	4798      	blx	r3
 800ec38:	e73c      	b.n	800eab4 <rcl_publisher_init+0x2c>
 800ec3a:	2501      	movs	r5, #1
 800ec3c:	e7f3      	b.n	800ec26 <rcl_publisher_init+0x19e>
 800ec3e:	2567      	movs	r5, #103	; 0x67
 800ec40:	e79e      	b.n	800eb80 <rcl_publisher_init+0xf8>
 800ec42:	2567      	movs	r5, #103	; 0x67
 800ec44:	e7ef      	b.n	800ec26 <rcl_publisher_init+0x19e>
 800ec46:	250a      	movs	r5, #10
 800ec48:	e7ed      	b.n	800ec26 <rcl_publisher_init+0x19e>
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d0f5      	beq.n	800ec3a <rcl_publisher_init+0x1b2>
 800ec4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ec52:	b13b      	cbz	r3, 800ec64 <rcl_publisher_init+0x1dc>
 800ec54:	4640      	mov	r0, r8
 800ec56:	f006 fc55 	bl	8015504 <rcl_node_get_rmw_handle>
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ec60:	f001 fbcc 	bl	80103fc <rmw_destroy_publisher>
 800ec64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec68:	6820      	ldr	r0, [r4, #0]
 800ec6a:	4798      	blx	r3
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	6023      	str	r3, [r4, #0]
 800ec70:	2501      	movs	r5, #1
 800ec72:	e7d8      	b.n	800ec26 <rcl_publisher_init+0x19e>

0800ec74 <rcl_publisher_get_default_options>:
 800ec74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec76:	4f0e      	ldr	r7, [pc, #56]	; (800ecb0 <rcl_publisher_get_default_options+0x3c>)
 800ec78:	490e      	ldr	r1, [pc, #56]	; (800ecb4 <rcl_publisher_get_default_options+0x40>)
 800ec7a:	b087      	sub	sp, #28
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	2250      	movs	r2, #80	; 0x50
 800ec80:	4638      	mov	r0, r7
 800ec82:	f00b f877 	bl	8019d74 <memcpy>
 800ec86:	466c      	mov	r4, sp
 800ec88:	4668      	mov	r0, sp
 800ec8a:	f000 fca1 	bl	800f5d0 <rcutils_get_default_allocator>
 800ec8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec90:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ec94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	602b      	str	r3, [r5, #0]
 800ec9a:	f000 fe73 	bl	800f984 <rmw_get_default_publisher_options>
 800ec9e:	4639      	mov	r1, r7
 800eca0:	6678      	str	r0, [r7, #100]	; 0x64
 800eca2:	2268      	movs	r2, #104	; 0x68
 800eca4:	4630      	mov	r0, r6
 800eca6:	f00b f865 	bl	8019d74 <memcpy>
 800ecaa:	4630      	mov	r0, r6
 800ecac:	b007      	add	sp, #28
 800ecae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecb0:	20009d28 	.word	0x20009d28
 800ecb4:	0801ec68 	.word	0x0801ec68

0800ecb8 <rcl_publish>:
 800ecb8:	b1f8      	cbz	r0, 800ecfa <rcl_publish+0x42>
 800ecba:	6803      	ldr	r3, [r0, #0]
 800ecbc:	b570      	push	{r4, r5, r6, lr}
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	b1b3      	cbz	r3, 800ecf0 <rcl_publish+0x38>
 800ecc2:	4616      	mov	r6, r2
 800ecc4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800ecc8:	b192      	cbz	r2, 800ecf0 <rcl_publish+0x38>
 800ecca:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800ecce:	460d      	mov	r5, r1
 800ecd0:	f005 ff7a 	bl	8014bc8 <rcl_context_is_valid>
 800ecd4:	b160      	cbz	r0, 800ecf0 <rcl_publish+0x38>
 800ecd6:	6823      	ldr	r3, [r4, #0]
 800ecd8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800ecdc:	b140      	cbz	r0, 800ecf0 <rcl_publish+0x38>
 800ecde:	b155      	cbz	r5, 800ecf6 <rcl_publish+0x3e>
 800ece0:	4632      	mov	r2, r6
 800ece2:	4629      	mov	r1, r5
 800ece4:	f001 fa4a 	bl	801017c <rmw_publish>
 800ece8:	3800      	subs	r0, #0
 800ecea:	bf18      	it	ne
 800ecec:	2001      	movne	r0, #1
 800ecee:	bd70      	pop	{r4, r5, r6, pc}
 800ecf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ecf4:	bd70      	pop	{r4, r5, r6, pc}
 800ecf6:	200b      	movs	r0, #11
 800ecf8:	bd70      	pop	{r4, r5, r6, pc}
 800ecfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ecfe:	4770      	bx	lr

0800ed00 <_rclc_check_for_new_data>:
 800ed00:	b1e0      	cbz	r0, 800ed3c <_rclc_check_for_new_data+0x3c>
 800ed02:	7803      	ldrb	r3, [r0, #0]
 800ed04:	2b08      	cmp	r3, #8
 800ed06:	d81b      	bhi.n	800ed40 <_rclc_check_for_new_data+0x40>
 800ed08:	e8df f003 	tbb	[pc, r3]
 800ed0c:	12161010 	.word	0x12161010
 800ed10:	05050512 	.word	0x05050512
 800ed14:	14          	.byte	0x14
 800ed15:	00          	.byte	0x00
 800ed16:	6a0b      	ldr	r3, [r1, #32]
 800ed18:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ed1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed1e:	3b00      	subs	r3, #0
 800ed20:	bf18      	it	ne
 800ed22:	2301      	movne	r3, #1
 800ed24:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ed28:	2000      	movs	r0, #0
 800ed2a:	4770      	bx	lr
 800ed2c:	680b      	ldr	r3, [r1, #0]
 800ed2e:	e7f3      	b.n	800ed18 <_rclc_check_for_new_data+0x18>
 800ed30:	698b      	ldr	r3, [r1, #24]
 800ed32:	e7f1      	b.n	800ed18 <_rclc_check_for_new_data+0x18>
 800ed34:	688b      	ldr	r3, [r1, #8]
 800ed36:	e7ef      	b.n	800ed18 <_rclc_check_for_new_data+0x18>
 800ed38:	690b      	ldr	r3, [r1, #16]
 800ed3a:	e7ed      	b.n	800ed18 <_rclc_check_for_new_data+0x18>
 800ed3c:	200b      	movs	r0, #11
 800ed3e:	4770      	bx	lr
 800ed40:	2300      	movs	r3, #0
 800ed42:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ed46:	2001      	movs	r0, #1
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop

0800ed4c <_rclc_take_new_data>:
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d049      	beq.n	800ede4 <_rclc_take_new_data+0x98>
 800ed50:	b510      	push	{r4, lr}
 800ed52:	7803      	ldrb	r3, [r0, #0]
 800ed54:	b08e      	sub	sp, #56	; 0x38
 800ed56:	4604      	mov	r4, r0
 800ed58:	2b08      	cmp	r3, #8
 800ed5a:	d84a      	bhi.n	800edf2 <_rclc_take_new_data+0xa6>
 800ed5c:	e8df f003 	tbb	[pc, r3]
 800ed60:	2b121515 	.word	0x2b121515
 800ed64:	0505052b 	.word	0x0505052b
 800ed68:	12          	.byte	0x12
 800ed69:	00          	.byte	0x00
 800ed6a:	6a0b      	ldr	r3, [r1, #32]
 800ed6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ed6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed72:	b13b      	cbz	r3, 800ed84 <_rclc_take_new_data+0x38>
 800ed74:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ed78:	f104 0110 	add.w	r1, r4, #16
 800ed7c:	f006 fcc2 	bl	8015704 <rcl_take_request>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	d131      	bne.n	800ede8 <_rclc_take_new_data+0x9c>
 800ed84:	2000      	movs	r0, #0
 800ed86:	b00e      	add	sp, #56	; 0x38
 800ed88:	bd10      	pop	{r4, pc}
 800ed8a:	680b      	ldr	r3, [r1, #0]
 800ed8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ed8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d0f6      	beq.n	800ed84 <_rclc_take_new_data+0x38>
 800ed96:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	aa02      	add	r2, sp, #8
 800ed9e:	f006 fe27 	bl	80159f0 <rcl_take>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d0ef      	beq.n	800ed86 <_rclc_take_new_data+0x3a>
 800eda6:	f240 1391 	movw	r3, #401	; 0x191
 800edaa:	4298      	cmp	r0, r3
 800edac:	d115      	bne.n	800edda <_rclc_take_new_data+0x8e>
 800edae:	2300      	movs	r3, #0
 800edb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800edb4:	e7e7      	b.n	800ed86 <_rclc_take_new_data+0x3a>
 800edb6:	698b      	ldr	r3, [r1, #24]
 800edb8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800edba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d0e0      	beq.n	800ed84 <_rclc_take_new_data+0x38>
 800edc2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800edc6:	f104 0110 	add.w	r1, r4, #16
 800edca:	f005 fea3 	bl	8014b14 <rcl_take_response>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d0d8      	beq.n	800ed84 <_rclc_take_new_data+0x38>
 800edd2:	f240 13f5 	movw	r3, #501	; 0x1f5
 800edd6:	4298      	cmp	r0, r3
 800edd8:	d0d5      	beq.n	800ed86 <_rclc_take_new_data+0x3a>
 800edda:	9001      	str	r0, [sp, #4]
 800eddc:	f000 fc2a 	bl	800f634 <rcutils_reset_error>
 800ede0:	9801      	ldr	r0, [sp, #4]
 800ede2:	e7d0      	b.n	800ed86 <_rclc_take_new_data+0x3a>
 800ede4:	200b      	movs	r0, #11
 800ede6:	4770      	bx	lr
 800ede8:	f240 2359 	movw	r3, #601	; 0x259
 800edec:	4298      	cmp	r0, r3
 800edee:	d0de      	beq.n	800edae <_rclc_take_new_data+0x62>
 800edf0:	e7f3      	b.n	800edda <_rclc_take_new_data+0x8e>
 800edf2:	2001      	movs	r0, #1
 800edf4:	e7c7      	b.n	800ed86 <_rclc_take_new_data+0x3a>
 800edf6:	bf00      	nop

0800edf8 <rclc_executor_trigger_any>:
 800edf8:	b170      	cbz	r0, 800ee18 <rclc_executor_trigger_any+0x20>
 800edfa:	b179      	cbz	r1, 800ee1c <rclc_executor_trigger_any+0x24>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2200      	movs	r2, #0
 800ee00:	e005      	b.n	800ee0e <rclc_executor_trigger_any+0x16>
 800ee02:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800ee06:	3340      	adds	r3, #64	; 0x40
 800ee08:	b930      	cbnz	r0, 800ee18 <rclc_executor_trigger_any+0x20>
 800ee0a:	4291      	cmp	r1, r2
 800ee0c:	d005      	beq.n	800ee1a <rclc_executor_trigger_any+0x22>
 800ee0e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ee12:	3201      	adds	r2, #1
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d1f4      	bne.n	800ee02 <rclc_executor_trigger_any+0xa>
 800ee18:	4770      	bx	lr
 800ee1a:	4770      	bx	lr
 800ee1c:	4608      	mov	r0, r1
 800ee1e:	e7fb      	b.n	800ee18 <rclc_executor_trigger_any+0x20>

0800ee20 <_rclc_execute.part.0>:
 800ee20:	b530      	push	{r4, r5, lr}
 800ee22:	7803      	ldrb	r3, [r0, #0]
 800ee24:	b083      	sub	sp, #12
 800ee26:	4604      	mov	r4, r0
 800ee28:	2b08      	cmp	r3, #8
 800ee2a:	d85b      	bhi.n	800eee4 <_rclc_execute.part.0+0xc4>
 800ee2c:	e8df f003 	tbb	[pc, r3]
 800ee30:	3036271f 	.word	0x3036271f
 800ee34:	0505053f 	.word	0x0505053f
 800ee38:	1a          	.byte	0x1a
 800ee39:	00          	.byte	0x00
 800ee3a:	2b06      	cmp	r3, #6
 800ee3c:	d049      	beq.n	800eed2 <_rclc_execute.part.0+0xb2>
 800ee3e:	2b07      	cmp	r3, #7
 800ee40:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ee42:	d140      	bne.n	800eec6 <_rclc_execute.part.0+0xa6>
 800ee44:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800ee48:	6880      	ldr	r0, [r0, #8]
 800ee4a:	4798      	blx	r3
 800ee4c:	f104 0110 	add.w	r1, r4, #16
 800ee50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ee52:	6860      	ldr	r0, [r4, #4]
 800ee54:	f006 fc8e 	bl	8015774 <rcl_send_response>
 800ee58:	b138      	cbz	r0, 800ee6a <_rclc_execute.part.0+0x4a>
 800ee5a:	9001      	str	r0, [sp, #4]
 800ee5c:	f000 fbea 	bl	800f634 <rcutils_reset_error>
 800ee60:	9801      	ldr	r0, [sp, #4]
 800ee62:	e002      	b.n	800ee6a <_rclc_execute.part.0+0x4a>
 800ee64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ee66:	4798      	blx	r3
 800ee68:	2000      	movs	r0, #0
 800ee6a:	b003      	add	sp, #12
 800ee6c:	bd30      	pop	{r4, r5, pc}
 800ee6e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ee72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ee74:	b96d      	cbnz	r5, 800ee92 <_rclc_execute.part.0+0x72>
 800ee76:	4628      	mov	r0, r5
 800ee78:	4798      	blx	r3
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	e7f5      	b.n	800ee6a <_rclc_execute.part.0+0x4a>
 800ee7e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ee82:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800ee86:	b1d5      	cbz	r5, 800eebe <_rclc_execute.part.0+0x9e>
 800ee88:	6880      	ldr	r0, [r0, #8]
 800ee8a:	4798      	blx	r3
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	e7ec      	b.n	800ee6a <_rclc_execute.part.0+0x4a>
 800ee90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ee92:	68a0      	ldr	r0, [r4, #8]
 800ee94:	4798      	blx	r3
 800ee96:	2000      	movs	r0, #0
 800ee98:	b003      	add	sp, #12
 800ee9a:	bd30      	pop	{r4, r5, pc}
 800ee9c:	6840      	ldr	r0, [r0, #4]
 800ee9e:	f006 fe9d 	bl	8015bdc <rcl_timer_call>
 800eea2:	f240 3321 	movw	r3, #801	; 0x321
 800eea6:	4298      	cmp	r0, r3
 800eea8:	d1d6      	bne.n	800ee58 <_rclc_execute.part.0+0x38>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e7dd      	b.n	800ee6a <_rclc_execute.part.0+0x4a>
 800eeae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800eeb0:	6880      	ldr	r0, [r0, #8]
 800eeb2:	f104 0110 	add.w	r1, r4, #16
 800eeb6:	4798      	blx	r3
 800eeb8:	2000      	movs	r0, #0
 800eeba:	b003      	add	sp, #12
 800eebc:	bd30      	pop	{r4, r5, pc}
 800eebe:	4628      	mov	r0, r5
 800eec0:	4798      	blx	r3
 800eec2:	4628      	mov	r0, r5
 800eec4:	e7d1      	b.n	800ee6a <_rclc_execute.part.0+0x4a>
 800eec6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800eec8:	6880      	ldr	r0, [r0, #8]
 800eeca:	4798      	blx	r3
 800eecc:	f104 0110 	add.w	r1, r4, #16
 800eed0:	e7be      	b.n	800ee50 <_rclc_execute.part.0+0x30>
 800eed2:	f100 0110 	add.w	r1, r0, #16
 800eed6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800eed8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800eeda:	6880      	ldr	r0, [r0, #8]
 800eedc:	9101      	str	r1, [sp, #4]
 800eede:	4798      	blx	r3
 800eee0:	9901      	ldr	r1, [sp, #4]
 800eee2:	e7b5      	b.n	800ee50 <_rclc_execute.part.0+0x30>
 800eee4:	2001      	movs	r0, #1
 800eee6:	e7c0      	b.n	800ee6a <_rclc_execute.part.0+0x4a>

0800eee8 <rclc_executor_init>:
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d063      	beq.n	800efb4 <rclc_executor_init+0xcc>
 800eeec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef0:	460f      	mov	r7, r1
 800eef2:	b0ae      	sub	sp, #184	; 0xb8
 800eef4:	2900      	cmp	r1, #0
 800eef6:	d055      	beq.n	800efa4 <rclc_executor_init+0xbc>
 800eef8:	4605      	mov	r5, r0
 800eefa:	4618      	mov	r0, r3
 800eefc:	4616      	mov	r6, r2
 800eefe:	4698      	mov	r8, r3
 800ef00:	f000 fb74 	bl	800f5ec <rcutils_allocator_is_valid>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d04d      	beq.n	800efa4 <rclc_executor_init+0xbc>
 800ef08:	2e00      	cmp	r6, #0
 800ef0a:	d04b      	beq.n	800efa4 <rclc_executor_init+0xbc>
 800ef0c:	492e      	ldr	r1, [pc, #184]	; (800efc8 <rclc_executor_init+0xe0>)
 800ef0e:	2280      	movs	r2, #128	; 0x80
 800ef10:	a80e      	add	r0, sp, #56	; 0x38
 800ef12:	f00a ff2f 	bl	8019d74 <memcpy>
 800ef16:	2400      	movs	r4, #0
 800ef18:	a90e      	add	r1, sp, #56	; 0x38
 800ef1a:	2280      	movs	r2, #128	; 0x80
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	f00a ff29 	bl	8019d74 <memcpy>
 800ef22:	602f      	str	r7, [r5, #0]
 800ef24:	4668      	mov	r0, sp
 800ef26:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800ef2a:	466f      	mov	r7, sp
 800ef2c:	f007 f8b0 	bl	8016090 <rcl_get_zero_initialized_wait_set>
 800ef30:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ef32:	f105 0c14 	add.w	ip, r5, #20
 800ef36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ef3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ef42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef46:	a31e      	add	r3, pc, #120	; (adr r3, 800efc0 <rclc_executor_init+0xd8>)
 800ef48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	f8cc 1000 	str.w	r1, [ip]
 800ef52:	f8d8 7000 	ldr.w	r7, [r8]
 800ef56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ef5a:	f8c5 8010 	str.w	r8, [r5, #16]
 800ef5e:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800ef62:	01b0      	lsls	r0, r6, #6
 800ef64:	47b8      	blx	r7
 800ef66:	6068      	str	r0, [r5, #4]
 800ef68:	b908      	cbnz	r0, 800ef6e <rclc_executor_init+0x86>
 800ef6a:	e025      	b.n	800efb8 <rclc_executor_init+0xd0>
 800ef6c:	6868      	ldr	r0, [r5, #4]
 800ef6e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ef72:	4631      	mov	r1, r6
 800ef74:	3401      	adds	r4, #1
 800ef76:	f000 fa01 	bl	800f37c <rclc_executor_handle_init>
 800ef7a:	42a6      	cmp	r6, r4
 800ef7c:	d1f6      	bne.n	800ef6c <rclc_executor_init+0x84>
 800ef7e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ef82:	f000 f9ef 	bl	800f364 <rclc_executor_handle_counters_zero_init>
 800ef86:	686b      	ldr	r3, [r5, #4]
 800ef88:	4a10      	ldr	r2, [pc, #64]	; (800efcc <rclc_executor_init+0xe4>)
 800ef8a:	672a      	str	r2, [r5, #112]	; 0x70
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	6768      	str	r0, [r5, #116]	; 0x74
 800ef90:	b163      	cbz	r3, 800efac <rclc_executor_init+0xc4>
 800ef92:	692b      	ldr	r3, [r5, #16]
 800ef94:	b153      	cbz	r3, 800efac <rclc_executor_init+0xc4>
 800ef96:	68ab      	ldr	r3, [r5, #8]
 800ef98:	b143      	cbz	r3, 800efac <rclc_executor_init+0xc4>
 800ef9a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800ef9e:	b02e      	add	sp, #184	; 0xb8
 800efa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa4:	200b      	movs	r0, #11
 800efa6:	b02e      	add	sp, #184	; 0xb8
 800efa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efac:	4618      	mov	r0, r3
 800efae:	b02e      	add	sp, #184	; 0xb8
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	200b      	movs	r0, #11
 800efb6:	4770      	bx	lr
 800efb8:	200a      	movs	r0, #10
 800efba:	e7f4      	b.n	800efa6 <rclc_executor_init+0xbe>
 800efbc:	f3af 8000 	nop.w
 800efc0:	3b9aca00 	.word	0x3b9aca00
 800efc4:	00000000 	.word	0x00000000
 800efc8:	0801ecb8 	.word	0x0801ecb8
 800efcc:	0800edf9 	.word	0x0800edf9

0800efd0 <rclc_executor_add_subscription>:
 800efd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800efd8:	b358      	cbz	r0, 800f032 <rclc_executor_add_subscription+0x62>
 800efda:	b351      	cbz	r1, 800f032 <rclc_executor_add_subscription+0x62>
 800efdc:	b34a      	cbz	r2, 800f032 <rclc_executor_add_subscription+0x62>
 800efde:	b343      	cbz	r3, 800f032 <rclc_executor_add_subscription+0x62>
 800efe0:	4604      	mov	r4, r0
 800efe2:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800efe6:	4285      	cmp	r5, r0
 800efe8:	d302      	bcc.n	800eff0 <rclc_executor_add_subscription+0x20>
 800efea:	2001      	movs	r0, #1
 800efec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff0:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800eff4:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800eff8:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800effc:	f04f 0c00 	mov.w	ip, #0
 800f000:	f80e c008 	strb.w	ip, [lr, r8]
 800f004:	2001      	movs	r0, #1
 800f006:	3501      	adds	r5, #1
 800f008:	f104 0814 	add.w	r8, r4, #20
 800f00c:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800f010:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800f014:	6333      	str	r3, [r6, #48]	; 0x30
 800f016:	7077      	strb	r7, [r6, #1]
 800f018:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800f01c:	4640      	mov	r0, r8
 800f01e:	60e5      	str	r5, [r4, #12]
 800f020:	f007 f848 	bl	80160b4 <rcl_wait_set_is_valid>
 800f024:	b940      	cbnz	r0, 800f038 <rclc_executor_add_subscription+0x68>
 800f026:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f028:	3301      	adds	r3, #1
 800f02a:	64a3      	str	r3, [r4, #72]	; 0x48
 800f02c:	2000      	movs	r0, #0
 800f02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f032:	200b      	movs	r0, #11
 800f034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f038:	4640      	mov	r0, r8
 800f03a:	f007 f841 	bl	80160c0 <rcl_wait_set_fini>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d0f1      	beq.n	800f026 <rclc_executor_add_subscription+0x56>
 800f042:	e7d3      	b.n	800efec <rclc_executor_add_subscription+0x1c>

0800f044 <rclc_executor_prepare>:
 800f044:	2800      	cmp	r0, #0
 800f046:	d03d      	beq.n	800f0c4 <rclc_executor_prepare+0x80>
 800f048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f04c:	f100 0814 	add.w	r8, r0, #20
 800f050:	b09a      	sub	sp, #104	; 0x68
 800f052:	4604      	mov	r4, r0
 800f054:	4640      	mov	r0, r8
 800f056:	f007 f82d 	bl	80160b4 <rcl_wait_set_is_valid>
 800f05a:	b118      	cbz	r0, 800f064 <rclc_executor_prepare+0x20>
 800f05c:	2000      	movs	r0, #0
 800f05e:	b01a      	add	sp, #104	; 0x68
 800f060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f064:	4640      	mov	r0, r8
 800f066:	f007 f82b 	bl	80160c0 <rcl_wait_set_fini>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d127      	bne.n	800f0be <rclc_executor_prepare+0x7a>
 800f06e:	a80c      	add	r0, sp, #48	; 0x30
 800f070:	ad0c      	add	r5, sp, #48	; 0x30
 800f072:	f007 f80d 	bl	8016090 <rcl_get_zero_initialized_wait_set>
 800f076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f078:	4646      	mov	r6, r8
 800f07a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f07c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f07e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f082:	6927      	ldr	r7, [r4, #16]
 800f084:	682d      	ldr	r5, [r5, #0]
 800f086:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f088:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f08a:	6035      	str	r5, [r6, #0]
 800f08c:	ad04      	add	r5, sp, #16
 800f08e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f090:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800f094:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f096:	6826      	ldr	r6, [r4, #0]
 800f098:	6838      	ldr	r0, [r7, #0]
 800f09a:	6028      	str	r0, [r5, #0]
 800f09c:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800f0a0:	e9cd 3200 	strd	r3, r2, [sp]
 800f0a4:	4640      	mov	r0, r8
 800f0a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f0a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f0aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f0ac:	f007 fb26 	bl	80166fc <rcl_wait_set_init>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d0d4      	beq.n	800f05e <rclc_executor_prepare+0x1a>
 800f0b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f0b6:	f000 fabd 	bl	800f634 <rcutils_reset_error>
 800f0ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f0bc:	e7cf      	b.n	800f05e <rclc_executor_prepare+0x1a>
 800f0be:	f000 fab9 	bl	800f634 <rcutils_reset_error>
 800f0c2:	e7d4      	b.n	800f06e <rclc_executor_prepare+0x2a>
 800f0c4:	200b      	movs	r0, #11
 800f0c6:	4770      	bx	lr

0800f0c8 <rclc_executor_spin_some.part.0>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	f100 0814 	add.w	r8, r0, #20
 800f0d0:	b083      	sub	sp, #12
 800f0d2:	4692      	mov	sl, r2
 800f0d4:	4699      	mov	r9, r3
 800f0d6:	4605      	mov	r5, r0
 800f0d8:	f7ff ffb4 	bl	800f044 <rclc_executor_prepare>
 800f0dc:	4640      	mov	r0, r8
 800f0de:	f007 f8bb 	bl	8016258 <rcl_wait_set_clear>
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	f040 80be 	bne.w	800f266 <rclc_executor_spin_some.part.0+0x19e>
 800f0ea:	68ab      	ldr	r3, [r5, #8]
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	b1eb      	cbz	r3, 800f12c <rclc_executor_spin_some.part.0+0x64>
 800f0f0:	686e      	ldr	r6, [r5, #4]
 800f0f2:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800f0f6:	01a2      	lsls	r2, r4, #6
 800f0f8:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800f0fc:	b1b3      	cbz	r3, 800f12c <rclc_executor_spin_some.part.0+0x64>
 800f0fe:	5cb3      	ldrb	r3, [r6, r2]
 800f100:	2b08      	cmp	r3, #8
 800f102:	f200 80a9 	bhi.w	800f258 <rclc_executor_spin_some.part.0+0x190>
 800f106:	e8df f003 	tbb	[pc, r3]
 800f10a:	8989      	.short	0x8989
 800f10c:	057b7b93 	.word	0x057b7b93
 800f110:	0505      	.short	0x0505
 800f112:	9d          	.byte	0x9d
 800f113:	00          	.byte	0x00
 800f114:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f118:	4640      	mov	r0, r8
 800f11a:	6849      	ldr	r1, [r1, #4]
 800f11c:	f007 fc04 	bl	8016928 <rcl_wait_set_add_service>
 800f120:	2800      	cmp	r0, #0
 800f122:	d175      	bne.n	800f210 <rclc_executor_spin_some.part.0+0x148>
 800f124:	68ab      	ldr	r3, [r5, #8]
 800f126:	3401      	adds	r4, #1
 800f128:	429c      	cmp	r4, r3
 800f12a:	d3e1      	bcc.n	800f0f0 <rclc_executor_spin_some.part.0+0x28>
 800f12c:	464b      	mov	r3, r9
 800f12e:	4652      	mov	r2, sl
 800f130:	4640      	mov	r0, r8
 800f132:	f007 fc25 	bl	8016980 <rcl_wait>
 800f136:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 809b 	beq.w	800f276 <rclc_executor_spin_some.part.0+0x1ae>
 800f140:	2b01      	cmp	r3, #1
 800f142:	f040 8089 	bne.w	800f258 <rclc_executor_spin_some.part.0+0x190>
 800f146:	68ab      	ldr	r3, [r5, #8]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 80ef 	beq.w	800f32c <rclc_executor_spin_some.part.0+0x264>
 800f14e:	2400      	movs	r4, #0
 800f150:	4626      	mov	r6, r4
 800f152:	f240 1991 	movw	r9, #401	; 0x191
 800f156:	e00a      	b.n	800f16e <rclc_executor_spin_some.part.0+0xa6>
 800f158:	f7ff fdd2 	bl	800ed00 <_rclc_check_for_new_data>
 800f15c:	4604      	mov	r4, r0
 800f15e:	b110      	cbz	r0, 800f166 <rclc_executor_spin_some.part.0+0x9e>
 800f160:	4548      	cmp	r0, r9
 800f162:	f040 8086 	bne.w	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f166:	68ab      	ldr	r3, [r5, #8]
 800f168:	429e      	cmp	r6, r3
 800f16a:	f080 80db 	bcs.w	800f324 <rclc_executor_spin_some.part.0+0x25c>
 800f16e:	686a      	ldr	r2, [r5, #4]
 800f170:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f174:	4641      	mov	r1, r8
 800f176:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f17a:	3601      	adds	r6, #1
 800f17c:	f1bc 0f00 	cmp.w	ip, #0
 800f180:	d1ea      	bne.n	800f158 <rclc_executor_spin_some.part.0+0x90>
 800f182:	4619      	mov	r1, r3
 800f184:	4610      	mov	r0, r2
 800f186:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f18a:	4798      	blx	r3
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d070      	beq.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f190:	68aa      	ldr	r2, [r5, #8]
 800f192:	2a00      	cmp	r2, #0
 800f194:	d06d      	beq.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f196:	2600      	movs	r6, #0
 800f198:	f240 1991 	movw	r9, #401	; 0x191
 800f19c:	e008      	b.n	800f1b0 <rclc_executor_spin_some.part.0+0xe8>
 800f19e:	f7ff fdd5 	bl	800ed4c <_rclc_take_new_data>
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	b108      	cbz	r0, 800f1aa <rclc_executor_spin_some.part.0+0xe2>
 800f1a6:	4548      	cmp	r0, r9
 800f1a8:	d163      	bne.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f1aa:	68aa      	ldr	r2, [r5, #8]
 800f1ac:	4296      	cmp	r6, r2
 800f1ae:	d208      	bcs.n	800f1c2 <rclc_executor_spin_some.part.0+0xfa>
 800f1b0:	6868      	ldr	r0, [r5, #4]
 800f1b2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f1b6:	4641      	mov	r1, r8
 800f1b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f1bc:	3601      	adds	r6, #1
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d1ed      	bne.n	800f19e <rclc_executor_spin_some.part.0+0xd6>
 800f1c2:	2600      	movs	r6, #0
 800f1c4:	b932      	cbnz	r2, 800f1d4 <rclc_executor_spin_some.part.0+0x10c>
 800f1c6:	e054      	b.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f1c8:	2901      	cmp	r1, #1
 800f1ca:	d012      	beq.n	800f1f2 <rclc_executor_spin_some.part.0+0x12a>
 800f1cc:	3601      	adds	r6, #1
 800f1ce:	4296      	cmp	r6, r2
 800f1d0:	d245      	bcs.n	800f25e <rclc_executor_spin_some.part.0+0x196>
 800f1d2:	2400      	movs	r4, #0
 800f1d4:	686b      	ldr	r3, [r5, #4]
 800f1d6:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800f1e0:	2900      	cmp	r1, #0
 800f1e2:	d046      	beq.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f1e4:	7859      	ldrb	r1, [r3, #1]
 800f1e6:	2900      	cmp	r1, #0
 800f1e8:	d1ee      	bne.n	800f1c8 <rclc_executor_spin_some.part.0+0x100>
 800f1ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d0ec      	beq.n	800f1cc <rclc_executor_spin_some.part.0+0x104>
 800f1f2:	f7ff fe15 	bl	800ee20 <_rclc_execute.part.0>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	f040 8096 	bne.w	800f328 <rclc_executor_spin_some.part.0+0x260>
 800f1fc:	68aa      	ldr	r2, [r5, #8]
 800f1fe:	e7e5      	b.n	800f1cc <rclc_executor_spin_some.part.0+0x104>
 800f200:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f204:	4640      	mov	r0, r8
 800f206:	6849      	ldr	r1, [r1, #4]
 800f208:	f007 fb62 	bl	80168d0 <rcl_wait_set_add_client>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d089      	beq.n	800f124 <rclc_executor_spin_some.part.0+0x5c>
 800f210:	9001      	str	r0, [sp, #4]
 800f212:	f000 fa0f 	bl	800f634 <rcutils_reset_error>
 800f216:	9801      	ldr	r0, [sp, #4]
 800f218:	4607      	mov	r7, r0
 800f21a:	e020      	b.n	800f25e <rclc_executor_spin_some.part.0+0x196>
 800f21c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f220:	4640      	mov	r0, r8
 800f222:	6849      	ldr	r1, [r1, #4]
 800f224:	f006 ffec 	bl	8016200 <rcl_wait_set_add_subscription>
 800f228:	2800      	cmp	r0, #0
 800f22a:	f43f af7b 	beq.w	800f124 <rclc_executor_spin_some.part.0+0x5c>
 800f22e:	e7ef      	b.n	800f210 <rclc_executor_spin_some.part.0+0x148>
 800f230:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f234:	4640      	mov	r0, r8
 800f236:	6849      	ldr	r1, [r1, #4]
 800f238:	f007 fb1a 	bl	8016870 <rcl_wait_set_add_timer>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	f43f af71 	beq.w	800f124 <rclc_executor_spin_some.part.0+0x5c>
 800f242:	e7e5      	b.n	800f210 <rclc_executor_spin_some.part.0+0x148>
 800f244:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f248:	4640      	mov	r0, r8
 800f24a:	6849      	ldr	r1, [r1, #4]
 800f24c:	f007 fae4 	bl	8016818 <rcl_wait_set_add_guard_condition>
 800f250:	2800      	cmp	r0, #0
 800f252:	f43f af67 	beq.w	800f124 <rclc_executor_spin_some.part.0+0x5c>
 800f256:	e7db      	b.n	800f210 <rclc_executor_spin_some.part.0+0x148>
 800f258:	f000 f9ec 	bl	800f634 <rcutils_reset_error>
 800f25c:	2701      	movs	r7, #1
 800f25e:	4638      	mov	r0, r7
 800f260:	b003      	add	sp, #12
 800f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f266:	f000 f9e5 	bl	800f634 <rcutils_reset_error>
 800f26a:	4638      	mov	r0, r7
 800f26c:	b003      	add	sp, #12
 800f26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f272:	4627      	mov	r7, r4
 800f274:	e7f3      	b.n	800f25e <rclc_executor_spin_some.part.0+0x196>
 800f276:	68ab      	ldr	r3, [r5, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d05a      	beq.n	800f332 <rclc_executor_spin_some.part.0+0x26a>
 800f27c:	2400      	movs	r4, #0
 800f27e:	4626      	mov	r6, r4
 800f280:	f240 1991 	movw	r9, #401	; 0x191
 800f284:	e008      	b.n	800f298 <rclc_executor_spin_some.part.0+0x1d0>
 800f286:	f7ff fd3b 	bl	800ed00 <_rclc_check_for_new_data>
 800f28a:	4604      	mov	r4, r0
 800f28c:	b108      	cbz	r0, 800f292 <rclc_executor_spin_some.part.0+0x1ca>
 800f28e:	4548      	cmp	r0, r9
 800f290:	d1ef      	bne.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f292:	68ab      	ldr	r3, [r5, #8]
 800f294:	429e      	cmp	r6, r3
 800f296:	d243      	bcs.n	800f320 <rclc_executor_spin_some.part.0+0x258>
 800f298:	686a      	ldr	r2, [r5, #4]
 800f29a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f29e:	4641      	mov	r1, r8
 800f2a0:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f2a4:	3601      	adds	r6, #1
 800f2a6:	f1bc 0f00 	cmp.w	ip, #0
 800f2aa:	d1ec      	bne.n	800f286 <rclc_executor_spin_some.part.0+0x1be>
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f2b4:	4798      	blx	r3
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	d0db      	beq.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f2ba:	68ab      	ldr	r3, [r5, #8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0d8      	beq.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f2c0:	f04f 0a00 	mov.w	sl, #0
 800f2c4:	f240 1691 	movw	r6, #401	; 0x191
 800f2c8:	f240 2959 	movw	r9, #601	; 0x259
 800f2cc:	e00b      	b.n	800f2e6 <rclc_executor_spin_some.part.0+0x21e>
 800f2ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f2d2:	b113      	cbz	r3, 800f2da <rclc_executor_spin_some.part.0+0x212>
 800f2d4:	f7ff fda4 	bl	800ee20 <_rclc_execute.part.0>
 800f2d8:	bb30      	cbnz	r0, 800f328 <rclc_executor_spin_some.part.0+0x260>
 800f2da:	68ab      	ldr	r3, [r5, #8]
 800f2dc:	f10a 0a01 	add.w	sl, sl, #1
 800f2e0:	459a      	cmp	sl, r3
 800f2e2:	d2bc      	bcs.n	800f25e <rclc_executor_spin_some.part.0+0x196>
 800f2e4:	2400      	movs	r4, #0
 800f2e6:	6868      	ldr	r0, [r5, #4]
 800f2e8:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f2ec:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f2f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d0bc      	beq.n	800f272 <rclc_executor_spin_some.part.0+0x1aa>
 800f2f8:	4641      	mov	r1, r8
 800f2fa:	f7ff fd27 	bl	800ed4c <_rclc_take_new_data>
 800f2fe:	b118      	cbz	r0, 800f308 <rclc_executor_spin_some.part.0+0x240>
 800f300:	42b0      	cmp	r0, r6
 800f302:	d001      	beq.n	800f308 <rclc_executor_spin_some.part.0+0x240>
 800f304:	4548      	cmp	r0, r9
 800f306:	d10f      	bne.n	800f328 <rclc_executor_spin_some.part.0+0x260>
 800f308:	6868      	ldr	r0, [r5, #4]
 800f30a:	eb10 000b 	adds.w	r0, r0, fp
 800f30e:	d005      	beq.n	800f31c <rclc_executor_spin_some.part.0+0x254>
 800f310:	7843      	ldrb	r3, [r0, #1]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d0db      	beq.n	800f2ce <rclc_executor_spin_some.part.0+0x206>
 800f316:	2b01      	cmp	r3, #1
 800f318:	d1df      	bne.n	800f2da <rclc_executor_spin_some.part.0+0x212>
 800f31a:	e7db      	b.n	800f2d4 <rclc_executor_spin_some.part.0+0x20c>
 800f31c:	270b      	movs	r7, #11
 800f31e:	e79e      	b.n	800f25e <rclc_executor_spin_some.part.0+0x196>
 800f320:	686a      	ldr	r2, [r5, #4]
 800f322:	e7c3      	b.n	800f2ac <rclc_executor_spin_some.part.0+0x1e4>
 800f324:	686a      	ldr	r2, [r5, #4]
 800f326:	e72c      	b.n	800f182 <rclc_executor_spin_some.part.0+0xba>
 800f328:	4607      	mov	r7, r0
 800f32a:	e798      	b.n	800f25e <rclc_executor_spin_some.part.0+0x196>
 800f32c:	686a      	ldr	r2, [r5, #4]
 800f32e:	461c      	mov	r4, r3
 800f330:	e727      	b.n	800f182 <rclc_executor_spin_some.part.0+0xba>
 800f332:	686a      	ldr	r2, [r5, #4]
 800f334:	461c      	mov	r4, r3
 800f336:	e7b9      	b.n	800f2ac <rclc_executor_spin_some.part.0+0x1e4>

0800f338 <rclc_executor_spin_some>:
 800f338:	b190      	cbz	r0, 800f360 <rclc_executor_spin_some+0x28>
 800f33a:	b570      	push	{r4, r5, r6, lr}
 800f33c:	4604      	mov	r4, r0
 800f33e:	6800      	ldr	r0, [r0, #0]
 800f340:	4616      	mov	r6, r2
 800f342:	461d      	mov	r5, r3
 800f344:	f005 fc40 	bl	8014bc8 <rcl_context_is_valid>
 800f348:	b130      	cbz	r0, 800f358 <rclc_executor_spin_some+0x20>
 800f34a:	4632      	mov	r2, r6
 800f34c:	462b      	mov	r3, r5
 800f34e:	4620      	mov	r0, r4
 800f350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f354:	f7ff beb8 	b.w	800f0c8 <rclc_executor_spin_some.part.0>
 800f358:	f000 f96c 	bl	800f634 <rcutils_reset_error>
 800f35c:	2001      	movs	r0, #1
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	200b      	movs	r0, #11
 800f362:	4770      	bx	lr

0800f364 <rclc_executor_handle_counters_zero_init>:
 800f364:	b140      	cbz	r0, 800f378 <rclc_executor_handle_counters_zero_init+0x14>
 800f366:	2300      	movs	r3, #0
 800f368:	6003      	str	r3, [r0, #0]
 800f36a:	6043      	str	r3, [r0, #4]
 800f36c:	6083      	str	r3, [r0, #8]
 800f36e:	60c3      	str	r3, [r0, #12]
 800f370:	6103      	str	r3, [r0, #16]
 800f372:	6143      	str	r3, [r0, #20]
 800f374:	4618      	mov	r0, r3
 800f376:	4770      	bx	lr
 800f378:	200b      	movs	r0, #11
 800f37a:	4770      	bx	lr

0800f37c <rclc_executor_handle_init>:
 800f37c:	b178      	cbz	r0, 800f39e <rclc_executor_handle_init+0x22>
 800f37e:	b430      	push	{r4, r5}
 800f380:	4603      	mov	r3, r0
 800f382:	2209      	movs	r2, #9
 800f384:	2000      	movs	r0, #0
 800f386:	2400      	movs	r4, #0
 800f388:	2500      	movs	r5, #0
 800f38a:	801a      	strh	r2, [r3, #0]
 800f38c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f390:	bc30      	pop	{r4, r5}
 800f392:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f396:	6359      	str	r1, [r3, #52]	; 0x34
 800f398:	6318      	str	r0, [r3, #48]	; 0x30
 800f39a:	8718      	strh	r0, [r3, #56]	; 0x38
 800f39c:	4770      	bx	lr
 800f39e:	200b      	movs	r0, #11
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop

0800f3a4 <rclc_support_init_with_options>:
 800f3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3ae:	b380      	cbz	r0, 800f412 <rclc_support_init_with_options+0x6e>
 800f3b0:	461c      	mov	r4, r3
 800f3b2:	b373      	cbz	r3, 800f412 <rclc_support_init_with_options+0x6e>
 800f3b4:	f1b8 0f00 	cmp.w	r8, #0
 800f3b8:	d02b      	beq.n	800f412 <rclc_support_init_with_options+0x6e>
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	460e      	mov	r6, r1
 800f3be:	4617      	mov	r7, r2
 800f3c0:	f7ff f9fc 	bl	800e7bc <rcl_get_zero_initialized_init_options>
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	6028      	str	r0, [r5, #0]
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f7ff fa6f 	bl	800e8ac <rcl_init_options_copy>
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	b9c8      	cbnz	r0, 800f406 <rclc_support_init_with_options+0x62>
 800f3d2:	466c      	mov	r4, sp
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f005 fbed 	bl	8014bb4 <rcl_get_zero_initialized_context>
 800f3da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f3de:	1d2b      	adds	r3, r5, #4
 800f3e0:	e883 0003 	stmia.w	r3, {r0, r1}
 800f3e4:	462a      	mov	r2, r5
 800f3e6:	4639      	mov	r1, r7
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	f005 fdc3 	bl	8014f74 <rcl_init>
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	b948      	cbnz	r0, 800f406 <rclc_support_init_with_options+0x62>
 800f3f2:	f8c5 800c 	str.w	r8, [r5, #12]
 800f3f6:	4642      	mov	r2, r8
 800f3f8:	f105 0110 	add.w	r1, r5, #16
 800f3fc:	2003      	movs	r0, #3
 800f3fe:	f006 fb61 	bl	8015ac4 <rcl_clock_init>
 800f402:	4604      	mov	r4, r0
 800f404:	b108      	cbz	r0, 800f40a <rclc_support_init_with_options+0x66>
 800f406:	f000 f915 	bl	800f634 <rcutils_reset_error>
 800f40a:	4620      	mov	r0, r4
 800f40c:	b002      	add	sp, #8
 800f40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f412:	240b      	movs	r4, #11
 800f414:	4620      	mov	r0, r4
 800f416:	b002      	add	sp, #8
 800f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f41c <rclc_node_init_default>:
 800f41c:	b3b8      	cbz	r0, 800f48e <rclc_node_init_default+0x72>
 800f41e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f422:	460d      	mov	r5, r1
 800f424:	b08f      	sub	sp, #60	; 0x3c
 800f426:	b329      	cbz	r1, 800f474 <rclc_node_init_default+0x58>
 800f428:	4616      	mov	r6, r2
 800f42a:	b31a      	cbz	r2, 800f474 <rclc_node_init_default+0x58>
 800f42c:	461f      	mov	r7, r3
 800f42e:	b30b      	cbz	r3, 800f474 <rclc_node_init_default+0x58>
 800f430:	f10d 0810 	add.w	r8, sp, #16
 800f434:	4604      	mov	r4, r0
 800f436:	4640      	mov	r0, r8
 800f438:	f005 fec8 	bl	80151cc <rcl_get_zero_initialized_node>
 800f43c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f440:	f10d 091c 	add.w	r9, sp, #28
 800f444:	e884 0003 	stmia.w	r4, {r0, r1}
 800f448:	4648      	mov	r0, r9
 800f44a:	f7ff fadd 	bl	800ea08 <rcl_node_get_default_options>
 800f44e:	4640      	mov	r0, r8
 800f450:	f005 febc 	bl	80151cc <rcl_get_zero_initialized_node>
 800f454:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f458:	1d3b      	adds	r3, r7, #4
 800f45a:	f8cd 9000 	str.w	r9, [sp]
 800f45e:	4632      	mov	r2, r6
 800f460:	e884 0003 	stmia.w	r4, {r0, r1}
 800f464:	4629      	mov	r1, r5
 800f466:	4620      	mov	r0, r4
 800f468:	f005 feba 	bl	80151e0 <rcl_node_init>
 800f46c:	b930      	cbnz	r0, 800f47c <rclc_node_init_default+0x60>
 800f46e:	b00f      	add	sp, #60	; 0x3c
 800f470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f474:	200b      	movs	r0, #11
 800f476:	b00f      	add	sp, #60	; 0x3c
 800f478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f47c:	9003      	str	r0, [sp, #12]
 800f47e:	f000 f8d9 	bl	800f634 <rcutils_reset_error>
 800f482:	f000 f8d7 	bl	800f634 <rcutils_reset_error>
 800f486:	9803      	ldr	r0, [sp, #12]
 800f488:	b00f      	add	sp, #60	; 0x3c
 800f48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f48e:	200b      	movs	r0, #11
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop

0800f494 <rclc_publisher_init_default>:
 800f494:	b368      	cbz	r0, 800f4f2 <rclc_publisher_init_default+0x5e>
 800f496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f49a:	460d      	mov	r5, r1
 800f49c:	b09e      	sub	sp, #120	; 0x78
 800f49e:	b321      	cbz	r1, 800f4ea <rclc_publisher_init_default+0x56>
 800f4a0:	4616      	mov	r6, r2
 800f4a2:	b312      	cbz	r2, 800f4ea <rclc_publisher_init_default+0x56>
 800f4a4:	461f      	mov	r7, r3
 800f4a6:	b303      	cbz	r3, 800f4ea <rclc_publisher_init_default+0x56>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	f7ff fae7 	bl	800ea7c <rcl_get_zero_initialized_publisher>
 800f4ae:	f10d 0810 	add.w	r8, sp, #16
 800f4b2:	6020      	str	r0, [r4, #0]
 800f4b4:	4640      	mov	r0, r8
 800f4b6:	f7ff fbdd 	bl	800ec74 <rcl_publisher_get_default_options>
 800f4ba:	490f      	ldr	r1, [pc, #60]	; (800f4f8 <rclc_publisher_init_default+0x64>)
 800f4bc:	2250      	movs	r2, #80	; 0x50
 800f4be:	4640      	mov	r0, r8
 800f4c0:	f00a fc58 	bl	8019d74 <memcpy>
 800f4c4:	f8cd 8000 	str.w	r8, [sp]
 800f4c8:	463b      	mov	r3, r7
 800f4ca:	4632      	mov	r2, r6
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f7ff fada 	bl	800ea88 <rcl_publisher_init>
 800f4d4:	b910      	cbnz	r0, 800f4dc <rclc_publisher_init_default+0x48>
 800f4d6:	b01e      	add	sp, #120	; 0x78
 800f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4dc:	9003      	str	r0, [sp, #12]
 800f4de:	f000 f8a9 	bl	800f634 <rcutils_reset_error>
 800f4e2:	9803      	ldr	r0, [sp, #12]
 800f4e4:	b01e      	add	sp, #120	; 0x78
 800f4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ea:	200b      	movs	r0, #11
 800f4ec:	b01e      	add	sp, #120	; 0x78
 800f4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f2:	200b      	movs	r0, #11
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	0801ed38 	.word	0x0801ed38

0800f4fc <rclc_subscription_init_default>:
 800f4fc:	b368      	cbz	r0, 800f55a <rclc_subscription_init_default+0x5e>
 800f4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f502:	460d      	mov	r5, r1
 800f504:	b0a0      	sub	sp, #128	; 0x80
 800f506:	b321      	cbz	r1, 800f552 <rclc_subscription_init_default+0x56>
 800f508:	4616      	mov	r6, r2
 800f50a:	b312      	cbz	r2, 800f552 <rclc_subscription_init_default+0x56>
 800f50c:	461f      	mov	r7, r3
 800f50e:	b303      	cbz	r3, 800f552 <rclc_subscription_init_default+0x56>
 800f510:	4604      	mov	r4, r0
 800f512:	f006 f945 	bl	80157a0 <rcl_get_zero_initialized_subscription>
 800f516:	f10d 0810 	add.w	r8, sp, #16
 800f51a:	6020      	str	r0, [r4, #0]
 800f51c:	4640      	mov	r0, r8
 800f51e:	f006 fa3b 	bl	8015998 <rcl_subscription_get_default_options>
 800f522:	490f      	ldr	r1, [pc, #60]	; (800f560 <rclc_subscription_init_default+0x64>)
 800f524:	2250      	movs	r2, #80	; 0x50
 800f526:	4640      	mov	r0, r8
 800f528:	f00a fc24 	bl	8019d74 <memcpy>
 800f52c:	f8cd 8000 	str.w	r8, [sp]
 800f530:	463b      	mov	r3, r7
 800f532:	4632      	mov	r2, r6
 800f534:	4629      	mov	r1, r5
 800f536:	4620      	mov	r0, r4
 800f538:	f006 f938 	bl	80157ac <rcl_subscription_init>
 800f53c:	b910      	cbnz	r0, 800f544 <rclc_subscription_init_default+0x48>
 800f53e:	b020      	add	sp, #128	; 0x80
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	9003      	str	r0, [sp, #12]
 800f546:	f000 f875 	bl	800f634 <rcutils_reset_error>
 800f54a:	9803      	ldr	r0, [sp, #12]
 800f54c:	b020      	add	sp, #128	; 0x80
 800f54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f552:	200b      	movs	r0, #11
 800f554:	b020      	add	sp, #128	; 0x80
 800f556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55a:	200b      	movs	r0, #11
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	0801ed88 	.word	0x0801ed88

0800f564 <__default_zero_allocate>:
 800f564:	f00a ba82 	b.w	8019a6c <calloc>

0800f568 <__default_reallocate>:
 800f568:	f00b bc9e 	b.w	801aea8 <realloc>

0800f56c <__default_deallocate>:
 800f56c:	f00a bbfa 	b.w	8019d64 <free>

0800f570 <__default_allocate>:
 800f570:	f00a bbf0 	b.w	8019d54 <malloc>

0800f574 <rcutils_get_zero_initialized_allocator>:
 800f574:	b470      	push	{r4, r5, r6}
 800f576:	4d05      	ldr	r5, [pc, #20]	; (800f58c <rcutils_get_zero_initialized_allocator+0x18>)
 800f578:	4606      	mov	r6, r0
 800f57a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f57c:	4634      	mov	r4, r6
 800f57e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	6023      	str	r3, [r4, #0]
 800f584:	4630      	mov	r0, r6
 800f586:	bc70      	pop	{r4, r5, r6}
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	0801edd8 	.word	0x0801edd8

0800f590 <rcutils_set_default_allocator>:
 800f590:	b1a0      	cbz	r0, 800f5bc <rcutils_set_default_allocator+0x2c>
 800f592:	6801      	ldr	r1, [r0, #0]
 800f594:	b199      	cbz	r1, 800f5be <rcutils_set_default_allocator+0x2e>
 800f596:	b430      	push	{r4, r5}
 800f598:	6844      	ldr	r4, [r0, #4]
 800f59a:	b194      	cbz	r4, 800f5c2 <rcutils_set_default_allocator+0x32>
 800f59c:	68c5      	ldr	r5, [r0, #12]
 800f59e:	b15d      	cbz	r5, 800f5b8 <rcutils_set_default_allocator+0x28>
 800f5a0:	6883      	ldr	r3, [r0, #8]
 800f5a2:	b18b      	cbz	r3, 800f5c8 <rcutils_set_default_allocator+0x38>
 800f5a4:	4a09      	ldr	r2, [pc, #36]	; (800f5cc <rcutils_set_default_allocator+0x3c>)
 800f5a6:	e9c2 1400 	strd	r1, r4, [r2]
 800f5aa:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800f5ae:	2000      	movs	r0, #0
 800f5b0:	6110      	str	r0, [r2, #16]
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	bc30      	pop	{r4, r5}
 800f5b6:	4770      	bx	lr
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	e7fb      	b.n	800f5b4 <rcutils_set_default_allocator+0x24>
 800f5bc:	4770      	bx	lr
 800f5be:	4608      	mov	r0, r1
 800f5c0:	4770      	bx	lr
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	bc30      	pop	{r4, r5}
 800f5c6:	4770      	bx	lr
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	e7f3      	b.n	800f5b4 <rcutils_set_default_allocator+0x24>
 800f5cc:	2000004c 	.word	0x2000004c

0800f5d0 <rcutils_get_default_allocator>:
 800f5d0:	b470      	push	{r4, r5, r6}
 800f5d2:	4d05      	ldr	r5, [pc, #20]	; (800f5e8 <rcutils_get_default_allocator+0x18>)
 800f5d4:	4606      	mov	r6, r0
 800f5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5d8:	4634      	mov	r4, r6
 800f5da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5dc:	682b      	ldr	r3, [r5, #0]
 800f5de:	6023      	str	r3, [r4, #0]
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	bc70      	pop	{r4, r5, r6}
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	2000004c 	.word	0x2000004c

0800f5ec <rcutils_allocator_is_valid>:
 800f5ec:	b158      	cbz	r0, 800f606 <rcutils_allocator_is_valid+0x1a>
 800f5ee:	6803      	ldr	r3, [r0, #0]
 800f5f0:	b143      	cbz	r3, 800f604 <rcutils_allocator_is_valid+0x18>
 800f5f2:	6843      	ldr	r3, [r0, #4]
 800f5f4:	b133      	cbz	r3, 800f604 <rcutils_allocator_is_valid+0x18>
 800f5f6:	68c3      	ldr	r3, [r0, #12]
 800f5f8:	b123      	cbz	r3, 800f604 <rcutils_allocator_is_valid+0x18>
 800f5fa:	6880      	ldr	r0, [r0, #8]
 800f5fc:	3800      	subs	r0, #0
 800f5fe:	bf18      	it	ne
 800f600:	2001      	movne	r0, #1
 800f602:	4770      	bx	lr
 800f604:	4618      	mov	r0, r3
 800f606:	4770      	bx	lr

0800f608 <rcutils_get_error_string>:
 800f608:	4b06      	ldr	r3, [pc, #24]	; (800f624 <rcutils_get_error_string+0x1c>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	b13b      	cbz	r3, 800f61e <rcutils_get_error_string+0x16>
 800f60e:	4b06      	ldr	r3, [pc, #24]	; (800f628 <rcutils_get_error_string+0x20>)
 800f610:	781a      	ldrb	r2, [r3, #0]
 800f612:	b90a      	cbnz	r2, 800f618 <rcutils_get_error_string+0x10>
 800f614:	2201      	movs	r2, #1
 800f616:	701a      	strb	r2, [r3, #0]
 800f618:	4b04      	ldr	r3, [pc, #16]	; (800f62c <rcutils_get_error_string+0x24>)
 800f61a:	7818      	ldrb	r0, [r3, #0]
 800f61c:	4770      	bx	lr
 800f61e:	4b04      	ldr	r3, [pc, #16]	; (800f630 <rcutils_get_error_string+0x28>)
 800f620:	7818      	ldrb	r0, [r3, #0]
 800f622:	4770      	bx	lr
 800f624:	20009d90 	.word	0x20009d90
 800f628:	20009d91 	.word	0x20009d91
 800f62c:	20009f30 	.word	0x20009f30
 800f630:	0801edec 	.word	0x0801edec

0800f634 <rcutils_reset_error>:
 800f634:	b4d0      	push	{r4, r6, r7}
 800f636:	4a07      	ldr	r2, [pc, #28]	; (800f654 <rcutils_reset_error+0x20>)
 800f638:	4807      	ldr	r0, [pc, #28]	; (800f658 <rcutils_reset_error+0x24>)
 800f63a:	4c08      	ldr	r4, [pc, #32]	; (800f65c <rcutils_reset_error+0x28>)
 800f63c:	4908      	ldr	r1, [pc, #32]	; (800f660 <rcutils_reset_error+0x2c>)
 800f63e:	2300      	movs	r3, #0
 800f640:	2600      	movs	r6, #0
 800f642:	2700      	movs	r7, #0
 800f644:	8013      	strh	r3, [r2, #0]
 800f646:	7003      	strb	r3, [r0, #0]
 800f648:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800f64c:	7023      	strb	r3, [r4, #0]
 800f64e:	700b      	strb	r3, [r1, #0]
 800f650:	bcd0      	pop	{r4, r6, r7}
 800f652:	4770      	bx	lr
 800f654:	20009f38 	.word	0x20009f38
 800f658:	20009f30 	.word	0x20009f30
 800f65c:	20009d91 	.word	0x20009d91
 800f660:	20009d90 	.word	0x20009d90

0800f664 <rcutils_get_zero_initialized_string_map>:
 800f664:	4b01      	ldr	r3, [pc, #4]	; (800f66c <rcutils_get_zero_initialized_string_map+0x8>)
 800f666:	2000      	movs	r0, #0
 800f668:	6018      	str	r0, [r3, #0]
 800f66a:	4770      	bx	lr
 800f66c:	20009d94 	.word	0x20009d94

0800f670 <rcutils_string_map_reserve>:
 800f670:	2800      	cmp	r0, #0
 800f672:	d061      	beq.n	800f738 <rcutils_string_map_reserve+0xc8>
 800f674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f678:	6805      	ldr	r5, [r0, #0]
 800f67a:	b083      	sub	sp, #12
 800f67c:	460c      	mov	r4, r1
 800f67e:	4606      	mov	r6, r0
 800f680:	b12d      	cbz	r5, 800f68e <rcutils_string_map_reserve+0x1e>
 800f682:	68eb      	ldr	r3, [r5, #12]
 800f684:	42a3      	cmp	r3, r4
 800f686:	d906      	bls.n	800f696 <rcutils_string_map_reserve+0x26>
 800f688:	461c      	mov	r4, r3
 800f68a:	2d00      	cmp	r5, #0
 800f68c:	d1f9      	bne.n	800f682 <rcutils_string_map_reserve+0x12>
 800f68e:	201f      	movs	r0, #31
 800f690:	b003      	add	sp, #12
 800f692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f696:	68ab      	ldr	r3, [r5, #8]
 800f698:	42a3      	cmp	r3, r4
 800f69a:	d049      	beq.n	800f730 <rcutils_string_map_reserve+0xc0>
 800f69c:	6a2f      	ldr	r7, [r5, #32]
 800f69e:	2c00      	cmp	r4, #0
 800f6a0:	d035      	beq.n	800f70e <rcutils_string_map_reserve+0x9e>
 800f6a2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f6a6:	d245      	bcs.n	800f734 <rcutils_string_map_reserve+0xc4>
 800f6a8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f6ac:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f6b0:	6828      	ldr	r0, [r5, #0]
 800f6b2:	4641      	mov	r1, r8
 800f6b4:	463a      	mov	r2, r7
 800f6b6:	47c8      	blx	r9
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	d03b      	beq.n	800f734 <rcutils_string_map_reserve+0xc4>
 800f6bc:	6833      	ldr	r3, [r6, #0]
 800f6be:	463a      	mov	r2, r7
 800f6c0:	6018      	str	r0, [r3, #0]
 800f6c2:	4641      	mov	r1, r8
 800f6c4:	6858      	ldr	r0, [r3, #4]
 800f6c6:	47c8      	blx	r9
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d033      	beq.n	800f734 <rcutils_string_map_reserve+0xc4>
 800f6cc:	6835      	ldr	r5, [r6, #0]
 800f6ce:	68ab      	ldr	r3, [r5, #8]
 800f6d0:	6068      	str	r0, [r5, #4]
 800f6d2:	42a3      	cmp	r3, r4
 800f6d4:	d227      	bcs.n	800f726 <rcutils_string_map_reserve+0xb6>
 800f6d6:	682a      	ldr	r2, [r5, #0]
 800f6d8:	eb00 0108 	add.w	r1, r0, r8
 800f6dc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800f6e0:	428f      	cmp	r7, r1
 800f6e2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f6e6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f6ea:	d203      	bcs.n	800f6f4 <rcutils_string_map_reserve+0x84>
 800f6ec:	eb02 0108 	add.w	r1, r2, r8
 800f6f0:	428e      	cmp	r6, r1
 800f6f2:	d323      	bcc.n	800f73c <rcutils_string_map_reserve+0xcc>
 800f6f4:	1ae3      	subs	r3, r4, r3
 800f6f6:	009a      	lsls	r2, r3, #2
 800f6f8:	4638      	mov	r0, r7
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	9201      	str	r2, [sp, #4]
 800f6fe:	f00a fb61 	bl	8019dc4 <memset>
 800f702:	9a01      	ldr	r2, [sp, #4]
 800f704:	4630      	mov	r0, r6
 800f706:	2100      	movs	r1, #0
 800f708:	f00a fb5c 	bl	8019dc4 <memset>
 800f70c:	e00b      	b.n	800f726 <rcutils_string_map_reserve+0xb6>
 800f70e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f712:	6828      	ldr	r0, [r5, #0]
 800f714:	4639      	mov	r1, r7
 800f716:	47c0      	blx	r8
 800f718:	6833      	ldr	r3, [r6, #0]
 800f71a:	4639      	mov	r1, r7
 800f71c:	6858      	ldr	r0, [r3, #4]
 800f71e:	601c      	str	r4, [r3, #0]
 800f720:	47c0      	blx	r8
 800f722:	6835      	ldr	r5, [r6, #0]
 800f724:	606c      	str	r4, [r5, #4]
 800f726:	2000      	movs	r0, #0
 800f728:	60ac      	str	r4, [r5, #8]
 800f72a:	b003      	add	sp, #12
 800f72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f730:	2000      	movs	r0, #0
 800f732:	e7ad      	b.n	800f690 <rcutils_string_map_reserve+0x20>
 800f734:	200a      	movs	r0, #10
 800f736:	e7ab      	b.n	800f690 <rcutils_string_map_reserve+0x20>
 800f738:	200b      	movs	r0, #11
 800f73a:	4770      	bx	lr
 800f73c:	1f13      	subs	r3, r2, #4
 800f73e:	f1ac 0c04 	sub.w	ip, ip, #4
 800f742:	4498      	add	r8, r3
 800f744:	4460      	add	r0, ip
 800f746:	4462      	add	r2, ip
 800f748:	2300      	movs	r3, #0
 800f74a:	f842 3f04 	str.w	r3, [r2, #4]!
 800f74e:	4542      	cmp	r2, r8
 800f750:	f840 3f04 	str.w	r3, [r0, #4]!
 800f754:	d1f9      	bne.n	800f74a <rcutils_string_map_reserve+0xda>
 800f756:	e7e6      	b.n	800f726 <rcutils_string_map_reserve+0xb6>

0800f758 <rcutils_string_map_init>:
 800f758:	b082      	sub	sp, #8
 800f75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75c:	460e      	mov	r6, r1
 800f75e:	a906      	add	r1, sp, #24
 800f760:	e881 000c 	stmia.w	r1, {r2, r3}
 800f764:	b380      	cbz	r0, 800f7c8 <rcutils_string_map_init+0x70>
 800f766:	6807      	ldr	r7, [r0, #0]
 800f768:	4604      	mov	r4, r0
 800f76a:	b12f      	cbz	r7, 800f778 <rcutils_string_map_init+0x20>
 800f76c:	251e      	movs	r5, #30
 800f76e:	4628      	mov	r0, r5
 800f770:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f774:	b002      	add	sp, #8
 800f776:	4770      	bx	lr
 800f778:	a806      	add	r0, sp, #24
 800f77a:	f7ff ff37 	bl	800f5ec <rcutils_allocator_is_valid>
 800f77e:	b318      	cbz	r0, 800f7c8 <rcutils_string_map_init+0x70>
 800f780:	9b06      	ldr	r3, [sp, #24]
 800f782:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f784:	2024      	movs	r0, #36	; 0x24
 800f786:	4798      	blx	r3
 800f788:	4605      	mov	r5, r0
 800f78a:	6020      	str	r0, [r4, #0]
 800f78c:	b310      	cbz	r0, 800f7d4 <rcutils_string_map_init+0x7c>
 800f78e:	f10d 0e18 	add.w	lr, sp, #24
 800f792:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f796:	f105 0c10 	add.w	ip, r5, #16
 800f79a:	e9c5 7700 	strd	r7, r7, [r5]
 800f79e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800f7a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7a6:	f8de 3000 	ldr.w	r3, [lr]
 800f7aa:	f8cc 3000 	str.w	r3, [ip]
 800f7ae:	4631      	mov	r1, r6
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f7ff ff5d 	bl	800f670 <rcutils_string_map_reserve>
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d0d8      	beq.n	800f76e <rcutils_string_map_init+0x16>
 800f7bc:	9b07      	ldr	r3, [sp, #28]
 800f7be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f7c0:	6820      	ldr	r0, [r4, #0]
 800f7c2:	4798      	blx	r3
 800f7c4:	6027      	str	r7, [r4, #0]
 800f7c6:	e7d2      	b.n	800f76e <rcutils_string_map_init+0x16>
 800f7c8:	250b      	movs	r5, #11
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7d0:	b002      	add	sp, #8
 800f7d2:	4770      	bx	lr
 800f7d4:	250a      	movs	r5, #10
 800f7d6:	e7ca      	b.n	800f76e <rcutils_string_map_init+0x16>

0800f7d8 <rcutils_string_map_fini>:
 800f7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7dc:	b082      	sub	sp, #8
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d039      	beq.n	800f856 <rcutils_string_map_fini+0x7e>
 800f7e2:	6804      	ldr	r4, [r0, #0]
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	2c00      	cmp	r4, #0
 800f7e8:	d031      	beq.n	800f84e <rcutils_string_map_fini+0x76>
 800f7ea:	68a3      	ldr	r3, [r4, #8]
 800f7ec:	b323      	cbz	r3, 800f838 <rcutils_string_map_fini+0x60>
 800f7ee:	2500      	movs	r5, #0
 800f7f0:	6822      	ldr	r2, [r4, #0]
 800f7f2:	46a8      	mov	r8, r5
 800f7f4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f7f8:	b1d8      	cbz	r0, 800f832 <rcutils_string_map_fini+0x5a>
 800f7fa:	6a21      	ldr	r1, [r4, #32]
 800f7fc:	6967      	ldr	r7, [r4, #20]
 800f7fe:	9101      	str	r1, [sp, #4]
 800f800:	47b8      	blx	r7
 800f802:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f806:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f80a:	9901      	ldr	r1, [sp, #4]
 800f80c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f810:	47b8      	blx	r7
 800f812:	68e3      	ldr	r3, [r4, #12]
 800f814:	6862      	ldr	r2, [r4, #4]
 800f816:	3b01      	subs	r3, #1
 800f818:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f81c:	60e3      	str	r3, [r4, #12]
 800f81e:	6834      	ldr	r4, [r6, #0]
 800f820:	68a3      	ldr	r3, [r4, #8]
 800f822:	3501      	adds	r5, #1
 800f824:	429d      	cmp	r5, r3
 800f826:	d207      	bcs.n	800f838 <rcutils_string_map_fini+0x60>
 800f828:	6822      	ldr	r2, [r4, #0]
 800f82a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f82e:	2800      	cmp	r0, #0
 800f830:	d1e3      	bne.n	800f7fa <rcutils_string_map_fini+0x22>
 800f832:	3501      	adds	r5, #1
 800f834:	429d      	cmp	r5, r3
 800f836:	d3dd      	bcc.n	800f7f4 <rcutils_string_map_fini+0x1c>
 800f838:	2100      	movs	r1, #0
 800f83a:	4630      	mov	r0, r6
 800f83c:	f7ff ff18 	bl	800f670 <rcutils_string_map_reserve>
 800f840:	4604      	mov	r4, r0
 800f842:	b920      	cbnz	r0, 800f84e <rcutils_string_map_fini+0x76>
 800f844:	6830      	ldr	r0, [r6, #0]
 800f846:	6943      	ldr	r3, [r0, #20]
 800f848:	6a01      	ldr	r1, [r0, #32]
 800f84a:	4798      	blx	r3
 800f84c:	6034      	str	r4, [r6, #0]
 800f84e:	4620      	mov	r0, r4
 800f850:	b002      	add	sp, #8
 800f852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f856:	240b      	movs	r4, #11
 800f858:	4620      	mov	r0, r4
 800f85a:	b002      	add	sp, #8
 800f85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f860 <rcutils_string_map_getn>:
 800f860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	b308      	cbz	r0, 800f8ac <rcutils_string_map_getn+0x4c>
 800f868:	6804      	ldr	r4, [r0, #0]
 800f86a:	b304      	cbz	r4, 800f8ae <rcutils_string_map_getn+0x4e>
 800f86c:	460d      	mov	r5, r1
 800f86e:	b1e9      	cbz	r1, 800f8ac <rcutils_string_map_getn+0x4c>
 800f870:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f874:	6827      	ldr	r7, [r4, #0]
 800f876:	f1b9 0f00 	cmp.w	r9, #0
 800f87a:	d017      	beq.n	800f8ac <rcutils_string_map_getn+0x4c>
 800f87c:	4690      	mov	r8, r2
 800f87e:	3f04      	subs	r7, #4
 800f880:	2600      	movs	r6, #0
 800f882:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f886:	9101      	str	r1, [sp, #4]
 800f888:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f88c:	4608      	mov	r0, r1
 800f88e:	3601      	adds	r6, #1
 800f890:	b151      	cbz	r1, 800f8a8 <rcutils_string_map_getn+0x48>
 800f892:	f7f0 fcaf 	bl	80001f4 <strlen>
 800f896:	4540      	cmp	r0, r8
 800f898:	4602      	mov	r2, r0
 800f89a:	9901      	ldr	r1, [sp, #4]
 800f89c:	bf38      	it	cc
 800f89e:	4642      	movcc	r2, r8
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f00b fc35 	bl	801b110 <strncmp>
 800f8a6:	b130      	cbz	r0, 800f8b6 <rcutils_string_map_getn+0x56>
 800f8a8:	45b1      	cmp	r9, r6
 800f8aa:	d1ea      	bne.n	800f882 <rcutils_string_map_getn+0x22>
 800f8ac:	2400      	movs	r4, #0
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	b002      	add	sp, #8
 800f8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8b6:	6863      	ldr	r3, [r4, #4]
 800f8b8:	f853 400a 	ldr.w	r4, [r3, sl]
 800f8bc:	4620      	mov	r0, r4
 800f8be:	b002      	add	sp, #8
 800f8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f8c4 <rcutils_system_time_now>:
 800f8c4:	b310      	cbz	r0, 800f90c <rcutils_system_time_now+0x48>
 800f8c6:	b570      	push	{r4, r5, r6, lr}
 800f8c8:	b084      	sub	sp, #16
 800f8ca:	4669      	mov	r1, sp
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	2001      	movs	r0, #1
 800f8d0:	f7f3 ffda 	bl	8003888 <clock_gettime>
 800f8d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	f171 0300 	sbcs.w	r3, r1, #0
 800f8de:	db12      	blt.n	800f906 <rcutils_system_time_now+0x42>
 800f8e0:	9d02      	ldr	r5, [sp, #8]
 800f8e2:	2d00      	cmp	r5, #0
 800f8e4:	db0c      	blt.n	800f900 <rcutils_system_time_now+0x3c>
 800f8e6:	4e0a      	ldr	r6, [pc, #40]	; (800f910 <rcutils_system_time_now+0x4c>)
 800f8e8:	fba0 2306 	umull	r2, r3, r0, r6
 800f8ec:	1952      	adds	r2, r2, r5
 800f8ee:	fb06 3301 	mla	r3, r6, r1, r3
 800f8f2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	e9c4 2300 	strd	r2, r3, [r4]
 800f8fc:	b004      	add	sp, #16
 800f8fe:	bd70      	pop	{r4, r5, r6, pc}
 800f900:	ea50 0301 	orrs.w	r3, r0, r1
 800f904:	d1ef      	bne.n	800f8e6 <rcutils_system_time_now+0x22>
 800f906:	2002      	movs	r0, #2
 800f908:	b004      	add	sp, #16
 800f90a:	bd70      	pop	{r4, r5, r6, pc}
 800f90c:	200b      	movs	r0, #11
 800f90e:	4770      	bx	lr
 800f910:	3b9aca00 	.word	0x3b9aca00

0800f914 <rcutils_steady_time_now>:
 800f914:	b310      	cbz	r0, 800f95c <rcutils_steady_time_now+0x48>
 800f916:	b570      	push	{r4, r5, r6, lr}
 800f918:	b084      	sub	sp, #16
 800f91a:	4669      	mov	r1, sp
 800f91c:	4604      	mov	r4, r0
 800f91e:	2000      	movs	r0, #0
 800f920:	f7f3 ffb2 	bl	8003888 <clock_gettime>
 800f924:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f928:	2800      	cmp	r0, #0
 800f92a:	f171 0300 	sbcs.w	r3, r1, #0
 800f92e:	db12      	blt.n	800f956 <rcutils_steady_time_now+0x42>
 800f930:	9d02      	ldr	r5, [sp, #8]
 800f932:	2d00      	cmp	r5, #0
 800f934:	db0c      	blt.n	800f950 <rcutils_steady_time_now+0x3c>
 800f936:	4e0a      	ldr	r6, [pc, #40]	; (800f960 <rcutils_steady_time_now+0x4c>)
 800f938:	fba0 2306 	umull	r2, r3, r0, r6
 800f93c:	1952      	adds	r2, r2, r5
 800f93e:	fb06 3301 	mla	r3, r6, r1, r3
 800f942:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f946:	2000      	movs	r0, #0
 800f948:	e9c4 2300 	strd	r2, r3, [r4]
 800f94c:	b004      	add	sp, #16
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
 800f950:	ea50 0301 	orrs.w	r3, r0, r1
 800f954:	d1ef      	bne.n	800f936 <rcutils_steady_time_now+0x22>
 800f956:	2002      	movs	r0, #2
 800f958:	b004      	add	sp, #16
 800f95a:	bd70      	pop	{r4, r5, r6, pc}
 800f95c:	200b      	movs	r0, #11
 800f95e:	4770      	bx	lr
 800f960:	3b9aca00 	.word	0x3b9aca00

0800f964 <rmw_get_zero_initialized_init_options>:
 800f964:	b510      	push	{r4, lr}
 800f966:	2238      	movs	r2, #56	; 0x38
 800f968:	4604      	mov	r4, r0
 800f96a:	2100      	movs	r1, #0
 800f96c:	f00a fa2a 	bl	8019dc4 <memset>
 800f970:	f104 0010 	add.w	r0, r4, #16
 800f974:	f000 f808 	bl	800f988 <rmw_get_default_security_options>
 800f978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f97c:	60e3      	str	r3, [r4, #12]
 800f97e:	4620      	mov	r0, r4
 800f980:	bd10      	pop	{r4, pc}
 800f982:	bf00      	nop

0800f984 <rmw_get_default_publisher_options>:
 800f984:	2000      	movs	r0, #0
 800f986:	4770      	bx	lr

0800f988 <rmw_get_default_security_options>:
 800f988:	2200      	movs	r2, #0
 800f98a:	7002      	strb	r2, [r0, #0]
 800f98c:	6042      	str	r2, [r0, #4]
 800f98e:	4770      	bx	lr

0800f990 <rmw_validate_full_topic_name>:
 800f990:	2800      	cmp	r0, #0
 800f992:	d062      	beq.n	800fa5a <rmw_validate_full_topic_name+0xca>
 800f994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f998:	460d      	mov	r5, r1
 800f99a:	2900      	cmp	r1, #0
 800f99c:	d05f      	beq.n	800fa5e <rmw_validate_full_topic_name+0xce>
 800f99e:	4616      	mov	r6, r2
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	f7f0 fc27 	bl	80001f4 <strlen>
 800f9a6:	b148      	cbz	r0, 800f9bc <rmw_validate_full_topic_name+0x2c>
 800f9a8:	7823      	ldrb	r3, [r4, #0]
 800f9aa:	2b2f      	cmp	r3, #47	; 0x2f
 800f9ac:	d00d      	beq.n	800f9ca <rmw_validate_full_topic_name+0x3a>
 800f9ae:	2302      	movs	r3, #2
 800f9b0:	602b      	str	r3, [r5, #0]
 800f9b2:	b13e      	cbz	r6, 800f9c4 <rmw_validate_full_topic_name+0x34>
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	6030      	str	r0, [r6, #0]
 800f9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9bc:	2301      	movs	r3, #1
 800f9be:	602b      	str	r3, [r5, #0]
 800f9c0:	2e00      	cmp	r6, #0
 800f9c2:	d1f7      	bne.n	800f9b4 <rmw_validate_full_topic_name+0x24>
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ca:	1e47      	subs	r7, r0, #1
 800f9cc:	5de3      	ldrb	r3, [r4, r7]
 800f9ce:	2b2f      	cmp	r3, #47	; 0x2f
 800f9d0:	d047      	beq.n	800fa62 <rmw_validate_full_topic_name+0xd2>
 800f9d2:	1e63      	subs	r3, r4, #1
 800f9d4:	eb03 0900 	add.w	r9, r3, r0
 800f9d8:	f1c4 0e01 	rsb	lr, r4, #1
 800f9dc:	eb0e 0803 	add.w	r8, lr, r3
 800f9e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f9e4:	f021 0220 	bic.w	r2, r1, #32
 800f9e8:	3a41      	subs	r2, #65	; 0x41
 800f9ea:	2a19      	cmp	r2, #25
 800f9ec:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800f9f0:	d90c      	bls.n	800fa0c <rmw_validate_full_topic_name+0x7c>
 800f9f2:	295f      	cmp	r1, #95	; 0x5f
 800f9f4:	d00a      	beq.n	800fa0c <rmw_validate_full_topic_name+0x7c>
 800f9f6:	f1bc 0f0a 	cmp.w	ip, #10
 800f9fa:	d907      	bls.n	800fa0c <rmw_validate_full_topic_name+0x7c>
 800f9fc:	2304      	movs	r3, #4
 800f9fe:	602b      	str	r3, [r5, #0]
 800fa00:	2e00      	cmp	r6, #0
 800fa02:	d0df      	beq.n	800f9c4 <rmw_validate_full_topic_name+0x34>
 800fa04:	f8c6 8000 	str.w	r8, [r6]
 800fa08:	2000      	movs	r0, #0
 800fa0a:	e7d5      	b.n	800f9b8 <rmw_validate_full_topic_name+0x28>
 800fa0c:	454b      	cmp	r3, r9
 800fa0e:	d1e5      	bne.n	800f9dc <rmw_validate_full_topic_name+0x4c>
 800fa10:	f8df e084 	ldr.w	lr, [pc, #132]	; 800fa98 <rmw_validate_full_topic_name+0x108>
 800fa14:	2300      	movs	r3, #0
 800fa16:	f107 0801 	add.w	r8, r7, #1
 800fa1a:	e005      	b.n	800fa28 <rmw_validate_full_topic_name+0x98>
 800fa1c:	4611      	mov	r1, r2
 800fa1e:	4288      	cmp	r0, r1
 800fa20:	4613      	mov	r3, r2
 800fa22:	f104 0401 	add.w	r4, r4, #1
 800fa26:	d925      	bls.n	800fa74 <rmw_validate_full_topic_name+0xe4>
 800fa28:	429f      	cmp	r7, r3
 800fa2a:	f103 0201 	add.w	r2, r3, #1
 800fa2e:	d01e      	beq.n	800fa6e <rmw_validate_full_topic_name+0xde>
 800fa30:	7821      	ldrb	r1, [r4, #0]
 800fa32:	292f      	cmp	r1, #47	; 0x2f
 800fa34:	d1f2      	bne.n	800fa1c <rmw_validate_full_topic_name+0x8c>
 800fa36:	f894 c001 	ldrb.w	ip, [r4, #1]
 800fa3a:	1c5a      	adds	r2, r3, #1
 800fa3c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800fa40:	4611      	mov	r1, r2
 800fa42:	d024      	beq.n	800fa8e <rmw_validate_full_topic_name+0xfe>
 800fa44:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800fa48:	075b      	lsls	r3, r3, #29
 800fa4a:	d5e8      	bpl.n	800fa1e <rmw_validate_full_topic_name+0x8e>
 800fa4c:	2306      	movs	r3, #6
 800fa4e:	602b      	str	r3, [r5, #0]
 800fa50:	2e00      	cmp	r6, #0
 800fa52:	d0b7      	beq.n	800f9c4 <rmw_validate_full_topic_name+0x34>
 800fa54:	6032      	str	r2, [r6, #0]
 800fa56:	2000      	movs	r0, #0
 800fa58:	e7ae      	b.n	800f9b8 <rmw_validate_full_topic_name+0x28>
 800fa5a:	200b      	movs	r0, #11
 800fa5c:	4770      	bx	lr
 800fa5e:	200b      	movs	r0, #11
 800fa60:	e7aa      	b.n	800f9b8 <rmw_validate_full_topic_name+0x28>
 800fa62:	2303      	movs	r3, #3
 800fa64:	602b      	str	r3, [r5, #0]
 800fa66:	2e00      	cmp	r6, #0
 800fa68:	d0ac      	beq.n	800f9c4 <rmw_validate_full_topic_name+0x34>
 800fa6a:	6037      	str	r7, [r6, #0]
 800fa6c:	e7aa      	b.n	800f9c4 <rmw_validate_full_topic_name+0x34>
 800fa6e:	4641      	mov	r1, r8
 800fa70:	1c7a      	adds	r2, r7, #1
 800fa72:	e7d4      	b.n	800fa1e <rmw_validate_full_topic_name+0x8e>
 800fa74:	28f7      	cmp	r0, #247	; 0xf7
 800fa76:	d802      	bhi.n	800fa7e <rmw_validate_full_topic_name+0xee>
 800fa78:	2000      	movs	r0, #0
 800fa7a:	6028      	str	r0, [r5, #0]
 800fa7c:	e79c      	b.n	800f9b8 <rmw_validate_full_topic_name+0x28>
 800fa7e:	2307      	movs	r3, #7
 800fa80:	602b      	str	r3, [r5, #0]
 800fa82:	2e00      	cmp	r6, #0
 800fa84:	d09e      	beq.n	800f9c4 <rmw_validate_full_topic_name+0x34>
 800fa86:	23f6      	movs	r3, #246	; 0xf6
 800fa88:	6033      	str	r3, [r6, #0]
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e794      	b.n	800f9b8 <rmw_validate_full_topic_name+0x28>
 800fa8e:	2305      	movs	r3, #5
 800fa90:	602b      	str	r3, [r5, #0]
 800fa92:	2e00      	cmp	r6, #0
 800fa94:	d1de      	bne.n	800fa54 <rmw_validate_full_topic_name+0xc4>
 800fa96:	e795      	b.n	800f9c4 <rmw_validate_full_topic_name+0x34>
 800fa98:	0801f5a1 	.word	0x0801f5a1

0800fa9c <rmw_uros_set_custom_transport>:
 800fa9c:	b470      	push	{r4, r5, r6}
 800fa9e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800faa2:	b162      	cbz	r2, 800fabe <rmw_uros_set_custom_transport+0x22>
 800faa4:	b15b      	cbz	r3, 800fabe <rmw_uros_set_custom_transport+0x22>
 800faa6:	b155      	cbz	r5, 800fabe <rmw_uros_set_custom_transport+0x22>
 800faa8:	b14e      	cbz	r6, 800fabe <rmw_uros_set_custom_transport+0x22>
 800faaa:	4c06      	ldr	r4, [pc, #24]	; (800fac4 <rmw_uros_set_custom_transport+0x28>)
 800faac:	7020      	strb	r0, [r4, #0]
 800faae:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fab2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fab6:	6166      	str	r6, [r4, #20]
 800fab8:	2000      	movs	r0, #0
 800faba:	bc70      	pop	{r4, r5, r6}
 800fabc:	4770      	bx	lr
 800fabe:	200b      	movs	r0, #11
 800fac0:	bc70      	pop	{r4, r5, r6}
 800fac2:	4770      	bx	lr
 800fac4:	20009f48 	.word	0x20009f48

0800fac8 <rmw_init_options_init>:
 800fac8:	b084      	sub	sp, #16
 800faca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800face:	ad09      	add	r5, sp, #36	; 0x24
 800fad0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800fad4:	b130      	cbz	r0, 800fae4 <rmw_init_options_init+0x1c>
 800fad6:	4604      	mov	r4, r0
 800fad8:	4628      	mov	r0, r5
 800fada:	f7ff fd87 	bl	800f5ec <rcutils_allocator_is_valid>
 800fade:	b108      	cbz	r0, 800fae4 <rmw_init_options_init+0x1c>
 800fae0:	68a3      	ldr	r3, [r4, #8]
 800fae2:	b123      	cbz	r3, 800faee <rmw_init_options_init+0x26>
 800fae4:	200b      	movs	r0, #11
 800fae6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faea:	b004      	add	sp, #16
 800faec:	4770      	bx	lr
 800faee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faf0:	4f1c      	ldr	r7, [pc, #112]	; (800fb64 <rmw_init_options_init+0x9c>)
 800faf2:	682e      	ldr	r6, [r5, #0]
 800faf4:	683d      	ldr	r5, [r7, #0]
 800faf6:	60a5      	str	r5, [r4, #8]
 800faf8:	f04f 0800 	mov.w	r8, #0
 800fafc:	f04f 0900 	mov.w	r9, #0
 800fb00:	f104 0520 	add.w	r5, r4, #32
 800fb04:	e9c4 8900 	strd	r8, r9, [r4]
 800fb08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb0a:	4b17      	ldr	r3, [pc, #92]	; (800fb68 <rmw_init_options_init+0xa0>)
 800fb0c:	4817      	ldr	r0, [pc, #92]	; (800fb6c <rmw_init_options_init+0xa4>)
 800fb0e:	602e      	str	r6, [r5, #0]
 800fb10:	4917      	ldr	r1, [pc, #92]	; (800fb70 <rmw_init_options_init+0xa8>)
 800fb12:	61e3      	str	r3, [r4, #28]
 800fb14:	2203      	movs	r2, #3
 800fb16:	f000 ff37 	bl	8010988 <rmw_uxrce_init_init_options_impl_memory>
 800fb1a:	4814      	ldr	r0, [pc, #80]	; (800fb6c <rmw_init_options_init+0xa4>)
 800fb1c:	f007 fc92 	bl	8017444 <get_memory>
 800fb20:	b1e8      	cbz	r0, 800fb5e <rmw_init_options_init+0x96>
 800fb22:	4a14      	ldr	r2, [pc, #80]	; (800fb74 <rmw_init_options_init+0xac>)
 800fb24:	68c3      	ldr	r3, [r0, #12]
 800fb26:	6851      	ldr	r1, [r2, #4]
 800fb28:	7810      	ldrb	r0, [r2, #0]
 800fb2a:	6363      	str	r3, [r4, #52]	; 0x34
 800fb2c:	7418      	strb	r0, [r3, #16]
 800fb2e:	6159      	str	r1, [r3, #20]
 800fb30:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800fb34:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800fb38:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800fb3c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800fb40:	f003 fdd4 	bl	80136ec <uxr_nanos>
 800fb44:	f00b f944 	bl	801add0 <srand>
 800fb48:	f00b f970 	bl	801ae2c <rand>
 800fb4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb4e:	6298      	str	r0, [r3, #40]	; 0x28
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d0f9      	beq.n	800fb48 <rmw_init_options_init+0x80>
 800fb54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb58:	2000      	movs	r0, #0
 800fb5a:	b004      	add	sp, #16
 800fb5c:	4770      	bx	lr
 800fb5e:	2001      	movs	r0, #1
 800fb60:	e7c1      	b.n	800fae6 <rmw_init_options_init+0x1e>
 800fb62:	bf00      	nop
 800fb64:	0801f584 	.word	0x0801f584
 800fb68:	0801edf0 	.word	0x0801edf0
 800fb6c:	2000d264 	.word	0x2000d264
 800fb70:	2000ceb8 	.word	0x2000ceb8
 800fb74:	20009f48 	.word	0x20009f48

0800fb78 <rmw_init_options_copy>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	b158      	cbz	r0, 800fb94 <rmw_init_options_copy+0x1c>
 800fb7c:	460e      	mov	r6, r1
 800fb7e:	b149      	cbz	r1, 800fb94 <rmw_init_options_copy+0x1c>
 800fb80:	4604      	mov	r4, r0
 800fb82:	6880      	ldr	r0, [r0, #8]
 800fb84:	b120      	cbz	r0, 800fb90 <rmw_init_options_copy+0x18>
 800fb86:	4b1b      	ldr	r3, [pc, #108]	; (800fbf4 <rmw_init_options_copy+0x7c>)
 800fb88:	6819      	ldr	r1, [r3, #0]
 800fb8a:	f7f0 fb29 	bl	80001e0 <strcmp>
 800fb8e:	bb60      	cbnz	r0, 800fbea <rmw_init_options_copy+0x72>
 800fb90:	68b3      	ldr	r3, [r6, #8]
 800fb92:	b113      	cbz	r3, 800fb9a <rmw_init_options_copy+0x22>
 800fb94:	230b      	movs	r3, #11
 800fb96:	4618      	mov	r0, r3
 800fb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb9a:	4623      	mov	r3, r4
 800fb9c:	4632      	mov	r2, r6
 800fb9e:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800fba2:	681d      	ldr	r5, [r3, #0]
 800fba4:	6858      	ldr	r0, [r3, #4]
 800fba6:	6899      	ldr	r1, [r3, #8]
 800fba8:	68df      	ldr	r7, [r3, #12]
 800fbaa:	60d7      	str	r7, [r2, #12]
 800fbac:	3310      	adds	r3, #16
 800fbae:	4563      	cmp	r3, ip
 800fbb0:	6015      	str	r5, [r2, #0]
 800fbb2:	6050      	str	r0, [r2, #4]
 800fbb4:	6091      	str	r1, [r2, #8]
 800fbb6:	f102 0210 	add.w	r2, r2, #16
 800fbba:	d1f2      	bne.n	800fba2 <rmw_init_options_copy+0x2a>
 800fbbc:	6819      	ldr	r1, [r3, #0]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	480d      	ldr	r0, [pc, #52]	; (800fbf8 <rmw_init_options_copy+0x80>)
 800fbc2:	6053      	str	r3, [r2, #4]
 800fbc4:	6011      	str	r1, [r2, #0]
 800fbc6:	f007 fc3d 	bl	8017444 <get_memory>
 800fbca:	b188      	cbz	r0, 800fbf0 <rmw_init_options_copy+0x78>
 800fbcc:	68c5      	ldr	r5, [r0, #12]
 800fbce:	6375      	str	r5, [r6, #52]	; 0x34
 800fbd0:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800fbd2:	3610      	adds	r6, #16
 800fbd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fbd6:	f105 0410 	add.w	r4, r5, #16
 800fbda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbdc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbea:	230c      	movs	r3, #12
 800fbec:	4618      	mov	r0, r3
 800fbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e7d0      	b.n	800fb96 <rmw_init_options_copy+0x1e>
 800fbf4:	0801f584 	.word	0x0801f584
 800fbf8:	2000d264 	.word	0x2000d264

0800fbfc <rmw_init_options_fini>:
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d036      	beq.n	800fc6e <rmw_init_options_fini+0x72>
 800fc00:	b530      	push	{r4, r5, lr}
 800fc02:	4604      	mov	r4, r0
 800fc04:	b08f      	sub	sp, #60	; 0x3c
 800fc06:	3020      	adds	r0, #32
 800fc08:	f7ff fcf0 	bl	800f5ec <rcutils_allocator_is_valid>
 800fc0c:	b328      	cbz	r0, 800fc5a <rmw_init_options_fini+0x5e>
 800fc0e:	68a0      	ldr	r0, [r4, #8]
 800fc10:	b120      	cbz	r0, 800fc1c <rmw_init_options_fini+0x20>
 800fc12:	4b18      	ldr	r3, [pc, #96]	; (800fc74 <rmw_init_options_fini+0x78>)
 800fc14:	6819      	ldr	r1, [r3, #0]
 800fc16:	f7f0 fae3 	bl	80001e0 <strcmp>
 800fc1a:	bb30      	cbnz	r0, 800fc6a <rmw_init_options_fini+0x6e>
 800fc1c:	4b16      	ldr	r3, [pc, #88]	; (800fc78 <rmw_init_options_fini+0x7c>)
 800fc1e:	6819      	ldr	r1, [r3, #0]
 800fc20:	b1f9      	cbz	r1, 800fc62 <rmw_init_options_fini+0x66>
 800fc22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fc24:	e001      	b.n	800fc2a <rmw_init_options_fini+0x2e>
 800fc26:	6889      	ldr	r1, [r1, #8]
 800fc28:	b1d9      	cbz	r1, 800fc62 <rmw_init_options_fini+0x66>
 800fc2a:	68cb      	ldr	r3, [r1, #12]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d1fa      	bne.n	800fc26 <rmw_init_options_fini+0x2a>
 800fc30:	4811      	ldr	r0, [pc, #68]	; (800fc78 <rmw_init_options_fini+0x7c>)
 800fc32:	f007 fc17 	bl	8017464 <put_memory>
 800fc36:	466d      	mov	r5, sp
 800fc38:	4668      	mov	r0, sp
 800fc3a:	f7ff fe93 	bl	800f964 <rmw_get_zero_initialized_init_options>
 800fc3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fc4e:	e884 0003 	stmia.w	r4, {r0, r1}
 800fc52:	2300      	movs	r3, #0
 800fc54:	4618      	mov	r0, r3
 800fc56:	b00f      	add	sp, #60	; 0x3c
 800fc58:	bd30      	pop	{r4, r5, pc}
 800fc5a:	230b      	movs	r3, #11
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	b00f      	add	sp, #60	; 0x3c
 800fc60:	bd30      	pop	{r4, r5, pc}
 800fc62:	2301      	movs	r3, #1
 800fc64:	4618      	mov	r0, r3
 800fc66:	b00f      	add	sp, #60	; 0x3c
 800fc68:	bd30      	pop	{r4, r5, pc}
 800fc6a:	230c      	movs	r3, #12
 800fc6c:	e7f2      	b.n	800fc54 <rmw_init_options_fini+0x58>
 800fc6e:	230b      	movs	r3, #11
 800fc70:	4618      	mov	r0, r3
 800fc72:	4770      	bx	lr
 800fc74:	0801f584 	.word	0x0801f584
 800fc78:	2000d264 	.word	0x2000d264

0800fc7c <rmw_init>:
 800fc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	2800      	cmp	r0, #0
 800fc84:	f000 80d6 	beq.w	800fe34 <rmw_init+0x1b8>
 800fc88:	460e      	mov	r6, r1
 800fc8a:	2900      	cmp	r1, #0
 800fc8c:	f000 80d2 	beq.w	800fe34 <rmw_init+0x1b8>
 800fc90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fc92:	4605      	mov	r5, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 80cd 	beq.w	800fe34 <rmw_init+0x1b8>
 800fc9a:	4b79      	ldr	r3, [pc, #484]	; (800fe80 <rmw_init+0x204>)
 800fc9c:	6880      	ldr	r0, [r0, #8]
 800fc9e:	f8d3 9000 	ldr.w	r9, [r3]
 800fca2:	b128      	cbz	r0, 800fcb0 <rmw_init+0x34>
 800fca4:	4649      	mov	r1, r9
 800fca6:	f7f0 fa9b 	bl	80001e0 <strcmp>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	f040 80cc 	bne.w	800fe48 <rmw_init+0x1cc>
 800fcb0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fcb4:	68eb      	ldr	r3, [r5, #12]
 800fcb6:	61f3      	str	r3, [r6, #28]
 800fcb8:	e9c6 0100 	strd	r0, r1, [r6]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	4971      	ldr	r1, [pc, #452]	; (800fe84 <rmw_init+0x208>)
 800fcc0:	4871      	ldr	r0, [pc, #452]	; (800fe88 <rmw_init+0x20c>)
 800fcc2:	f8c6 9008 	str.w	r9, [r6, #8]
 800fcc6:	f000 fe07 	bl	80108d8 <rmw_uxrce_init_session_memory>
 800fcca:	4870      	ldr	r0, [pc, #448]	; (800fe8c <rmw_init+0x210>)
 800fccc:	4970      	ldr	r1, [pc, #448]	; (800fe90 <rmw_init+0x214>)
 800fcce:	2204      	movs	r2, #4
 800fcd0:	f000 fe3c 	bl	801094c <rmw_uxrce_init_static_input_buffer_memory>
 800fcd4:	486c      	ldr	r0, [pc, #432]	; (800fe88 <rmw_init+0x20c>)
 800fcd6:	f007 fbb5 	bl	8017444 <get_memory>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	f000 80af 	beq.w	800fe3e <rmw_init+0x1c2>
 800fce0:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800fce2:	68c4      	ldr	r4, [r0, #12]
 800fce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fce6:	7c39      	ldrb	r1, [r7, #16]
 800fce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fcec:	9001      	str	r0, [sp, #4]
 800fcee:	6a38      	ldr	r0, [r7, #32]
 800fcf0:	9000      	str	r0, [sp, #0]
 800fcf2:	f104 0a10 	add.w	sl, r4, #16
 800fcf6:	4650      	mov	r0, sl
 800fcf8:	f001 fca0 	bl	801163c <uxr_set_custom_transport_callbacks>
 800fcfc:	f241 5294 	movw	r2, #5524	; 0x1594
 800fd00:	f241 5398 	movw	r3, #5528	; 0x1598
 800fd04:	f04f 0800 	mov.w	r8, #0
 800fd08:	f241 509c 	movw	r0, #5532	; 0x159c
 800fd0c:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800fd10:	f844 8002 	str.w	r8, [r4, r2]
 800fd14:	f844 8003 	str.w	r8, [r4, r3]
 800fd18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd1c:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800fd20:	f844 8000 	str.w	r8, [r4, r0]
 800fd24:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800fd28:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800fd2c:	4859      	ldr	r0, [pc, #356]	; (800fe94 <rmw_init+0x218>)
 800fd2e:	f8c1 8000 	str.w	r8, [r1]
 800fd32:	2201      	movs	r2, #1
 800fd34:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 800fd38:	4957      	ldr	r1, [pc, #348]	; (800fe98 <rmw_init+0x21c>)
 800fd3a:	64b4      	str	r4, [r6, #72]	; 0x48
 800fd3c:	f000 fdb2 	bl	80108a4 <rmw_uxrce_init_node_memory>
 800fd40:	4956      	ldr	r1, [pc, #344]	; (800fe9c <rmw_init+0x220>)
 800fd42:	4857      	ldr	r0, [pc, #348]	; (800fea0 <rmw_init+0x224>)
 800fd44:	2205      	movs	r2, #5
 800fd46:	f000 fd93 	bl	8010870 <rmw_uxrce_init_subscription_memory>
 800fd4a:	4956      	ldr	r1, [pc, #344]	; (800fea4 <rmw_init+0x228>)
 800fd4c:	4856      	ldr	r0, [pc, #344]	; (800fea8 <rmw_init+0x22c>)
 800fd4e:	220a      	movs	r2, #10
 800fd50:	f000 fd74 	bl	801083c <rmw_uxrce_init_publisher_memory>
 800fd54:	4955      	ldr	r1, [pc, #340]	; (800feac <rmw_init+0x230>)
 800fd56:	4856      	ldr	r0, [pc, #344]	; (800feb0 <rmw_init+0x234>)
 800fd58:	2201      	movs	r2, #1
 800fd5a:	f000 fd3b 	bl	80107d4 <rmw_uxrce_init_service_memory>
 800fd5e:	4955      	ldr	r1, [pc, #340]	; (800feb4 <rmw_init+0x238>)
 800fd60:	4855      	ldr	r0, [pc, #340]	; (800feb8 <rmw_init+0x23c>)
 800fd62:	2201      	movs	r2, #1
 800fd64:	f000 fd50 	bl	8010808 <rmw_uxrce_init_client_memory>
 800fd68:	4954      	ldr	r1, [pc, #336]	; (800febc <rmw_init+0x240>)
 800fd6a:	4855      	ldr	r0, [pc, #340]	; (800fec0 <rmw_init+0x244>)
 800fd6c:	220f      	movs	r2, #15
 800fd6e:	f000 fdd1 	bl	8010914 <rmw_uxrce_init_topic_memory>
 800fd72:	4954      	ldr	r1, [pc, #336]	; (800fec4 <rmw_init+0x248>)
 800fd74:	4854      	ldr	r0, [pc, #336]	; (800fec8 <rmw_init+0x24c>)
 800fd76:	2203      	movs	r2, #3
 800fd78:	f000 fe06 	bl	8010988 <rmw_uxrce_init_init_options_impl_memory>
 800fd7c:	4953      	ldr	r1, [pc, #332]	; (800fecc <rmw_init+0x250>)
 800fd7e:	4854      	ldr	r0, [pc, #336]	; (800fed0 <rmw_init+0x254>)
 800fd80:	2204      	movs	r2, #4
 800fd82:	f000 fe1b 	bl	80109bc <rmw_uxrce_init_wait_set_memory>
 800fd86:	4953      	ldr	r1, [pc, #332]	; (800fed4 <rmw_init+0x258>)
 800fd88:	4853      	ldr	r0, [pc, #332]	; (800fed8 <rmw_init+0x25c>)
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	f000 fe32 	bl	80109f4 <rmw_uxrce_init_guard_condition_memory>
 800fd90:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800fd92:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800fd94:	4642      	mov	r2, r8
 800fd96:	f000 fd05 	bl	80107a4 <rmw_uxrce_transport_init>
 800fd9a:	4607      	mov	r7, r0
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d158      	bne.n	800fe52 <rmw_init+0x1d6>
 800fda0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800fda2:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800fda6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800fdae:	f001 fe6b 	bl	8011a88 <uxr_init_session>
 800fdb2:	494a      	ldr	r1, [pc, #296]	; (800fedc <rmw_init+0x260>)
 800fdb4:	4622      	mov	r2, r4
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f001 fe88 	bl	8011acc <uxr_set_topic_callback>
 800fdbc:	4948      	ldr	r1, [pc, #288]	; (800fee0 <rmw_init+0x264>)
 800fdbe:	463a      	mov	r2, r7
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	f001 fe7f 	bl	8011ac4 <uxr_set_status_callback>
 800fdc6:	4947      	ldr	r1, [pc, #284]	; (800fee4 <rmw_init+0x268>)
 800fdc8:	463a      	mov	r2, r7
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f001 fe82 	bl	8011ad4 <uxr_set_request_callback>
 800fdd0:	4945      	ldr	r1, [pc, #276]	; (800fee8 <rmw_init+0x26c>)
 800fdd2:	463a      	mov	r2, r7
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	f001 fe81 	bl	8011adc <uxr_set_reply_callback>
 800fdda:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fdde:	2304      	movs	r3, #4
 800fde0:	0092      	lsls	r2, r2, #2
 800fde2:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800fde6:	4628      	mov	r0, r5
 800fde8:	f001 feb8 	bl	8011b5c <uxr_create_input_reliable_stream>
 800fdec:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fdf0:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800fdf4:	0092      	lsls	r2, r2, #2
 800fdf6:	2304      	movs	r3, #4
 800fdf8:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	f001 fe83 	bl	8011b08 <uxr_create_output_reliable_stream>
 800fe02:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800fe06:	4628      	mov	r0, r5
 800fe08:	f001 fea2 	bl	8011b50 <uxr_create_input_best_effort_stream>
 800fe0c:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800fe10:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800fe14:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fe18:	4628      	mov	r0, r5
 800fe1a:	3114      	adds	r1, #20
 800fe1c:	f001 fe62 	bl	8011ae4 <uxr_create_output_best_effort_stream>
 800fe20:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800fe24:	4628      	mov	r0, r5
 800fe26:	f002 faf3 	bl	8012410 <uxr_create_session>
 800fe2a:	b1f8      	cbz	r0, 800fe6c <rmw_init+0x1f0>
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	b002      	add	sp, #8
 800fe30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe34:	270b      	movs	r7, #11
 800fe36:	4638      	mov	r0, r7
 800fe38:	b002      	add	sp, #8
 800fe3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe3e:	2701      	movs	r7, #1
 800fe40:	4638      	mov	r0, r7
 800fe42:	b002      	add	sp, #8
 800fe44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe48:	270c      	movs	r7, #12
 800fe4a:	4638      	mov	r0, r7
 800fe4c:	b002      	add	sp, #8
 800fe4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe52:	4650      	mov	r0, sl
 800fe54:	f001 fc32 	bl	80116bc <uxr_close_custom_transport>
 800fe58:	480b      	ldr	r0, [pc, #44]	; (800fe88 <rmw_init+0x20c>)
 800fe5a:	4621      	mov	r1, r4
 800fe5c:	f007 fb02 	bl	8017464 <put_memory>
 800fe60:	4638      	mov	r0, r7
 800fe62:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 800fe66:	b002      	add	sp, #8
 800fe68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe6c:	4650      	mov	r0, sl
 800fe6e:	f001 fc25 	bl	80116bc <uxr_close_custom_transport>
 800fe72:	4805      	ldr	r0, [pc, #20]	; (800fe88 <rmw_init+0x20c>)
 800fe74:	4621      	mov	r1, r4
 800fe76:	f007 faf5 	bl	8017464 <put_memory>
 800fe7a:	64b7      	str	r7, [r6, #72]	; 0x48
 800fe7c:	2701      	movs	r7, #1
 800fe7e:	e7d5      	b.n	800fe2c <rmw_init+0x1b0>
 800fe80:	0801f584 	.word	0x0801f584
 800fe84:	2000d340 	.word	0x2000d340
 800fe88:	2000d110 	.word	0x2000d110
 800fe8c:	20009f68 	.word	0x20009f68
 800fe90:	2000ad48 	.word	0x2000ad48
 800fe94:	2000cf3c 	.word	0x2000cf3c
 800fe98:	2000d120 	.word	0x2000d120
 800fe9c:	2000a870 	.word	0x2000a870
 800fea0:	2000d1d4 	.word	0x2000d1d4
 800fea4:	20009f88 	.word	0x20009f88
 800fea8:	20009f78 	.word	0x20009f78
 800feac:	2000d278 	.word	0x2000d278
 800feb0:	2000d1c4 	.word	0x2000d1c4
 800feb4:	2000ac80 	.word	0x2000ac80
 800feb8:	2000a7f8 	.word	0x2000a7f8
 800febc:	2000cf4c 	.word	0x2000cf4c
 800fec0:	2000d100 	.word	0x2000d100
 800fec4:	2000ceb8 	.word	0x2000ceb8
 800fec8:	2000d264 	.word	0x2000d264
 800fecc:	2000ce48 	.word	0x2000ce48
 800fed0:	2000e8e8 	.word	0x2000e8e8
 800fed4:	2000d1e4 	.word	0x2000d1e4
 800fed8:	2000d0f0 	.word	0x2000d0f0
 800fedc:	08017285 	.word	0x08017285
 800fee0:	0801727d 	.word	0x0801727d
 800fee4:	08017319 	.word	0x08017319
 800fee8:	080173b1 	.word	0x080173b1

0800feec <rmw_context_fini>:
 800feec:	4b17      	ldr	r3, [pc, #92]	; (800ff4c <rmw_context_fini+0x60>)
 800feee:	b570      	push	{r4, r5, r6, lr}
 800fef0:	681c      	ldr	r4, [r3, #0]
 800fef2:	4605      	mov	r5, r0
 800fef4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800fef6:	b33c      	cbz	r4, 800ff48 <rmw_context_fini+0x5c>
 800fef8:	2600      	movs	r6, #0
 800fefa:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800fefe:	691a      	ldr	r2, [r3, #16]
 800ff00:	4282      	cmp	r2, r0
 800ff02:	d018      	beq.n	800ff36 <rmw_context_fini+0x4a>
 800ff04:	2c00      	cmp	r4, #0
 800ff06:	d1f8      	bne.n	800fefa <rmw_context_fini+0xe>
 800ff08:	b188      	cbz	r0, 800ff2e <rmw_context_fini+0x42>
 800ff0a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800ff0e:	789b      	ldrb	r3, [r3, #2]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	bf14      	ite	ne
 800ff14:	210a      	movne	r1, #10
 800ff16:	2100      	moveq	r1, #0
 800ff18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff1c:	f002 fc3a 	bl	8012794 <uxr_delete_session_retries>
 800ff20:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800ff22:	f000 fd81 	bl	8010a28 <rmw_uxrce_fini_session_memory>
 800ff26:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800ff28:	3010      	adds	r0, #16
 800ff2a:	f001 fbc7 	bl	80116bc <uxr_close_custom_transport>
 800ff2e:	2300      	movs	r3, #0
 800ff30:	4630      	mov	r0, r6
 800ff32:	64ab      	str	r3, [r5, #72]	; 0x48
 800ff34:	bd70      	pop	{r4, r5, r6, pc}
 800ff36:	f103 0018 	add.w	r0, r3, #24
 800ff3a:	f000 f89b 	bl	8010074 <rmw_destroy_node>
 800ff3e:	4606      	mov	r6, r0
 800ff40:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800ff42:	2c00      	cmp	r4, #0
 800ff44:	d1d9      	bne.n	800fefa <rmw_context_fini+0xe>
 800ff46:	e7df      	b.n	800ff08 <rmw_context_fini+0x1c>
 800ff48:	4626      	mov	r6, r4
 800ff4a:	e7dd      	b.n	800ff08 <rmw_context_fini+0x1c>
 800ff4c:	2000cf3c 	.word	0x2000cf3c

0800ff50 <create_node>:
 800ff50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff54:	b083      	sub	sp, #12
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d05f      	beq.n	801001a <create_node+0xca>
 800ff5a:	4606      	mov	r6, r0
 800ff5c:	4835      	ldr	r0, [pc, #212]	; (8010034 <create_node+0xe4>)
 800ff5e:	460f      	mov	r7, r1
 800ff60:	4690      	mov	r8, r2
 800ff62:	461d      	mov	r5, r3
 800ff64:	f007 fa6e 	bl	8017444 <get_memory>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d056      	beq.n	801001a <create_node+0xca>
 800ff6c:	68c4      	ldr	r4, [r0, #12]
 800ff6e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800ff70:	6123      	str	r3, [r4, #16]
 800ff72:	f007 facf 	bl	8017514 <rmw_get_implementation_identifier>
 800ff76:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800ff7a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ff7e:	f8c4 9020 	str.w	r9, [r4, #32]
 800ff82:	4630      	mov	r0, r6
 800ff84:	f7f0 f936 	bl	80001f4 <strlen>
 800ff88:	1c42      	adds	r2, r0, #1
 800ff8a:	2a3c      	cmp	r2, #60	; 0x3c
 800ff8c:	f104 0518 	add.w	r5, r4, #24
 800ff90:	d840      	bhi.n	8010014 <create_node+0xc4>
 800ff92:	4648      	mov	r0, r9
 800ff94:	4631      	mov	r1, r6
 800ff96:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800ff9a:	f009 feeb 	bl	8019d74 <memcpy>
 800ff9e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	f7f0 f926 	bl	80001f4 <strlen>
 800ffa8:	1c42      	adds	r2, r0, #1
 800ffaa:	2a3c      	cmp	r2, #60	; 0x3c
 800ffac:	d832      	bhi.n	8010014 <create_node+0xc4>
 800ffae:	4639      	mov	r1, r7
 800ffb0:	4648      	mov	r0, r9
 800ffb2:	f009 fedf 	bl	8019d74 <memcpy>
 800ffb6:	f241 5394 	movw	r3, #5524	; 0x1594
 800ffba:	6922      	ldr	r2, [r4, #16]
 800ffbc:	5ad0      	ldrh	r0, [r2, r3]
 800ffbe:	2101      	movs	r1, #1
 800ffc0:	eb00 0c01 	add.w	ip, r0, r1
 800ffc4:	f822 c003 	strh.w	ip, [r2, r3]
 800ffc8:	f001 fb7c 	bl	80116c4 <uxr_object_id>
 800ffcc:	6160      	str	r0, [r4, #20]
 800ffce:	783b      	ldrb	r3, [r7, #0]
 800ffd0:	2b2f      	cmp	r3, #47	; 0x2f
 800ffd2:	d127      	bne.n	8010024 <create_node+0xd4>
 800ffd4:	787b      	ldrb	r3, [r7, #1]
 800ffd6:	bb2b      	cbnz	r3, 8010024 <create_node+0xd4>
 800ffd8:	4a17      	ldr	r2, [pc, #92]	; (8010038 <create_node+0xe8>)
 800ffda:	4818      	ldr	r0, [pc, #96]	; (801003c <create_node+0xec>)
 800ffdc:	4633      	mov	r3, r6
 800ffde:	213c      	movs	r1, #60	; 0x3c
 800ffe0:	f00a ffea 	bl	801afb8 <sniprintf>
 800ffe4:	6920      	ldr	r0, [r4, #16]
 800ffe6:	4b15      	ldr	r3, [pc, #84]	; (801003c <create_node+0xec>)
 800ffe8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	2306      	movs	r3, #6
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	6811      	ldr	r1, [r2, #0]
 800fff4:	6962      	ldr	r2, [r4, #20]
 800fff6:	fa1f f388 	uxth.w	r3, r8
 800fffa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fffe:	f001 f8eb 	bl	80111d8 <uxr_buffer_create_participant_bin>
 8010002:	4602      	mov	r2, r0
 8010004:	6920      	ldr	r0, [r4, #16]
 8010006:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801000a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801000e:	f000 fe7b 	bl	8010d08 <run_xrce_session>
 8010012:	b918      	cbnz	r0, 801001c <create_node+0xcc>
 8010014:	4628      	mov	r0, r5
 8010016:	f000 fd0d 	bl	8010a34 <rmw_uxrce_fini_node_memory>
 801001a:	2500      	movs	r5, #0
 801001c:	4628      	mov	r0, r5
 801001e:	b003      	add	sp, #12
 8010020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010024:	4a06      	ldr	r2, [pc, #24]	; (8010040 <create_node+0xf0>)
 8010026:	9600      	str	r6, [sp, #0]
 8010028:	463b      	mov	r3, r7
 801002a:	213c      	movs	r1, #60	; 0x3c
 801002c:	4803      	ldr	r0, [pc, #12]	; (801003c <create_node+0xec>)
 801002e:	f00a ffc3 	bl	801afb8 <sniprintf>
 8010032:	e7d7      	b.n	800ffe4 <create_node+0x94>
 8010034:	2000cf3c 	.word	0x2000cf3c
 8010038:	0801ee30 	.word	0x0801ee30
 801003c:	20009d98 	.word	0x20009d98
 8010040:	0801edf4 	.word	0x0801edf4

08010044 <rmw_create_node>:
 8010044:	b199      	cbz	r1, 801006e <rmw_create_node+0x2a>
 8010046:	b430      	push	{r4, r5}
 8010048:	4615      	mov	r5, r2
 801004a:	461a      	mov	r2, r3
 801004c:	780b      	ldrb	r3, [r1, #0]
 801004e:	460c      	mov	r4, r1
 8010050:	b153      	cbz	r3, 8010068 <rmw_create_node+0x24>
 8010052:	b14d      	cbz	r5, 8010068 <rmw_create_node+0x24>
 8010054:	782b      	ldrb	r3, [r5, #0]
 8010056:	b13b      	cbz	r3, 8010068 <rmw_create_node+0x24>
 8010058:	b902      	cbnz	r2, 801005c <rmw_create_node+0x18>
 801005a:	69c2      	ldr	r2, [r0, #28]
 801005c:	4603      	mov	r3, r0
 801005e:	4629      	mov	r1, r5
 8010060:	4620      	mov	r0, r4
 8010062:	bc30      	pop	{r4, r5}
 8010064:	f7ff bf74 	b.w	800ff50 <create_node>
 8010068:	2000      	movs	r0, #0
 801006a:	bc30      	pop	{r4, r5}
 801006c:	4770      	bx	lr
 801006e:	2000      	movs	r0, #0
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop

08010074 <rmw_destroy_node>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	2800      	cmp	r0, #0
 8010078:	d066      	beq.n	8010148 <rmw_destroy_node+0xd4>
 801007a:	4607      	mov	r7, r0
 801007c:	6800      	ldr	r0, [r0, #0]
 801007e:	b128      	cbz	r0, 801008c <rmw_destroy_node+0x18>
 8010080:	4b34      	ldr	r3, [pc, #208]	; (8010154 <rmw_destroy_node+0xe0>)
 8010082:	6819      	ldr	r1, [r3, #0]
 8010084:	f7f0 f8ac 	bl	80001e0 <strcmp>
 8010088:	2800      	cmp	r0, #0
 801008a:	d15d      	bne.n	8010148 <rmw_destroy_node+0xd4>
 801008c:	687c      	ldr	r4, [r7, #4]
 801008e:	2c00      	cmp	r4, #0
 8010090:	d05a      	beq.n	8010148 <rmw_destroy_node+0xd4>
 8010092:	4b31      	ldr	r3, [pc, #196]	; (8010158 <rmw_destroy_node+0xe4>)
 8010094:	681d      	ldr	r5, [r3, #0]
 8010096:	2d00      	cmp	r5, #0
 8010098:	d059      	beq.n	801014e <rmw_destroy_node+0xda>
 801009a:	2600      	movs	r6, #0
 801009c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80100a0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80100a4:	429c      	cmp	r4, r3
 80100a6:	d047      	beq.n	8010138 <rmw_destroy_node+0xc4>
 80100a8:	2d00      	cmp	r5, #0
 80100aa:	d1f7      	bne.n	801009c <rmw_destroy_node+0x28>
 80100ac:	4b2b      	ldr	r3, [pc, #172]	; (801015c <rmw_destroy_node+0xe8>)
 80100ae:	681d      	ldr	r5, [r3, #0]
 80100b0:	b15d      	cbz	r5, 80100ca <rmw_destroy_node+0x56>
 80100b2:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80100b6:	6a0b      	ldr	r3, [r1, #32]
 80100b8:	429c      	cmp	r4, r3
 80100ba:	d1f9      	bne.n	80100b0 <rmw_destroy_node+0x3c>
 80100bc:	317c      	adds	r1, #124	; 0x7c
 80100be:	4638      	mov	r0, r7
 80100c0:	f000 fb12 	bl	80106e8 <rmw_destroy_subscription>
 80100c4:	4606      	mov	r6, r0
 80100c6:	2d00      	cmp	r5, #0
 80100c8:	d1f3      	bne.n	80100b2 <rmw_destroy_node+0x3e>
 80100ca:	4b25      	ldr	r3, [pc, #148]	; (8010160 <rmw_destroy_node+0xec>)
 80100cc:	681d      	ldr	r5, [r3, #0]
 80100ce:	b15d      	cbz	r5, 80100e8 <rmw_destroy_node+0x74>
 80100d0:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80100d4:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80100d6:	429c      	cmp	r4, r3
 80100d8:	d1f9      	bne.n	80100ce <rmw_destroy_node+0x5a>
 80100da:	317c      	adds	r1, #124	; 0x7c
 80100dc:	4638      	mov	r0, r7
 80100de:	f000 f9dd 	bl	801049c <rmw_destroy_service>
 80100e2:	4606      	mov	r6, r0
 80100e4:	2d00      	cmp	r5, #0
 80100e6:	d1f3      	bne.n	80100d0 <rmw_destroy_node+0x5c>
 80100e8:	4b1e      	ldr	r3, [pc, #120]	; (8010164 <rmw_destroy_node+0xf0>)
 80100ea:	681d      	ldr	r5, [r3, #0]
 80100ec:	b15d      	cbz	r5, 8010106 <rmw_destroy_node+0x92>
 80100ee:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80100f2:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80100f4:	429c      	cmp	r4, r3
 80100f6:	d1f9      	bne.n	80100ec <rmw_destroy_node+0x78>
 80100f8:	317c      	adds	r1, #124	; 0x7c
 80100fa:	4638      	mov	r0, r7
 80100fc:	f007 f9c6 	bl	801748c <rmw_destroy_client>
 8010100:	4606      	mov	r6, r0
 8010102:	2d00      	cmp	r5, #0
 8010104:	d1f3      	bne.n	80100ee <rmw_destroy_node+0x7a>
 8010106:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 801010a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801010e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010112:	6819      	ldr	r1, [r3, #0]
 8010114:	f001 f814 	bl	8011140 <uxr_buffer_delete_entity>
 8010118:	4602      	mov	r2, r0
 801011a:	6920      	ldr	r0, [r4, #16]
 801011c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010120:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010124:	f000 fdf0 	bl	8010d08 <run_xrce_session>
 8010128:	2800      	cmp	r0, #0
 801012a:	bf08      	it	eq
 801012c:	2602      	moveq	r6, #2
 801012e:	4638      	mov	r0, r7
 8010130:	f000 fc80 	bl	8010a34 <rmw_uxrce_fini_node_memory>
 8010134:	4630      	mov	r0, r6
 8010136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010138:	3184      	adds	r1, #132	; 0x84
 801013a:	4638      	mov	r0, r7
 801013c:	f000 f95e 	bl	80103fc <rmw_destroy_publisher>
 8010140:	4606      	mov	r6, r0
 8010142:	2d00      	cmp	r5, #0
 8010144:	d1aa      	bne.n	801009c <rmw_destroy_node+0x28>
 8010146:	e7b1      	b.n	80100ac <rmw_destroy_node+0x38>
 8010148:	2601      	movs	r6, #1
 801014a:	4630      	mov	r0, r6
 801014c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801014e:	462e      	mov	r6, r5
 8010150:	e7ac      	b.n	80100ac <rmw_destroy_node+0x38>
 8010152:	bf00      	nop
 8010154:	0801f584 	.word	0x0801f584
 8010158:	20009f78 	.word	0x20009f78
 801015c:	2000d1d4 	.word	0x2000d1d4
 8010160:	2000d1c4 	.word	0x2000d1c4
 8010164:	2000a7f8 	.word	0x2000a7f8

08010168 <rmw_node_get_graph_guard_condition>:
 8010168:	6843      	ldr	r3, [r0, #4]
 801016a:	6918      	ldr	r0, [r3, #16]
 801016c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop

08010174 <flush_session>:
 8010174:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8010176:	f002 b8d3 	b.w	8012320 <uxr_run_session_until_confirm_delivery>
 801017a:	bf00      	nop

0801017c <rmw_publish>:
 801017c:	2800      	cmp	r0, #0
 801017e:	d053      	beq.n	8010228 <rmw_publish+0xac>
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	460d      	mov	r5, r1
 8010184:	b08e      	sub	sp, #56	; 0x38
 8010186:	2900      	cmp	r1, #0
 8010188:	d04b      	beq.n	8010222 <rmw_publish+0xa6>
 801018a:	4604      	mov	r4, r0
 801018c:	6800      	ldr	r0, [r0, #0]
 801018e:	f000 fe3b 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 8010192:	2800      	cmp	r0, #0
 8010194:	d045      	beq.n	8010222 <rmw_publish+0xa6>
 8010196:	6866      	ldr	r6, [r4, #4]
 8010198:	2e00      	cmp	r6, #0
 801019a:	d042      	beq.n	8010222 <rmw_publish+0xa6>
 801019c:	69b4      	ldr	r4, [r6, #24]
 801019e:	4628      	mov	r0, r5
 80101a0:	6923      	ldr	r3, [r4, #16]
 80101a2:	4798      	blx	r3
 80101a4:	69f3      	ldr	r3, [r6, #28]
 80101a6:	9005      	str	r0, [sp, #20]
 80101a8:	b113      	cbz	r3, 80101b0 <rmw_publish+0x34>
 80101aa:	a805      	add	r0, sp, #20
 80101ac:	4798      	blx	r3
 80101ae:	9805      	ldr	r0, [sp, #20]
 80101b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80101b4:	691b      	ldr	r3, [r3, #16]
 80101b6:	9000      	str	r0, [sp, #0]
 80101b8:	6972      	ldr	r2, [r6, #20]
 80101ba:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80101bc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80101c0:	ab06      	add	r3, sp, #24
 80101c2:	f003 fb33 	bl	801382c <uxr_prepare_output_stream>
 80101c6:	b1d8      	cbz	r0, 8010200 <rmw_publish+0x84>
 80101c8:	68a3      	ldr	r3, [r4, #8]
 80101ca:	4628      	mov	r0, r5
 80101cc:	a906      	add	r1, sp, #24
 80101ce:	4798      	blx	r3
 80101d0:	6a33      	ldr	r3, [r6, #32]
 80101d2:	4604      	mov	r4, r0
 80101d4:	b10b      	cbz	r3, 80101da <rmw_publish+0x5e>
 80101d6:	a806      	add	r0, sp, #24
 80101d8:	4798      	blx	r3
 80101da:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80101de:	2b01      	cmp	r3, #1
 80101e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80101e4:	d022      	beq.n	801022c <rmw_publish+0xb0>
 80101e6:	6918      	ldr	r0, [r3, #16]
 80101e8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80101ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80101ee:	f002 f897 	bl	8012320 <uxr_run_session_until_confirm_delivery>
 80101f2:	4020      	ands	r0, r4
 80101f4:	b2c4      	uxtb	r4, r0
 80101f6:	f084 0001 	eor.w	r0, r4, #1
 80101fa:	b2c0      	uxtb	r0, r0
 80101fc:	b00e      	add	sp, #56	; 0x38
 80101fe:	bd70      	pop	{r4, r5, r6, pc}
 8010200:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010204:	4a0c      	ldr	r2, [pc, #48]	; (8010238 <rmw_publish+0xbc>)
 8010206:	6918      	ldr	r0, [r3, #16]
 8010208:	9b05      	ldr	r3, [sp, #20]
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8010210:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010214:	6972      	ldr	r2, [r6, #20]
 8010216:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010218:	ab06      	add	r3, sp, #24
 801021a:	f003 fb37 	bl	801388c <uxr_prepare_output_stream_fragmented>
 801021e:	2800      	cmp	r0, #0
 8010220:	d1d2      	bne.n	80101c8 <rmw_publish+0x4c>
 8010222:	2001      	movs	r0, #1
 8010224:	b00e      	add	sp, #56	; 0x38
 8010226:	bd70      	pop	{r4, r5, r6, pc}
 8010228:	2001      	movs	r0, #1
 801022a:	4770      	bx	lr
 801022c:	6918      	ldr	r0, [r3, #16]
 801022e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010232:	f001 fcb9 	bl	8011ba8 <uxr_flash_output_streams>
 8010236:	e7de      	b.n	80101f6 <rmw_publish+0x7a>
 8010238:	08010175 	.word	0x08010175

0801023c <rmw_create_publisher>:
 801023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010240:	b087      	sub	sp, #28
 8010242:	2800      	cmp	r0, #0
 8010244:	f000 80cc 	beq.w	80103e0 <rmw_create_publisher+0x1a4>
 8010248:	460e      	mov	r6, r1
 801024a:	2900      	cmp	r1, #0
 801024c:	f000 80c8 	beq.w	80103e0 <rmw_create_publisher+0x1a4>
 8010250:	4604      	mov	r4, r0
 8010252:	6800      	ldr	r0, [r0, #0]
 8010254:	4615      	mov	r5, r2
 8010256:	4698      	mov	r8, r3
 8010258:	f000 fdd6 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 801025c:	2800      	cmp	r0, #0
 801025e:	f000 80bf 	beq.w	80103e0 <rmw_create_publisher+0x1a4>
 8010262:	2d00      	cmp	r5, #0
 8010264:	f000 80bc 	beq.w	80103e0 <rmw_create_publisher+0x1a4>
 8010268:	782b      	ldrb	r3, [r5, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	f000 80b8 	beq.w	80103e0 <rmw_create_publisher+0x1a4>
 8010270:	f1b8 0f00 	cmp.w	r8, #0
 8010274:	f000 80b4 	beq.w	80103e0 <rmw_create_publisher+0x1a4>
 8010278:	485c      	ldr	r0, [pc, #368]	; (80103ec <rmw_create_publisher+0x1b0>)
 801027a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801027e:	f007 f8e1 	bl	8017444 <get_memory>
 8010282:	2800      	cmp	r0, #0
 8010284:	f000 80ac 	beq.w	80103e0 <rmw_create_publisher+0x1a4>
 8010288:	68c4      	ldr	r4, [r0, #12]
 801028a:	2300      	movs	r3, #0
 801028c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010290:	f007 f940 	bl	8017514 <rmw_get_implementation_identifier>
 8010294:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8010298:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 801029c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80102a0:	4628      	mov	r0, r5
 80102a2:	f7ef ffa7 	bl	80001f4 <strlen>
 80102a6:	3001      	adds	r0, #1
 80102a8:	283c      	cmp	r0, #60	; 0x3c
 80102aa:	f104 0784 	add.w	r7, r4, #132	; 0x84
 80102ae:	f200 8094 	bhi.w	80103da <rmw_create_publisher+0x19e>
 80102b2:	4a4f      	ldr	r2, [pc, #316]	; (80103f0 <rmw_create_publisher+0x1b4>)
 80102b4:	462b      	mov	r3, r5
 80102b6:	213c      	movs	r1, #60	; 0x3c
 80102b8:	4650      	mov	r0, sl
 80102ba:	f00a fe7d 	bl	801afb8 <sniprintf>
 80102be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80102c2:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 80102c6:	4641      	mov	r1, r8
 80102c8:	2250      	movs	r2, #80	; 0x50
 80102ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80102ce:	f009 fd51 	bl	8019d74 <memcpy>
 80102d2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80102d6:	4947      	ldr	r1, [pc, #284]	; (80103f4 <rmw_create_publisher+0x1b8>)
 80102d8:	2b02      	cmp	r3, #2
 80102da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102de:	bf0c      	ite	eq
 80102e0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 80102e4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 80102e8:	67a3      	str	r3, [r4, #120]	; 0x78
 80102ea:	2300      	movs	r3, #0
 80102ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80102f0:	4630      	mov	r0, r6
 80102f2:	f000 fd97 	bl	8010e24 <get_message_typesupport_handle>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d06f      	beq.n	80103da <rmw_create_publisher+0x19e>
 80102fa:	6842      	ldr	r2, [r0, #4]
 80102fc:	61a2      	str	r2, [r4, #24]
 80102fe:	2a00      	cmp	r2, #0
 8010300:	d06b      	beq.n	80103da <rmw_create_publisher+0x19e>
 8010302:	4629      	mov	r1, r5
 8010304:	4643      	mov	r3, r8
 8010306:	4648      	mov	r0, r9
 8010308:	f007 f90a 	bl	8017520 <create_topic>
 801030c:	6260      	str	r0, [r4, #36]	; 0x24
 801030e:	2800      	cmp	r0, #0
 8010310:	d063      	beq.n	80103da <rmw_create_publisher+0x19e>
 8010312:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010316:	f241 5398 	movw	r3, #5528	; 0x1598
 801031a:	2103      	movs	r1, #3
 801031c:	5ad0      	ldrh	r0, [r2, r3]
 801031e:	1c45      	adds	r5, r0, #1
 8010320:	52d5      	strh	r5, [r2, r3]
 8010322:	f001 f9cf 	bl	80116c4 <uxr_object_id>
 8010326:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801032a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801032e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010332:	6912      	ldr	r2, [r2, #16]
 8010334:	6120      	str	r0, [r4, #16]
 8010336:	f04f 0a06 	mov.w	sl, #6
 801033a:	f8cd a000 	str.w	sl, [sp]
 801033e:	6819      	ldr	r1, [r3, #0]
 8010340:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010344:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 8010348:	6922      	ldr	r2, [r4, #16]
 801034a:	f000 ffab 	bl	80112a4 <uxr_buffer_create_publisher_bin>
 801034e:	4602      	mov	r2, r0
 8010350:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010354:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010358:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801035c:	f000 fcd4 	bl	8010d08 <run_xrce_session>
 8010360:	b3b8      	cbz	r0, 80103d2 <rmw_create_publisher+0x196>
 8010362:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010366:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 801036a:	f241 539a 	movw	r3, #5530	; 0x159a
 801036e:	2105      	movs	r1, #5
 8010370:	5ad0      	ldrh	r0, [r2, r3]
 8010372:	1c45      	adds	r5, r0, #1
 8010374:	52d5      	strh	r5, [r2, r3]
 8010376:	f001 f9a5 	bl	80116c4 <uxr_object_id>
 801037a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801037e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010382:	6915      	ldr	r5, [r2, #16]
 8010384:	6160      	str	r0, [r4, #20]
 8010386:	ae04      	add	r6, sp, #16
 8010388:	4641      	mov	r1, r8
 801038a:	4630      	mov	r0, r6
 801038c:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8010390:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8010394:	f000 fcd4 	bl	8010d40 <convert_qos_profile>
 8010398:	e896 0003 	ldmia.w	r6, {r0, r1}
 801039c:	f8cd a00c 	str.w	sl, [sp, #12]
 80103a0:	9001      	str	r0, [sp, #4]
 80103a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80103a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 80103b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80103b4:	f8d8 1000 	ldr.w	r1, [r8]
 80103b8:	4628      	mov	r0, r5
 80103ba:	f000 ffd1 	bl	8011360 <uxr_buffer_create_datawriter_bin>
 80103be:	4602      	mov	r2, r0
 80103c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80103c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80103c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80103cc:	f000 fc9c 	bl	8010d08 <run_xrce_session>
 80103d0:	b938      	cbnz	r0, 80103e2 <rmw_create_publisher+0x1a6>
 80103d2:	4806      	ldr	r0, [pc, #24]	; (80103ec <rmw_create_publisher+0x1b0>)
 80103d4:	4621      	mov	r1, r4
 80103d6:	f007 f845 	bl	8017464 <put_memory>
 80103da:	4638      	mov	r0, r7
 80103dc:	f000 fb42 	bl	8010a64 <rmw_uxrce_fini_publisher_memory>
 80103e0:	2700      	movs	r7, #0
 80103e2:	4638      	mov	r0, r7
 80103e4:	b007      	add	sp, #28
 80103e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ea:	bf00      	nop
 80103ec:	20009f78 	.word	0x20009f78
 80103f0:	0801ee30 	.word	0x0801ee30
 80103f4:	0801edfc 	.word	0x0801edfc

080103f8 <rmw_publisher_get_actual_qos>:
 80103f8:	2000      	movs	r0, #0
 80103fa:	4770      	bx	lr

080103fc <rmw_destroy_publisher>:
 80103fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fe:	b128      	cbz	r0, 801040c <rmw_destroy_publisher+0x10>
 8010400:	4604      	mov	r4, r0
 8010402:	6800      	ldr	r0, [r0, #0]
 8010404:	460d      	mov	r5, r1
 8010406:	f000 fcff 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 801040a:	b910      	cbnz	r0, 8010412 <rmw_destroy_publisher+0x16>
 801040c:	2401      	movs	r4, #1
 801040e:	4620      	mov	r0, r4
 8010410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010412:	6863      	ldr	r3, [r4, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d0f9      	beq.n	801040c <rmw_destroy_publisher+0x10>
 8010418:	2d00      	cmp	r5, #0
 801041a:	d0f7      	beq.n	801040c <rmw_destroy_publisher+0x10>
 801041c:	6828      	ldr	r0, [r5, #0]
 801041e:	f000 fcf3 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 8010422:	2800      	cmp	r0, #0
 8010424:	d0f2      	beq.n	801040c <rmw_destroy_publisher+0x10>
 8010426:	686c      	ldr	r4, [r5, #4]
 8010428:	2c00      	cmp	r4, #0
 801042a:	d0ef      	beq.n	801040c <rmw_destroy_publisher+0x10>
 801042c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801042e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8010432:	f007 f8d7 	bl	80175e4 <destroy_topic>
 8010436:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801043a:	6962      	ldr	r2, [r4, #20]
 801043c:	6918      	ldr	r0, [r3, #16]
 801043e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010442:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010446:	6819      	ldr	r1, [r3, #0]
 8010448:	f000 fe7a 	bl	8011140 <uxr_buffer_delete_entity>
 801044c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8010450:	6922      	ldr	r2, [r4, #16]
 8010452:	4603      	mov	r3, r0
 8010454:	6908      	ldr	r0, [r1, #16]
 8010456:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801045a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801045e:	6809      	ldr	r1, [r1, #0]
 8010460:	461c      	mov	r4, r3
 8010462:	f000 fe6d 	bl	8011140 <uxr_buffer_delete_entity>
 8010466:	4606      	mov	r6, r0
 8010468:	6938      	ldr	r0, [r7, #16]
 801046a:	4622      	mov	r2, r4
 801046c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010470:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010474:	f000 fc48 	bl	8010d08 <run_xrce_session>
 8010478:	4604      	mov	r4, r0
 801047a:	6938      	ldr	r0, [r7, #16]
 801047c:	4632      	mov	r2, r6
 801047e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010482:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010486:	f000 fc3f 	bl	8010d08 <run_xrce_session>
 801048a:	b12c      	cbz	r4, 8010498 <rmw_destroy_publisher+0x9c>
 801048c:	b120      	cbz	r0, 8010498 <rmw_destroy_publisher+0x9c>
 801048e:	2400      	movs	r4, #0
 8010490:	4628      	mov	r0, r5
 8010492:	f000 fae7 	bl	8010a64 <rmw_uxrce_fini_publisher_memory>
 8010496:	e7ba      	b.n	801040e <rmw_destroy_publisher+0x12>
 8010498:	2402      	movs	r4, #2
 801049a:	e7f9      	b.n	8010490 <rmw_destroy_publisher+0x94>

0801049c <rmw_destroy_service>:
 801049c:	b570      	push	{r4, r5, r6, lr}
 801049e:	b128      	cbz	r0, 80104ac <rmw_destroy_service+0x10>
 80104a0:	4604      	mov	r4, r0
 80104a2:	6800      	ldr	r0, [r0, #0]
 80104a4:	460d      	mov	r5, r1
 80104a6:	f000 fcaf 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 80104aa:	b910      	cbnz	r0, 80104b2 <rmw_destroy_service+0x16>
 80104ac:	2401      	movs	r4, #1
 80104ae:	4620      	mov	r0, r4
 80104b0:	bd70      	pop	{r4, r5, r6, pc}
 80104b2:	6863      	ldr	r3, [r4, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d0f9      	beq.n	80104ac <rmw_destroy_service+0x10>
 80104b8:	2d00      	cmp	r5, #0
 80104ba:	d0f7      	beq.n	80104ac <rmw_destroy_service+0x10>
 80104bc:	6828      	ldr	r0, [r5, #0]
 80104be:	f000 fca3 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d0f2      	beq.n	80104ac <rmw_destroy_service+0x10>
 80104c6:	686e      	ldr	r6, [r5, #4]
 80104c8:	2e00      	cmp	r6, #0
 80104ca:	d0ef      	beq.n	80104ac <rmw_destroy_service+0x10>
 80104cc:	6864      	ldr	r4, [r4, #4]
 80104ce:	6932      	ldr	r2, [r6, #16]
 80104d0:	6920      	ldr	r0, [r4, #16]
 80104d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80104d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104da:	6819      	ldr	r1, [r3, #0]
 80104dc:	f001 f95a 	bl	8011794 <uxr_buffer_cancel_data>
 80104e0:	4602      	mov	r2, r0
 80104e2:	6920      	ldr	r0, [r4, #16]
 80104e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80104e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80104ec:	f000 fc0c 	bl	8010d08 <run_xrce_session>
 80104f0:	6920      	ldr	r0, [r4, #16]
 80104f2:	6932      	ldr	r2, [r6, #16]
 80104f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80104f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104fc:	6819      	ldr	r1, [r3, #0]
 80104fe:	f000 fe1f 	bl	8011140 <uxr_buffer_delete_entity>
 8010502:	4602      	mov	r2, r0
 8010504:	6920      	ldr	r0, [r4, #16]
 8010506:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801050a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801050e:	f000 fbfb 	bl	8010d08 <run_xrce_session>
 8010512:	2800      	cmp	r0, #0
 8010514:	4628      	mov	r0, r5
 8010516:	bf14      	ite	ne
 8010518:	2400      	movne	r4, #0
 801051a:	2402      	moveq	r4, #2
 801051c:	f000 face 	bl	8010abc <rmw_uxrce_fini_service_memory>
 8010520:	e7c5      	b.n	80104ae <rmw_destroy_service+0x12>
 8010522:	bf00      	nop

08010524 <rmw_create_subscription>:
 8010524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010528:	b08d      	sub	sp, #52	; 0x34
 801052a:	2800      	cmp	r0, #0
 801052c:	f000 80cf 	beq.w	80106ce <rmw_create_subscription+0x1aa>
 8010530:	460e      	mov	r6, r1
 8010532:	2900      	cmp	r1, #0
 8010534:	f000 80cb 	beq.w	80106ce <rmw_create_subscription+0x1aa>
 8010538:	4604      	mov	r4, r0
 801053a:	6800      	ldr	r0, [r0, #0]
 801053c:	4615      	mov	r5, r2
 801053e:	4698      	mov	r8, r3
 8010540:	f000 fc62 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 8010544:	2800      	cmp	r0, #0
 8010546:	f000 80c2 	beq.w	80106ce <rmw_create_subscription+0x1aa>
 801054a:	2d00      	cmp	r5, #0
 801054c:	f000 80bf 	beq.w	80106ce <rmw_create_subscription+0x1aa>
 8010550:	782b      	ldrb	r3, [r5, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	f000 80bb 	beq.w	80106ce <rmw_create_subscription+0x1aa>
 8010558:	f1b8 0f00 	cmp.w	r8, #0
 801055c:	f000 80b7 	beq.w	80106ce <rmw_create_subscription+0x1aa>
 8010560:	485d      	ldr	r0, [pc, #372]	; (80106d8 <rmw_create_subscription+0x1b4>)
 8010562:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010566:	f006 ff6d 	bl	8017444 <get_memory>
 801056a:	4604      	mov	r4, r0
 801056c:	2800      	cmp	r0, #0
 801056e:	f000 80af 	beq.w	80106d0 <rmw_create_subscription+0x1ac>
 8010572:	68c7      	ldr	r7, [r0, #12]
 8010574:	2300      	movs	r3, #0
 8010576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801057a:	f006 ffcb 	bl	8017514 <rmw_get_implementation_identifier>
 801057e:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 8010582:	67f8      	str	r0, [r7, #124]	; 0x7c
 8010584:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8010588:	4628      	mov	r0, r5
 801058a:	f7ef fe33 	bl	80001f4 <strlen>
 801058e:	3001      	adds	r0, #1
 8010590:	283c      	cmp	r0, #60	; 0x3c
 8010592:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8010596:	f200 8097 	bhi.w	80106c8 <rmw_create_subscription+0x1a4>
 801059a:	4a50      	ldr	r2, [pc, #320]	; (80106dc <rmw_create_subscription+0x1b8>)
 801059c:	462b      	mov	r3, r5
 801059e:	213c      	movs	r1, #60	; 0x3c
 80105a0:	4650      	mov	r0, sl
 80105a2:	f00a fd09 	bl	801afb8 <sniprintf>
 80105a6:	4641      	mov	r1, r8
 80105a8:	f8c7 9020 	str.w	r9, [r7, #32]
 80105ac:	2250      	movs	r2, #80	; 0x50
 80105ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80105b2:	f009 fbdf 	bl	8019d74 <memcpy>
 80105b6:	494a      	ldr	r1, [pc, #296]	; (80106e0 <rmw_create_subscription+0x1bc>)
 80105b8:	4630      	mov	r0, r6
 80105ba:	f000 fc33 	bl	8010e24 <get_message_typesupport_handle>
 80105be:	2800      	cmp	r0, #0
 80105c0:	f000 8082 	beq.w	80106c8 <rmw_create_subscription+0x1a4>
 80105c4:	6842      	ldr	r2, [r0, #4]
 80105c6:	61ba      	str	r2, [r7, #24]
 80105c8:	2a00      	cmp	r2, #0
 80105ca:	d07d      	beq.n	80106c8 <rmw_create_subscription+0x1a4>
 80105cc:	4629      	mov	r1, r5
 80105ce:	4643      	mov	r3, r8
 80105d0:	4648      	mov	r0, r9
 80105d2:	f006 ffa5 	bl	8017520 <create_topic>
 80105d6:	61f8      	str	r0, [r7, #28]
 80105d8:	2800      	cmp	r0, #0
 80105da:	d075      	beq.n	80106c8 <rmw_create_subscription+0x1a4>
 80105dc:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80105e0:	f241 539c 	movw	r3, #5532	; 0x159c
 80105e4:	2104      	movs	r1, #4
 80105e6:	5ad0      	ldrh	r0, [r2, r3]
 80105e8:	1c45      	adds	r5, r0, #1
 80105ea:	52d5      	strh	r5, [r2, r3]
 80105ec:	f001 f86a 	bl	80116c4 <uxr_object_id>
 80105f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80105f4:	6138      	str	r0, [r7, #16]
 80105f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80105fa:	2606      	movs	r6, #6
 80105fc:	9600      	str	r6, [sp, #0]
 80105fe:	6811      	ldr	r1, [r2, #0]
 8010600:	693a      	ldr	r2, [r7, #16]
 8010602:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010606:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801060a:	f000 fe79 	bl	8011300 <uxr_buffer_create_subscriber_bin>
 801060e:	4602      	mov	r2, r0
 8010610:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010614:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010618:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801061c:	f000 fb74 	bl	8010d08 <run_xrce_session>
 8010620:	2800      	cmp	r0, #0
 8010622:	d04d      	beq.n	80106c0 <rmw_create_subscription+0x19c>
 8010624:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010628:	f241 539e 	movw	r3, #5534	; 0x159e
 801062c:	4631      	mov	r1, r6
 801062e:	5ad0      	ldrh	r0, [r2, r3]
 8010630:	1c45      	adds	r5, r0, #1
 8010632:	52d5      	strh	r5, [r2, r3]
 8010634:	f001 f846 	bl	80116c4 <uxr_object_id>
 8010638:	ad08      	add	r5, sp, #32
 801063a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	6178      	str	r0, [r7, #20]
 8010642:	4641      	mov	r1, r8
 8010644:	4628      	mov	r0, r5
 8010646:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801064a:	9305      	str	r3, [sp, #20]
 801064c:	f000 fb78 	bl	8010d40 <convert_qos_profile>
 8010650:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010654:	9b05      	ldr	r3, [sp, #20]
 8010656:	9001      	str	r0, [sp, #4]
 8010658:	9603      	str	r6, [sp, #12]
 801065a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010666:	f8db 1000 	ldr.w	r1, [fp]
 801066a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801066e:	f000 feef 	bl	8011450 <uxr_buffer_create_datareader_bin>
 8010672:	4602      	mov	r2, r0
 8010674:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010678:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801067c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010680:	f000 fb42 	bl	8010d08 <run_xrce_session>
 8010684:	b1e0      	cbz	r0, 80106c0 <rmw_create_subscription+0x19c>
 8010686:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801068a:	f898 3008 	ldrb.w	r3, [r8, #8]
 801068e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010692:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010696:	2200      	movs	r2, #0
 8010698:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 801069c:	2b02      	cmp	r3, #2
 801069e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80106a2:	bf0c      	ite	eq
 80106a4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80106a8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80106ac:	9307      	str	r3, [sp, #28]
 80106ae:	aa0a      	add	r2, sp, #40	; 0x28
 80106b0:	9200      	str	r2, [sp, #0]
 80106b2:	697a      	ldr	r2, [r7, #20]
 80106b4:	6809      	ldr	r1, [r1, #0]
 80106b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80106ba:	f001 f831 	bl	8011720 <uxr_buffer_request_data>
 80106be:	e007      	b.n	80106d0 <rmw_create_subscription+0x1ac>
 80106c0:	4805      	ldr	r0, [pc, #20]	; (80106d8 <rmw_create_subscription+0x1b4>)
 80106c2:	4639      	mov	r1, r7
 80106c4:	f006 fece 	bl	8017464 <put_memory>
 80106c8:	4620      	mov	r0, r4
 80106ca:	f000 f9e1 	bl	8010a90 <rmw_uxrce_fini_subscription_memory>
 80106ce:	2400      	movs	r4, #0
 80106d0:	4620      	mov	r0, r4
 80106d2:	b00d      	add	sp, #52	; 0x34
 80106d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106d8:	2000d1d4 	.word	0x2000d1d4
 80106dc:	0801ee30 	.word	0x0801ee30
 80106e0:	0801edfc 	.word	0x0801edfc

080106e4 <rmw_subscription_get_actual_qos>:
 80106e4:	2000      	movs	r0, #0
 80106e6:	4770      	bx	lr

080106e8 <rmw_destroy_subscription>:
 80106e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ea:	b128      	cbz	r0, 80106f8 <rmw_destroy_subscription+0x10>
 80106ec:	4604      	mov	r4, r0
 80106ee:	6800      	ldr	r0, [r0, #0]
 80106f0:	460d      	mov	r5, r1
 80106f2:	f000 fb89 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 80106f6:	b910      	cbnz	r0, 80106fe <rmw_destroy_subscription+0x16>
 80106f8:	2401      	movs	r4, #1
 80106fa:	4620      	mov	r0, r4
 80106fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106fe:	6863      	ldr	r3, [r4, #4]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d0f9      	beq.n	80106f8 <rmw_destroy_subscription+0x10>
 8010704:	2d00      	cmp	r5, #0
 8010706:	d0f7      	beq.n	80106f8 <rmw_destroy_subscription+0x10>
 8010708:	6828      	ldr	r0, [r5, #0]
 801070a:	f000 fb7d 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 801070e:	2800      	cmp	r0, #0
 8010710:	d0f2      	beq.n	80106f8 <rmw_destroy_subscription+0x10>
 8010712:	686c      	ldr	r4, [r5, #4]
 8010714:	2c00      	cmp	r4, #0
 8010716:	d0ef      	beq.n	80106f8 <rmw_destroy_subscription+0x10>
 8010718:	6a26      	ldr	r6, [r4, #32]
 801071a:	6962      	ldr	r2, [r4, #20]
 801071c:	6930      	ldr	r0, [r6, #16]
 801071e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010722:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010726:	6819      	ldr	r1, [r3, #0]
 8010728:	f001 f834 	bl	8011794 <uxr_buffer_cancel_data>
 801072c:	4602      	mov	r2, r0
 801072e:	6930      	ldr	r0, [r6, #16]
 8010730:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010734:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010738:	f000 fae6 	bl	8010d08 <run_xrce_session>
 801073c:	69e0      	ldr	r0, [r4, #28]
 801073e:	f006 ff51 	bl	80175e4 <destroy_topic>
 8010742:	6a23      	ldr	r3, [r4, #32]
 8010744:	6962      	ldr	r2, [r4, #20]
 8010746:	6918      	ldr	r0, [r3, #16]
 8010748:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801074c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010750:	6819      	ldr	r1, [r3, #0]
 8010752:	f000 fcf5 	bl	8011140 <uxr_buffer_delete_entity>
 8010756:	6a21      	ldr	r1, [r4, #32]
 8010758:	6922      	ldr	r2, [r4, #16]
 801075a:	4603      	mov	r3, r0
 801075c:	6908      	ldr	r0, [r1, #16]
 801075e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010762:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010766:	6809      	ldr	r1, [r1, #0]
 8010768:	461c      	mov	r4, r3
 801076a:	f000 fce9 	bl	8011140 <uxr_buffer_delete_entity>
 801076e:	4607      	mov	r7, r0
 8010770:	6930      	ldr	r0, [r6, #16]
 8010772:	4622      	mov	r2, r4
 8010774:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010778:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801077c:	f000 fac4 	bl	8010d08 <run_xrce_session>
 8010780:	4604      	mov	r4, r0
 8010782:	6930      	ldr	r0, [r6, #16]
 8010784:	463a      	mov	r2, r7
 8010786:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801078a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801078e:	f000 fabb 	bl	8010d08 <run_xrce_session>
 8010792:	b12c      	cbz	r4, 80107a0 <rmw_destroy_subscription+0xb8>
 8010794:	b120      	cbz	r0, 80107a0 <rmw_destroy_subscription+0xb8>
 8010796:	2400      	movs	r4, #0
 8010798:	4628      	mov	r0, r5
 801079a:	f000 f979 	bl	8010a90 <rmw_uxrce_fini_subscription_memory>
 801079e:	e7ac      	b.n	80106fa <rmw_destroy_subscription+0x12>
 80107a0:	2402      	movs	r4, #2
 80107a2:	e7f9      	b.n	8010798 <rmw_destroy_subscription+0xb0>

080107a4 <rmw_uxrce_transport_init>:
 80107a4:	b508      	push	{r3, lr}
 80107a6:	b108      	cbz	r0, 80107ac <rmw_uxrce_transport_init+0x8>
 80107a8:	f100 0210 	add.w	r2, r0, #16
 80107ac:	b139      	cbz	r1, 80107be <rmw_uxrce_transport_init+0x1a>
 80107ae:	6949      	ldr	r1, [r1, #20]
 80107b0:	4610      	mov	r0, r2
 80107b2:	f000 ff4f 	bl	8011654 <uxr_init_custom_transport>
 80107b6:	f080 0001 	eor.w	r0, r0, #1
 80107ba:	b2c0      	uxtb	r0, r0
 80107bc:	bd08      	pop	{r3, pc}
 80107be:	4b04      	ldr	r3, [pc, #16]	; (80107d0 <rmw_uxrce_transport_init+0x2c>)
 80107c0:	4610      	mov	r0, r2
 80107c2:	6859      	ldr	r1, [r3, #4]
 80107c4:	f000 ff46 	bl	8011654 <uxr_init_custom_transport>
 80107c8:	f080 0001 	eor.w	r0, r0, #1
 80107cc:	b2c0      	uxtb	r0, r0
 80107ce:	bd08      	pop	{r3, pc}
 80107d0:	20009f48 	.word	0x20009f48

080107d4 <rmw_uxrce_init_service_memory>:
 80107d4:	b1b2      	cbz	r2, 8010804 <rmw_uxrce_init_service_memory+0x30>
 80107d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d8:	7a07      	ldrb	r7, [r0, #8]
 80107da:	4605      	mov	r5, r0
 80107dc:	b98f      	cbnz	r7, 8010802 <rmw_uxrce_init_service_memory+0x2e>
 80107de:	e9c0 7700 	strd	r7, r7, [r0]
 80107e2:	460c      	mov	r4, r1
 80107e4:	23c8      	movs	r3, #200	; 0xc8
 80107e6:	2101      	movs	r1, #1
 80107e8:	fb03 4602 	mla	r6, r3, r2, r4
 80107ec:	60c3      	str	r3, [r0, #12]
 80107ee:	7201      	strb	r1, [r0, #8]
 80107f0:	4621      	mov	r1, r4
 80107f2:	4628      	mov	r0, r5
 80107f4:	f006 fe36 	bl	8017464 <put_memory>
 80107f8:	60e4      	str	r4, [r4, #12]
 80107fa:	f804 7bc8 	strb.w	r7, [r4], #200
 80107fe:	42a6      	cmp	r6, r4
 8010800:	d1f6      	bne.n	80107f0 <rmw_uxrce_init_service_memory+0x1c>
 8010802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop

08010808 <rmw_uxrce_init_client_memory>:
 8010808:	b1b2      	cbz	r2, 8010838 <rmw_uxrce_init_client_memory+0x30>
 801080a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801080c:	7a07      	ldrb	r7, [r0, #8]
 801080e:	4605      	mov	r5, r0
 8010810:	b98f      	cbnz	r7, 8010836 <rmw_uxrce_init_client_memory+0x2e>
 8010812:	e9c0 7700 	strd	r7, r7, [r0]
 8010816:	460c      	mov	r4, r1
 8010818:	23c8      	movs	r3, #200	; 0xc8
 801081a:	2101      	movs	r1, #1
 801081c:	fb03 4602 	mla	r6, r3, r2, r4
 8010820:	60c3      	str	r3, [r0, #12]
 8010822:	7201      	strb	r1, [r0, #8]
 8010824:	4621      	mov	r1, r4
 8010826:	4628      	mov	r0, r5
 8010828:	f006 fe1c 	bl	8017464 <put_memory>
 801082c:	60e4      	str	r4, [r4, #12]
 801082e:	f804 7bc8 	strb.w	r7, [r4], #200
 8010832:	42a6      	cmp	r6, r4
 8010834:	d1f6      	bne.n	8010824 <rmw_uxrce_init_client_memory+0x1c>
 8010836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop

0801083c <rmw_uxrce_init_publisher_memory>:
 801083c:	b1b2      	cbz	r2, 801086c <rmw_uxrce_init_publisher_memory+0x30>
 801083e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010840:	7a07      	ldrb	r7, [r0, #8]
 8010842:	4605      	mov	r5, r0
 8010844:	b98f      	cbnz	r7, 801086a <rmw_uxrce_init_publisher_memory+0x2e>
 8010846:	e9c0 7700 	strd	r7, r7, [r0]
 801084a:	460c      	mov	r4, r1
 801084c:	23d8      	movs	r3, #216	; 0xd8
 801084e:	2101      	movs	r1, #1
 8010850:	fb03 4602 	mla	r6, r3, r2, r4
 8010854:	60c3      	str	r3, [r0, #12]
 8010856:	7201      	strb	r1, [r0, #8]
 8010858:	4621      	mov	r1, r4
 801085a:	4628      	mov	r0, r5
 801085c:	f006 fe02 	bl	8017464 <put_memory>
 8010860:	60e4      	str	r4, [r4, #12]
 8010862:	f804 7bd8 	strb.w	r7, [r4], #216
 8010866:	42a6      	cmp	r6, r4
 8010868:	d1f6      	bne.n	8010858 <rmw_uxrce_init_publisher_memory+0x1c>
 801086a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801086c:	4770      	bx	lr
 801086e:	bf00      	nop

08010870 <rmw_uxrce_init_subscription_memory>:
 8010870:	b1b2      	cbz	r2, 80108a0 <rmw_uxrce_init_subscription_memory+0x30>
 8010872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010874:	7a07      	ldrb	r7, [r0, #8]
 8010876:	4605      	mov	r5, r0
 8010878:	b98f      	cbnz	r7, 801089e <rmw_uxrce_init_subscription_memory+0x2e>
 801087a:	e9c0 7700 	strd	r7, r7, [r0]
 801087e:	460c      	mov	r4, r1
 8010880:	23d0      	movs	r3, #208	; 0xd0
 8010882:	2101      	movs	r1, #1
 8010884:	fb03 4602 	mla	r6, r3, r2, r4
 8010888:	60c3      	str	r3, [r0, #12]
 801088a:	7201      	strb	r1, [r0, #8]
 801088c:	4621      	mov	r1, r4
 801088e:	4628      	mov	r0, r5
 8010890:	f006 fde8 	bl	8017464 <put_memory>
 8010894:	60e4      	str	r4, [r4, #12]
 8010896:	f804 7bd0 	strb.w	r7, [r4], #208
 801089a:	42a6      	cmp	r6, r4
 801089c:	d1f6      	bne.n	801088c <rmw_uxrce_init_subscription_memory+0x1c>
 801089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop

080108a4 <rmw_uxrce_init_node_memory>:
 80108a4:	b1b2      	cbz	r2, 80108d4 <rmw_uxrce_init_node_memory+0x30>
 80108a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108a8:	7a07      	ldrb	r7, [r0, #8]
 80108aa:	4605      	mov	r5, r0
 80108ac:	b98f      	cbnz	r7, 80108d2 <rmw_uxrce_init_node_memory+0x2e>
 80108ae:	e9c0 7700 	strd	r7, r7, [r0]
 80108b2:	460c      	mov	r4, r1
 80108b4:	23a4      	movs	r3, #164	; 0xa4
 80108b6:	2101      	movs	r1, #1
 80108b8:	fb03 4602 	mla	r6, r3, r2, r4
 80108bc:	60c3      	str	r3, [r0, #12]
 80108be:	7201      	strb	r1, [r0, #8]
 80108c0:	4621      	mov	r1, r4
 80108c2:	4628      	mov	r0, r5
 80108c4:	f006 fdce 	bl	8017464 <put_memory>
 80108c8:	60e4      	str	r4, [r4, #12]
 80108ca:	f804 7ba4 	strb.w	r7, [r4], #164
 80108ce:	42a6      	cmp	r6, r4
 80108d0:	d1f6      	bne.n	80108c0 <rmw_uxrce_init_node_memory+0x1c>
 80108d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop

080108d8 <rmw_uxrce_init_session_memory>:
 80108d8:	b1d2      	cbz	r2, 8010910 <rmw_uxrce_init_session_memory+0x38>
 80108da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108de:	7a07      	ldrb	r7, [r0, #8]
 80108e0:	4605      	mov	r5, r0
 80108e2:	b99f      	cbnz	r7, 801090c <rmw_uxrce_init_session_memory+0x34>
 80108e4:	e9c0 7700 	strd	r7, r7, [r0]
 80108e8:	f241 53a8 	movw	r3, #5544	; 0x15a8
 80108ec:	460c      	mov	r4, r1
 80108ee:	2101      	movs	r1, #1
 80108f0:	fb03 4602 	mla	r6, r3, r2, r4
 80108f4:	60c3      	str	r3, [r0, #12]
 80108f6:	4698      	mov	r8, r3
 80108f8:	7201      	strb	r1, [r0, #8]
 80108fa:	4621      	mov	r1, r4
 80108fc:	4628      	mov	r0, r5
 80108fe:	f006 fdb1 	bl	8017464 <put_memory>
 8010902:	60e4      	str	r4, [r4, #12]
 8010904:	7027      	strb	r7, [r4, #0]
 8010906:	4444      	add	r4, r8
 8010908:	42a6      	cmp	r6, r4
 801090a:	d1f6      	bne.n	80108fa <rmw_uxrce_init_session_memory+0x22>
 801090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop

08010914 <rmw_uxrce_init_topic_memory>:
 8010914:	b1c2      	cbz	r2, 8010948 <rmw_uxrce_init_topic_memory+0x34>
 8010916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010918:	7a07      	ldrb	r7, [r0, #8]
 801091a:	4606      	mov	r6, r0
 801091c:	b99f      	cbnz	r7, 8010946 <rmw_uxrce_init_topic_memory+0x32>
 801091e:	e9c0 7700 	strd	r7, r7, [r0]
 8010922:	460c      	mov	r4, r1
 8010924:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010928:	2101      	movs	r1, #1
 801092a:	231c      	movs	r3, #28
 801092c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010930:	7201      	strb	r1, [r0, #8]
 8010932:	60c3      	str	r3, [r0, #12]
 8010934:	4621      	mov	r1, r4
 8010936:	4630      	mov	r0, r6
 8010938:	f006 fd94 	bl	8017464 <put_memory>
 801093c:	60e4      	str	r4, [r4, #12]
 801093e:	f804 7b1c 	strb.w	r7, [r4], #28
 8010942:	42a5      	cmp	r5, r4
 8010944:	d1f6      	bne.n	8010934 <rmw_uxrce_init_topic_memory+0x20>
 8010946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop

0801094c <rmw_uxrce_init_static_input_buffer_memory>:
 801094c:	b1d2      	cbz	r2, 8010984 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 801094e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010950:	7a07      	ldrb	r7, [r0, #8]
 8010952:	4606      	mov	r6, r0
 8010954:	b9af      	cbnz	r7, 8010982 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 8010956:	e9c0 7700 	strd	r7, r7, [r0]
 801095a:	460c      	mov	r4, r1
 801095c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8010960:	2101      	movs	r1, #1
 8010962:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8010966:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 801096a:	7201      	strb	r1, [r0, #8]
 801096c:	60c3      	str	r3, [r0, #12]
 801096e:	4621      	mov	r1, r4
 8010970:	4630      	mov	r0, r6
 8010972:	f006 fd77 	bl	8017464 <put_memory>
 8010976:	60e4      	str	r4, [r4, #12]
 8010978:	7027      	strb	r7, [r4, #0]
 801097a:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 801097e:	42a5      	cmp	r5, r4
 8010980:	d1f5      	bne.n	801096e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop

08010988 <rmw_uxrce_init_init_options_impl_memory>:
 8010988:	b1b2      	cbz	r2, 80109b8 <rmw_uxrce_init_init_options_impl_memory+0x30>
 801098a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098c:	7a07      	ldrb	r7, [r0, #8]
 801098e:	4605      	mov	r5, r0
 8010990:	b98f      	cbnz	r7, 80109b6 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 8010992:	e9c0 7700 	strd	r7, r7, [r0]
 8010996:	460c      	mov	r4, r1
 8010998:	232c      	movs	r3, #44	; 0x2c
 801099a:	2101      	movs	r1, #1
 801099c:	fb03 4602 	mla	r6, r3, r2, r4
 80109a0:	60c3      	str	r3, [r0, #12]
 80109a2:	7201      	strb	r1, [r0, #8]
 80109a4:	4621      	mov	r1, r4
 80109a6:	4628      	mov	r0, r5
 80109a8:	f006 fd5c 	bl	8017464 <put_memory>
 80109ac:	60e4      	str	r4, [r4, #12]
 80109ae:	f804 7b2c 	strb.w	r7, [r4], #44
 80109b2:	42a6      	cmp	r6, r4
 80109b4:	d1f6      	bne.n	80109a4 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 80109b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop

080109bc <rmw_uxrce_init_wait_set_memory>:
 80109bc:	b1c2      	cbz	r2, 80109f0 <rmw_uxrce_init_wait_set_memory+0x34>
 80109be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c0:	7a07      	ldrb	r7, [r0, #8]
 80109c2:	4606      	mov	r6, r0
 80109c4:	b99f      	cbnz	r7, 80109ee <rmw_uxrce_init_wait_set_memory+0x32>
 80109c6:	e9c0 7700 	strd	r7, r7, [r0]
 80109ca:	460c      	mov	r4, r1
 80109cc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80109d0:	2101      	movs	r1, #1
 80109d2:	231c      	movs	r3, #28
 80109d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109d8:	7201      	strb	r1, [r0, #8]
 80109da:	60c3      	str	r3, [r0, #12]
 80109dc:	4621      	mov	r1, r4
 80109de:	4630      	mov	r0, r6
 80109e0:	f006 fd40 	bl	8017464 <put_memory>
 80109e4:	60e4      	str	r4, [r4, #12]
 80109e6:	f804 7b1c 	strb.w	r7, [r4], #28
 80109ea:	42a5      	cmp	r5, r4
 80109ec:	d1f6      	bne.n	80109dc <rmw_uxrce_init_wait_set_memory+0x20>
 80109ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop

080109f4 <rmw_uxrce_init_guard_condition_memory>:
 80109f4:	b1b2      	cbz	r2, 8010a24 <rmw_uxrce_init_guard_condition_memory+0x30>
 80109f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f8:	7a07      	ldrb	r7, [r0, #8]
 80109fa:	4605      	mov	r5, r0
 80109fc:	b98f      	cbnz	r7, 8010a22 <rmw_uxrce_init_guard_condition_memory+0x2e>
 80109fe:	e9c0 7700 	strd	r7, r7, [r0]
 8010a02:	460c      	mov	r4, r1
 8010a04:	2320      	movs	r3, #32
 8010a06:	2101      	movs	r1, #1
 8010a08:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8010a0c:	7201      	strb	r1, [r0, #8]
 8010a0e:	60c3      	str	r3, [r0, #12]
 8010a10:	4621      	mov	r1, r4
 8010a12:	4628      	mov	r0, r5
 8010a14:	f006 fd26 	bl	8017464 <put_memory>
 8010a18:	60e4      	str	r4, [r4, #12]
 8010a1a:	f804 7b20 	strb.w	r7, [r4], #32
 8010a1e:	42a6      	cmp	r6, r4
 8010a20:	d1f6      	bne.n	8010a10 <rmw_uxrce_init_guard_condition_memory+0x1c>
 8010a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop

08010a28 <rmw_uxrce_fini_session_memory>:
 8010a28:	4601      	mov	r1, r0
 8010a2a:	4801      	ldr	r0, [pc, #4]	; (8010a30 <rmw_uxrce_fini_session_memory+0x8>)
 8010a2c:	f006 bd1a 	b.w	8017464 <put_memory>
 8010a30:	2000d110 	.word	0x2000d110

08010a34 <rmw_uxrce_fini_node_memory>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	4604      	mov	r4, r0
 8010a38:	6800      	ldr	r0, [r0, #0]
 8010a3a:	b128      	cbz	r0, 8010a48 <rmw_uxrce_fini_node_memory+0x14>
 8010a3c:	4b07      	ldr	r3, [pc, #28]	; (8010a5c <rmw_uxrce_fini_node_memory+0x28>)
 8010a3e:	6819      	ldr	r1, [r3, #0]
 8010a40:	f7ef fbce 	bl	80001e0 <strcmp>
 8010a44:	b940      	cbnz	r0, 8010a58 <rmw_uxrce_fini_node_memory+0x24>
 8010a46:	6020      	str	r0, [r4, #0]
 8010a48:	6861      	ldr	r1, [r4, #4]
 8010a4a:	b129      	cbz	r1, 8010a58 <rmw_uxrce_fini_node_memory+0x24>
 8010a4c:	2500      	movs	r5, #0
 8010a4e:	4804      	ldr	r0, [pc, #16]	; (8010a60 <rmw_uxrce_fini_node_memory+0x2c>)
 8010a50:	610d      	str	r5, [r1, #16]
 8010a52:	f006 fd07 	bl	8017464 <put_memory>
 8010a56:	6065      	str	r5, [r4, #4]
 8010a58:	bd38      	pop	{r3, r4, r5, pc}
 8010a5a:	bf00      	nop
 8010a5c:	0801f584 	.word	0x0801f584
 8010a60:	2000cf3c 	.word	0x2000cf3c

08010a64 <rmw_uxrce_fini_publisher_memory>:
 8010a64:	b510      	push	{r4, lr}
 8010a66:	4604      	mov	r4, r0
 8010a68:	6800      	ldr	r0, [r0, #0]
 8010a6a:	b128      	cbz	r0, 8010a78 <rmw_uxrce_fini_publisher_memory+0x14>
 8010a6c:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <rmw_uxrce_fini_publisher_memory+0x24>)
 8010a6e:	6819      	ldr	r1, [r3, #0]
 8010a70:	f7ef fbb6 	bl	80001e0 <strcmp>
 8010a74:	b938      	cbnz	r0, 8010a86 <rmw_uxrce_fini_publisher_memory+0x22>
 8010a76:	6020      	str	r0, [r4, #0]
 8010a78:	6861      	ldr	r1, [r4, #4]
 8010a7a:	b121      	cbz	r1, 8010a86 <rmw_uxrce_fini_publisher_memory+0x22>
 8010a7c:	4803      	ldr	r0, [pc, #12]	; (8010a8c <rmw_uxrce_fini_publisher_memory+0x28>)
 8010a7e:	f006 fcf1 	bl	8017464 <put_memory>
 8010a82:	2300      	movs	r3, #0
 8010a84:	6063      	str	r3, [r4, #4]
 8010a86:	bd10      	pop	{r4, pc}
 8010a88:	0801f584 	.word	0x0801f584
 8010a8c:	20009f78 	.word	0x20009f78

08010a90 <rmw_uxrce_fini_subscription_memory>:
 8010a90:	b510      	push	{r4, lr}
 8010a92:	4604      	mov	r4, r0
 8010a94:	6800      	ldr	r0, [r0, #0]
 8010a96:	b128      	cbz	r0, 8010aa4 <rmw_uxrce_fini_subscription_memory+0x14>
 8010a98:	4b06      	ldr	r3, [pc, #24]	; (8010ab4 <rmw_uxrce_fini_subscription_memory+0x24>)
 8010a9a:	6819      	ldr	r1, [r3, #0]
 8010a9c:	f7ef fba0 	bl	80001e0 <strcmp>
 8010aa0:	b938      	cbnz	r0, 8010ab2 <rmw_uxrce_fini_subscription_memory+0x22>
 8010aa2:	6020      	str	r0, [r4, #0]
 8010aa4:	6861      	ldr	r1, [r4, #4]
 8010aa6:	b121      	cbz	r1, 8010ab2 <rmw_uxrce_fini_subscription_memory+0x22>
 8010aa8:	4803      	ldr	r0, [pc, #12]	; (8010ab8 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010aaa:	f006 fcdb 	bl	8017464 <put_memory>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	6063      	str	r3, [r4, #4]
 8010ab2:	bd10      	pop	{r4, pc}
 8010ab4:	0801f584 	.word	0x0801f584
 8010ab8:	2000d1d4 	.word	0x2000d1d4

08010abc <rmw_uxrce_fini_service_memory>:
 8010abc:	b510      	push	{r4, lr}
 8010abe:	4604      	mov	r4, r0
 8010ac0:	6800      	ldr	r0, [r0, #0]
 8010ac2:	b128      	cbz	r0, 8010ad0 <rmw_uxrce_fini_service_memory+0x14>
 8010ac4:	4b06      	ldr	r3, [pc, #24]	; (8010ae0 <rmw_uxrce_fini_service_memory+0x24>)
 8010ac6:	6819      	ldr	r1, [r3, #0]
 8010ac8:	f7ef fb8a 	bl	80001e0 <strcmp>
 8010acc:	b938      	cbnz	r0, 8010ade <rmw_uxrce_fini_service_memory+0x22>
 8010ace:	6020      	str	r0, [r4, #0]
 8010ad0:	6861      	ldr	r1, [r4, #4]
 8010ad2:	b121      	cbz	r1, 8010ade <rmw_uxrce_fini_service_memory+0x22>
 8010ad4:	4803      	ldr	r0, [pc, #12]	; (8010ae4 <rmw_uxrce_fini_service_memory+0x28>)
 8010ad6:	f006 fcc5 	bl	8017464 <put_memory>
 8010ada:	2300      	movs	r3, #0
 8010adc:	6063      	str	r3, [r4, #4]
 8010ade:	bd10      	pop	{r4, pc}
 8010ae0:	0801f584 	.word	0x0801f584
 8010ae4:	2000d1c4 	.word	0x2000d1c4

08010ae8 <rmw_uxrce_fini_client_memory>:
 8010ae8:	b510      	push	{r4, lr}
 8010aea:	4604      	mov	r4, r0
 8010aec:	6800      	ldr	r0, [r0, #0]
 8010aee:	b128      	cbz	r0, 8010afc <rmw_uxrce_fini_client_memory+0x14>
 8010af0:	4b06      	ldr	r3, [pc, #24]	; (8010b0c <rmw_uxrce_fini_client_memory+0x24>)
 8010af2:	6819      	ldr	r1, [r3, #0]
 8010af4:	f7ef fb74 	bl	80001e0 <strcmp>
 8010af8:	b938      	cbnz	r0, 8010b0a <rmw_uxrce_fini_client_memory+0x22>
 8010afa:	6020      	str	r0, [r4, #0]
 8010afc:	6861      	ldr	r1, [r4, #4]
 8010afe:	b121      	cbz	r1, 8010b0a <rmw_uxrce_fini_client_memory+0x22>
 8010b00:	4803      	ldr	r0, [pc, #12]	; (8010b10 <rmw_uxrce_fini_client_memory+0x28>)
 8010b02:	f006 fcaf 	bl	8017464 <put_memory>
 8010b06:	2300      	movs	r3, #0
 8010b08:	6063      	str	r3, [r4, #4]
 8010b0a:	bd10      	pop	{r4, pc}
 8010b0c:	0801f584 	.word	0x0801f584
 8010b10:	2000a7f8 	.word	0x2000a7f8

08010b14 <rmw_uxrce_fini_topic_memory>:
 8010b14:	b510      	push	{r4, lr}
 8010b16:	4601      	mov	r1, r0
 8010b18:	4604      	mov	r4, r0
 8010b1a:	4803      	ldr	r0, [pc, #12]	; (8010b28 <rmw_uxrce_fini_topic_memory+0x14>)
 8010b1c:	f006 fca2 	bl	8017464 <put_memory>
 8010b20:	2300      	movs	r3, #0
 8010b22:	61a3      	str	r3, [r4, #24]
 8010b24:	bd10      	pop	{r4, pc}
 8010b26:	bf00      	nop
 8010b28:	2000d100 	.word	0x2000d100

08010b2c <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010b2c:	b082      	sub	sp, #8
 8010b2e:	b4f0      	push	{r4, r5, r6, r7}
 8010b30:	4923      	ldr	r1, [pc, #140]	; (8010bc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010b32:	ac04      	add	r4, sp, #16
 8010b34:	e884 000c 	stmia.w	r4, {r2, r3}
 8010b38:	680d      	ldr	r5, [r1, #0]
 8010b3a:	9c05      	ldr	r4, [sp, #20]
 8010b3c:	2d00      	cmp	r5, #0
 8010b3e:	d03d      	beq.n	8010bbc <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8010b40:	462b      	mov	r3, r5
 8010b42:	2100      	movs	r1, #0
 8010b44:	68da      	ldr	r2, [r3, #12]
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010b4c:	4290      	cmp	r0, r2
 8010b4e:	bf08      	it	eq
 8010b50:	3101      	addeq	r1, #1
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1f6      	bne.n	8010b44 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010b56:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d026      	beq.n	8010bac <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8010b5e:	d906      	bls.n	8010b6e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010b60:	2b03      	cmp	r3, #3
 8010b62:	d004      	beq.n	8010b6e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010b64:	2100      	movs	r1, #0
 8010b66:	bcf0      	pop	{r4, r5, r6, r7}
 8010b68:	4608      	mov	r0, r1
 8010b6a:	b002      	add	sp, #8
 8010b6c:	4770      	bx	lr
 8010b6e:	b304      	cbz	r4, 8010bb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010b70:	428c      	cmp	r4, r1
 8010b72:	d81e      	bhi.n	8010bb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010b74:	2d00      	cmp	r5, #0
 8010b76:	d0f5      	beq.n	8010b64 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010b78:	2100      	movs	r1, #0
 8010b7a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010b7e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010b82:	e002      	b.n	8010b8a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8010b84:	68ad      	ldr	r5, [r5, #8]
 8010b86:	2d00      	cmp	r5, #0
 8010b88:	d0ed      	beq.n	8010b66 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010b8a:	68eb      	ldr	r3, [r5, #12]
 8010b8c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010b90:	4290      	cmp	r0, r2
 8010b92:	d1f7      	bne.n	8010b84 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010b94:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	42b2      	cmp	r2, r6
 8010b9e:	eb73 0407 	sbcs.w	r4, r3, r7
 8010ba2:	daef      	bge.n	8010b84 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010ba4:	4616      	mov	r6, r2
 8010ba6:	461f      	mov	r7, r3
 8010ba8:	4629      	mov	r1, r5
 8010baa:	e7eb      	b.n	8010b84 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010bac:	b10c      	cbz	r4, 8010bb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010bae:	428c      	cmp	r4, r1
 8010bb0:	d9d8      	bls.n	8010b64 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8010bb4:	4802      	ldr	r0, [pc, #8]	; (8010bc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010bb6:	b002      	add	sp, #8
 8010bb8:	f006 bc44 	b.w	8017444 <get_memory>
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	e7ca      	b.n	8010b56 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010bc0:	20009f68 	.word	0x20009f68

08010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010bc4:	4b12      	ldr	r3, [pc, #72]	; (8010c10 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	b1fb      	cbz	r3, 8010c0a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010bca:	b4f0      	push	{r4, r5, r6, r7}
 8010bcc:	f04f 0c00 	mov.w	ip, #0
 8010bd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010bd4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010bd8:	e001      	b.n	8010bde <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010bda:	689b      	ldr	r3, [r3, #8]
 8010bdc:	b193      	cbz	r3, 8010c04 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8010bde:	68da      	ldr	r2, [r3, #12]
 8010be0:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8010be4:	4288      	cmp	r0, r1
 8010be6:	d1f8      	bne.n	8010bda <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010be8:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8010bec:	e9d2 6700 	ldrd	r6, r7, [r2]
 8010bf0:	42a6      	cmp	r6, r4
 8010bf2:	eb77 0205 	sbcs.w	r2, r7, r5
 8010bf6:	daf0      	bge.n	8010bda <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010bf8:	469c      	mov	ip, r3
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	4634      	mov	r4, r6
 8010bfe:	463d      	mov	r5, r7
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1ec      	bne.n	8010bde <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010c04:	4660      	mov	r0, ip
 8010c06:	bcf0      	pop	{r4, r5, r6, r7}
 8010c08:	4770      	bx	lr
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	4770      	bx	lr
 8010c0e:	bf00      	nop
 8010c10:	20009f68 	.word	0x20009f68
 8010c14:	00000000 	.word	0x00000000

08010c18 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	4e38      	ldr	r6, [pc, #224]	; (8010d00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 8010c1e:	f8d6 8000 	ldr.w	r8, [r6]
 8010c22:	b083      	sub	sp, #12
 8010c24:	f006 fffa 	bl	8017c1c <rmw_uros_epoch_nanos>
 8010c28:	f1b8 0f00 	cmp.w	r8, #0
 8010c2c:	d05f      	beq.n	8010cee <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010c2e:	46b1      	mov	r9, r6
 8010c30:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010c34:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010c38:	2b04      	cmp	r3, #4
 8010c3a:	4682      	mov	sl, r0
 8010c3c:	468b      	mov	fp, r1
 8010c3e:	d02d      	beq.n	8010c9c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010c40:	2b05      	cmp	r3, #5
 8010c42:	d041      	beq.n	8010cc8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 8010c44:	2b03      	cmp	r3, #3
 8010c46:	d029      	beq.n	8010c9c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e9cd 2300 	strd	r2, r3, [sp]
 8010c50:	2001      	movs	r0, #1
 8010c52:	2100      	movs	r1, #0
 8010c54:	9b00      	ldr	r3, [sp, #0]
 8010c56:	f606 0618 	addw	r6, r6, #2072	; 0x818
 8010c5a:	e9d6 6700 	ldrd	r6, r7, [r6]
 8010c5e:	18c2      	adds	r2, r0, r3
 8010c60:	9b01      	ldr	r3, [sp, #4]
 8010c62:	eb41 0303 	adc.w	r3, r1, r3
 8010c66:	1994      	adds	r4, r2, r6
 8010c68:	eb43 0507 	adc.w	r5, r3, r7
 8010c6c:	4554      	cmp	r4, sl
 8010c6e:	eb75 020b 	sbcs.w	r2, r5, fp
 8010c72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c76:	db03      	blt.n	8010c80 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010c78:	45b2      	cmp	sl, r6
 8010c7a:	eb7b 0207 	sbcs.w	r2, fp, r7
 8010c7e:	da05      	bge.n	8010c8c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 8010c80:	4641      	mov	r1, r8
 8010c82:	4648      	mov	r0, r9
 8010c84:	9300      	str	r3, [sp, #0]
 8010c86:	f006 fbed 	bl	8017464 <put_memory>
 8010c8a:	9b00      	ldr	r3, [sp, #0]
 8010c8c:	b37b      	cbz	r3, 8010cee <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010c8e:	4698      	mov	r8, r3
 8010c90:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010c94:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010c98:	2b04      	cmp	r3, #4
 8010c9a:	d1d1      	bne.n	8010c40 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 8010c9c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010ca0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 8010ca4:	e9cd 2300 	strd	r2, r3, [sp]
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 8010cae:	d015      	beq.n	8010cdc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010cb0:	9a01      	ldr	r2, [sp, #4]
 8010cb2:	4b14      	ldr	r3, [pc, #80]	; (8010d04 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 8010cb4:	fb03 f702 	mul.w	r7, r3, r2
 8010cb8:	9a00      	ldr	r2, [sp, #0]
 8010cba:	fba2 2303 	umull	r2, r3, r2, r3
 8010cbe:	e9cd 2300 	strd	r2, r3, [sp]
 8010cc2:	443b      	add	r3, r7
 8010cc4:	9301      	str	r3, [sp, #4]
 8010cc6:	e7c5      	b.n	8010c54 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010cc8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010ccc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010cd0:	e9cd 2300 	strd	r2, r3, [sp]
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8010cda:	d1e9      	bne.n	8010cb0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8010cdc:	ea50 0301 	orrs.w	r3, r0, r1
 8010ce0:	bf02      	ittt	eq
 8010ce2:	a305      	addeq	r3, pc, #20	; (adr r3, 8010cf8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010ce4:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010ce8:	e9cd 2300 	strdeq	r2, r3, [sp]
 8010cec:	e7b2      	b.n	8010c54 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010cee:	b003      	add	sp, #12
 8010cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf4:	f3af 8000 	nop.w
 8010cf8:	fc23ac00 	.word	0xfc23ac00
 8010cfc:	00000006 	.word	0x00000006
 8010d00:	20009f68 	.word	0x20009f68
 8010d04:	3b9aca00 	.word	0x3b9aca00

08010d08 <run_xrce_session>:
 8010d08:	b510      	push	{r4, lr}
 8010d0a:	788c      	ldrb	r4, [r1, #2]
 8010d0c:	b086      	sub	sp, #24
 8010d0e:	2c01      	cmp	r4, #1
 8010d10:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010d14:	d00c      	beq.n	8010d30 <run_xrce_session+0x28>
 8010d16:	4619      	mov	r1, r3
 8010d18:	2301      	movs	r3, #1
 8010d1a:	9300      	str	r3, [sp, #0]
 8010d1c:	f10d 020e 	add.w	r2, sp, #14
 8010d20:	f10d 0317 	add.w	r3, sp, #23
 8010d24:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d28:	f001 fb20 	bl	801236c <uxr_run_session_until_all_status>
 8010d2c:	b006      	add	sp, #24
 8010d2e:	bd10      	pop	{r4, pc}
 8010d30:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d34:	f000 ff38 	bl	8011ba8 <uxr_flash_output_streams>
 8010d38:	4620      	mov	r0, r4
 8010d3a:	b006      	add	sp, #24
 8010d3c:	bd10      	pop	{r4, pc}
 8010d3e:	bf00      	nop

08010d40 <convert_qos_profile>:
 8010d40:	b430      	push	{r4, r5}
 8010d42:	7a0d      	ldrb	r5, [r1, #8]
 8010d44:	780c      	ldrb	r4, [r1, #0]
 8010d46:	7a4a      	ldrb	r2, [r1, #9]
 8010d48:	8889      	ldrh	r1, [r1, #4]
 8010d4a:	8081      	strh	r1, [r0, #4]
 8010d4c:	f1a5 0502 	sub.w	r5, r5, #2
 8010d50:	f1a4 0402 	sub.w	r4, r4, #2
 8010d54:	2a02      	cmp	r2, #2
 8010d56:	fab5 f585 	clz	r5, r5
 8010d5a:	fab4 f484 	clz	r4, r4
 8010d5e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010d62:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010d66:	bf18      	it	ne
 8010d68:	2200      	movne	r2, #0
 8010d6a:	7045      	strb	r5, [r0, #1]
 8010d6c:	7084      	strb	r4, [r0, #2]
 8010d6e:	7002      	strb	r2, [r0, #0]
 8010d70:	bc30      	pop	{r4, r5}
 8010d72:	4770      	bx	lr

08010d74 <generate_type_name>:
 8010d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d76:	2300      	movs	r3, #0
 8010d78:	700b      	strb	r3, [r1, #0]
 8010d7a:	6803      	ldr	r3, [r0, #0]
 8010d7c:	b087      	sub	sp, #28
 8010d7e:	4614      	mov	r4, r2
 8010d80:	b1d3      	cbz	r3, 8010db8 <generate_type_name+0x44>
 8010d82:	4d0f      	ldr	r5, [pc, #60]	; (8010dc0 <generate_type_name+0x4c>)
 8010d84:	462f      	mov	r7, r5
 8010d86:	4a0f      	ldr	r2, [pc, #60]	; (8010dc4 <generate_type_name+0x50>)
 8010d88:	4e0f      	ldr	r6, [pc, #60]	; (8010dc8 <generate_type_name+0x54>)
 8010d8a:	6840      	ldr	r0, [r0, #4]
 8010d8c:	9004      	str	r0, [sp, #16]
 8010d8e:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8010d92:	4608      	mov	r0, r1
 8010d94:	9205      	str	r2, [sp, #20]
 8010d96:	9503      	str	r5, [sp, #12]
 8010d98:	4a0c      	ldr	r2, [pc, #48]	; (8010dcc <generate_type_name+0x58>)
 8010d9a:	9700      	str	r7, [sp, #0]
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	f00a f90b 	bl	801afb8 <sniprintf>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	db05      	blt.n	8010db2 <generate_type_name+0x3e>
 8010da6:	4284      	cmp	r4, r0
 8010da8:	bfd4      	ite	le
 8010daa:	2000      	movle	r0, #0
 8010dac:	2001      	movgt	r0, #1
 8010dae:	b007      	add	sp, #28
 8010db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010db2:	2000      	movs	r0, #0
 8010db4:	b007      	add	sp, #28
 8010db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010db8:	4b05      	ldr	r3, [pc, #20]	; (8010dd0 <generate_type_name+0x5c>)
 8010dba:	4d01      	ldr	r5, [pc, #4]	; (8010dc0 <generate_type_name+0x4c>)
 8010dbc:	461f      	mov	r7, r3
 8010dbe:	e7e2      	b.n	8010d86 <generate_type_name+0x12>
 8010dc0:	0801ee20 	.word	0x0801ee20
 8010dc4:	0801ee34 	.word	0x0801ee34
 8010dc8:	0801ee38 	.word	0x0801ee38
 8010dcc:	0801ee24 	.word	0x0801ee24
 8010dd0:	0801f35c 	.word	0x0801f35c

08010dd4 <generate_topic_name>:
 8010dd4:	b510      	push	{r4, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	4b09      	ldr	r3, [pc, #36]	; (8010e00 <generate_topic_name+0x2c>)
 8010dda:	9000      	str	r0, [sp, #0]
 8010ddc:	4614      	mov	r4, r2
 8010dde:	4608      	mov	r0, r1
 8010de0:	4611      	mov	r1, r2
 8010de2:	4a08      	ldr	r2, [pc, #32]	; (8010e04 <generate_topic_name+0x30>)
 8010de4:	f00a f8e8 	bl	801afb8 <sniprintf>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	db05      	blt.n	8010df8 <generate_topic_name+0x24>
 8010dec:	4284      	cmp	r4, r0
 8010dee:	bfd4      	ite	le
 8010df0:	2000      	movle	r0, #0
 8010df2:	2001      	movgt	r0, #1
 8010df4:	b002      	add	sp, #8
 8010df6:	bd10      	pop	{r4, pc}
 8010df8:	2000      	movs	r0, #0
 8010dfa:	b002      	add	sp, #8
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	bf00      	nop
 8010e00:	0801ee44 	.word	0x0801ee44
 8010e04:	0801ee3c 	.word	0x0801ee3c

08010e08 <is_uxrce_rmw_identifier_valid>:
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	b140      	cbz	r0, 8010e20 <is_uxrce_rmw_identifier_valid+0x18>
 8010e0e:	f006 fb81 	bl	8017514 <rmw_get_implementation_identifier>
 8010e12:	4601      	mov	r1, r0
 8010e14:	4620      	mov	r0, r4
 8010e16:	f7ef f9e3 	bl	80001e0 <strcmp>
 8010e1a:	fab0 f080 	clz	r0, r0
 8010e1e:	0940      	lsrs	r0, r0, #5
 8010e20:	bd10      	pop	{r4, pc}
 8010e22:	bf00      	nop

08010e24 <get_message_typesupport_handle>:
 8010e24:	6883      	ldr	r3, [r0, #8]
 8010e26:	4718      	bx	r3

08010e28 <get_message_typesupport_handle_function>:
 8010e28:	b510      	push	{r4, lr}
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	6800      	ldr	r0, [r0, #0]
 8010e2e:	f7ef f9d7 	bl	80001e0 <strcmp>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	bf0c      	ite	eq
 8010e36:	4620      	moveq	r0, r4
 8010e38:	2000      	movne	r0, #0
 8010e3a:	bd10      	pop	{r4, pc}

08010e3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8010e3c:	f000 b862 	b.w	8010f04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

08010e40 <_String__max_serialized_size>:
 8010e40:	2000      	movs	r0, #0
 8010e42:	4770      	bx	lr

08010e44 <_String__cdr_serialize>:
 8010e44:	b1c0      	cbz	r0, 8010e78 <_String__cdr_serialize+0x34>
 8010e46:	b570      	push	{r4, r5, r6, lr}
 8010e48:	6806      	ldr	r6, [r0, #0]
 8010e4a:	460d      	mov	r5, r1
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	b156      	cbz	r6, 8010e66 <_String__cdr_serialize+0x22>
 8010e50:	4630      	mov	r0, r6
 8010e52:	f7ef f9cf 	bl	80001f4 <strlen>
 8010e56:	4631      	mov	r1, r6
 8010e58:	6060      	str	r0, [r4, #4]
 8010e5a:	1c42      	adds	r2, r0, #1
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e62:	f000 b915 	b.w	8011090 <ucdr_serialize_sequence_char>
 8010e66:	4630      	mov	r0, r6
 8010e68:	6060      	str	r0, [r4, #4]
 8010e6a:	4632      	mov	r2, r6
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4628      	mov	r0, r5
 8010e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e74:	f000 b90c 	b.w	8011090 <ucdr_serialize_sequence_char>
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop

08010e7c <get_serialized_size_std_msgs__msg__String>:
 8010e7c:	b510      	push	{r4, lr}
 8010e7e:	4604      	mov	r4, r0
 8010e80:	b130      	cbz	r0, 8010e90 <get_serialized_size_std_msgs__msg__String+0x14>
 8010e82:	4608      	mov	r0, r1
 8010e84:	2104      	movs	r1, #4
 8010e86:	f000 f897 	bl	8010fb8 <ucdr_alignment>
 8010e8a:	6863      	ldr	r3, [r4, #4]
 8010e8c:	3305      	adds	r3, #5
 8010e8e:	4418      	add	r0, r3
 8010e90:	bd10      	pop	{r4, pc}
 8010e92:	bf00      	nop

08010e94 <_String__cdr_deserialize>:
 8010e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e96:	460c      	mov	r4, r1
 8010e98:	b083      	sub	sp, #12
 8010e9a:	b1a1      	cbz	r1, 8010ec6 <_String__cdr_deserialize+0x32>
 8010e9c:	688f      	ldr	r7, [r1, #8]
 8010e9e:	6809      	ldr	r1, [r1, #0]
 8010ea0:	ab01      	add	r3, sp, #4
 8010ea2:	463a      	mov	r2, r7
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	f000 f905 	bl	80110b4 <ucdr_deserialize_sequence_char>
 8010eaa:	9b01      	ldr	r3, [sp, #4]
 8010eac:	4605      	mov	r5, r0
 8010eae:	b920      	cbnz	r0, 8010eba <_String__cdr_deserialize+0x26>
 8010eb0:	429f      	cmp	r7, r3
 8010eb2:	d30c      	bcc.n	8010ece <_String__cdr_deserialize+0x3a>
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	b003      	add	sp, #12
 8010eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eba:	b103      	cbz	r3, 8010ebe <_String__cdr_deserialize+0x2a>
 8010ebc:	3b01      	subs	r3, #1
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	6063      	str	r3, [r4, #4]
 8010ec2:	b003      	add	sp, #12
 8010ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ec6:	460d      	mov	r5, r1
 8010ec8:	4628      	mov	r0, r5
 8010eca:	b003      	add	sp, #12
 8010ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ece:	2101      	movs	r1, #1
 8010ed0:	75b0      	strb	r0, [r6, #22]
 8010ed2:	7571      	strb	r1, [r6, #21]
 8010ed4:	6060      	str	r0, [r4, #4]
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	f000 f884 	bl	8010fe4 <ucdr_align_to>
 8010edc:	4630      	mov	r0, r6
 8010ede:	9901      	ldr	r1, [sp, #4]
 8010ee0:	f000 f8b6 	bl	8011050 <ucdr_advance_buffer>
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	b003      	add	sp, #12
 8010ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eea:	bf00      	nop

08010eec <_String__get_serialized_size>:
 8010eec:	b510      	push	{r4, lr}
 8010eee:	4604      	mov	r4, r0
 8010ef0:	b130      	cbz	r0, 8010f00 <_String__get_serialized_size+0x14>
 8010ef2:	2104      	movs	r1, #4
 8010ef4:	2000      	movs	r0, #0
 8010ef6:	f000 f85f 	bl	8010fb8 <ucdr_alignment>
 8010efa:	6863      	ldr	r3, [r4, #4]
 8010efc:	3305      	adds	r3, #5
 8010efe:	4418      	add	r0, r3
 8010f00:	bd10      	pop	{r4, pc}
 8010f02:	bf00      	nop

08010f04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8010f04:	4800      	ldr	r0, [pc, #0]	; (8010f08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8010f06:	4770      	bx	lr
 8010f08:	20000060 	.word	0x20000060

08010f0c <ucdr_check_buffer_available_for>:
 8010f0c:	7d83      	ldrb	r3, [r0, #22]
 8010f0e:	b93b      	cbnz	r3, 8010f20 <ucdr_check_buffer_available_for+0x14>
 8010f10:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010f14:	4419      	add	r1, r3
 8010f16:	4288      	cmp	r0, r1
 8010f18:	bf34      	ite	cc
 8010f1a:	2000      	movcc	r0, #0
 8010f1c:	2001      	movcs	r0, #1
 8010f1e:	4770      	bx	lr
 8010f20:	2000      	movs	r0, #0
 8010f22:	4770      	bx	lr

08010f24 <ucdr_check_final_buffer_behavior>:
 8010f24:	7d83      	ldrb	r3, [r0, #22]
 8010f26:	b943      	cbnz	r3, 8010f3a <ucdr_check_final_buffer_behavior+0x16>
 8010f28:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010f2c:	4291      	cmp	r1, r2
 8010f2e:	b510      	push	{r4, lr}
 8010f30:	4604      	mov	r4, r0
 8010f32:	d205      	bcs.n	8010f40 <ucdr_check_final_buffer_behavior+0x1c>
 8010f34:	2301      	movs	r3, #1
 8010f36:	4618      	mov	r0, r3
 8010f38:	bd10      	pop	{r4, pc}
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	4770      	bx	lr
 8010f40:	6982      	ldr	r2, [r0, #24]
 8010f42:	b13a      	cbz	r2, 8010f54 <ucdr_check_final_buffer_behavior+0x30>
 8010f44:	69c1      	ldr	r1, [r0, #28]
 8010f46:	4790      	blx	r2
 8010f48:	f080 0301 	eor.w	r3, r0, #1
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	75a0      	strb	r0, [r4, #22]
 8010f50:	4618      	mov	r0, r3
 8010f52:	bd10      	pop	{r4, pc}
 8010f54:	2001      	movs	r0, #1
 8010f56:	75a0      	strb	r0, [r4, #22]
 8010f58:	e7fa      	b.n	8010f50 <ucdr_check_final_buffer_behavior+0x2c>
 8010f5a:	bf00      	nop

08010f5c <ucdr_set_on_full_buffer_callback>:
 8010f5c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop

08010f64 <ucdr_init_buffer_origin_offset_endian>:
 8010f64:	b430      	push	{r4, r5}
 8010f66:	9c02      	ldr	r4, [sp, #8]
 8010f68:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8010f6c:	6001      	str	r1, [r0, #0]
 8010f6e:	440a      	add	r2, r1
 8010f70:	60c3      	str	r3, [r0, #12]
 8010f72:	4421      	add	r1, r4
 8010f74:	441c      	add	r4, r3
 8010f76:	2300      	movs	r3, #0
 8010f78:	6104      	str	r4, [r0, #16]
 8010f7a:	7505      	strb	r5, [r0, #20]
 8010f7c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8010f80:	bc30      	pop	{r4, r5}
 8010f82:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8010f86:	7543      	strb	r3, [r0, #21]
 8010f88:	7583      	strb	r3, [r0, #22]
 8010f8a:	4770      	bx	lr

08010f8c <ucdr_init_buffer_origin_offset>:
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	9c04      	ldr	r4, [sp, #16]
 8010f92:	9400      	str	r4, [sp, #0]
 8010f94:	2401      	movs	r4, #1
 8010f96:	9401      	str	r4, [sp, #4]
 8010f98:	f7ff ffe4 	bl	8010f64 <ucdr_init_buffer_origin_offset_endian>
 8010f9c:	b002      	add	sp, #8
 8010f9e:	bd10      	pop	{r4, pc}

08010fa0 <ucdr_init_buffer_origin>:
 8010fa0:	b510      	push	{r4, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	2400      	movs	r4, #0
 8010fa6:	9400      	str	r4, [sp, #0]
 8010fa8:	f7ff fff0 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 8010fac:	b002      	add	sp, #8
 8010fae:	bd10      	pop	{r4, pc}

08010fb0 <ucdr_init_buffer>:
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	f7ff bff5 	b.w	8010fa0 <ucdr_init_buffer_origin>
 8010fb6:	bf00      	nop

08010fb8 <ucdr_alignment>:
 8010fb8:	fbb0 f3f1 	udiv	r3, r0, r1
 8010fbc:	fb03 0011 	mls	r0, r3, r1, r0
 8010fc0:	1a08      	subs	r0, r1, r0
 8010fc2:	3901      	subs	r1, #1
 8010fc4:	4008      	ands	r0, r1
 8010fc6:	4770      	bx	lr

08010fc8 <ucdr_buffer_alignment>:
 8010fc8:	7d43      	ldrb	r3, [r0, #21]
 8010fca:	428b      	cmp	r3, r1
 8010fcc:	d208      	bcs.n	8010fe0 <ucdr_buffer_alignment+0x18>
 8010fce:	6903      	ldr	r3, [r0, #16]
 8010fd0:	fbb3 f0f1 	udiv	r0, r3, r1
 8010fd4:	fb01 3010 	mls	r0, r1, r0, r3
 8010fd8:	1a08      	subs	r0, r1, r0
 8010fda:	3901      	subs	r1, #1
 8010fdc:	4008      	ands	r0, r1
 8010fde:	4770      	bx	lr
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	4770      	bx	lr

08010fe4 <ucdr_align_to>:
 8010fe4:	b570      	push	{r4, r5, r6, lr}
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	460e      	mov	r6, r1
 8010fea:	f7ff ffed 	bl	8010fc8 <ucdr_buffer_alignment>
 8010fee:	68a5      	ldr	r5, [r4, #8]
 8010ff0:	6863      	ldr	r3, [r4, #4]
 8010ff2:	6922      	ldr	r2, [r4, #16]
 8010ff4:	7566      	strb	r6, [r4, #21]
 8010ff6:	4405      	add	r5, r0
 8010ff8:	42ab      	cmp	r3, r5
 8010ffa:	4410      	add	r0, r2
 8010ffc:	bf28      	it	cs
 8010ffe:	462b      	movcs	r3, r5
 8011000:	6120      	str	r0, [r4, #16]
 8011002:	60a3      	str	r3, [r4, #8]
 8011004:	bd70      	pop	{r4, r5, r6, pc}
 8011006:	bf00      	nop

08011008 <ucdr_buffer_length>:
 8011008:	6882      	ldr	r2, [r0, #8]
 801100a:	6800      	ldr	r0, [r0, #0]
 801100c:	1a10      	subs	r0, r2, r0
 801100e:	4770      	bx	lr

08011010 <ucdr_buffer_remaining>:
 8011010:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011014:	1a10      	subs	r0, r2, r0
 8011016:	4770      	bx	lr

08011018 <ucdr_check_final_buffer_behavior_array>:
 8011018:	b538      	push	{r3, r4, r5, lr}
 801101a:	7d83      	ldrb	r3, [r0, #22]
 801101c:	b963      	cbnz	r3, 8011038 <ucdr_check_final_buffer_behavior_array+0x20>
 801101e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011022:	429a      	cmp	r2, r3
 8011024:	4604      	mov	r4, r0
 8011026:	460d      	mov	r5, r1
 8011028:	d308      	bcc.n	801103c <ucdr_check_final_buffer_behavior_array+0x24>
 801102a:	b139      	cbz	r1, 801103c <ucdr_check_final_buffer_behavior_array+0x24>
 801102c:	6983      	ldr	r3, [r0, #24]
 801102e:	b163      	cbz	r3, 801104a <ucdr_check_final_buffer_behavior_array+0x32>
 8011030:	69c1      	ldr	r1, [r0, #28]
 8011032:	4798      	blx	r3
 8011034:	75a0      	strb	r0, [r4, #22]
 8011036:	b108      	cbz	r0, 801103c <ucdr_check_final_buffer_behavior_array+0x24>
 8011038:	2000      	movs	r0, #0
 801103a:	bd38      	pop	{r3, r4, r5, pc}
 801103c:	4620      	mov	r0, r4
 801103e:	f7ff ffe7 	bl	8011010 <ucdr_buffer_remaining>
 8011042:	42a8      	cmp	r0, r5
 8011044:	bf28      	it	cs
 8011046:	4628      	movcs	r0, r5
 8011048:	bd38      	pop	{r3, r4, r5, pc}
 801104a:	2301      	movs	r3, #1
 801104c:	7583      	strb	r3, [r0, #22]
 801104e:	e7f3      	b.n	8011038 <ucdr_check_final_buffer_behavior_array+0x20>

08011050 <ucdr_advance_buffer>:
 8011050:	b538      	push	{r3, r4, r5, lr}
 8011052:	4604      	mov	r4, r0
 8011054:	460d      	mov	r5, r1
 8011056:	f7ff ff59 	bl	8010f0c <ucdr_check_buffer_available_for>
 801105a:	b178      	cbz	r0, 801107c <ucdr_advance_buffer+0x2c>
 801105c:	68a3      	ldr	r3, [r4, #8]
 801105e:	6921      	ldr	r1, [r4, #16]
 8011060:	442b      	add	r3, r5
 8011062:	60a3      	str	r3, [r4, #8]
 8011064:	2301      	movs	r3, #1
 8011066:	4429      	add	r1, r5
 8011068:	7563      	strb	r3, [r4, #21]
 801106a:	6121      	str	r1, [r4, #16]
 801106c:	bd38      	pop	{r3, r4, r5, pc}
 801106e:	68a2      	ldr	r2, [r4, #8]
 8011070:	6923      	ldr	r3, [r4, #16]
 8011072:	4402      	add	r2, r0
 8011074:	4403      	add	r3, r0
 8011076:	1a2d      	subs	r5, r5, r0
 8011078:	60a2      	str	r2, [r4, #8]
 801107a:	6123      	str	r3, [r4, #16]
 801107c:	2201      	movs	r2, #1
 801107e:	4629      	mov	r1, r5
 8011080:	4620      	mov	r0, r4
 8011082:	f7ff ffc9 	bl	8011018 <ucdr_check_final_buffer_behavior_array>
 8011086:	2800      	cmp	r0, #0
 8011088:	d1f1      	bne.n	801106e <ucdr_advance_buffer+0x1e>
 801108a:	2301      	movs	r3, #1
 801108c:	7563      	strb	r3, [r4, #21]
 801108e:	bd38      	pop	{r3, r4, r5, pc}

08011090 <ucdr_serialize_sequence_char>:
 8011090:	b570      	push	{r4, r5, r6, lr}
 8011092:	460e      	mov	r6, r1
 8011094:	4615      	mov	r5, r2
 8011096:	7d01      	ldrb	r1, [r0, #20]
 8011098:	4604      	mov	r4, r0
 801109a:	f007 f9d7 	bl	801844c <ucdr_serialize_endian_uint32_t>
 801109e:	b90d      	cbnz	r5, 80110a4 <ucdr_serialize_sequence_char+0x14>
 80110a0:	2001      	movs	r0, #1
 80110a2:	bd70      	pop	{r4, r5, r6, pc}
 80110a4:	7d21      	ldrb	r1, [r4, #20]
 80110a6:	462b      	mov	r3, r5
 80110a8:	4632      	mov	r2, r6
 80110aa:	4620      	mov	r0, r4
 80110ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110b0:	f006 bdc2 	b.w	8017c38 <ucdr_serialize_endian_array_char>

080110b4 <ucdr_deserialize_sequence_char>:
 80110b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b8:	461d      	mov	r5, r3
 80110ba:	4616      	mov	r6, r2
 80110bc:	460f      	mov	r7, r1
 80110be:	461a      	mov	r2, r3
 80110c0:	7d01      	ldrb	r1, [r0, #20]
 80110c2:	4604      	mov	r4, r0
 80110c4:	f007 faea 	bl	801869c <ucdr_deserialize_endian_uint32_t>
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	429e      	cmp	r6, r3
 80110cc:	bf3c      	itt	cc
 80110ce:	2201      	movcc	r2, #1
 80110d0:	75a2      	strbcc	r2, [r4, #22]
 80110d2:	b913      	cbnz	r3, 80110da <ucdr_deserialize_sequence_char+0x26>
 80110d4:	2001      	movs	r0, #1
 80110d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110da:	7d21      	ldrb	r1, [r4, #20]
 80110dc:	463a      	mov	r2, r7
 80110de:	4620      	mov	r0, r4
 80110e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110e4:	f006 bdda 	b.w	8017c9c <ucdr_deserialize_endian_array_char>

080110e8 <ucdr_serialize_sequence_uint8_t>:
 80110e8:	b570      	push	{r4, r5, r6, lr}
 80110ea:	460e      	mov	r6, r1
 80110ec:	4615      	mov	r5, r2
 80110ee:	7d01      	ldrb	r1, [r0, #20]
 80110f0:	4604      	mov	r4, r0
 80110f2:	f007 f9ab 	bl	801844c <ucdr_serialize_endian_uint32_t>
 80110f6:	b90d      	cbnz	r5, 80110fc <ucdr_serialize_sequence_uint8_t+0x14>
 80110f8:	2001      	movs	r0, #1
 80110fa:	bd70      	pop	{r4, r5, r6, pc}
 80110fc:	7d21      	ldrb	r1, [r4, #20]
 80110fe:	462b      	mov	r3, r5
 8011100:	4632      	mov	r2, r6
 8011102:	4620      	mov	r0, r4
 8011104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011108:	f006 be2c 	b.w	8017d64 <ucdr_serialize_endian_array_uint8_t>

0801110c <ucdr_deserialize_sequence_uint8_t>:
 801110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011110:	461d      	mov	r5, r3
 8011112:	4616      	mov	r6, r2
 8011114:	460f      	mov	r7, r1
 8011116:	461a      	mov	r2, r3
 8011118:	7d01      	ldrb	r1, [r0, #20]
 801111a:	4604      	mov	r4, r0
 801111c:	f007 fabe 	bl	801869c <ucdr_deserialize_endian_uint32_t>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	429e      	cmp	r6, r3
 8011124:	bf3c      	itt	cc
 8011126:	2201      	movcc	r2, #1
 8011128:	75a2      	strbcc	r2, [r4, #22]
 801112a:	b913      	cbnz	r3, 8011132 <ucdr_deserialize_sequence_uint8_t+0x26>
 801112c:	2001      	movs	r0, #1
 801112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011132:	7d21      	ldrb	r1, [r4, #20]
 8011134:	463a      	mov	r2, r7
 8011136:	4620      	mov	r0, r4
 8011138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801113c:	f006 be76 	b.w	8017e2c <ucdr_deserialize_endian_array_uint8_t>

08011140 <uxr_buffer_delete_entity>:
 8011140:	b530      	push	{r4, r5, lr}
 8011142:	b08f      	sub	sp, #60	; 0x3c
 8011144:	2403      	movs	r4, #3
 8011146:	2500      	movs	r5, #0
 8011148:	e9cd 4500 	strd	r4, r5, [sp]
 801114c:	9202      	str	r2, [sp, #8]
 801114e:	ab06      	add	r3, sp, #24
 8011150:	2204      	movs	r2, #4
 8011152:	9103      	str	r1, [sp, #12]
 8011154:	4604      	mov	r4, r0
 8011156:	f001 fb45 	bl	80127e4 <uxr_prepare_stream_to_write_submessage>
 801115a:	b918      	cbnz	r0, 8011164 <uxr_buffer_delete_entity+0x24>
 801115c:	4604      	mov	r4, r0
 801115e:	4620      	mov	r0, r4
 8011160:	b00f      	add	sp, #60	; 0x3c
 8011162:	bd30      	pop	{r4, r5, pc}
 8011164:	9902      	ldr	r1, [sp, #8]
 8011166:	aa05      	add	r2, sp, #20
 8011168:	4620      	mov	r0, r4
 801116a:	f001 fc75 	bl	8012a58 <uxr_init_base_object_request>
 801116e:	a905      	add	r1, sp, #20
 8011170:	4604      	mov	r4, r0
 8011172:	a806      	add	r0, sp, #24
 8011174:	f003 fb2e 	bl	80147d4 <uxr_serialize_DELETE_Payload>
 8011178:	4620      	mov	r0, r4
 801117a:	b00f      	add	sp, #60	; 0x3c
 801117c:	bd30      	pop	{r4, r5, pc}
 801117e:	bf00      	nop

08011180 <uxr_common_create_entity>:
 8011180:	b530      	push	{r4, r5, lr}
 8011182:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011186:	b08d      	sub	sp, #52	; 0x34
 8011188:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801118c:	2d01      	cmp	r5, #1
 801118e:	bf0c      	ite	eq
 8011190:	f003 0201 	andeq.w	r2, r3, #1
 8011194:	2200      	movne	r2, #0
 8011196:	330e      	adds	r3, #14
 8011198:	4604      	mov	r4, r0
 801119a:	441a      	add	r2, r3
 801119c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80111a0:	9001      	str	r0, [sp, #4]
 80111a2:	2101      	movs	r1, #1
 80111a4:	9100      	str	r1, [sp, #0]
 80111a6:	b292      	uxth	r2, r2
 80111a8:	9903      	ldr	r1, [sp, #12]
 80111aa:	ab04      	add	r3, sp, #16
 80111ac:	4620      	mov	r0, r4
 80111ae:	f001 fb19 	bl	80127e4 <uxr_prepare_stream_to_write_submessage>
 80111b2:	b918      	cbnz	r0, 80111bc <uxr_common_create_entity+0x3c>
 80111b4:	4604      	mov	r4, r0
 80111b6:	4620      	mov	r0, r4
 80111b8:	b00d      	add	sp, #52	; 0x34
 80111ba:	bd30      	pop	{r4, r5, pc}
 80111bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111be:	9902      	ldr	r1, [sp, #8]
 80111c0:	4620      	mov	r0, r4
 80111c2:	f001 fc49 	bl	8012a58 <uxr_init_base_object_request>
 80111c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80111c8:	4604      	mov	r4, r0
 80111ca:	a804      	add	r0, sp, #16
 80111cc:	f003 fa56 	bl	801467c <uxr_serialize_CREATE_Payload>
 80111d0:	4620      	mov	r0, r4
 80111d2:	b00d      	add	sp, #52	; 0x34
 80111d4:	bd30      	pop	{r4, r5, pc}
 80111d6:	bf00      	nop

080111d8 <uxr_buffer_create_participant_bin>:
 80111d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111da:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80111de:	ac11      	add	r4, sp, #68	; 0x44
 80111e0:	9103      	str	r1, [sp, #12]
 80111e2:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 80111e4:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 80111e8:	2103      	movs	r1, #3
 80111ea:	7221      	strb	r1, [r4, #8]
 80111ec:	2301      	movs	r3, #1
 80111ee:	2100      	movs	r1, #0
 80111f0:	7123      	strb	r3, [r4, #4]
 80111f2:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 80111f6:	9202      	str	r2, [sp, #8]
 80111f8:	4605      	mov	r5, r0
 80111fa:	f88d 1014 	strb.w	r1, [sp, #20]
 80111fe:	b1ce      	cbz	r6, 8011234 <uxr_buffer_create_participant_bin+0x5c>
 8011200:	f88d 301c 	strb.w	r3, [sp, #28]
 8011204:	9608      	str	r6, [sp, #32]
 8011206:	a809      	add	r0, sp, #36	; 0x24
 8011208:	f44f 7200 	mov.w	r2, #512	; 0x200
 801120c:	a915      	add	r1, sp, #84	; 0x54
 801120e:	f7ff fecf 	bl	8010fb0 <ucdr_init_buffer>
 8011212:	a905      	add	r1, sp, #20
 8011214:	a809      	add	r0, sp, #36	; 0x24
 8011216:	f002 fdf9 	bl	8013e0c <uxr_serialize_OBJK_DomainParticipant_Binary>
 801121a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801121c:	9401      	str	r4, [sp, #4]
 801121e:	b283      	uxth	r3, r0
 8011220:	9700      	str	r7, [sp, #0]
 8011222:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011226:	60e0      	str	r0, [r4, #12]
 8011228:	4628      	mov	r0, r5
 801122a:	f7ff ffa9 	bl	8011180 <uxr_common_create_entity>
 801122e:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8011232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011234:	f88d 601c 	strb.w	r6, [sp, #28]
 8011238:	e7e5      	b.n	8011206 <uxr_buffer_create_participant_bin+0x2e>
 801123a:	bf00      	nop

0801123c <uxr_buffer_create_topic_bin>:
 801123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801123e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011242:	ac13      	add	r4, sp, #76	; 0x4c
 8011244:	4605      	mov	r5, r0
 8011246:	9105      	str	r1, [sp, #20]
 8011248:	4618      	mov	r0, r3
 801124a:	a997      	add	r1, sp, #604	; 0x25c
 801124c:	2602      	movs	r6, #2
 801124e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011252:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8011256:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 801125a:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 801125c:	f000 fa54 	bl	8011708 <uxr_object_id_to_raw>
 8011260:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8011262:	9206      	str	r2, [sp, #24]
 8011264:	2303      	movs	r3, #3
 8011266:	2101      	movs	r1, #1
 8011268:	7223      	strb	r3, [r4, #8]
 801126a:	a80b      	add	r0, sp, #44	; 0x2c
 801126c:	2300      	movs	r3, #0
 801126e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011272:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011276:	a917      	add	r1, sp, #92	; 0x5c
 8011278:	f88d 301c 	strb.w	r3, [sp, #28]
 801127c:	960a      	str	r6, [sp, #40]	; 0x28
 801127e:	f7ff fe97 	bl	8010fb0 <ucdr_init_buffer>
 8011282:	a906      	add	r1, sp, #24
 8011284:	a80b      	add	r0, sp, #44	; 0x2c
 8011286:	f002 fde3 	bl	8013e50 <uxr_serialize_OBJK_Topic_Binary>
 801128a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801128c:	9401      	str	r4, [sp, #4]
 801128e:	9700      	str	r7, [sp, #0]
 8011290:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011294:	4628      	mov	r0, r5
 8011296:	b2b3      	uxth	r3, r6
 8011298:	60e6      	str	r6, [r4, #12]
 801129a:	f7ff ff71 	bl	8011180 <uxr_common_create_entity>
 801129e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80112a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112a4 <uxr_buffer_create_publisher_bin>:
 80112a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112a6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80112aa:	ac0e      	add	r4, sp, #56	; 0x38
 80112ac:	4605      	mov	r5, r0
 80112ae:	9105      	str	r1, [sp, #20]
 80112b0:	4618      	mov	r0, r3
 80112b2:	2603      	movs	r6, #3
 80112b4:	a992      	add	r1, sp, #584	; 0x248
 80112b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80112ba:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80112be:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80112c2:	f000 fa21 	bl	8011708 <uxr_object_id_to_raw>
 80112c6:	2300      	movs	r3, #0
 80112c8:	a806      	add	r0, sp, #24
 80112ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112ce:	a912      	add	r1, sp, #72	; 0x48
 80112d0:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80112d4:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80112d8:	7226      	strb	r6, [r4, #8]
 80112da:	f7ff fe69 	bl	8010fb0 <ucdr_init_buffer>
 80112de:	a993      	add	r1, sp, #588	; 0x24c
 80112e0:	a806      	add	r0, sp, #24
 80112e2:	f002 fe69 	bl	8013fb8 <uxr_serialize_OBJK_Publisher_Binary>
 80112e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80112e8:	9700      	str	r7, [sp, #0]
 80112ea:	9401      	str	r4, [sp, #4]
 80112ec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80112f0:	4628      	mov	r0, r5
 80112f2:	b2b3      	uxth	r3, r6
 80112f4:	60e6      	str	r6, [r4, #12]
 80112f6:	f7ff ff43 	bl	8011180 <uxr_common_create_entity>
 80112fa:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80112fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011300 <uxr_buffer_create_subscriber_bin>:
 8011300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011302:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011306:	ac0e      	add	r4, sp, #56	; 0x38
 8011308:	4605      	mov	r5, r0
 801130a:	9105      	str	r1, [sp, #20]
 801130c:	4618      	mov	r0, r3
 801130e:	a992      	add	r1, sp, #584	; 0x248
 8011310:	2604      	movs	r6, #4
 8011312:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011316:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 801131a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801131e:	f000 f9f3 	bl	8011708 <uxr_object_id_to_raw>
 8011322:	2103      	movs	r1, #3
 8011324:	2300      	movs	r3, #0
 8011326:	a806      	add	r0, sp, #24
 8011328:	f44f 7200 	mov.w	r2, #512	; 0x200
 801132c:	7221      	strb	r1, [r4, #8]
 801132e:	a912      	add	r1, sp, #72	; 0x48
 8011330:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011334:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011338:	f7ff fe3a 	bl	8010fb0 <ucdr_init_buffer>
 801133c:	a993      	add	r1, sp, #588	; 0x24c
 801133e:	a806      	add	r0, sp, #24
 8011340:	f002 feea 	bl	8014118 <uxr_serialize_OBJK_Subscriber_Binary>
 8011344:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011346:	9700      	str	r7, [sp, #0]
 8011348:	9401      	str	r4, [sp, #4]
 801134a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801134e:	4628      	mov	r0, r5
 8011350:	b2b3      	uxth	r3, r6
 8011352:	60e6      	str	r6, [r4, #12]
 8011354:	f7ff ff14 	bl	8011180 <uxr_common_create_entity>
 8011358:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135e:	bf00      	nop

08011360 <uxr_buffer_create_datawriter_bin>:
 8011360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011364:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011368:	ac1d      	add	r4, sp, #116	; 0x74
 801136a:	2505      	movs	r5, #5
 801136c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011370:	9105      	str	r1, [sp, #20]
 8011372:	4606      	mov	r6, r0
 8011374:	a9a1      	add	r1, sp, #644	; 0x284
 8011376:	4618      	mov	r0, r3
 8011378:	7125      	strb	r5, [r4, #4]
 801137a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 801137e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011382:	2703      	movs	r7, #3
 8011384:	f000 f9c0 	bl	8011708 <uxr_object_id_to_raw>
 8011388:	a90e      	add	r1, sp, #56	; 0x38
 801138a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801138c:	7227      	strb	r7, [r4, #8]
 801138e:	f000 f9bb 	bl	8011708 <uxr_object_id_to_raw>
 8011392:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011396:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 801139a:	3d00      	subs	r5, #0
 801139c:	f04f 0300 	mov.w	r3, #0
 80113a0:	bf18      	it	ne
 80113a2:	2501      	movne	r5, #1
 80113a4:	2201      	movs	r2, #1
 80113a6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80113aa:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80113ae:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80113b2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80113b6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80113ba:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80113be:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80113c2:	bb89      	cbnz	r1, 8011428 <uxr_buffer_create_datawriter_bin+0xc8>
 80113c4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80113c8:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80113cc:	f04f 0c13 	mov.w	ip, #19
 80113d0:	250b      	movs	r5, #11
 80113d2:	2221      	movs	r2, #33	; 0x21
 80113d4:	2111      	movs	r1, #17
 80113d6:	2009      	movs	r0, #9
 80113d8:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 80113dc:	b923      	cbnz	r3, 80113e8 <uxr_buffer_create_datawriter_bin+0x88>
 80113de:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80113e2:	4672      	mov	r2, lr
 80113e4:	4661      	mov	r1, ip
 80113e6:	4628      	mov	r0, r5
 80113e8:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d025      	beq.n	801143c <uxr_buffer_create_datawriter_bin+0xdc>
 80113f0:	2b03      	cmp	r3, #3
 80113f2:	d029      	beq.n	8011448 <uxr_buffer_create_datawriter_bin+0xe8>
 80113f4:	b32b      	cbz	r3, 8011442 <uxr_buffer_create_datawriter_bin+0xe2>
 80113f6:	a806      	add	r0, sp, #24
 80113f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113fc:	a921      	add	r1, sp, #132	; 0x84
 80113fe:	f7ff fdd7 	bl	8010fb0 <ucdr_init_buffer>
 8011402:	a90e      	add	r1, sp, #56	; 0x38
 8011404:	a806      	add	r0, sp, #24
 8011406:	f002 ff39 	bl	801427c <uxr_serialize_OBJK_DataWriter_Binary>
 801140a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801140c:	9401      	str	r4, [sp, #4]
 801140e:	b283      	uxth	r3, r0
 8011410:	f8cd 8000 	str.w	r8, [sp]
 8011414:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011418:	60e0      	str	r0, [r4, #12]
 801141a:	4630      	mov	r0, r6
 801141c:	f7ff feb0 	bl	8011180 <uxr_common_create_entity>
 8011420:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011428:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801142c:	f04f 0c12 	mov.w	ip, #18
 8011430:	250a      	movs	r5, #10
 8011432:	2220      	movs	r2, #32
 8011434:	2110      	movs	r1, #16
 8011436:	2008      	movs	r0, #8
 8011438:	2702      	movs	r7, #2
 801143a:	e7cd      	b.n	80113d8 <uxr_buffer_create_datawriter_bin+0x78>
 801143c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011440:	e7d9      	b.n	80113f6 <uxr_buffer_create_datawriter_bin+0x96>
 8011442:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011446:	e7d6      	b.n	80113f6 <uxr_buffer_create_datawriter_bin+0x96>
 8011448:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801144c:	e7d3      	b.n	80113f6 <uxr_buffer_create_datawriter_bin+0x96>
 801144e:	bf00      	nop

08011450 <uxr_buffer_create_datareader_bin>:
 8011450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011454:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011458:	ac1f      	add	r4, sp, #124	; 0x7c
 801145a:	2506      	movs	r5, #6
 801145c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011460:	9105      	str	r1, [sp, #20]
 8011462:	4606      	mov	r6, r0
 8011464:	a9a3      	add	r1, sp, #652	; 0x28c
 8011466:	4618      	mov	r0, r3
 8011468:	7125      	strb	r5, [r4, #4]
 801146a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 801146e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011472:	2703      	movs	r7, #3
 8011474:	f000 f948 	bl	8011708 <uxr_object_id_to_raw>
 8011478:	a90e      	add	r1, sp, #56	; 0x38
 801147a:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 801147c:	7227      	strb	r7, [r4, #8]
 801147e:	f000 f943 	bl	8011708 <uxr_object_id_to_raw>
 8011482:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011486:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 801148a:	3d00      	subs	r5, #0
 801148c:	f04f 0300 	mov.w	r3, #0
 8011490:	bf18      	it	ne
 8011492:	2501      	movne	r5, #1
 8011494:	2201      	movs	r2, #1
 8011496:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801149a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801149e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80114a2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80114a6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80114aa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80114ae:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80114b2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80114b6:	bb89      	cbnz	r1, 801151c <uxr_buffer_create_datareader_bin+0xcc>
 80114b8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80114bc:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80114c0:	f04f 0c13 	mov.w	ip, #19
 80114c4:	250b      	movs	r5, #11
 80114c6:	2221      	movs	r2, #33	; 0x21
 80114c8:	2111      	movs	r1, #17
 80114ca:	2009      	movs	r0, #9
 80114cc:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 80114d0:	b923      	cbnz	r3, 80114dc <uxr_buffer_create_datareader_bin+0x8c>
 80114d2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80114d6:	4672      	mov	r2, lr
 80114d8:	4661      	mov	r1, ip
 80114da:	4628      	mov	r0, r5
 80114dc:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 80114e0:	2b01      	cmp	r3, #1
 80114e2:	d025      	beq.n	8011530 <uxr_buffer_create_datareader_bin+0xe0>
 80114e4:	2b03      	cmp	r3, #3
 80114e6:	d029      	beq.n	801153c <uxr_buffer_create_datareader_bin+0xec>
 80114e8:	b32b      	cbz	r3, 8011536 <uxr_buffer_create_datareader_bin+0xe6>
 80114ea:	a806      	add	r0, sp, #24
 80114ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114f0:	a923      	add	r1, sp, #140	; 0x8c
 80114f2:	f7ff fd5d 	bl	8010fb0 <ucdr_init_buffer>
 80114f6:	a90e      	add	r1, sp, #56	; 0x38
 80114f8:	a806      	add	r0, sp, #24
 80114fa:	f002 fe83 	bl	8014204 <uxr_serialize_OBJK_DataReader_Binary>
 80114fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011500:	9401      	str	r4, [sp, #4]
 8011502:	b283      	uxth	r3, r0
 8011504:	f8cd 8000 	str.w	r8, [sp]
 8011508:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801150c:	60e0      	str	r0, [r4, #12]
 801150e:	4630      	mov	r0, r6
 8011510:	f7ff fe36 	bl	8011180 <uxr_common_create_entity>
 8011514:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801151c:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011520:	f04f 0c12 	mov.w	ip, #18
 8011524:	250a      	movs	r5, #10
 8011526:	2220      	movs	r2, #32
 8011528:	2110      	movs	r1, #16
 801152a:	2008      	movs	r0, #8
 801152c:	2702      	movs	r7, #2
 801152e:	e7cd      	b.n	80114cc <uxr_buffer_create_datareader_bin+0x7c>
 8011530:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011534:	e7d9      	b.n	80114ea <uxr_buffer_create_datareader_bin+0x9a>
 8011536:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801153a:	e7d6      	b.n	80114ea <uxr_buffer_create_datareader_bin+0x9a>
 801153c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011540:	e7d3      	b.n	80114ea <uxr_buffer_create_datareader_bin+0x9a>
 8011542:	bf00      	nop

08011544 <get_custom_error>:
 8011544:	4b01      	ldr	r3, [pc, #4]	; (801154c <get_custom_error+0x8>)
 8011546:	7818      	ldrb	r0, [r3, #0]
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	20009dd4 	.word	0x20009dd4

08011550 <recv_custom_msg>:
 8011550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011554:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8011558:	b089      	sub	sp, #36	; 0x24
 801155a:	2600      	movs	r6, #0
 801155c:	4604      	mov	r4, r0
 801155e:	9305      	str	r3, [sp, #20]
 8011560:	468a      	mov	sl, r1
 8011562:	4693      	mov	fp, r2
 8011564:	f88d 601e 	strb.w	r6, [sp, #30]
 8011568:	b325      	cbz	r5, 80115b4 <recv_custom_msg+0x64>
 801156a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801156e:	f10d 081f 	add.w	r8, sp, #31
 8011572:	af05      	add	r7, sp, #20
 8011574:	f10d 061e 	add.w	r6, sp, #30
 8011578:	f44f 7500 	mov.w	r5, #512	; 0x200
 801157c:	e002      	b.n	8011584 <recv_custom_msg+0x34>
 801157e:	9b05      	ldr	r3, [sp, #20]
 8011580:	2b00      	cmp	r3, #0
 8011582:	dd0f      	ble.n	80115a4 <recv_custom_msg+0x54>
 8011584:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011588:	e9cd 5600 	strd	r5, r6, [sp]
 801158c:	4623      	mov	r3, r4
 801158e:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8011592:	4622      	mov	r2, r4
 8011594:	4648      	mov	r0, r9
 8011596:	f001 fc7d 	bl	8012e94 <uxr_read_framed_msg>
 801159a:	2800      	cmp	r0, #0
 801159c:	d0ef      	beq.n	801157e <recv_custom_msg+0x2e>
 801159e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80115a2:	b1b3      	cbz	r3, 80115d2 <recv_custom_msg+0x82>
 80115a4:	4b0f      	ldr	r3, [pc, #60]	; (80115e4 <recv_custom_msg+0x94>)
 80115a6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80115aa:	701a      	strb	r2, [r3, #0]
 80115ac:	2000      	movs	r0, #0
 80115ae:	b009      	add	sp, #36	; 0x24
 80115b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b4:	f10d 021f 	add.w	r2, sp, #31
 80115b8:	9200      	str	r2, [sp, #0]
 80115ba:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80115be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115c2:	4601      	mov	r1, r0
 80115c4:	47a8      	blx	r5
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d0ec      	beq.n	80115a4 <recv_custom_msg+0x54>
 80115ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1e8      	bne.n	80115a4 <recv_custom_msg+0x54>
 80115d2:	f8cb 0000 	str.w	r0, [fp]
 80115d6:	2001      	movs	r0, #1
 80115d8:	f8ca 4000 	str.w	r4, [sl]
 80115dc:	b009      	add	sp, #36	; 0x24
 80115de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e2:	bf00      	nop
 80115e4:	20009dd4 	.word	0x20009dd4

080115e8 <send_custom_msg>:
 80115e8:	b570      	push	{r4, r5, r6, lr}
 80115ea:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80115ee:	b086      	sub	sp, #24
 80115f0:	4616      	mov	r6, r2
 80115f2:	b975      	cbnz	r5, 8011612 <send_custom_msg+0x2a>
 80115f4:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80115f8:	f10d 0317 	add.w	r3, sp, #23
 80115fc:	47a0      	blx	r4
 80115fe:	b108      	cbz	r0, 8011604 <send_custom_msg+0x1c>
 8011600:	42b0      	cmp	r0, r6
 8011602:	d015      	beq.n	8011630 <send_custom_msg+0x48>
 8011604:	4b0c      	ldr	r3, [pc, #48]	; (8011638 <send_custom_msg+0x50>)
 8011606:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801160a:	701a      	strb	r2, [r3, #0]
 801160c:	2000      	movs	r0, #0
 801160e:	b006      	add	sp, #24
 8011610:	bd70      	pop	{r4, r5, r6, pc}
 8011612:	460b      	mov	r3, r1
 8011614:	2200      	movs	r2, #0
 8011616:	f10d 0117 	add.w	r1, sp, #23
 801161a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801161e:	9600      	str	r6, [sp, #0]
 8011620:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8011624:	4602      	mov	r2, r0
 8011626:	f200 2002 	addw	r0, r0, #514	; 0x202
 801162a:	f001 fa4b 	bl	8012ac4 <uxr_write_framed_msg>
 801162e:	e7e6      	b.n	80115fe <send_custom_msg+0x16>
 8011630:	2001      	movs	r0, #1
 8011632:	b006      	add	sp, #24
 8011634:	bd70      	pop	{r4, r5, r6, pc}
 8011636:	bf00      	nop
 8011638:	20009dd4 	.word	0x20009dd4

0801163c <uxr_set_custom_transport_callbacks>:
 801163c:	b430      	push	{r4, r5}
 801163e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8011642:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8011646:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801164a:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801164e:	bc30      	pop	{r4, r5}
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop

08011654 <uxr_init_custom_transport>:
 8011654:	b538      	push	{r3, r4, r5, lr}
 8011656:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801165a:	b303      	cbz	r3, 801169e <uxr_init_custom_transport+0x4a>
 801165c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8011660:	4604      	mov	r4, r0
 8011662:	b1e2      	cbz	r2, 801169e <uxr_init_custom_transport+0x4a>
 8011664:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8011668:	b1ca      	cbz	r2, 801169e <uxr_init_custom_transport+0x4a>
 801166a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801166e:	b1b2      	cbz	r2, 801169e <uxr_init_custom_transport+0x4a>
 8011670:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8011674:	4798      	blx	r3
 8011676:	4605      	mov	r5, r0
 8011678:	b188      	cbz	r0, 801169e <uxr_init_custom_transport+0x4a>
 801167a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801167e:	b98b      	cbnz	r3, 80116a4 <uxr_init_custom_transport+0x50>
 8011680:	480b      	ldr	r0, [pc, #44]	; (80116b0 <uxr_init_custom_transport+0x5c>)
 8011682:	490c      	ldr	r1, [pc, #48]	; (80116b4 <uxr_init_custom_transport+0x60>)
 8011684:	4a0c      	ldr	r2, [pc, #48]	; (80116b8 <uxr_init_custom_transport+0x64>)
 8011686:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 801168a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801168e:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8011692:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8011696:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801169a:	4628      	mov	r0, r5
 801169c:	bd38      	pop	{r3, r4, r5, pc}
 801169e:	2500      	movs	r5, #0
 80116a0:	4628      	mov	r0, r5
 80116a2:	bd38      	pop	{r3, r4, r5, pc}
 80116a4:	2100      	movs	r1, #0
 80116a6:	f204 2002 	addw	r0, r4, #514	; 0x202
 80116aa:	f001 fa05 	bl	8012ab8 <uxr_init_framing_io>
 80116ae:	e7e7      	b.n	8011680 <uxr_init_custom_transport+0x2c>
 80116b0:	080115e9 	.word	0x080115e9
 80116b4:	08011551 	.word	0x08011551
 80116b8:	08011545 	.word	0x08011545

080116bc <uxr_close_custom_transport>:
 80116bc:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80116c0:	4718      	bx	r3
 80116c2:	bf00      	nop

080116c4 <uxr_object_id>:
 80116c4:	b082      	sub	sp, #8
 80116c6:	2300      	movs	r3, #0
 80116c8:	f88d 1006 	strb.w	r1, [sp, #6]
 80116cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80116d0:	f360 030f 	bfi	r3, r0, #0, #16
 80116d4:	f362 431f 	bfi	r3, r2, #16, #16
 80116d8:	4618      	mov	r0, r3
 80116da:	b002      	add	sp, #8
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop

080116e0 <uxr_object_id_from_raw>:
 80116e0:	7843      	ldrb	r3, [r0, #1]
 80116e2:	7801      	ldrb	r1, [r0, #0]
 80116e4:	b082      	sub	sp, #8
 80116e6:	f003 000f 	and.w	r0, r3, #15
 80116ea:	f88d 0006 	strb.w	r0, [sp, #6]
 80116ee:	091b      	lsrs	r3, r3, #4
 80116f0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80116f4:	2200      	movs	r2, #0
 80116f6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80116fa:	f363 020f 	bfi	r2, r3, #0, #16
 80116fe:	f361 421f 	bfi	r2, r1, #16, #16
 8011702:	4610      	mov	r0, r2
 8011704:	b002      	add	sp, #8
 8011706:	4770      	bx	lr

08011708 <uxr_object_id_to_raw>:
 8011708:	4602      	mov	r2, r0
 801170a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801170e:	b082      	sub	sp, #8
 8011710:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011714:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011718:	700a      	strb	r2, [r1, #0]
 801171a:	704b      	strb	r3, [r1, #1]
 801171c:	b002      	add	sp, #8
 801171e:	4770      	bx	lr

08011720 <uxr_buffer_request_data>:
 8011720:	b530      	push	{r4, r5, lr}
 8011722:	b095      	sub	sp, #84	; 0x54
 8011724:	4604      	mov	r4, r0
 8011726:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011728:	9105      	str	r1, [sp, #20]
 801172a:	2d00      	cmp	r5, #0
 801172c:	bf14      	ite	ne
 801172e:	2101      	movne	r1, #1
 8011730:	2100      	moveq	r1, #0
 8011732:	9204      	str	r2, [sp, #16]
 8011734:	f04f 0200 	mov.w	r2, #0
 8011738:	9303      	str	r3, [sp, #12]
 801173a:	f88d 301c 	strb.w	r3, [sp, #28]
 801173e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011742:	f88d 201d 	strb.w	r2, [sp, #29]
 8011746:	f88d 201e 	strb.w	r2, [sp, #30]
 801174a:	d021      	beq.n	8011790 <uxr_buffer_request_data+0x70>
 801174c:	686a      	ldr	r2, [r5, #4]
 801174e:	682b      	ldr	r3, [r5, #0]
 8011750:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8011754:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011758:	2210      	movs	r2, #16
 801175a:	2000      	movs	r0, #0
 801175c:	2108      	movs	r1, #8
 801175e:	e9cd 1000 	strd	r1, r0, [sp]
 8011762:	ab0c      	add	r3, sp, #48	; 0x30
 8011764:	9905      	ldr	r1, [sp, #20]
 8011766:	4620      	mov	r0, r4
 8011768:	f001 f83c 	bl	80127e4 <uxr_prepare_stream_to_write_submessage>
 801176c:	b918      	cbnz	r0, 8011776 <uxr_buffer_request_data+0x56>
 801176e:	4604      	mov	r4, r0
 8011770:	4620      	mov	r0, r4
 8011772:	b015      	add	sp, #84	; 0x54
 8011774:	bd30      	pop	{r4, r5, pc}
 8011776:	9904      	ldr	r1, [sp, #16]
 8011778:	aa06      	add	r2, sp, #24
 801177a:	4620      	mov	r0, r4
 801177c:	f001 f96c 	bl	8012a58 <uxr_init_base_object_request>
 8011780:	a906      	add	r1, sp, #24
 8011782:	4604      	mov	r4, r0
 8011784:	a80c      	add	r0, sp, #48	; 0x30
 8011786:	f003 f8cf 	bl	8014928 <uxr_serialize_READ_DATA_Payload>
 801178a:	4620      	mov	r0, r4
 801178c:	b015      	add	sp, #84	; 0x54
 801178e:	bd30      	pop	{r4, r5, pc}
 8011790:	2208      	movs	r2, #8
 8011792:	e7e2      	b.n	801175a <uxr_buffer_request_data+0x3a>

08011794 <uxr_buffer_cancel_data>:
 8011794:	b530      	push	{r4, r5, lr}
 8011796:	b095      	sub	sp, #84	; 0x54
 8011798:	2400      	movs	r4, #0
 801179a:	2308      	movs	r3, #8
 801179c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80117a0:	9300      	str	r3, [sp, #0]
 80117a2:	9205      	str	r2, [sp, #20]
 80117a4:	2501      	movs	r5, #1
 80117a6:	ab0c      	add	r3, sp, #48	; 0x30
 80117a8:	2210      	movs	r2, #16
 80117aa:	f8ad 401c 	strh.w	r4, [sp, #28]
 80117ae:	f88d 401e 	strb.w	r4, [sp, #30]
 80117b2:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 80117b6:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 80117ba:	9103      	str	r1, [sp, #12]
 80117bc:	4604      	mov	r4, r0
 80117be:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80117c2:	f001 f80f 	bl	80127e4 <uxr_prepare_stream_to_write_submessage>
 80117c6:	b918      	cbnz	r0, 80117d0 <uxr_buffer_cancel_data+0x3c>
 80117c8:	4604      	mov	r4, r0
 80117ca:	4620      	mov	r0, r4
 80117cc:	b015      	add	sp, #84	; 0x54
 80117ce:	bd30      	pop	{r4, r5, pc}
 80117d0:	9905      	ldr	r1, [sp, #20]
 80117d2:	aa06      	add	r2, sp, #24
 80117d4:	4620      	mov	r0, r4
 80117d6:	f001 f93f 	bl	8012a58 <uxr_init_base_object_request>
 80117da:	a906      	add	r1, sp, #24
 80117dc:	4604      	mov	r4, r0
 80117de:	a80c      	add	r0, sp, #48	; 0x30
 80117e0:	f003 f8a2 	bl	8014928 <uxr_serialize_READ_DATA_Payload>
 80117e4:	4620      	mov	r0, r4
 80117e6:	b015      	add	sp, #84	; 0x54
 80117e8:	bd30      	pop	{r4, r5, pc}
 80117ea:	bf00      	nop

080117ec <read_submessage_format>:
 80117ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117f0:	b095      	sub	sp, #84	; 0x54
 80117f2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 80117f6:	b113      	cbz	r3, 80117fe <read_submessage_format+0x12>
 80117f8:	b015      	add	sp, #84	; 0x54
 80117fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117fe:	460c      	mov	r4, r1
 8011800:	4616      	mov	r6, r2
 8011802:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011806:	461d      	mov	r5, r3
 8011808:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801180a:	9304      	str	r3, [sp, #16]
 801180c:	1a52      	subs	r2, r2, r1
 801180e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011810:	9305      	str	r3, [sp, #20]
 8011812:	4607      	mov	r7, r0
 8011814:	a80c      	add	r0, sp, #48	; 0x30
 8011816:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801181a:	f7ff fbc9 	bl	8010fb0 <ucdr_init_buffer>
 801181e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011822:	a80c      	add	r0, sp, #48	; 0x30
 8011824:	f7ff fb9a 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 8011828:	69e3      	ldr	r3, [r4, #28]
 801182a:	b193      	cbz	r3, 8011852 <read_submessage_format+0x66>
 801182c:	f1b8 0f07 	cmp.w	r8, #7
 8011830:	751d      	strb	r5, [r3, #20]
 8011832:	d03e      	beq.n	80118b2 <read_submessage_format+0xc6>
 8011834:	f1b8 0f08 	cmp.w	r8, #8
 8011838:	d02c      	beq.n	8011894 <read_submessage_format+0xa8>
 801183a:	f1b8 0f06 	cmp.w	r8, #6
 801183e:	d011      	beq.n	8011864 <read_submessage_format+0x78>
 8011840:	2201      	movs	r2, #1
 8011842:	751a      	strb	r2, [r3, #20]
 8011844:	4631      	mov	r1, r6
 8011846:	4620      	mov	r0, r4
 8011848:	f7ff fc02 	bl	8011050 <ucdr_advance_buffer>
 801184c:	b015      	add	sp, #84	; 0x54
 801184e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011852:	f1b8 0f07 	cmp.w	r8, #7
 8011856:	d02c      	beq.n	80118b2 <read_submessage_format+0xc6>
 8011858:	f1b8 0f08 	cmp.w	r8, #8
 801185c:	d01a      	beq.n	8011894 <read_submessage_format+0xa8>
 801185e:	f1b8 0f06 	cmp.w	r8, #6
 8011862:	d1ef      	bne.n	8011844 <read_submessage_format+0x58>
 8011864:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8011868:	b18d      	cbz	r5, 801188e <read_submessage_format+0xa2>
 801186a:	2306      	movs	r3, #6
 801186c:	f88d 3016 	strb.w	r3, [sp, #22]
 8011870:	aa0c      	add	r2, sp, #48	; 0x30
 8011872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011876:	9302      	str	r3, [sp, #8]
 8011878:	9200      	str	r2, [sp, #0]
 801187a:	9b04      	ldr	r3, [sp, #16]
 801187c:	9905      	ldr	r1, [sp, #20]
 801187e:	9601      	str	r6, [sp, #4]
 8011880:	464a      	mov	r2, r9
 8011882:	4638      	mov	r0, r7
 8011884:	47a8      	blx	r5
 8011886:	2301      	movs	r3, #1
 8011888:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801188c:	69e3      	ldr	r3, [r4, #28]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1d6      	bne.n	8011840 <read_submessage_format+0x54>
 8011892:	e7d7      	b.n	8011844 <read_submessage_format+0x58>
 8011894:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011898:	2a00      	cmp	r2, #0
 801189a:	d0f8      	beq.n	801188e <read_submessage_format+0xa2>
 801189c:	a906      	add	r1, sp, #24
 801189e:	a80c      	add	r0, sp, #48	; 0x30
 80118a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80118a2:	f003 f907 	bl	8014ab4 <uxr_deserialize_SampleIdentity>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d13c      	bne.n	8011924 <read_submessage_format+0x138>
 80118aa:	69e3      	ldr	r3, [r4, #28]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d1c7      	bne.n	8011840 <read_submessage_format+0x54>
 80118b0:	e7c8      	b.n	8011844 <read_submessage_format+0x58>
 80118b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80118b6:	b132      	cbz	r2, 80118c6 <read_submessage_format+0xda>
 80118b8:	a906      	add	r1, sp, #24
 80118ba:	a80c      	add	r0, sp, #48	; 0x30
 80118bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80118be:	f002 fdb7 	bl	8014430 <uxr_deserialize_BaseObjectRequest>
 80118c2:	b930      	cbnz	r0, 80118d2 <read_submessage_format+0xe6>
 80118c4:	69e3      	ldr	r3, [r4, #28]
 80118c6:	68a2      	ldr	r2, [r4, #8]
 80118c8:	4432      	add	r2, r6
 80118ca:	60a2      	str	r2, [r4, #8]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d1b7      	bne.n	8011840 <read_submessage_format+0x54>
 80118d0:	e7b8      	b.n	8011844 <read_submessage_format+0x58>
 80118d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80118d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80118d8:	1a52      	subs	r2, r2, r1
 80118da:	a80c      	add	r0, sp, #48	; 0x30
 80118dc:	1aed      	subs	r5, r5, r3
 80118de:	f7ff fb67 	bl	8010fb0 <ucdr_init_buffer>
 80118e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80118e6:	a80c      	add	r0, sp, #48	; 0x30
 80118e8:	f7ff fb38 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 80118ec:	4435      	add	r5, r6
 80118ee:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80118f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80118f6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80118fa:	9002      	str	r0, [sp, #8]
 80118fc:	2207      	movs	r2, #7
 80118fe:	f88d 2016 	strb.w	r2, [sp, #22]
 8011902:	b2ad      	uxth	r5, r5
 8011904:	aa0c      	add	r2, sp, #48	; 0x30
 8011906:	9200      	str	r2, [sp, #0]
 8011908:	9501      	str	r5, [sp, #4]
 801190a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801190e:	b29b      	uxth	r3, r3
 8011910:	9905      	ldr	r1, [sp, #20]
 8011912:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8011916:	464a      	mov	r2, r9
 8011918:	4638      	mov	r0, r7
 801191a:	47a8      	blx	r5
 801191c:	2301      	movs	r3, #1
 801191e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011922:	e7cf      	b.n	80118c4 <read_submessage_format+0xd8>
 8011924:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801192a:	1a52      	subs	r2, r2, r1
 801192c:	a80c      	add	r0, sp, #48	; 0x30
 801192e:	1aed      	subs	r5, r5, r3
 8011930:	f7ff fb3e 	bl	8010fb0 <ucdr_init_buffer>
 8011934:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011938:	a80c      	add	r0, sp, #48	; 0x30
 801193a:	f7ff fb0f 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 801193e:	4435      	add	r5, r6
 8011940:	2308      	movs	r3, #8
 8011942:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8011946:	f88d 3016 	strb.w	r3, [sp, #22]
 801194a:	b2ad      	uxth	r5, r5
 801194c:	ab0c      	add	r3, sp, #48	; 0x30
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	9002      	str	r0, [sp, #8]
 8011952:	9501      	str	r5, [sp, #4]
 8011954:	ab06      	add	r3, sp, #24
 8011956:	9905      	ldr	r1, [sp, #20]
 8011958:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 801195c:	464a      	mov	r2, r9
 801195e:	4638      	mov	r0, r7
 8011960:	47a8      	blx	r5
 8011962:	2301      	movs	r3, #1
 8011964:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011968:	e79f      	b.n	80118aa <read_submessage_format+0xbe>
 801196a:	bf00      	nop

0801196c <on_get_fragmentation_info>:
 801196c:	b500      	push	{lr}
 801196e:	b08b      	sub	sp, #44	; 0x2c
 8011970:	4601      	mov	r1, r0
 8011972:	2204      	movs	r2, #4
 8011974:	a802      	add	r0, sp, #8
 8011976:	f7ff fb1b 	bl	8010fb0 <ucdr_init_buffer>
 801197a:	f10d 0305 	add.w	r3, sp, #5
 801197e:	a802      	add	r0, sp, #8
 8011980:	f10d 0206 	add.w	r2, sp, #6
 8011984:	a901      	add	r1, sp, #4
 8011986:	f001 fe69 	bl	801365c <uxr_read_submessage_header>
 801198a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801198e:	2b0d      	cmp	r3, #13
 8011990:	d003      	beq.n	801199a <on_get_fragmentation_info+0x2e>
 8011992:	2000      	movs	r0, #0
 8011994:	b00b      	add	sp, #44	; 0x2c
 8011996:	f85d fb04 	ldr.w	pc, [sp], #4
 801199a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801199e:	f013 0f02 	tst.w	r3, #2
 80119a2:	bf14      	ite	ne
 80119a4:	2002      	movne	r0, #2
 80119a6:	2001      	moveq	r0, #1
 80119a8:	b00b      	add	sp, #44	; 0x2c
 80119aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80119ae:	bf00      	nop

080119b0 <read_submessage_get_info>:
 80119b0:	b570      	push	{r4, r5, r6, lr}
 80119b2:	2500      	movs	r5, #0
 80119b4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80119b8:	4604      	mov	r4, r0
 80119ba:	f44f 7224 	mov.w	r2, #656	; 0x290
 80119be:	460e      	mov	r6, r1
 80119c0:	a810      	add	r0, sp, #64	; 0x40
 80119c2:	4629      	mov	r1, r5
 80119c4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80119c8:	f008 f9fc 	bl	8019dc4 <memset>
 80119cc:	a903      	add	r1, sp, #12
 80119ce:	4630      	mov	r0, r6
 80119d0:	f002 feec 	bl	80147ac <uxr_deserialize_GET_INFO_Payload>
 80119d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80119d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80119dc:	4620      	mov	r0, r4
 80119de:	f001 f833 	bl	8012a48 <uxr_session_header_offset>
 80119e2:	462b      	mov	r3, r5
 80119e4:	9000      	str	r0, [sp, #0]
 80119e6:	a905      	add	r1, sp, #20
 80119e8:	a808      	add	r0, sp, #32
 80119ea:	220c      	movs	r2, #12
 80119ec:	f7ff face 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 80119f0:	a910      	add	r1, sp, #64	; 0x40
 80119f2:	a808      	add	r0, sp, #32
 80119f4:	f002 ff4c 	bl	8014890 <uxr_serialize_INFO_Payload>
 80119f8:	9b08      	ldr	r3, [sp, #32]
 80119fa:	462a      	mov	r2, r5
 80119fc:	4629      	mov	r1, r5
 80119fe:	4620      	mov	r0, r4
 8011a00:	f000 ffca 	bl	8012998 <uxr_stamp_session_header>
 8011a04:	a808      	add	r0, sp, #32
 8011a06:	f7ff faff 	bl	8011008 <ucdr_buffer_length>
 8011a0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	a905      	add	r1, sp, #20
 8011a10:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011a14:	47a0      	blx	r4
 8011a16:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8011a1a:	bd70      	pop	{r4, r5, r6, pc}

08011a1c <write_submessage_acknack.isra.0>:
 8011a1c:	b570      	push	{r4, r5, r6, lr}
 8011a1e:	b092      	sub	sp, #72	; 0x48
 8011a20:	4605      	mov	r5, r0
 8011a22:	460e      	mov	r6, r1
 8011a24:	4614      	mov	r4, r2
 8011a26:	f001 f80f 	bl	8012a48 <uxr_session_header_offset>
 8011a2a:	a905      	add	r1, sp, #20
 8011a2c:	9000      	str	r0, [sp, #0]
 8011a2e:	2300      	movs	r3, #0
 8011a30:	a80a      	add	r0, sp, #40	; 0x28
 8011a32:	2211      	movs	r2, #17
 8011a34:	f7ff faaa 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 8011a38:	2218      	movs	r2, #24
 8011a3a:	fb02 5404 	mla	r4, r2, r4, r5
 8011a3e:	2300      	movs	r3, #0
 8011a40:	2205      	movs	r2, #5
 8011a42:	3450      	adds	r4, #80	; 0x50
 8011a44:	a80a      	add	r0, sp, #40	; 0x28
 8011a46:	210a      	movs	r1, #10
 8011a48:	f001 fdee 	bl	8013628 <uxr_buffer_submessage_header>
 8011a4c:	a903      	add	r1, sp, #12
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f007 fb54 	bl	80190fc <uxr_compute_acknack>
 8011a54:	a903      	add	r1, sp, #12
 8011a56:	ba43      	rev16	r3, r0
 8011a58:	a80a      	add	r0, sp, #40	; 0x28
 8011a5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011a5e:	f88d 6010 	strb.w	r6, [sp, #16]
 8011a62:	f002 ff85 	bl	8014970 <uxr_serialize_ACKNACK_Payload>
 8011a66:	2200      	movs	r2, #0
 8011a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a6a:	4611      	mov	r1, r2
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	f000 ff93 	bl	8012998 <uxr_stamp_session_header>
 8011a72:	a80a      	add	r0, sp, #40	; 0x28
 8011a74:	f7ff fac8 	bl	8011008 <ucdr_buffer_length>
 8011a78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	a905      	add	r1, sp, #20
 8011a7e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011a82:	47a0      	blx	r4
 8011a84:	b012      	add	sp, #72	; 0x48
 8011a86:	bd70      	pop	{r4, r5, r6, pc}

08011a88 <uxr_init_session>:
 8011a88:	b5d0      	push	{r4, r6, r7, lr}
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	2600      	movs	r6, #0
 8011a8e:	2700      	movs	r7, #0
 8011a90:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8011a94:	4604      	mov	r4, r0
 8011a96:	6701      	str	r1, [r0, #112]	; 0x70
 8011a98:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8011a9c:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8011aa0:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8011aa4:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8011aa8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8011aac:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8011ab0:	2181      	movs	r1, #129	; 0x81
 8011ab2:	f000 fedb 	bl	801286c <uxr_init_session_info>
 8011ab6:	f104 0008 	add.w	r0, r4, #8
 8011aba:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8011abe:	f001 bccf 	b.w	8013460 <uxr_init_stream_storage>
 8011ac2:	bf00      	nop

08011ac4 <uxr_set_status_callback>:
 8011ac4:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop

08011acc <uxr_set_topic_callback>:
 8011acc:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop

08011ad4 <uxr_set_request_callback>:
 8011ad4:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop

08011adc <uxr_set_reply_callback>:
 8011adc:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop

08011ae4 <uxr_create_output_best_effort_stream>:
 8011ae4:	b510      	push	{r4, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	e9cd 2100 	strd	r2, r1, [sp]
 8011aec:	4604      	mov	r4, r0
 8011aee:	f000 ffab 	bl	8012a48 <uxr_session_header_offset>
 8011af2:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011af6:	4603      	mov	r3, r0
 8011af8:	f104 0008 	add.w	r0, r4, #8
 8011afc:	b004      	add	sp, #16
 8011afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b02:	f001 bcf7 	b.w	80134f4 <uxr_add_output_best_effort_buffer>
 8011b06:	bf00      	nop

08011b08 <uxr_create_output_reliable_stream>:
 8011b08:	b530      	push	{r4, r5, lr}
 8011b0a:	b089      	sub	sp, #36	; 0x24
 8011b0c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011b10:	9303      	str	r3, [sp, #12]
 8011b12:	4604      	mov	r4, r0
 8011b14:	f000 ff98 	bl	8012a48 <uxr_session_header_offset>
 8011b18:	4605      	mov	r5, r0
 8011b1a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011b1e:	9905      	ldr	r1, [sp, #20]
 8011b20:	9500      	str	r5, [sp, #0]
 8011b22:	f104 0008 	add.w	r0, r4, #8
 8011b26:	f001 fcf7 	bl	8013518 <uxr_add_output_reliable_buffer>
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	b2c3      	uxtb	r3, r0
 8011b2e:	f363 0207 	bfi	r2, r3, #0, #8
 8011b32:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011b36:	f363 220f 	bfi	r2, r3, #8, #8
 8011b3a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011b3e:	f363 4217 	bfi	r2, r3, #16, #8
 8011b42:	0e03      	lsrs	r3, r0, #24
 8011b44:	f363 621f 	bfi	r2, r3, #24, #8
 8011b48:	4610      	mov	r0, r2
 8011b4a:	b009      	add	sp, #36	; 0x24
 8011b4c:	bd30      	pop	{r4, r5, pc}
 8011b4e:	bf00      	nop

08011b50 <uxr_create_input_best_effort_stream>:
 8011b50:	b082      	sub	sp, #8
 8011b52:	3008      	adds	r0, #8
 8011b54:	b002      	add	sp, #8
 8011b56:	f001 bcf9 	b.w	801354c <uxr_add_input_best_effort_buffer>
 8011b5a:	bf00      	nop

08011b5c <uxr_create_input_reliable_stream>:
 8011b5c:	b510      	push	{r4, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	4c0b      	ldr	r4, [pc, #44]	; (8011b90 <uxr_create_input_reliable_stream+0x34>)
 8011b62:	9400      	str	r4, [sp, #0]
 8011b64:	3008      	adds	r0, #8
 8011b66:	f001 fd07 	bl	8013578 <uxr_add_input_reliable_buffer>
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	b2c3      	uxtb	r3, r0
 8011b6e:	f363 0207 	bfi	r2, r3, #0, #8
 8011b72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011b76:	f363 220f 	bfi	r2, r3, #8, #8
 8011b7a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011b7e:	f363 4217 	bfi	r2, r3, #16, #8
 8011b82:	0e03      	lsrs	r3, r0, #24
 8011b84:	f363 621f 	bfi	r2, r3, #24, #8
 8011b88:	4610      	mov	r0, r2
 8011b8a:	b004      	add	sp, #16
 8011b8c:	bd10      	pop	{r4, pc}
 8011b8e:	bf00      	nop
 8011b90:	0801196d 	.word	0x0801196d

08011b94 <uxr_epoch_nanos>:
 8011b94:	b510      	push	{r4, lr}
 8011b96:	4604      	mov	r4, r0
 8011b98:	f001 fda8 	bl	80136ec <uxr_nanos>
 8011b9c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8011ba0:	1ac0      	subs	r0, r0, r3
 8011ba2:	eb61 0102 	sbc.w	r1, r1, r2
 8011ba6:	bd10      	pop	{r4, pc}

08011ba8 <uxr_flash_output_streams>:
 8011ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bac:	7e03      	ldrb	r3, [r0, #24]
 8011bae:	b084      	sub	sp, #16
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	b1fb      	cbz	r3, 8011bf4 <uxr_flash_output_streams+0x4c>
 8011bb4:	f04f 0900 	mov.w	r9, #0
 8011bb8:	4648      	mov	r0, r9
 8011bba:	f10d 0802 	add.w	r8, sp, #2
 8011bbe:	af03      	add	r7, sp, #12
 8011bc0:	ae02      	add	r6, sp, #8
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8011bca:	f001 fbf3 	bl	80133b4 <uxr_stream_id>
 8011bce:	3508      	adds	r5, #8
 8011bd0:	4684      	mov	ip, r0
 8011bd2:	4643      	mov	r3, r8
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	463a      	mov	r2, r7
 8011bd8:	4631      	mov	r1, r6
 8011bda:	f8cd c004 	str.w	ip, [sp, #4]
 8011bde:	f007 fb15 	bl	801920c <uxr_prepare_best_effort_buffer_to_send>
 8011be2:	2800      	cmp	r0, #0
 8011be4:	d13d      	bne.n	8011c62 <uxr_flash_output_streams+0xba>
 8011be6:	7e23      	ldrb	r3, [r4, #24]
 8011be8:	f109 0901 	add.w	r9, r9, #1
 8011bec:	fa5f f089 	uxtb.w	r0, r9
 8011bf0:	4283      	cmp	r3, r0
 8011bf2:	d8e6      	bhi.n	8011bc2 <uxr_flash_output_streams+0x1a>
 8011bf4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011bf8:	b383      	cbz	r3, 8011c5c <uxr_flash_output_streams+0xb4>
 8011bfa:	f04f 0900 	mov.w	r9, #0
 8011bfe:	4648      	mov	r0, r9
 8011c00:	f10d 0802 	add.w	r8, sp, #2
 8011c04:	af03      	add	r7, sp, #12
 8011c06:	ae02      	add	r6, sp, #8
 8011c08:	2201      	movs	r2, #1
 8011c0a:	2102      	movs	r1, #2
 8011c0c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011c10:	f001 fbd0 	bl	80133b4 <uxr_stream_id>
 8011c14:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011c18:	3520      	adds	r5, #32
 8011c1a:	9001      	str	r0, [sp, #4]
 8011c1c:	e00c      	b.n	8011c38 <uxr_flash_output_streams+0x90>
 8011c1e:	9b02      	ldr	r3, [sp, #8]
 8011c20:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011c24:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011c28:	f000 feb6 	bl	8012998 <uxr_stamp_session_header>
 8011c2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011c2e:	9a03      	ldr	r2, [sp, #12]
 8011c30:	9902      	ldr	r1, [sp, #8]
 8011c32:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8011c36:	47d0      	blx	sl
 8011c38:	4643      	mov	r3, r8
 8011c3a:	463a      	mov	r2, r7
 8011c3c:	4631      	mov	r1, r6
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f007 fcec 	bl	801961c <uxr_prepare_next_reliable_buffer_to_send>
 8011c44:	4603      	mov	r3, r0
 8011c46:	4620      	mov	r0, r4
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1e8      	bne.n	8011c1e <uxr_flash_output_streams+0x76>
 8011c4c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011c50:	f109 0901 	add.w	r9, r9, #1
 8011c54:	fa5f f089 	uxtb.w	r0, r9
 8011c58:	4283      	cmp	r3, r0
 8011c5a:	d8d5      	bhi.n	8011c08 <uxr_flash_output_streams+0x60>
 8011c5c:	b004      	add	sp, #16
 8011c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c62:	9b02      	ldr	r3, [sp, #8]
 8011c64:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011c68:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f000 fe93 	bl	8012998 <uxr_stamp_session_header>
 8011c72:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011c74:	9a03      	ldr	r2, [sp, #12]
 8011c76:	9902      	ldr	r1, [sp, #8]
 8011c78:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011c7c:	47a8      	blx	r5
 8011c7e:	f109 0901 	add.w	r9, r9, #1
 8011c82:	7e23      	ldrb	r3, [r4, #24]
 8011c84:	fa5f f089 	uxtb.w	r0, r9
 8011c88:	4283      	cmp	r3, r0
 8011c8a:	d89a      	bhi.n	8011bc2 <uxr_flash_output_streams+0x1a>
 8011c8c:	e7b2      	b.n	8011bf4 <uxr_flash_output_streams+0x4c>
 8011c8e:	bf00      	nop

08011c90 <read_submessage_info>:
 8011c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c94:	460d      	mov	r5, r1
 8011c96:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011c9a:	4669      	mov	r1, sp
 8011c9c:	4607      	mov	r7, r0
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f002 fc8a 	bl	80145b8 <uxr_deserialize_BaseObjectReply>
 8011ca4:	a902      	add	r1, sp, #8
 8011ca6:	4604      	mov	r4, r0
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011cae:	f006 f905 	bl	8017ebc <ucdr_deserialize_bool>
 8011cb2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011cb6:	4004      	ands	r4, r0
 8011cb8:	b2e4      	uxtb	r4, r4
 8011cba:	b95b      	cbnz	r3, 8011cd4 <read_submessage_info+0x44>
 8011cbc:	a987      	add	r1, sp, #540	; 0x21c
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	f006 f8fc 	bl	8017ebc <ucdr_deserialize_bool>
 8011cc4:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8011cc8:	4606      	mov	r6, r0
 8011cca:	b94b      	cbnz	r3, 8011ce0 <read_submessage_info+0x50>
 8011ccc:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd4:	a903      	add	r1, sp, #12
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f002 fafc 	bl	80142d4 <uxr_deserialize_ObjectVariant>
 8011cdc:	4004      	ands	r4, r0
 8011cde:	e7ed      	b.n	8011cbc <read_submessage_info+0x2c>
 8011ce0:	a988      	add	r1, sp, #544	; 0x220
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	f006 f91a 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8011ce8:	4234      	tst	r4, r6
 8011cea:	d0ef      	beq.n	8011ccc <read_submessage_info+0x3c>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d0ed      	beq.n	8011ccc <read_submessage_info+0x3c>
 8011cf0:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8011cf4:	2b0d      	cmp	r3, #13
 8011cf6:	d1e9      	bne.n	8011ccc <read_submessage_info+0x3c>
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	a98a      	add	r1, sp, #552	; 0x228
 8011cfc:	f006 feb4 	bl	8018a68 <ucdr_deserialize_int16_t>
 8011d00:	b140      	cbz	r0, 8011d14 <read_submessage_info+0x84>
 8011d02:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	dd07      	ble.n	8011d1a <read_submessage_info+0x8a>
 8011d0a:	f1b8 0f00 	cmp.w	r8, #0
 8011d0e:	bf14      	ite	ne
 8011d10:	2001      	movne	r0, #1
 8011d12:	2002      	moveq	r0, #2
 8011d14:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8011d18:	e7d8      	b.n	8011ccc <read_submessage_info+0x3c>
 8011d1a:	2000      	movs	r0, #0
 8011d1c:	e7fa      	b.n	8011d14 <read_submessage_info+0x84>
 8011d1e:	bf00      	nop

08011d20 <read_submessage_list>:
 8011d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d24:	b098      	sub	sp, #96	; 0x60
 8011d26:	f8df 9304 	ldr.w	r9, [pc, #772]	; 801202c <read_submessage_list+0x30c>
 8011d2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011d2c:	4604      	mov	r4, r0
 8011d2e:	4688      	mov	r8, r1
 8011d30:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8011d34:	aa0e      	add	r2, sp, #56	; 0x38
 8011d36:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8011d3a:	4640      	mov	r0, r8
 8011d3c:	f001 fc8e 	bl	801365c <uxr_read_submessage_header>
 8011d40:	2800      	cmp	r0, #0
 8011d42:	f000 813d 	beq.w	8011fc0 <read_submessage_list+0x2a0>
 8011d46:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8011d4a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8011d4e:	3b02      	subs	r3, #2
 8011d50:	2b0d      	cmp	r3, #13
 8011d52:	d8ed      	bhi.n	8011d30 <read_submessage_list+0x10>
 8011d54:	a101      	add	r1, pc, #4	; (adr r1, 8011d5c <read_submessage_list+0x3c>)
 8011d56:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d5a:	bf00      	nop
 8011d5c:	08011fb7 	.word	0x08011fb7
 8011d60:	08011d31 	.word	0x08011d31
 8011d64:	08011fa7 	.word	0x08011fa7
 8011d68:	08011f4b 	.word	0x08011f4b
 8011d6c:	08011f41 	.word	0x08011f41
 8011d70:	08011d31 	.word	0x08011d31
 8011d74:	08011d31 	.word	0x08011d31
 8011d78:	08011ea3 	.word	0x08011ea3
 8011d7c:	08011e35 	.word	0x08011e35
 8011d80:	08011df3 	.word	0x08011df3
 8011d84:	08011d31 	.word	0x08011d31
 8011d88:	08011d31 	.word	0x08011d31
 8011d8c:	08011d31 	.word	0x08011d31
 8011d90:	08011d95 	.word	0x08011d95
 8011d94:	a912      	add	r1, sp, #72	; 0x48
 8011d96:	4640      	mov	r0, r8
 8011d98:	f002 fe3a 	bl	8014a10 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011d9c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8011da0:	2d00      	cmp	r5, #0
 8011da2:	f000 8115 	beq.w	8011fd0 <read_submessage_list+0x2b0>
 8011da6:	f001 fca1 	bl	80136ec <uxr_nanos>
 8011daa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011dac:	460b      	mov	r3, r1
 8011dae:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011db0:	2700      	movs	r7, #0
 8011db2:	fbc9 6701 	smlal	r6, r7, r9, r1
 8011db6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011dba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011dc0:	460e      	mov	r6, r1
 8011dc2:	2700      	movs	r7, #0
 8011dc4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8011dc8:	9106      	str	r1, [sp, #24]
 8011dca:	fbc9 6700 	smlal	r6, r7, r9, r0
 8011dce:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011dd0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011dd4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011dd6:	2700      	movs	r7, #0
 8011dd8:	4608      	mov	r0, r1
 8011dda:	4639      	mov	r1, r7
 8011ddc:	fbc9 0106 	smlal	r0, r1, r9, r6
 8011de0:	e9cd 0100 	strd	r0, r1, [sp]
 8011de4:	4620      	mov	r0, r4
 8011de6:	47a8      	blx	r5
 8011de8:	f04f 0301 	mov.w	r3, #1
 8011dec:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8011df0:	e79e      	b.n	8011d30 <read_submessage_list+0x10>
 8011df2:	a912      	add	r1, sp, #72	; 0x48
 8011df4:	4640      	mov	r0, r8
 8011df6:	f002 fdf9 	bl	80149ec <uxr_deserialize_HEARTBEAT_Payload>
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011e00:	f001 fb02 	bl	8013408 <uxr_stream_id_from_raw>
 8011e04:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011e08:	4603      	mov	r3, r0
 8011e0a:	4629      	mov	r1, r5
 8011e0c:	f104 0008 	add.w	r0, r4, #8
 8011e10:	9311      	str	r3, [sp, #68]	; 0x44
 8011e12:	f001 fbe7 	bl	80135e4 <uxr_get_input_reliable_stream>
 8011e16:	2800      	cmp	r0, #0
 8011e18:	d08a      	beq.n	8011d30 <read_submessage_list+0x10>
 8011e1a:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8011e1e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8011e22:	f007 f95f 	bl	80190e4 <uxr_process_heartbeat>
 8011e26:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8011e2a:	462a      	mov	r2, r5
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	f7ff fdf5 	bl	8011a1c <write_submessage_acknack.isra.0>
 8011e32:	e77d      	b.n	8011d30 <read_submessage_list+0x10>
 8011e34:	a912      	add	r1, sp, #72	; 0x48
 8011e36:	4640      	mov	r0, r8
 8011e38:	f002 fdb0 	bl	801499c <uxr_deserialize_ACKNACK_Payload>
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011e42:	f001 fae1 	bl	8013408 <uxr_stream_id_from_raw>
 8011e46:	4603      	mov	r3, r0
 8011e48:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011e4c:	f104 0008 	add.w	r0, r4, #8
 8011e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e52:	f001 fbb1 	bl	80135b8 <uxr_get_output_reliable_stream>
 8011e56:	4605      	mov	r5, r0
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	f43f af69 	beq.w	8011d30 <read_submessage_list+0x10>
 8011e5e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8011e62:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8011e66:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8011e6a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011e6e:	b289      	uxth	r1, r1
 8011e70:	f007 fc7c 	bl	801976c <uxr_process_acknack>
 8011e74:	4628      	mov	r0, r5
 8011e76:	f007 fc3f 	bl	80196f8 <uxr_begin_output_nack_buffer_it>
 8011e7a:	af10      	add	r7, sp, #64	; 0x40
 8011e7c:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8011e80:	e005      	b.n	8011e8e <read_submessage_list+0x16e>
 8011e82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011e86:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011e88:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011e8c:	47b0      	blx	r6
 8011e8e:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8011e92:	aa11      	add	r2, sp, #68	; 0x44
 8011e94:	4639      	mov	r1, r7
 8011e96:	4628      	mov	r0, r5
 8011e98:	f007 fc30 	bl	80196fc <uxr_next_reliable_nack_buffer_to_send>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d1f0      	bne.n	8011e82 <read_submessage_list+0x162>
 8011ea0:	e746      	b.n	8011d30 <read_submessage_list+0x10>
 8011ea2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8011ea6:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8011eaa:	af10      	add	r7, sp, #64	; 0x40
 8011eac:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8011eb0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8011eb4:	4639      	mov	r1, r7
 8011eb6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011eba:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8011ebe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011ec2:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8011ecc:	f002 fab0 	bl	8014430 <uxr_deserialize_BaseObjectRequest>
 8011ed0:	4638      	mov	r0, r7
 8011ed2:	a911      	add	r1, sp, #68	; 0x44
 8011ed4:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8011ed8:	f000 fddc 	bl	8012a94 <uxr_parse_base_object_request>
 8011edc:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8011ee0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011ee2:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 8011ee6:	9112      	str	r1, [sp, #72]	; 0x48
 8011ee8:	3d04      	subs	r5, #4
 8011eea:	f006 060e 	and.w	r6, r6, #14
 8011eee:	b2ad      	uxth	r5, r5
 8011ef0:	f1ba 0f00 	cmp.w	sl, #0
 8011ef4:	d006      	beq.n	8011f04 <read_submessage_list+0x1e4>
 8011ef6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	463a      	mov	r2, r7
 8011efe:	2300      	movs	r3, #0
 8011f00:	4620      	mov	r0, r4
 8011f02:	47d0      	blx	sl
 8011f04:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011f06:	b168      	cbz	r0, 8011f24 <read_submessage_list+0x204>
 8011f08:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	3902      	subs	r1, #2
 8011f0e:	e002      	b.n	8011f16 <read_submessage_list+0x1f6>
 8011f10:	3301      	adds	r3, #1
 8011f12:	4283      	cmp	r3, r0
 8011f14:	d006      	beq.n	8011f24 <read_submessage_list+0x204>
 8011f16:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8011f1a:	42ba      	cmp	r2, r7
 8011f1c:	d1f8      	bne.n	8011f10 <read_submessage_list+0x1f0>
 8011f1e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8011f20:	2100      	movs	r1, #0
 8011f22:	54d1      	strb	r1, [r2, r3]
 8011f24:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011f26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011f28:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011f2c:	9302      	str	r3, [sp, #8]
 8011f2e:	e9cd 1000 	strd	r1, r0, [sp]
 8011f32:	4633      	mov	r3, r6
 8011f34:	462a      	mov	r2, r5
 8011f36:	4641      	mov	r1, r8
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f7ff fc57 	bl	80117ec <read_submessage_format>
 8011f3e:	e6f7      	b.n	8011d30 <read_submessage_list+0x10>
 8011f40:	4641      	mov	r1, r8
 8011f42:	4620      	mov	r0, r4
 8011f44:	f7ff fea4 	bl	8011c90 <read_submessage_info>
 8011f48:	e6f2      	b.n	8011d30 <read_submessage_list+0x10>
 8011f4a:	2a00      	cmp	r2, #0
 8011f4c:	d03b      	beq.n	8011fc6 <read_submessage_list+0x2a6>
 8011f4e:	a912      	add	r1, sp, #72	; 0x48
 8011f50:	4640      	mov	r0, r8
 8011f52:	f002 fc7f 	bl	8014854 <uxr_deserialize_STATUS_Payload>
 8011f56:	a910      	add	r1, sp, #64	; 0x40
 8011f58:	aa0f      	add	r2, sp, #60	; 0x3c
 8011f5a:	a812      	add	r0, sp, #72	; 0x48
 8011f5c:	f000 fd9a 	bl	8012a94 <uxr_parse_base_object_request>
 8011f60:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8011f64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011f66:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8011f6a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8011f6e:	9111      	str	r1, [sp, #68]	; 0x44
 8011f70:	b135      	cbz	r5, 8011f80 <read_submessage_list+0x260>
 8011f72:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011f76:	9300      	str	r3, [sp, #0]
 8011f78:	4632      	mov	r2, r6
 8011f7a:	463b      	mov	r3, r7
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	47a8      	blx	r5
 8011f80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f43f aed4 	beq.w	8011d30 <read_submessage_list+0x10>
 8011f88:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	3802      	subs	r0, #2
 8011f8e:	e003      	b.n	8011f98 <read_submessage_list+0x278>
 8011f90:	3101      	adds	r1, #1
 8011f92:	4299      	cmp	r1, r3
 8011f94:	f43f aecc 	beq.w	8011d30 <read_submessage_list+0x10>
 8011f98:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8011f9c:	42b2      	cmp	r2, r6
 8011f9e:	d1f7      	bne.n	8011f90 <read_submessage_list+0x270>
 8011fa0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011fa2:	545f      	strb	r7, [r3, r1]
 8011fa4:	e6c4      	b.n	8011d30 <read_submessage_list+0x10>
 8011fa6:	2a00      	cmp	r2, #0
 8011fa8:	f47f aec2 	bne.w	8011d30 <read_submessage_list+0x10>
 8011fac:	4641      	mov	r1, r8
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 fcb4 	bl	801291c <uxr_read_create_session_status>
 8011fb4:	e6bc      	b.n	8011d30 <read_submessage_list+0x10>
 8011fb6:	4641      	mov	r1, r8
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f7ff fcf9 	bl	80119b0 <read_submessage_get_info>
 8011fbe:	e6b7      	b.n	8011d30 <read_submessage_list+0x10>
 8011fc0:	b018      	add	sp, #96	; 0x60
 8011fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc6:	4641      	mov	r1, r8
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f000 fcb3 	bl	8012934 <uxr_read_delete_session_status>
 8011fce:	e6af      	b.n	8011d30 <read_submessage_list+0x10>
 8011fd0:	f001 fb8c 	bl	80136ec <uxr_nanos>
 8011fd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011fd6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011fda:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011fdc:	2700      	movs	r7, #0
 8011fde:	fbc9 6703 	smlal	r6, r7, r9, r3
 8011fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fe4:	eb16 0c00 	adds.w	ip, r6, r0
 8011fe8:	4618      	mov	r0, r3
 8011fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011fec:	eb47 0e01 	adc.w	lr, r7, r1
 8011ff0:	461e      	mov	r6, r3
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	2700      	movs	r7, #0
 8011ff6:	fbc9 0105 	smlal	r0, r1, r9, r5
 8011ffa:	fbc9 6702 	smlal	r6, r7, r9, r2
 8011ffe:	1983      	adds	r3, r0, r6
 8012000:	eb41 0207 	adc.w	r2, r1, r7
 8012004:	ebbc 0303 	subs.w	r3, ip, r3
 8012008:	9308      	str	r3, [sp, #32]
 801200a:	eb6e 0302 	sbc.w	r3, lr, r2
 801200e:	9309      	str	r3, [sp, #36]	; 0x24
 8012010:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012014:	0fd3      	lsrs	r3, r2, #31
 8012016:	18c9      	adds	r1, r1, r3
 8012018:	f142 0200 	adc.w	r2, r2, #0
 801201c:	084b      	lsrs	r3, r1, #1
 801201e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012022:	1052      	asrs	r2, r2, #1
 8012024:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8012028:	e6de      	b.n	8011de8 <read_submessage_list+0xc8>
 801202a:	bf00      	nop
 801202c:	3b9aca00 	.word	0x3b9aca00

08012030 <listen_message_reliably>:
 8012030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012034:	1e0b      	subs	r3, r1, #0
 8012036:	b09d      	sub	sp, #116	; 0x74
 8012038:	bfb8      	it	lt
 801203a:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801203e:	9305      	str	r3, [sp, #20]
 8012040:	4607      	mov	r7, r0
 8012042:	f001 fb37 	bl	80136b4 <uxr_millis>
 8012046:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 801204a:	4681      	mov	r9, r0
 801204c:	2a00      	cmp	r2, #0
 801204e:	f000 8095 	beq.w	801217c <listen_message_reliably+0x14c>
 8012052:	2600      	movs	r6, #0
 8012054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012058:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801205c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012060:	4630      	mov	r0, r6
 8012062:	4688      	mov	r8, r1
 8012064:	46ca      	mov	sl, r9
 8012066:	e00f      	b.n	8012088 <listen_message_reliably+0x58>
 8012068:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801206c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012070:	42a2      	cmp	r2, r4
 8012072:	eb73 0105 	sbcs.w	r1, r3, r5
 8012076:	bfb8      	it	lt
 8012078:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 801207c:	3601      	adds	r6, #1
 801207e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012082:	b2f0      	uxtb	r0, r6
 8012084:	4283      	cmp	r3, r0
 8012086:	d951      	bls.n	801212c <listen_message_reliably+0xfc>
 8012088:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801208c:	2201      	movs	r2, #1
 801208e:	2102      	movs	r1, #2
 8012090:	f001 f990 	bl	80133b4 <uxr_stream_id>
 8012094:	00e4      	lsls	r4, r4, #3
 8012096:	f104 0520 	add.w	r5, r4, #32
 801209a:	443d      	add	r5, r7
 801209c:	4601      	mov	r1, r0
 801209e:	4643      	mov	r3, r8
 80120a0:	4652      	mov	r2, sl
 80120a2:	4628      	mov	r0, r5
 80120a4:	9109      	str	r1, [sp, #36]	; 0x24
 80120a6:	f007 fafb 	bl	80196a0 <uxr_update_output_stream_heartbeat_timestamp>
 80120aa:	193b      	adds	r3, r7, r4
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d0db      	beq.n	8012068 <listen_message_reliably+0x38>
 80120b0:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80120b4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80120b8:	4638      	mov	r0, r7
 80120ba:	f000 fcc5 	bl	8012a48 <uxr_session_header_offset>
 80120be:	3501      	adds	r5, #1
 80120c0:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 80120c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80120c8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80120cc:	9000      	str	r0, [sp, #0]
 80120ce:	2300      	movs	r3, #0
 80120d0:	4658      	mov	r0, fp
 80120d2:	2211      	movs	r2, #17
 80120d4:	a90c      	add	r1, sp, #48	; 0x30
 80120d6:	f7fe ff59 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 80120da:	2300      	movs	r3, #0
 80120dc:	2205      	movs	r2, #5
 80120de:	210b      	movs	r1, #11
 80120e0:	4658      	mov	r0, fp
 80120e2:	f001 faa1 	bl	8013628 <uxr_buffer_submessage_header>
 80120e6:	8968      	ldrh	r0, [r5, #10]
 80120e8:	2101      	movs	r1, #1
 80120ea:	f007 fb97 	bl	801981c <uxr_seq_num_add>
 80120ee:	892a      	ldrh	r2, [r5, #8]
 80120f0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80120f4:	4603      	mov	r3, r0
 80120f6:	a90a      	add	r1, sp, #40	; 0x28
 80120f8:	4658      	mov	r0, fp
 80120fa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80120fe:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 8012102:	f002 fc5f 	bl	80149c4 <uxr_serialize_HEARTBEAT_Payload>
 8012106:	2200      	movs	r2, #0
 8012108:	4611      	mov	r1, r2
 801210a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801210c:	4638      	mov	r0, r7
 801210e:	f000 fc43 	bl	8012998 <uxr_stamp_session_header>
 8012112:	4658      	mov	r0, fp
 8012114:	f7fe ff78 	bl	8011008 <ucdr_buffer_length>
 8012118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801211a:	4602      	mov	r2, r0
 801211c:	a90c      	add	r1, sp, #48	; 0x30
 801211e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012122:	443c      	add	r4, r7
 8012124:	47a8      	blx	r5
 8012126:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801212a:	e79f      	b.n	801206c <listen_message_reliably+0x3c>
 801212c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8012130:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012138:	4294      	cmp	r4, r2
 801213a:	bf08      	it	eq
 801213c:	428b      	cmpeq	r3, r1
 801213e:	d01d      	beq.n	801217c <listen_message_reliably+0x14c>
 8012140:	eba3 030a 	sub.w	r3, r3, sl
 8012144:	9905      	ldr	r1, [sp, #20]
 8012146:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012148:	2b00      	cmp	r3, #0
 801214a:	bf08      	it	eq
 801214c:	2301      	moveq	r3, #1
 801214e:	4299      	cmp	r1, r3
 8012150:	bfa8      	it	ge
 8012152:	4619      	movge	r1, r3
 8012154:	6894      	ldr	r4, [r2, #8]
 8012156:	6810      	ldr	r0, [r2, #0]
 8012158:	4689      	mov	r9, r1
 801215a:	460b      	mov	r3, r1
 801215c:	aa08      	add	r2, sp, #32
 801215e:	a907      	add	r1, sp, #28
 8012160:	47a0      	blx	r4
 8012162:	b968      	cbnz	r0, 8012180 <listen_message_reliably+0x150>
 8012164:	9b05      	ldr	r3, [sp, #20]
 8012166:	eba3 0309 	sub.w	r3, r3, r9
 801216a:	2b00      	cmp	r3, #0
 801216c:	9305      	str	r3, [sp, #20]
 801216e:	f73f af68 	bgt.w	8012042 <listen_message_reliably+0x12>
 8012172:	4604      	mov	r4, r0
 8012174:	4620      	mov	r0, r4
 8012176:	b01d      	add	sp, #116	; 0x74
 8012178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801217c:	9b05      	ldr	r3, [sp, #20]
 801217e:	e7e1      	b.n	8012144 <listen_message_reliably+0x114>
 8012180:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012184:	4604      	mov	r4, r0
 8012186:	a80c      	add	r0, sp, #48	; 0x30
 8012188:	f7fe ff12 	bl	8010fb0 <ucdr_init_buffer>
 801218c:	2500      	movs	r5, #0
 801218e:	a90c      	add	r1, sp, #48	; 0x30
 8012190:	f10d 031a 	add.w	r3, sp, #26
 8012194:	aa06      	add	r2, sp, #24
 8012196:	4638      	mov	r0, r7
 8012198:	f88d 5018 	strb.w	r5, [sp, #24]
 801219c:	f000 fc12 	bl	80129c4 <uxr_read_session_header>
 80121a0:	b918      	cbnz	r0, 80121aa <listen_message_reliably+0x17a>
 80121a2:	4620      	mov	r0, r4
 80121a4:	b01d      	add	sp, #116	; 0x74
 80121a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121aa:	4629      	mov	r1, r5
 80121ac:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80121b0:	f001 f92a 	bl	8013408 <uxr_stream_id_from_raw>
 80121b4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80121b8:	2e01      	cmp	r6, #1
 80121ba:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80121be:	900a      	str	r0, [sp, #40]	; 0x28
 80121c0:	fa5f fa80 	uxtb.w	sl, r0
 80121c4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80121c8:	d04b      	beq.n	8012262 <listen_message_reliably+0x232>
 80121ca:	2e02      	cmp	r6, #2
 80121cc:	d00f      	beq.n	80121ee <listen_message_reliably+0x1be>
 80121ce:	2e00      	cmp	r6, #0
 80121d0:	d1e7      	bne.n	80121a2 <listen_message_reliably+0x172>
 80121d2:	4631      	mov	r1, r6
 80121d4:	4630      	mov	r0, r6
 80121d6:	f001 f917 	bl	8013408 <uxr_stream_id_from_raw>
 80121da:	a90c      	add	r1, sp, #48	; 0x30
 80121dc:	4602      	mov	r2, r0
 80121de:	4638      	mov	r0, r7
 80121e0:	920a      	str	r2, [sp, #40]	; 0x28
 80121e2:	f7ff fd9d 	bl	8011d20 <read_submessage_list>
 80121e6:	4620      	mov	r0, r4
 80121e8:	b01d      	add	sp, #116	; 0x74
 80121ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ee:	4629      	mov	r1, r5
 80121f0:	f107 0008 	add.w	r0, r7, #8
 80121f4:	f001 f9f6 	bl	80135e4 <uxr_get_input_reliable_stream>
 80121f8:	4680      	mov	r8, r0
 80121fa:	b348      	cbz	r0, 8012250 <listen_message_reliably+0x220>
 80121fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80121fe:	9202      	str	r2, [sp, #8]
 8012200:	a80c      	add	r0, sp, #48	; 0x30
 8012202:	f7fe ff05 	bl	8011010 <ucdr_buffer_remaining>
 8012206:	4603      	mov	r3, r0
 8012208:	f10d 0019 	add.w	r0, sp, #25
 801220c:	9000      	str	r0, [sp, #0]
 801220e:	9a02      	ldr	r2, [sp, #8]
 8012210:	4649      	mov	r1, r9
 8012212:	4640      	mov	r0, r8
 8012214:	f006 fe68 	bl	8018ee8 <uxr_receive_reliable_message>
 8012218:	b1d0      	cbz	r0, 8012250 <listen_message_reliably+0x220>
 801221a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d037      	beq.n	8012292 <listen_message_reliably+0x262>
 8012222:	ae14      	add	r6, sp, #80	; 0x50
 8012224:	f04f 0902 	mov.w	r9, #2
 8012228:	e008      	b.n	801223c <listen_message_reliably+0x20c>
 801222a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801222e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8012232:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8012236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012238:	f7ff fd72 	bl	8011d20 <read_submessage_list>
 801223c:	4631      	mov	r1, r6
 801223e:	2204      	movs	r2, #4
 8012240:	4640      	mov	r0, r8
 8012242:	f006 fed1 	bl	8018fe8 <uxr_next_input_reliable_buffer_available>
 8012246:	4603      	mov	r3, r0
 8012248:	4631      	mov	r1, r6
 801224a:	4638      	mov	r0, r7
 801224c:	2b00      	cmp	r3, #0
 801224e:	d1ec      	bne.n	801222a <listen_message_reliably+0x1fa>
 8012250:	4638      	mov	r0, r7
 8012252:	462a      	mov	r2, r5
 8012254:	4651      	mov	r1, sl
 8012256:	f7ff fbe1 	bl	8011a1c <write_submessage_acknack.isra.0>
 801225a:	4620      	mov	r0, r4
 801225c:	b01d      	add	sp, #116	; 0x74
 801225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012262:	4629      	mov	r1, r5
 8012264:	f107 0008 	add.w	r0, r7, #8
 8012268:	f001 f9b2 	bl	80135d0 <uxr_get_input_best_effort_stream>
 801226c:	2800      	cmp	r0, #0
 801226e:	d098      	beq.n	80121a2 <listen_message_reliably+0x172>
 8012270:	4649      	mov	r1, r9
 8012272:	f006 fdb5 	bl	8018de0 <uxr_receive_best_effort_message>
 8012276:	2800      	cmp	r0, #0
 8012278:	d093      	beq.n	80121a2 <listen_message_reliably+0x172>
 801227a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801227e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8012282:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012288:	a90c      	add	r1, sp, #48	; 0x30
 801228a:	4638      	mov	r0, r7
 801228c:	f7ff fd48 	bl	8011d20 <read_submessage_list>
 8012290:	e787      	b.n	80121a2 <listen_message_reliably+0x172>
 8012292:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8012296:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801229a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801229e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122a0:	a90c      	add	r1, sp, #48	; 0x30
 80122a2:	4638      	mov	r0, r7
 80122a4:	f7ff fd3c 	bl	8011d20 <read_submessage_list>
 80122a8:	e7bb      	b.n	8012222 <listen_message_reliably+0x1f2>
 80122aa:	bf00      	nop

080122ac <uxr_run_session_timeout>:
 80122ac:	b570      	push	{r4, r5, r6, lr}
 80122ae:	4604      	mov	r4, r0
 80122b0:	460d      	mov	r5, r1
 80122b2:	f001 f9ff 	bl	80136b4 <uxr_millis>
 80122b6:	4606      	mov	r6, r0
 80122b8:	4620      	mov	r0, r4
 80122ba:	f7ff fc75 	bl	8011ba8 <uxr_flash_output_streams>
 80122be:	4629      	mov	r1, r5
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7ff feb5 	bl	8012030 <listen_message_reliably>
 80122c6:	f001 f9f5 	bl	80136b4 <uxr_millis>
 80122ca:	1b83      	subs	r3, r0, r6
 80122cc:	1ae9      	subs	r1, r5, r3
 80122ce:	2900      	cmp	r1, #0
 80122d0:	dcf6      	bgt.n	80122c0 <uxr_run_session_timeout+0x14>
 80122d2:	f104 0008 	add.w	r0, r4, #8
 80122d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122da:	f001 b98f 	b.w	80135fc <uxr_output_streams_confirmed>
 80122de:	bf00      	nop

080122e0 <uxr_run_session_until_data>:
 80122e0:	b570      	push	{r4, r5, r6, lr}
 80122e2:	4604      	mov	r4, r0
 80122e4:	460d      	mov	r5, r1
 80122e6:	f001 f9e5 	bl	80136b4 <uxr_millis>
 80122ea:	4606      	mov	r6, r0
 80122ec:	4620      	mov	r0, r4
 80122ee:	f7ff fc5b 	bl	8011ba8 <uxr_flash_output_streams>
 80122f2:	2300      	movs	r3, #0
 80122f4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80122f8:	4629      	mov	r1, r5
 80122fa:	e005      	b.n	8012308 <uxr_run_session_until_data+0x28>
 80122fc:	f001 f9da 	bl	80136b4 <uxr_millis>
 8012300:	1b83      	subs	r3, r0, r6
 8012302:	1ae9      	subs	r1, r5, r3
 8012304:	2900      	cmp	r1, #0
 8012306:	dd07      	ble.n	8012318 <uxr_run_session_until_data+0x38>
 8012308:	4620      	mov	r0, r4
 801230a:	f7ff fe91 	bl	8012030 <listen_message_reliably>
 801230e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012312:	2800      	cmp	r0, #0
 8012314:	d0f2      	beq.n	80122fc <uxr_run_session_until_data+0x1c>
 8012316:	bd70      	pop	{r4, r5, r6, pc}
 8012318:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801231c:	bd70      	pop	{r4, r5, r6, pc}
 801231e:	bf00      	nop

08012320 <uxr_run_session_until_confirm_delivery>:
 8012320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012324:	4606      	mov	r6, r0
 8012326:	460d      	mov	r5, r1
 8012328:	f001 f9c4 	bl	80136b4 <uxr_millis>
 801232c:	4607      	mov	r7, r0
 801232e:	4630      	mov	r0, r6
 8012330:	f7ff fc3a 	bl	8011ba8 <uxr_flash_output_streams>
 8012334:	2d00      	cmp	r5, #0
 8012336:	f106 0808 	add.w	r8, r6, #8
 801233a:	bfa8      	it	ge
 801233c:	462c      	movge	r4, r5
 801233e:	da07      	bge.n	8012350 <uxr_run_session_until_confirm_delivery+0x30>
 8012340:	e00e      	b.n	8012360 <uxr_run_session_until_confirm_delivery+0x40>
 8012342:	f7ff fe75 	bl	8012030 <listen_message_reliably>
 8012346:	f001 f9b5 	bl	80136b4 <uxr_millis>
 801234a:	1bc3      	subs	r3, r0, r7
 801234c:	1aec      	subs	r4, r5, r3
 801234e:	d407      	bmi.n	8012360 <uxr_run_session_until_confirm_delivery+0x40>
 8012350:	4640      	mov	r0, r8
 8012352:	f001 f953 	bl	80135fc <uxr_output_streams_confirmed>
 8012356:	4603      	mov	r3, r0
 8012358:	4621      	mov	r1, r4
 801235a:	4630      	mov	r0, r6
 801235c:	2b00      	cmp	r3, #0
 801235e:	d0f0      	beq.n	8012342 <uxr_run_session_until_confirm_delivery+0x22>
 8012360:	4640      	mov	r0, r8
 8012362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012366:	f001 b949 	b.w	80135fc <uxr_output_streams_confirmed>
 801236a:	bf00      	nop

0801236c <uxr_run_session_until_all_status>:
 801236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012370:	9d08      	ldr	r5, [sp, #32]
 8012372:	460f      	mov	r7, r1
 8012374:	4692      	mov	sl, r2
 8012376:	461c      	mov	r4, r3
 8012378:	4606      	mov	r6, r0
 801237a:	f7ff fc15 	bl	8011ba8 <uxr_flash_output_streams>
 801237e:	b125      	cbz	r5, 801238a <uxr_run_session_until_all_status+0x1e>
 8012380:	462a      	mov	r2, r5
 8012382:	21ff      	movs	r1, #255	; 0xff
 8012384:	4620      	mov	r0, r4
 8012386:	f007 fd1d 	bl	8019dc4 <memset>
 801238a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 801238e:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012390:	f001 f990 	bl	80136b4 <uxr_millis>
 8012394:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8012398:	f1aa 0a02 	sub.w	sl, sl, #2
 801239c:	4680      	mov	r8, r0
 801239e:	4639      	mov	r1, r7
 80123a0:	4630      	mov	r0, r6
 80123a2:	f7ff fe45 	bl	8012030 <listen_message_reliably>
 80123a6:	f001 f985 	bl	80136b4 <uxr_millis>
 80123aa:	eba0 0008 	sub.w	r0, r0, r8
 80123ae:	1a39      	subs	r1, r7, r0
 80123b0:	b33d      	cbz	r5, 8012402 <uxr_run_session_until_all_status+0x96>
 80123b2:	46cc      	mov	ip, r9
 80123b4:	464a      	mov	r2, r9
 80123b6:	2301      	movs	r3, #1
 80123b8:	e002      	b.n	80123c0 <uxr_run_session_until_all_status+0x54>
 80123ba:	42ab      	cmp	r3, r5
 80123bc:	d20c      	bcs.n	80123d8 <uxr_run_session_until_all_status+0x6c>
 80123be:	3301      	adds	r3, #1
 80123c0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80123c4:	2cff      	cmp	r4, #255	; 0xff
 80123c6:	d1f8      	bne.n	80123ba <uxr_run_session_until_all_status+0x4e>
 80123c8:	42ab      	cmp	r3, r5
 80123ca:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 80123ce:	d213      	bcs.n	80123f8 <uxr_run_session_until_all_status+0x8c>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d0f4      	beq.n	80123be <uxr_run_session_until_all_status+0x52>
 80123d4:	2900      	cmp	r1, #0
 80123d6:	dce3      	bgt.n	80123a0 <uxr_run_session_until_all_status+0x34>
 80123d8:	2300      	movs	r3, #0
 80123da:	444d      	add	r5, r9
 80123dc:	67f3      	str	r3, [r6, #124]	; 0x7c
 80123de:	e001      	b.n	80123e4 <uxr_run_session_until_all_status+0x78>
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d812      	bhi.n	801240a <uxr_run_session_until_all_status+0x9e>
 80123e4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80123e8:	4565      	cmp	r5, ip
 80123ea:	d1f9      	bne.n	80123e0 <uxr_run_session_until_all_status+0x74>
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	bf8c      	ite	hi
 80123f0:	2000      	movhi	r0, #0
 80123f2:	2001      	movls	r0, #1
 80123f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f8:	2900      	cmp	r1, #0
 80123fa:	dded      	ble.n	80123d8 <uxr_run_session_until_all_status+0x6c>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d1cf      	bne.n	80123a0 <uxr_run_session_until_all_status+0x34>
 8012400:	e7ea      	b.n	80123d8 <uxr_run_session_until_all_status+0x6c>
 8012402:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012404:	2001      	movs	r0, #1
 8012406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801240a:	2000      	movs	r0, #0
 801240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012410 <uxr_create_session>:
 8012410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012414:	ed2d 8b02 	vpush	{d8}
 8012418:	f100 0808 	add.w	r8, r0, #8
 801241c:	b0a9      	sub	sp, #164	; 0xa4
 801241e:	4604      	mov	r4, r0
 8012420:	4640      	mov	r0, r8
 8012422:	f001 f827 	bl	8013474 <uxr_reset_stream_storage>
 8012426:	4620      	mov	r0, r4
 8012428:	f000 fb0e 	bl	8012a48 <uxr_session_header_offset>
 801242c:	a909      	add	r1, sp, #36	; 0x24
 801242e:	9000      	str	r0, [sp, #0]
 8012430:	2300      	movs	r3, #0
 8012432:	a810      	add	r0, sp, #64	; 0x40
 8012434:	221c      	movs	r2, #28
 8012436:	f7fe fda9 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 801243a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801243c:	8a1a      	ldrh	r2, [r3, #16]
 801243e:	3a04      	subs	r2, #4
 8012440:	b292      	uxth	r2, r2
 8012442:	4620      	mov	r0, r4
 8012444:	a910      	add	r1, sp, #64	; 0x40
 8012446:	f000 fa23 	bl	8012890 <uxr_buffer_create_session>
 801244a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801244c:	4620      	mov	r0, r4
 801244e:	f000 fa8f 	bl	8012970 <uxr_stamp_create_session_header>
 8012452:	a810      	add	r0, sp, #64	; 0x40
 8012454:	f7fe fdd8 	bl	8011008 <ucdr_buffer_length>
 8012458:	23ff      	movs	r3, #255	; 0xff
 801245a:	ee08 0a10 	vmov	s16, r0
 801245e:	7163      	strb	r3, [r4, #5]
 8012460:	f04f 090a 	mov.w	r9, #10
 8012464:	46c2      	mov	sl, r8
 8012466:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012468:	ee18 2a10 	vmov	r2, s16
 801246c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012470:	a909      	add	r1, sp, #36	; 0x24
 8012472:	47a8      	blx	r5
 8012474:	f001 f91e 	bl	80136b4 <uxr_millis>
 8012478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801247c:	9002      	str	r0, [sp, #8]
 801247e:	e00c      	b.n	801249a <uxr_create_session+0x8a>
 8012480:	f001 f918 	bl	80136b4 <uxr_millis>
 8012484:	9b02      	ldr	r3, [sp, #8]
 8012486:	7962      	ldrb	r2, [r4, #5]
 8012488:	1ac0      	subs	r0, r0, r3
 801248a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801248e:	2b00      	cmp	r3, #0
 8012490:	f340 8094 	ble.w	80125bc <uxr_create_session+0x1ac>
 8012494:	2aff      	cmp	r2, #255	; 0xff
 8012496:	f040 8097 	bne.w	80125c8 <uxr_create_session+0x1b8>
 801249a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801249c:	a905      	add	r1, sp, #20
 801249e:	6895      	ldr	r5, [r2, #8]
 80124a0:	6810      	ldr	r0, [r2, #0]
 80124a2:	aa06      	add	r2, sp, #24
 80124a4:	47a8      	blx	r5
 80124a6:	2800      	cmp	r0, #0
 80124a8:	d0ea      	beq.n	8012480 <uxr_create_session+0x70>
 80124aa:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80124ae:	a818      	add	r0, sp, #96	; 0x60
 80124b0:	f7fe fd7e 	bl	8010fb0 <ucdr_init_buffer>
 80124b4:	2500      	movs	r5, #0
 80124b6:	f10d 0312 	add.w	r3, sp, #18
 80124ba:	aa04      	add	r2, sp, #16
 80124bc:	a918      	add	r1, sp, #96	; 0x60
 80124be:	4620      	mov	r0, r4
 80124c0:	f88d 5010 	strb.w	r5, [sp, #16]
 80124c4:	f000 fa7e 	bl	80129c4 <uxr_read_session_header>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d0d9      	beq.n	8012480 <uxr_create_session+0x70>
 80124cc:	4629      	mov	r1, r5
 80124ce:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80124d2:	f000 ff99 	bl	8013408 <uxr_stream_id_from_raw>
 80124d6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80124da:	2f01      	cmp	r7, #1
 80124dc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80124e0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80124e4:	fa5f f880 	uxtb.w	r8, r0
 80124e8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80124ec:	d04d      	beq.n	801258a <uxr_create_session+0x17a>
 80124ee:	2f02      	cmp	r7, #2
 80124f0:	d00c      	beq.n	801250c <uxr_create_session+0xfc>
 80124f2:	2f00      	cmp	r7, #0
 80124f4:	d1c4      	bne.n	8012480 <uxr_create_session+0x70>
 80124f6:	4639      	mov	r1, r7
 80124f8:	4638      	mov	r0, r7
 80124fa:	f000 ff85 	bl	8013408 <uxr_stream_id_from_raw>
 80124fe:	a918      	add	r1, sp, #96	; 0x60
 8012500:	4602      	mov	r2, r0
 8012502:	4620      	mov	r0, r4
 8012504:	9208      	str	r2, [sp, #32]
 8012506:	f7ff fc0b 	bl	8011d20 <read_submessage_list>
 801250a:	e7b9      	b.n	8012480 <uxr_create_session+0x70>
 801250c:	4629      	mov	r1, r5
 801250e:	4650      	mov	r0, sl
 8012510:	f001 f868 	bl	80135e4 <uxr_get_input_reliable_stream>
 8012514:	4606      	mov	r6, r0
 8012516:	b390      	cbz	r0, 801257e <uxr_create_session+0x16e>
 8012518:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801251a:	9203      	str	r2, [sp, #12]
 801251c:	a818      	add	r0, sp, #96	; 0x60
 801251e:	f7fe fd77 	bl	8011010 <ucdr_buffer_remaining>
 8012522:	4603      	mov	r3, r0
 8012524:	f10d 0011 	add.w	r0, sp, #17
 8012528:	9000      	str	r0, [sp, #0]
 801252a:	9a03      	ldr	r2, [sp, #12]
 801252c:	4659      	mov	r1, fp
 801252e:	4630      	mov	r0, r6
 8012530:	f006 fcda 	bl	8018ee8 <uxr_receive_reliable_message>
 8012534:	b318      	cbz	r0, 801257e <uxr_create_session+0x16e>
 8012536:	f89d 3011 	ldrb.w	r3, [sp, #17]
 801253a:	b9b3      	cbnz	r3, 801256a <uxr_create_session+0x15a>
 801253c:	f88d 8020 	strb.w	r8, [sp, #32]
 8012540:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012544:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012548:	9a08      	ldr	r2, [sp, #32]
 801254a:	a918      	add	r1, sp, #96	; 0x60
 801254c:	4620      	mov	r0, r4
 801254e:	f7ff fbe7 	bl	8011d20 <read_submessage_list>
 8012552:	e00a      	b.n	801256a <uxr_create_session+0x15a>
 8012554:	f04f 0302 	mov.w	r3, #2
 8012558:	f88d 8020 	strb.w	r8, [sp, #32]
 801255c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012560:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8012564:	9a08      	ldr	r2, [sp, #32]
 8012566:	f7ff fbdb 	bl	8011d20 <read_submessage_list>
 801256a:	a920      	add	r1, sp, #128	; 0x80
 801256c:	2204      	movs	r2, #4
 801256e:	4630      	mov	r0, r6
 8012570:	f006 fd3a 	bl	8018fe8 <uxr_next_input_reliable_buffer_available>
 8012574:	4603      	mov	r3, r0
 8012576:	a920      	add	r1, sp, #128	; 0x80
 8012578:	4620      	mov	r0, r4
 801257a:	2b00      	cmp	r3, #0
 801257c:	d1ea      	bne.n	8012554 <uxr_create_session+0x144>
 801257e:	462a      	mov	r2, r5
 8012580:	4641      	mov	r1, r8
 8012582:	4620      	mov	r0, r4
 8012584:	f7ff fa4a 	bl	8011a1c <write_submessage_acknack.isra.0>
 8012588:	e77a      	b.n	8012480 <uxr_create_session+0x70>
 801258a:	4629      	mov	r1, r5
 801258c:	4650      	mov	r0, sl
 801258e:	f001 f81f 	bl	80135d0 <uxr_get_input_best_effort_stream>
 8012592:	2800      	cmp	r0, #0
 8012594:	f43f af74 	beq.w	8012480 <uxr_create_session+0x70>
 8012598:	4659      	mov	r1, fp
 801259a:	f006 fc21 	bl	8018de0 <uxr_receive_best_effort_message>
 801259e:	2800      	cmp	r0, #0
 80125a0:	f43f af6e 	beq.w	8012480 <uxr_create_session+0x70>
 80125a4:	f88d 8020 	strb.w	r8, [sp, #32]
 80125a8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80125ac:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 80125b0:	9a08      	ldr	r2, [sp, #32]
 80125b2:	a918      	add	r1, sp, #96	; 0x60
 80125b4:	4620      	mov	r0, r4
 80125b6:	f7ff fbb3 	bl	8011d20 <read_submessage_list>
 80125ba:	e761      	b.n	8012480 <uxr_create_session+0x70>
 80125bc:	f1b9 0901 	subs.w	r9, r9, #1
 80125c0:	d002      	beq.n	80125c8 <uxr_create_session+0x1b8>
 80125c2:	2aff      	cmp	r2, #255	; 0xff
 80125c4:	f43f af4f 	beq.w	8012466 <uxr_create_session+0x56>
 80125c8:	b12a      	cbz	r2, 80125d6 <uxr_create_session+0x1c6>
 80125ca:	2000      	movs	r0, #0
 80125cc:	b029      	add	sp, #164	; 0xa4
 80125ce:	ecbd 8b02 	vpop	{d8}
 80125d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d6:	4650      	mov	r0, sl
 80125d8:	f000 ff4c 	bl	8013474 <uxr_reset_stream_storage>
 80125dc:	2001      	movs	r0, #1
 80125de:	b029      	add	sp, #164	; 0xa4
 80125e0:	ecbd 8b02 	vpop	{d8}
 80125e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080125e8 <wait_session_status>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	4604      	mov	r4, r0
 80125ee:	b09d      	sub	sp, #116	; 0x74
 80125f0:	20ff      	movs	r0, #255	; 0xff
 80125f2:	7160      	strb	r0, [r4, #5]
 80125f4:	9304      	str	r3, [sp, #16]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f000 80b8 	beq.w	801276c <wait_session_status+0x184>
 80125fc:	2300      	movs	r3, #0
 80125fe:	468b      	mov	fp, r1
 8012600:	4692      	mov	sl, r2
 8012602:	9303      	str	r3, [sp, #12]
 8012604:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012606:	4652      	mov	r2, sl
 8012608:	e9d3 0500 	ldrd	r0, r5, [r3]
 801260c:	4659      	mov	r1, fp
 801260e:	47a8      	blx	r5
 8012610:	f001 f850 	bl	80136b4 <uxr_millis>
 8012614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012618:	4605      	mov	r5, r0
 801261a:	e009      	b.n	8012630 <wait_session_status+0x48>
 801261c:	f001 f84a 	bl	80136b4 <uxr_millis>
 8012620:	1b40      	subs	r0, r0, r5
 8012622:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012626:	2b00      	cmp	r3, #0
 8012628:	dd42      	ble.n	80126b0 <wait_session_status+0xc8>
 801262a:	7960      	ldrb	r0, [r4, #5]
 801262c:	28ff      	cmp	r0, #255	; 0xff
 801262e:	d148      	bne.n	80126c2 <wait_session_status+0xda>
 8012630:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012632:	a908      	add	r1, sp, #32
 8012634:	6896      	ldr	r6, [r2, #8]
 8012636:	6810      	ldr	r0, [r2, #0]
 8012638:	aa09      	add	r2, sp, #36	; 0x24
 801263a:	47b0      	blx	r6
 801263c:	2800      	cmp	r0, #0
 801263e:	d0ed      	beq.n	801261c <wait_session_status+0x34>
 8012640:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012644:	a80c      	add	r0, sp, #48	; 0x30
 8012646:	f7fe fcb3 	bl	8010fb0 <ucdr_init_buffer>
 801264a:	2600      	movs	r6, #0
 801264c:	f10d 031e 	add.w	r3, sp, #30
 8012650:	aa07      	add	r2, sp, #28
 8012652:	a90c      	add	r1, sp, #48	; 0x30
 8012654:	4620      	mov	r0, r4
 8012656:	f88d 601c 	strb.w	r6, [sp, #28]
 801265a:	f000 f9b3 	bl	80129c4 <uxr_read_session_header>
 801265e:	2800      	cmp	r0, #0
 8012660:	d0dc      	beq.n	801261c <wait_session_status+0x34>
 8012662:	4631      	mov	r1, r6
 8012664:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012668:	f000 fece 	bl	8013408 <uxr_stream_id_from_raw>
 801266c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012670:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012674:	9302      	str	r3, [sp, #8]
 8012676:	2f01      	cmp	r7, #1
 8012678:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 801267c:	fa5f f880 	uxtb.w	r8, r0
 8012680:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012684:	d058      	beq.n	8012738 <wait_session_status+0x150>
 8012686:	2f02      	cmp	r7, #2
 8012688:	d021      	beq.n	80126ce <wait_session_status+0xe6>
 801268a:	2f00      	cmp	r7, #0
 801268c:	d1c6      	bne.n	801261c <wait_session_status+0x34>
 801268e:	4639      	mov	r1, r7
 8012690:	4638      	mov	r0, r7
 8012692:	f000 feb9 	bl	8013408 <uxr_stream_id_from_raw>
 8012696:	a90c      	add	r1, sp, #48	; 0x30
 8012698:	4602      	mov	r2, r0
 801269a:	4620      	mov	r0, r4
 801269c:	920b      	str	r2, [sp, #44]	; 0x2c
 801269e:	f7ff fb3f 	bl	8011d20 <read_submessage_list>
 80126a2:	f001 f807 	bl	80136b4 <uxr_millis>
 80126a6:	1b40      	subs	r0, r0, r5
 80126a8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	dcbc      	bgt.n	801262a <wait_session_status+0x42>
 80126b0:	9b03      	ldr	r3, [sp, #12]
 80126b2:	9a04      	ldr	r2, [sp, #16]
 80126b4:	7960      	ldrb	r0, [r4, #5]
 80126b6:	3301      	adds	r3, #1
 80126b8:	429a      	cmp	r2, r3
 80126ba:	9303      	str	r3, [sp, #12]
 80126bc:	d001      	beq.n	80126c2 <wait_session_status+0xda>
 80126be:	28ff      	cmp	r0, #255	; 0xff
 80126c0:	d0a0      	beq.n	8012604 <wait_session_status+0x1c>
 80126c2:	38ff      	subs	r0, #255	; 0xff
 80126c4:	bf18      	it	ne
 80126c6:	2001      	movne	r0, #1
 80126c8:	b01d      	add	sp, #116	; 0x74
 80126ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ce:	4631      	mov	r1, r6
 80126d0:	f104 0008 	add.w	r0, r4, #8
 80126d4:	f000 ff86 	bl	80135e4 <uxr_get_input_reliable_stream>
 80126d8:	4681      	mov	r9, r0
 80126da:	b338      	cbz	r0, 801272c <wait_session_status+0x144>
 80126dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80126de:	9205      	str	r2, [sp, #20]
 80126e0:	a80c      	add	r0, sp, #48	; 0x30
 80126e2:	f7fe fc95 	bl	8011010 <ucdr_buffer_remaining>
 80126e6:	4603      	mov	r3, r0
 80126e8:	f10d 001d 	add.w	r0, sp, #29
 80126ec:	9000      	str	r0, [sp, #0]
 80126ee:	9a05      	ldr	r2, [sp, #20]
 80126f0:	9902      	ldr	r1, [sp, #8]
 80126f2:	4648      	mov	r0, r9
 80126f4:	f006 fbf8 	bl	8018ee8 <uxr_receive_reliable_message>
 80126f8:	b1c0      	cbz	r0, 801272c <wait_session_status+0x144>
 80126fa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80126fe:	b95b      	cbnz	r3, 8012718 <wait_session_status+0x130>
 8012700:	e03c      	b.n	801277c <wait_session_status+0x194>
 8012702:	f04f 0302 	mov.w	r3, #2
 8012706:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 801270a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801270e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012714:	f7ff fb04 	bl	8011d20 <read_submessage_list>
 8012718:	a914      	add	r1, sp, #80	; 0x50
 801271a:	2204      	movs	r2, #4
 801271c:	4648      	mov	r0, r9
 801271e:	f006 fc63 	bl	8018fe8 <uxr_next_input_reliable_buffer_available>
 8012722:	4603      	mov	r3, r0
 8012724:	a914      	add	r1, sp, #80	; 0x50
 8012726:	4620      	mov	r0, r4
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1ea      	bne.n	8012702 <wait_session_status+0x11a>
 801272c:	4632      	mov	r2, r6
 801272e:	4641      	mov	r1, r8
 8012730:	4620      	mov	r0, r4
 8012732:	f7ff f973 	bl	8011a1c <write_submessage_acknack.isra.0>
 8012736:	e771      	b.n	801261c <wait_session_status+0x34>
 8012738:	4631      	mov	r1, r6
 801273a:	f104 0008 	add.w	r0, r4, #8
 801273e:	f000 ff47 	bl	80135d0 <uxr_get_input_best_effort_stream>
 8012742:	2800      	cmp	r0, #0
 8012744:	f43f af6a 	beq.w	801261c <wait_session_status+0x34>
 8012748:	9902      	ldr	r1, [sp, #8]
 801274a:	f006 fb49 	bl	8018de0 <uxr_receive_best_effort_message>
 801274e:	2800      	cmp	r0, #0
 8012750:	f43f af64 	beq.w	801261c <wait_session_status+0x34>
 8012754:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012758:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801275c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012762:	a90c      	add	r1, sp, #48	; 0x30
 8012764:	4620      	mov	r0, r4
 8012766:	f7ff fadb 	bl	8011d20 <read_submessage_list>
 801276a:	e757      	b.n	801261c <wait_session_status+0x34>
 801276c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801276e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012772:	47a0      	blx	r4
 8012774:	2001      	movs	r0, #1
 8012776:	b01d      	add	sp, #116	; 0x74
 8012778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801277c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012780:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012784:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801278a:	a90c      	add	r1, sp, #48	; 0x30
 801278c:	4620      	mov	r0, r4
 801278e:	f7ff fac7 	bl	8011d20 <read_submessage_list>
 8012792:	e7c1      	b.n	8012718 <wait_session_status+0x130>

08012794 <uxr_delete_session_retries>:
 8012794:	b530      	push	{r4, r5, lr}
 8012796:	b08f      	sub	sp, #60	; 0x3c
 8012798:	4604      	mov	r4, r0
 801279a:	460d      	mov	r5, r1
 801279c:	f000 f954 	bl	8012a48 <uxr_session_header_offset>
 80127a0:	2300      	movs	r3, #0
 80127a2:	2210      	movs	r2, #16
 80127a4:	9000      	str	r0, [sp, #0]
 80127a6:	a902      	add	r1, sp, #8
 80127a8:	a806      	add	r0, sp, #24
 80127aa:	f7fe fbef 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 80127ae:	a906      	add	r1, sp, #24
 80127b0:	4620      	mov	r0, r4
 80127b2:	f000 f897 	bl	80128e4 <uxr_buffer_delete_session>
 80127b6:	2200      	movs	r2, #0
 80127b8:	4611      	mov	r1, r2
 80127ba:	9b06      	ldr	r3, [sp, #24]
 80127bc:	4620      	mov	r0, r4
 80127be:	f000 f8eb 	bl	8012998 <uxr_stamp_session_header>
 80127c2:	a806      	add	r0, sp, #24
 80127c4:	f7fe fc20 	bl	8011008 <ucdr_buffer_length>
 80127c8:	462b      	mov	r3, r5
 80127ca:	4602      	mov	r2, r0
 80127cc:	a902      	add	r1, sp, #8
 80127ce:	4620      	mov	r0, r4
 80127d0:	f7ff ff0a 	bl	80125e8 <wait_session_status>
 80127d4:	b118      	cbz	r0, 80127de <uxr_delete_session_retries+0x4a>
 80127d6:	7960      	ldrb	r0, [r4, #5]
 80127d8:	fab0 f080 	clz	r0, r0
 80127dc:	0940      	lsrs	r0, r0, #5
 80127de:	b00f      	add	sp, #60	; 0x3c
 80127e0:	bd30      	pop	{r4, r5, pc}
 80127e2:	bf00      	nop

080127e4 <uxr_prepare_stream_to_write_submessage>:
 80127e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127e8:	b082      	sub	sp, #8
 80127ea:	4682      	mov	sl, r0
 80127ec:	4610      	mov	r0, r2
 80127ee:	4615      	mov	r5, r2
 80127f0:	461e      	mov	r6, r3
 80127f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80127f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80127fa:	9101      	str	r1, [sp, #4]
 80127fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012800:	f000 ff52 	bl	80136a8 <uxr_submessage_padding>
 8012804:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012808:	f105 0904 	add.w	r9, r5, #4
 801280c:	2b01      	cmp	r3, #1
 801280e:	4481      	add	r9, r0
 8012810:	d01d      	beq.n	801284e <uxr_prepare_stream_to_write_submessage+0x6a>
 8012812:	2b02      	cmp	r3, #2
 8012814:	d116      	bne.n	8012844 <uxr_prepare_stream_to_write_submessage+0x60>
 8012816:	4621      	mov	r1, r4
 8012818:	f10a 0008 	add.w	r0, sl, #8
 801281c:	f000 fecc 	bl	80135b8 <uxr_get_output_reliable_stream>
 8012820:	4604      	mov	r4, r0
 8012822:	b158      	cbz	r0, 801283c <uxr_prepare_stream_to_write_submessage+0x58>
 8012824:	4649      	mov	r1, r9
 8012826:	4632      	mov	r2, r6
 8012828:	f006 fd94 	bl	8019354 <uxr_prepare_reliable_buffer_to_write>
 801282c:	4604      	mov	r4, r0
 801282e:	b12c      	cbz	r4, 801283c <uxr_prepare_stream_to_write_submessage+0x58>
 8012830:	4643      	mov	r3, r8
 8012832:	b2aa      	uxth	r2, r5
 8012834:	4639      	mov	r1, r7
 8012836:	4630      	mov	r0, r6
 8012838:	f000 fef6 	bl	8013628 <uxr_buffer_submessage_header>
 801283c:	4620      	mov	r0, r4
 801283e:	b002      	add	sp, #8
 8012840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012844:	2400      	movs	r4, #0
 8012846:	4620      	mov	r0, r4
 8012848:	b002      	add	sp, #8
 801284a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801284e:	4621      	mov	r1, r4
 8012850:	f10a 0008 	add.w	r0, sl, #8
 8012854:	f000 fea8 	bl	80135a8 <uxr_get_output_best_effort_stream>
 8012858:	4604      	mov	r4, r0
 801285a:	2800      	cmp	r0, #0
 801285c:	d0ee      	beq.n	801283c <uxr_prepare_stream_to_write_submessage+0x58>
 801285e:	4649      	mov	r1, r9
 8012860:	4632      	mov	r2, r6
 8012862:	f006 fcb3 	bl	80191cc <uxr_prepare_best_effort_buffer_to_write>
 8012866:	4604      	mov	r4, r0
 8012868:	e7e1      	b.n	801282e <uxr_prepare_stream_to_write_submessage+0x4a>
 801286a:	bf00      	nop

0801286c <uxr_init_session_info>:
 801286c:	b470      	push	{r4, r5, r6}
 801286e:	7102      	strb	r2, [r0, #4]
 8012870:	0e16      	lsrs	r6, r2, #24
 8012872:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012876:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801287a:	23ff      	movs	r3, #255	; 0xff
 801287c:	2209      	movs	r2, #9
 801287e:	7046      	strb	r6, [r0, #1]
 8012880:	7085      	strb	r5, [r0, #2]
 8012882:	70c4      	strb	r4, [r0, #3]
 8012884:	7001      	strb	r1, [r0, #0]
 8012886:	bc70      	pop	{r4, r5, r6}
 8012888:	80c2      	strh	r2, [r0, #6]
 801288a:	7143      	strb	r3, [r0, #5]
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop

08012890 <uxr_buffer_create_session>:
 8012890:	b570      	push	{r4, r5, r6, lr}
 8012892:	b088      	sub	sp, #32
 8012894:	2300      	movs	r3, #0
 8012896:	4d12      	ldr	r5, [pc, #72]	; (80128e0 <uxr_buffer_create_session+0x50>)
 8012898:	9307      	str	r3, [sp, #28]
 801289a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801289e:	7802      	ldrb	r2, [r0, #0]
 80128a0:	9303      	str	r3, [sp, #12]
 80128a2:	460c      	mov	r4, r1
 80128a4:	f88d 200c 	strb.w	r2, [sp, #12]
 80128a8:	2101      	movs	r1, #1
 80128aa:	682a      	ldr	r2, [r5, #0]
 80128ac:	f8d0 6001 	ldr.w	r6, [r0, #1]
 80128b0:	88ad      	ldrh	r5, [r5, #4]
 80128b2:	80c1      	strh	r1, [r0, #6]
 80128b4:	f8ad 1004 	strh.w	r1, [sp, #4]
 80128b8:	9200      	str	r2, [sp, #0]
 80128ba:	4619      	mov	r1, r3
 80128bc:	2210      	movs	r2, #16
 80128be:	4620      	mov	r0, r4
 80128c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80128c4:	9306      	str	r3, [sp, #24]
 80128c6:	f88d 300d 	strb.w	r3, [sp, #13]
 80128ca:	9602      	str	r6, [sp, #8]
 80128cc:	f8ad 5006 	strh.w	r5, [sp, #6]
 80128d0:	f000 feaa 	bl	8013628 <uxr_buffer_submessage_header>
 80128d4:	4620      	mov	r0, r4
 80128d6:	4669      	mov	r1, sp
 80128d8:	f001 fece 	bl	8014678 <uxr_serialize_CREATE_CLIENT_Payload>
 80128dc:	b008      	add	sp, #32
 80128de:	bd70      	pop	{r4, r5, r6, pc}
 80128e0:	0801ec04 	.word	0x0801ec04

080128e4 <uxr_buffer_delete_session>:
 80128e4:	b530      	push	{r4, r5, lr}
 80128e6:	4b0c      	ldr	r3, [pc, #48]	; (8012918 <uxr_buffer_delete_session+0x34>)
 80128e8:	b083      	sub	sp, #12
 80128ea:	891b      	ldrh	r3, [r3, #8]
 80128ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80128f0:	2202      	movs	r2, #2
 80128f2:	460c      	mov	r4, r1
 80128f4:	80c2      	strh	r2, [r0, #6]
 80128f6:	2300      	movs	r3, #0
 80128f8:	2204      	movs	r2, #4
 80128fa:	4608      	mov	r0, r1
 80128fc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012900:	2103      	movs	r1, #3
 8012902:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012906:	f000 fe8f 	bl	8013628 <uxr_buffer_submessage_header>
 801290a:	4620      	mov	r0, r4
 801290c:	a901      	add	r1, sp, #4
 801290e:	f001 ff61 	bl	80147d4 <uxr_serialize_DELETE_Payload>
 8012912:	b003      	add	sp, #12
 8012914:	bd30      	pop	{r4, r5, pc}
 8012916:	bf00      	nop
 8012918:	0801ec04 	.word	0x0801ec04

0801291c <uxr_read_create_session_status>:
 801291c:	b510      	push	{r4, lr}
 801291e:	b088      	sub	sp, #32
 8012920:	4604      	mov	r4, r0
 8012922:	4608      	mov	r0, r1
 8012924:	a901      	add	r1, sp, #4
 8012926:	f001 ff65 	bl	80147f4 <uxr_deserialize_STATUS_AGENT_Payload>
 801292a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801292e:	7163      	strb	r3, [r4, #5]
 8012930:	b008      	add	sp, #32
 8012932:	bd10      	pop	{r4, pc}

08012934 <uxr_read_delete_session_status>:
 8012934:	b510      	push	{r4, lr}
 8012936:	4604      	mov	r4, r0
 8012938:	b084      	sub	sp, #16
 801293a:	4608      	mov	r0, r1
 801293c:	a902      	add	r1, sp, #8
 801293e:	f001 ff89 	bl	8014854 <uxr_deserialize_STATUS_Payload>
 8012942:	88e3      	ldrh	r3, [r4, #6]
 8012944:	2b02      	cmp	r3, #2
 8012946:	d001      	beq.n	801294c <uxr_read_delete_session_status+0x18>
 8012948:	b004      	add	sp, #16
 801294a:	bd10      	pop	{r4, pc}
 801294c:	f10d 000a 	add.w	r0, sp, #10
 8012950:	f7fe fec6 	bl	80116e0 <uxr_object_id_from_raw>
 8012954:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012958:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801295c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012960:	b29b      	uxth	r3, r3
 8012962:	2b02      	cmp	r3, #2
 8012964:	bf04      	itt	eq
 8012966:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801296a:	7163      	strbeq	r3, [r4, #5]
 801296c:	b004      	add	sp, #16
 801296e:	bd10      	pop	{r4, pc}

08012970 <uxr_stamp_create_session_header>:
 8012970:	b510      	push	{r4, lr}
 8012972:	4604      	mov	r4, r0
 8012974:	b08a      	sub	sp, #40	; 0x28
 8012976:	a802      	add	r0, sp, #8
 8012978:	2208      	movs	r2, #8
 801297a:	f7fe fb19 	bl	8010fb0 <ucdr_init_buffer>
 801297e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012982:	9400      	str	r4, [sp, #0]
 8012984:	2300      	movs	r3, #0
 8012986:	a802      	add	r0, sp, #8
 8012988:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801298c:	461a      	mov	r2, r3
 801298e:	f001 f849 	bl	8013a24 <uxr_serialize_message_header>
 8012992:	b00a      	add	sp, #40	; 0x28
 8012994:	bd10      	pop	{r4, pc}
 8012996:	bf00      	nop

08012998 <uxr_stamp_session_header>:
 8012998:	b570      	push	{r4, r5, r6, lr}
 801299a:	4604      	mov	r4, r0
 801299c:	b08c      	sub	sp, #48	; 0x30
 801299e:	460d      	mov	r5, r1
 80129a0:	4616      	mov	r6, r2
 80129a2:	4619      	mov	r1, r3
 80129a4:	a804      	add	r0, sp, #16
 80129a6:	2208      	movs	r2, #8
 80129a8:	9603      	str	r6, [sp, #12]
 80129aa:	f7fe fb01 	bl	8010fb0 <ucdr_init_buffer>
 80129ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129b2:	9b03      	ldr	r3, [sp, #12]
 80129b4:	9400      	str	r4, [sp, #0]
 80129b6:	462a      	mov	r2, r5
 80129b8:	a804      	add	r0, sp, #16
 80129ba:	f001 f833 	bl	8013a24 <uxr_serialize_message_header>
 80129be:	b00c      	add	sp, #48	; 0x30
 80129c0:	bd70      	pop	{r4, r5, r6, pc}
 80129c2:	bf00      	nop

080129c4 <uxr_read_session_header>:
 80129c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c8:	4607      	mov	r7, r0
 80129ca:	b084      	sub	sp, #16
 80129cc:	4608      	mov	r0, r1
 80129ce:	460c      	mov	r4, r1
 80129d0:	4615      	mov	r5, r2
 80129d2:	461e      	mov	r6, r3
 80129d4:	f7fe fb1c 	bl	8011010 <ucdr_buffer_remaining>
 80129d8:	2808      	cmp	r0, #8
 80129da:	d803      	bhi.n	80129e4 <uxr_read_session_header+0x20>
 80129dc:	2000      	movs	r0, #0
 80129de:	b004      	add	sp, #16
 80129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e4:	f10d 080c 	add.w	r8, sp, #12
 80129e8:	4633      	mov	r3, r6
 80129ea:	462a      	mov	r2, r5
 80129ec:	4620      	mov	r0, r4
 80129ee:	f8cd 8000 	str.w	r8, [sp]
 80129f2:	f10d 010b 	add.w	r1, sp, #11
 80129f6:	f001 f833 	bl	8013a60 <uxr_deserialize_message_header>
 80129fa:	783a      	ldrb	r2, [r7, #0]
 80129fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d1eb      	bne.n	80129dc <uxr_read_session_header+0x18>
 8012a04:	061b      	lsls	r3, r3, #24
 8012a06:	d41c      	bmi.n	8012a42 <uxr_read_session_header+0x7e>
 8012a08:	f898 2000 	ldrb.w	r2, [r8]
 8012a0c:	787b      	ldrb	r3, [r7, #1]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d003      	beq.n	8012a1a <uxr_read_session_header+0x56>
 8012a12:	2001      	movs	r0, #1
 8012a14:	f080 0001 	eor.w	r0, r0, #1
 8012a18:	e7e1      	b.n	80129de <uxr_read_session_header+0x1a>
 8012a1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012a1e:	78bb      	ldrb	r3, [r7, #2]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	f107 0102 	add.w	r1, r7, #2
 8012a26:	d1f4      	bne.n	8012a12 <uxr_read_session_header+0x4e>
 8012a28:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012a2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d1ee      	bne.n	8012a12 <uxr_read_session_header+0x4e>
 8012a34:	784b      	ldrb	r3, [r1, #1]
 8012a36:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d1e9      	bne.n	8012a12 <uxr_read_session_header+0x4e>
 8012a3e:	2000      	movs	r0, #0
 8012a40:	e7e8      	b.n	8012a14 <uxr_read_session_header+0x50>
 8012a42:	2001      	movs	r0, #1
 8012a44:	e7cb      	b.n	80129de <uxr_read_session_header+0x1a>
 8012a46:	bf00      	nop

08012a48 <uxr_session_header_offset>:
 8012a48:	f990 3000 	ldrsb.w	r3, [r0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	bfac      	ite	ge
 8012a50:	2008      	movge	r0, #8
 8012a52:	2004      	movlt	r0, #4
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop

08012a58 <uxr_init_base_object_request>:
 8012a58:	b530      	push	{r4, r5, lr}
 8012a5a:	88c3      	ldrh	r3, [r0, #6]
 8012a5c:	b083      	sub	sp, #12
 8012a5e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8012a62:	9101      	str	r1, [sp, #4]
 8012a64:	f1a3 010a 	sub.w	r1, r3, #10
 8012a68:	b289      	uxth	r1, r1
 8012a6a:	42a1      	cmp	r1, r4
 8012a6c:	d80e      	bhi.n	8012a8c <uxr_init_base_object_request+0x34>
 8012a6e:	3301      	adds	r3, #1
 8012a70:	b29c      	uxth	r4, r3
 8012a72:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	80c4      	strh	r4, [r0, #6]
 8012a7a:	1c91      	adds	r1, r2, #2
 8012a7c:	9801      	ldr	r0, [sp, #4]
 8012a7e:	7015      	strb	r5, [r2, #0]
 8012a80:	7053      	strb	r3, [r2, #1]
 8012a82:	f7fe fe41 	bl	8011708 <uxr_object_id_to_raw>
 8012a86:	4620      	mov	r0, r4
 8012a88:	b003      	add	sp, #12
 8012a8a:	bd30      	pop	{r4, r5, pc}
 8012a8c:	230a      	movs	r3, #10
 8012a8e:	461c      	mov	r4, r3
 8012a90:	2500      	movs	r5, #0
 8012a92:	e7f1      	b.n	8012a78 <uxr_init_base_object_request+0x20>

08012a94 <uxr_parse_base_object_request>:
 8012a94:	b570      	push	{r4, r5, r6, lr}
 8012a96:	4604      	mov	r4, r0
 8012a98:	3002      	adds	r0, #2
 8012a9a:	460d      	mov	r5, r1
 8012a9c:	4616      	mov	r6, r2
 8012a9e:	f7fe fe1f 	bl	80116e0 <uxr_object_id_from_raw>
 8012aa2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012aa6:	8028      	strh	r0, [r5, #0]
 8012aa8:	806b      	strh	r3, [r5, #2]
 8012aaa:	7822      	ldrb	r2, [r4, #0]
 8012aac:	7863      	ldrb	r3, [r4, #1]
 8012aae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012ab2:	8033      	strh	r3, [r6, #0]
 8012ab4:	bd70      	pop	{r4, r5, r6, pc}
 8012ab6:	bf00      	nop

08012ab8 <uxr_init_framing_io>:
 8012ab8:	2300      	movs	r3, #0
 8012aba:	7041      	strb	r1, [r0, #1]
 8012abc:	7003      	strb	r3, [r0, #0]
 8012abe:	8583      	strh	r3, [r0, #44]	; 0x2c
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop

08012ac4 <uxr_write_framed_msg>:
 8012ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac8:	7845      	ldrb	r5, [r0, #1]
 8012aca:	b085      	sub	sp, #20
 8012acc:	4604      	mov	r4, r0
 8012ace:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8012ad2:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8012ad6:	f1bc 0f01 	cmp.w	ip, #1
 8012ada:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8012ade:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8012ae2:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8012ae6:	460e      	mov	r6, r1
 8012ae8:	4617      	mov	r7, r2
 8012aea:	469b      	mov	fp, r3
 8012aec:	f240 8116 	bls.w	8012d1c <uxr_write_framed_msg+0x258>
 8012af0:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012af4:	2302      	movs	r3, #2
 8012af6:	2a01      	cmp	r2, #1
 8012af8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8012afc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012b00:	f240 8091 	bls.w	8012c26 <uxr_write_framed_msg+0x162>
 8012b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b06:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8012b0a:	b2d9      	uxtb	r1, r3
 8012b0c:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012b10:	2203      	movs	r2, #3
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012b18:	f240 809a 	bls.w	8012c50 <uxr_write_framed_msg+0x18c>
 8012b1c:	18a3      	adds	r3, r4, r2
 8012b1e:	3201      	adds	r2, #1
 8012b20:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8012b24:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8012b2e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012b32:	2901      	cmp	r1, #1
 8012b34:	eb04 0102 	add.w	r1, r4, r2
 8012b38:	f240 8101 	bls.w	8012d3e <uxr_write_framed_msg+0x27a>
 8012b3c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8012b40:	3201      	adds	r2, #1
 8012b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b44:	b2d2      	uxtb	r2, r2
 8012b46:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	f000 8106 	beq.w	8012d5c <uxr_write_framed_msg+0x298>
 8012b50:	f04f 0a00 	mov.w	sl, #0
 8012b54:	46d1      	mov	r9, sl
 8012b56:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012b5a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012b5e:	2901      	cmp	r1, #1
 8012b60:	f240 80a3 	bls.w	8012caa <uxr_write_framed_msg+0x1e6>
 8012b64:	2a29      	cmp	r2, #41	; 0x29
 8012b66:	d87f      	bhi.n	8012c68 <uxr_write_framed_msg+0x1a4>
 8012b68:	18a1      	adds	r1, r4, r2
 8012b6a:	3201      	adds	r2, #1
 8012b6c:	b2d2      	uxtb	r2, r2
 8012b6e:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8012b72:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012b76:	ea8a 0303 	eor.w	r3, sl, r3
 8012b7a:	4984      	ldr	r1, [pc, #528]	; (8012d8c <uxr_write_framed_msg+0x2c8>)
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	f109 0901 	add.w	r9, r9, #1
 8012b82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012b86:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8012b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b8c:	454b      	cmp	r3, r9
 8012b8e:	d8e2      	bhi.n	8012b56 <uxr_write_framed_msg+0x92>
 8012b90:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012b94:	fa5f f98a 	uxtb.w	r9, sl
 8012b98:	9301      	str	r3, [sp, #4]
 8012b9a:	f04f 0b00 	mov.w	fp, #0
 8012b9e:	f88d 900c 	strb.w	r9, [sp, #12]
 8012ba2:	f88d 300d 	strb.w	r3, [sp, #13]
 8012ba6:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8012baa:	fa5f f18a 	uxtb.w	r1, sl
 8012bae:	2901      	cmp	r1, #1
 8012bb0:	d920      	bls.n	8012bf4 <uxr_write_framed_msg+0x130>
 8012bb2:	2a29      	cmp	r2, #41	; 0x29
 8012bb4:	f240 808b 	bls.w	8012cce <uxr_write_framed_msg+0x20a>
 8012bb8:	2500      	movs	r5, #0
 8012bba:	e000      	b.n	8012bbe <uxr_write_framed_msg+0xfa>
 8012bbc:	b160      	cbz	r0, 8012bd8 <uxr_write_framed_msg+0x114>
 8012bbe:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012bc2:	1b52      	subs	r2, r2, r5
 8012bc4:	4421      	add	r1, r4
 8012bc6:	4643      	mov	r3, r8
 8012bc8:	4638      	mov	r0, r7
 8012bca:	47b0      	blx	r6
 8012bcc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012bd0:	4405      	add	r5, r0
 8012bd2:	4295      	cmp	r5, r2
 8012bd4:	d3f2      	bcc.n	8012bbc <uxr_write_framed_msg+0xf8>
 8012bd6:	d003      	beq.n	8012be0 <uxr_write_framed_msg+0x11c>
 8012bd8:	2000      	movs	r0, #0
 8012bda:	b005      	add	sp, #20
 8012bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be0:	fa5f f18a 	uxtb.w	r1, sl
 8012be4:	f04f 0300 	mov.w	r3, #0
 8012be8:	2901      	cmp	r1, #1
 8012bea:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012bee:	f04f 0200 	mov.w	r2, #0
 8012bf2:	d86c      	bhi.n	8012cce <uxr_write_framed_msg+0x20a>
 8012bf4:	1c51      	adds	r1, r2, #1
 8012bf6:	b2c9      	uxtb	r1, r1
 8012bf8:	2929      	cmp	r1, #41	; 0x29
 8012bfa:	d8dd      	bhi.n	8012bb8 <uxr_write_framed_msg+0xf4>
 8012bfc:	18a0      	adds	r0, r4, r2
 8012bfe:	3202      	adds	r2, #2
 8012c00:	f089 0920 	eor.w	r9, r9, #32
 8012c04:	b2d2      	uxtb	r2, r2
 8012c06:	4659      	mov	r1, fp
 8012c08:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8012c0c:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8012c10:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8012c14:	f04f 0b01 	mov.w	fp, #1
 8012c18:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012c1c:	2900      	cmp	r1, #0
 8012c1e:	d162      	bne.n	8012ce6 <uxr_write_framed_msg+0x222>
 8012c20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012c24:	e7bf      	b.n	8012ba6 <uxr_write_framed_msg+0xe2>
 8012c26:	2204      	movs	r2, #4
 8012c28:	2503      	movs	r5, #3
 8012c2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012c2c:	4423      	add	r3, r4
 8012c2e:	b2c9      	uxtb	r1, r1
 8012c30:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8012c34:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8012c38:	4425      	add	r5, r4
 8012c3a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012c3e:	f080 0020 	eor.w	r0, r0, #32
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8012c48:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012c4c:	f63f af66 	bhi.w	8012b1c <uxr_write_framed_msg+0x58>
 8012c50:	18a3      	adds	r3, r4, r2
 8012c52:	f081 0120 	eor.w	r1, r1, #32
 8012c56:	3202      	adds	r2, #2
 8012c58:	207d      	movs	r0, #125	; 0x7d
 8012c5a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8012c5e:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8012c62:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012c66:	e75f      	b.n	8012b28 <uxr_write_framed_msg+0x64>
 8012c68:	2500      	movs	r5, #0
 8012c6a:	e001      	b.n	8012c70 <uxr_write_framed_msg+0x1ac>
 8012c6c:	2800      	cmp	r0, #0
 8012c6e:	d0b3      	beq.n	8012bd8 <uxr_write_framed_msg+0x114>
 8012c70:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012c74:	1b52      	subs	r2, r2, r5
 8012c76:	4421      	add	r1, r4
 8012c78:	4643      	mov	r3, r8
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	47b0      	blx	r6
 8012c7e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012c82:	4405      	add	r5, r0
 8012c84:	4295      	cmp	r5, r2
 8012c86:	d3f1      	bcc.n	8012c6c <uxr_write_framed_msg+0x1a8>
 8012c88:	d1a6      	bne.n	8012bd8 <uxr_write_framed_msg+0x114>
 8012c8a:	f04f 0300 	mov.w	r3, #0
 8012c8e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c94:	454b      	cmp	r3, r9
 8012c96:	d971      	bls.n	8012d7c <uxr_write_framed_msg+0x2b8>
 8012c98:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8012c9c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8012ca0:	2901      	cmp	r1, #1
 8012ca2:	f04f 0200 	mov.w	r2, #0
 8012ca6:	f63f af5d 	bhi.w	8012b64 <uxr_write_framed_msg+0xa0>
 8012caa:	1c51      	adds	r1, r2, #1
 8012cac:	b2c9      	uxtb	r1, r1
 8012cae:	2929      	cmp	r1, #41	; 0x29
 8012cb0:	d8da      	bhi.n	8012c68 <uxr_write_framed_msg+0x1a4>
 8012cb2:	18a0      	adds	r0, r4, r2
 8012cb4:	3202      	adds	r2, #2
 8012cb6:	b2d2      	uxtb	r2, r2
 8012cb8:	f083 0120 	eor.w	r1, r3, #32
 8012cbc:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8012cc0:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8012cc4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8012cc8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012ccc:	e753      	b.n	8012b76 <uxr_write_framed_msg+0xb2>
 8012cce:	18a0      	adds	r0, r4, r2
 8012cd0:	3201      	adds	r2, #1
 8012cd2:	b2d2      	uxtb	r2, r2
 8012cd4:	4659      	mov	r1, fp
 8012cd6:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8012cda:	f04f 0b01 	mov.w	fp, #1
 8012cde:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012ce2:	2900      	cmp	r1, #0
 8012ce4:	d09c      	beq.n	8012c20 <uxr_write_framed_msg+0x15c>
 8012ce6:	2500      	movs	r5, #0
 8012ce8:	e002      	b.n	8012cf0 <uxr_write_framed_msg+0x22c>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	f43f af74 	beq.w	8012bd8 <uxr_write_framed_msg+0x114>
 8012cf0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012cf4:	1b52      	subs	r2, r2, r5
 8012cf6:	4421      	add	r1, r4
 8012cf8:	4643      	mov	r3, r8
 8012cfa:	4638      	mov	r0, r7
 8012cfc:	47b0      	blx	r6
 8012cfe:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012d02:	4405      	add	r5, r0
 8012d04:	4295      	cmp	r5, r2
 8012d06:	d3f0      	bcc.n	8012cea <uxr_write_framed_msg+0x226>
 8012d08:	f47f af66 	bne.w	8012bd8 <uxr_write_framed_msg+0x114>
 8012d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d0e:	2300      	movs	r3, #0
 8012d10:	b290      	uxth	r0, r2
 8012d12:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012d16:	b005      	add	sp, #20
 8012d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d1c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012d20:	f085 0520 	eor.w	r5, r5, #32
 8012d24:	2303      	movs	r3, #3
 8012d26:	217d      	movs	r1, #125	; 0x7d
 8012d28:	2a01      	cmp	r2, #1
 8012d2a:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8012d2e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012d32:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8012d36:	d814      	bhi.n	8012d62 <uxr_write_framed_msg+0x29e>
 8012d38:	2205      	movs	r2, #5
 8012d3a:	2504      	movs	r5, #4
 8012d3c:	e775      	b.n	8012c2a <uxr_write_framed_msg+0x166>
 8012d3e:	f083 0320 	eor.w	r3, r3, #32
 8012d42:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8012d46:	3202      	adds	r2, #2
 8012d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d4a:	b2d2      	uxtb	r2, r2
 8012d4c:	207d      	movs	r0, #125	; 0x7d
 8012d4e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8012d52:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f47f aefa 	bne.w	8012b50 <uxr_write_framed_msg+0x8c>
 8012d5c:	9301      	str	r3, [sp, #4]
 8012d5e:	4699      	mov	r9, r3
 8012d60:	e71b      	b.n	8012b9a <uxr_write_framed_msg+0xd6>
 8012d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d64:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8012d68:	b2d9      	uxtb	r1, r3
 8012d6a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8012d6e:	2204      	movs	r2, #4
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012d76:	f63f aed1 	bhi.w	8012b1c <uxr_write_framed_msg+0x58>
 8012d7a:	e769      	b.n	8012c50 <uxr_write_framed_msg+0x18c>
 8012d7c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012d80:	fa5f f98a 	uxtb.w	r9, sl
 8012d84:	9301      	str	r3, [sp, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	e707      	b.n	8012b9a <uxr_write_framed_msg+0xd6>
 8012d8a:	bf00      	nop
 8012d8c:	0801ee60 	.word	0x0801ee60

08012d90 <uxr_framing_read_transport>:
 8012d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d94:	4604      	mov	r4, r0
 8012d96:	b083      	sub	sp, #12
 8012d98:	461f      	mov	r7, r3
 8012d9a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8012d9e:	4689      	mov	r9, r1
 8012da0:	4692      	mov	sl, r2
 8012da2:	f000 fc87 	bl	80136b4 <uxr_millis>
 8012da6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012daa:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8012dae:	42b3      	cmp	r3, r6
 8012db0:	4680      	mov	r8, r0
 8012db2:	d05f      	beq.n	8012e74 <uxr_framing_read_transport+0xe4>
 8012db4:	d81b      	bhi.n	8012dee <uxr_framing_read_transport+0x5e>
 8012db6:	1e75      	subs	r5, r6, #1
 8012db8:	1aed      	subs	r5, r5, r3
 8012dba:	b2ed      	uxtb	r5, r5
 8012dbc:	2600      	movs	r6, #0
 8012dbe:	455d      	cmp	r5, fp
 8012dc0:	d81e      	bhi.n	8012e00 <uxr_framing_read_transport+0x70>
 8012dc2:	19ab      	adds	r3, r5, r6
 8012dc4:	455b      	cmp	r3, fp
 8012dc6:	bf84      	itt	hi
 8012dc8:	ebab 0605 	subhi.w	r6, fp, r5
 8012dcc:	b2f6      	uxtbhi	r6, r6
 8012dce:	b9e5      	cbnz	r5, 8012e0a <uxr_framing_read_transport+0x7a>
 8012dd0:	f04f 0b00 	mov.w	fp, #0
 8012dd4:	f000 fc6e 	bl	80136b4 <uxr_millis>
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	eba0 0008 	sub.w	r0, r0, r8
 8012dde:	1a1b      	subs	r3, r3, r0
 8012de0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012de4:	4658      	mov	r0, fp
 8012de6:	603b      	str	r3, [r7, #0]
 8012de8:	b003      	add	sp, #12
 8012dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dee:	2e00      	cmp	r6, #0
 8012df0:	d048      	beq.n	8012e84 <uxr_framing_read_transport+0xf4>
 8012df2:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8012df6:	b2ed      	uxtb	r5, r5
 8012df8:	3e01      	subs	r6, #1
 8012dfa:	455d      	cmp	r5, fp
 8012dfc:	b2f6      	uxtb	r6, r6
 8012dfe:	d9e0      	bls.n	8012dc2 <uxr_framing_read_transport+0x32>
 8012e00:	fa5f f58b 	uxtb.w	r5, fp
 8012e04:	2600      	movs	r6, #0
 8012e06:	2d00      	cmp	r5, #0
 8012e08:	d0e2      	beq.n	8012dd0 <uxr_framing_read_transport+0x40>
 8012e0a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012e0e:	3102      	adds	r1, #2
 8012e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	4421      	add	r1, r4
 8012e18:	462a      	mov	r2, r5
 8012e1a:	4650      	mov	r0, sl
 8012e1c:	47c8      	blx	r9
 8012e1e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012e22:	4a1b      	ldr	r2, [pc, #108]	; (8012e90 <uxr_framing_read_transport+0x100>)
 8012e24:	4403      	add	r3, r0
 8012e26:	0859      	lsrs	r1, r3, #1
 8012e28:	fba2 2101 	umull	r2, r1, r2, r1
 8012e2c:	0889      	lsrs	r1, r1, #2
 8012e2e:	222a      	movs	r2, #42	; 0x2a
 8012e30:	fb02 3111 	mls	r1, r2, r1, r3
 8012e34:	4683      	mov	fp, r0
 8012e36:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	d0c8      	beq.n	8012dd0 <uxr_framing_read_transport+0x40>
 8012e3e:	42a8      	cmp	r0, r5
 8012e40:	d1c8      	bne.n	8012dd4 <uxr_framing_read_transport+0x44>
 8012e42:	b31e      	cbz	r6, 8012e8c <uxr_framing_read_transport+0xfc>
 8012e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e46:	9300      	str	r3, [sp, #0]
 8012e48:	3102      	adds	r1, #2
 8012e4a:	4421      	add	r1, r4
 8012e4c:	4632      	mov	r2, r6
 8012e4e:	2300      	movs	r3, #0
 8012e50:	4650      	mov	r0, sl
 8012e52:	47c8      	blx	r9
 8012e54:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012e58:	490d      	ldr	r1, [pc, #52]	; (8012e90 <uxr_framing_read_transport+0x100>)
 8012e5a:	181a      	adds	r2, r3, r0
 8012e5c:	0853      	lsrs	r3, r2, #1
 8012e5e:	fba1 1303 	umull	r1, r3, r1, r3
 8012e62:	089b      	lsrs	r3, r3, #2
 8012e64:	212a      	movs	r1, #42	; 0x2a
 8012e66:	fb01 2313 	mls	r3, r1, r3, r2
 8012e6a:	eb00 0b05 	add.w	fp, r0, r5
 8012e6e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8012e72:	e7af      	b.n	8012dd4 <uxr_framing_read_transport+0x44>
 8012e74:	2600      	movs	r6, #0
 8012e76:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8012e7a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8012e7c:	d9c0      	bls.n	8012e00 <uxr_framing_read_transport+0x70>
 8012e7e:	2102      	movs	r1, #2
 8012e80:	2529      	movs	r5, #41	; 0x29
 8012e82:	e7c5      	b.n	8012e10 <uxr_framing_read_transport+0x80>
 8012e84:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8012e88:	b2ed      	uxtb	r5, r5
 8012e8a:	e798      	b.n	8012dbe <uxr_framing_read_transport+0x2e>
 8012e8c:	46ab      	mov	fp, r5
 8012e8e:	e7a1      	b.n	8012dd4 <uxr_framing_read_transport+0x44>
 8012e90:	30c30c31 	.word	0x30c30c31

08012e94 <uxr_read_framed_msg>:
 8012e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e98:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8012e9c:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8012ea0:	42ae      	cmp	r6, r5
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	461f      	mov	r7, r3
 8012ea8:	4689      	mov	r9, r1
 8012eaa:	4692      	mov	sl, r2
 8012eac:	f000 817d 	beq.w	80131aa <uxr_read_framed_msg+0x316>
 8012eb0:	7823      	ldrb	r3, [r4, #0]
 8012eb2:	4ecc      	ldr	r6, [pc, #816]	; (80131e4 <uxr_read_framed_msg+0x350>)
 8012eb4:	f8df 8330 	ldr.w	r8, [pc, #816]	; 80131e8 <uxr_read_framed_msg+0x354>
 8012eb8:	2b07      	cmp	r3, #7
 8012eba:	d8fd      	bhi.n	8012eb8 <uxr_read_framed_msg+0x24>
 8012ebc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012ec0:	00f40113 	.word	0x00f40113
 8012ec4:	00b700d4 	.word	0x00b700d4
 8012ec8:	004d008e 	.word	0x004d008e
 8012ecc:	00080030 	.word	0x00080030
 8012ed0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012ed4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012ed8:	4298      	cmp	r0, r3
 8012eda:	f000 8141 	beq.w	8013160 <uxr_read_framed_msg+0x2cc>
 8012ede:	18e2      	adds	r2, r4, r3
 8012ee0:	7891      	ldrb	r1, [r2, #2]
 8012ee2:	297d      	cmp	r1, #125	; 0x7d
 8012ee4:	f000 81a2 	beq.w	801322c <uxr_read_framed_msg+0x398>
 8012ee8:	3301      	adds	r3, #1
 8012eea:	085a      	lsrs	r2, r3, #1
 8012eec:	fba6 0202 	umull	r0, r2, r6, r2
 8012ef0:	0892      	lsrs	r2, r2, #2
 8012ef2:	202a      	movs	r0, #42	; 0x2a
 8012ef4:	fb00 3312 	mls	r3, r0, r2, r3
 8012ef8:	297e      	cmp	r1, #126	; 0x7e
 8012efa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012efe:	f000 8251 	beq.w	80133a4 <uxr_read_framed_msg+0x510>
 8012f02:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012f04:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012f06:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	2100      	movs	r1, #0
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012f12:	7021      	strb	r1, [r4, #0]
 8012f14:	f000 8182 	beq.w	801321c <uxr_read_framed_msg+0x388>
 8012f18:	2000      	movs	r0, #0
 8012f1a:	b003      	add	sp, #12
 8012f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f20:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012f24:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012f28:	4298      	cmp	r0, r3
 8012f2a:	f000 8128 	beq.w	801317e <uxr_read_framed_msg+0x2ea>
 8012f2e:	18e2      	adds	r2, r4, r3
 8012f30:	7891      	ldrb	r1, [r2, #2]
 8012f32:	297d      	cmp	r1, #125	; 0x7d
 8012f34:	f000 8196 	beq.w	8013264 <uxr_read_framed_msg+0x3d0>
 8012f38:	3301      	adds	r3, #1
 8012f3a:	085a      	lsrs	r2, r3, #1
 8012f3c:	fba6 0202 	umull	r0, r2, r6, r2
 8012f40:	0892      	lsrs	r2, r2, #2
 8012f42:	202a      	movs	r0, #42	; 0x2a
 8012f44:	fb00 3312 	mls	r3, r0, r2, r3
 8012f48:	297e      	cmp	r1, #126	; 0x7e
 8012f4a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012f4e:	f000 8219 	beq.w	8013384 <uxr_read_framed_msg+0x4f0>
 8012f52:	2307      	movs	r3, #7
 8012f54:	86a1      	strh	r1, [r4, #52]	; 0x34
 8012f56:	7023      	strb	r3, [r4, #0]
 8012f58:	e7ae      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 8012f5a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012f5c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8012f5e:	429d      	cmp	r5, r3
 8012f60:	d937      	bls.n	8012fd2 <uxr_read_framed_msg+0x13e>
 8012f62:	ee07 9a90 	vmov	s15, r9
 8012f66:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012f6a:	e01e      	b.n	8012faa <uxr_read_framed_msg+0x116>
 8012f6c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8012f70:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8012f74:	f000 80d2 	beq.w	801311c <uxr_read_framed_msg+0x288>
 8012f78:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012f7c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012f80:	f000 8214 	beq.w	80133ac <uxr_read_framed_msg+0x518>
 8012f84:	f807 e003 	strb.w	lr, [r7, r3]
 8012f88:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8012f8a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012f8c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8012f8e:	ea80 010e 	eor.w	r1, r0, lr
 8012f92:	b2c9      	uxtb	r1, r1
 8012f94:	3301      	adds	r3, #1
 8012f96:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8012fa0:	42ab      	cmp	r3, r5
 8012fa2:	86e2      	strh	r2, [r4, #54]	; 0x36
 8012fa4:	8663      	strh	r3, [r4, #50]	; 0x32
 8012fa6:	f080 8121 	bcs.w	80131ec <uxr_read_framed_msg+0x358>
 8012faa:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8012fae:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012fb2:	f101 0b01 	add.w	fp, r1, #1
 8012fb6:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012fba:	fba6 9202 	umull	r9, r2, r6, r2
 8012fbe:	0892      	lsrs	r2, r2, #2
 8012fc0:	4288      	cmp	r0, r1
 8012fc2:	eb04 0e01 	add.w	lr, r4, r1
 8012fc6:	fb0c b212 	mls	r2, ip, r2, fp
 8012fca:	d1cf      	bne.n	8012f6c <uxr_read_framed_msg+0xd8>
 8012fcc:	ee17 9a90 	vmov	r9, s15
 8012fd0:	429d      	cmp	r5, r3
 8012fd2:	f040 8112 	bne.w	80131fa <uxr_read_framed_msg+0x366>
 8012fd6:	2306      	movs	r3, #6
 8012fd8:	7023      	strb	r3, [r4, #0]
 8012fda:	e76d      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 8012fdc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012fe0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012fe4:	4298      	cmp	r0, r3
 8012fe6:	f000 80bb 	beq.w	8013160 <uxr_read_framed_msg+0x2cc>
 8012fea:	18e2      	adds	r2, r4, r3
 8012fec:	7891      	ldrb	r1, [r2, #2]
 8012fee:	297d      	cmp	r1, #125	; 0x7d
 8012ff0:	f000 8153 	beq.w	801329a <uxr_read_framed_msg+0x406>
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	085a      	lsrs	r2, r3, #1
 8012ff8:	fba6 0202 	umull	r0, r2, r6, r2
 8012ffc:	0892      	lsrs	r2, r2, #2
 8012ffe:	202a      	movs	r0, #42	; 0x2a
 8013000:	fb00 3212 	mls	r2, r0, r2, r3
 8013004:	297e      	cmp	r1, #126	; 0x7e
 8013006:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801300a:	f000 81cb 	beq.w	80133a4 <uxr_read_framed_msg+0x510>
 801300e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013010:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013014:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013016:	b29b      	uxth	r3, r3
 8013018:	2000      	movs	r0, #0
 801301a:	428b      	cmp	r3, r1
 801301c:	8623      	strh	r3, [r4, #48]	; 0x30
 801301e:	8660      	strh	r0, [r4, #50]	; 0x32
 8013020:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013022:	f240 80db 	bls.w	80131dc <uxr_read_framed_msg+0x348>
 8013026:	7020      	strb	r0, [r4, #0]
 8013028:	b003      	add	sp, #12
 801302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013032:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013036:	4298      	cmp	r0, r3
 8013038:	f000 80a1 	beq.w	801317e <uxr_read_framed_msg+0x2ea>
 801303c:	18e2      	adds	r2, r4, r3
 801303e:	7891      	ldrb	r1, [r2, #2]
 8013040:	297d      	cmp	r1, #125	; 0x7d
 8013042:	f000 8167 	beq.w	8013314 <uxr_read_framed_msg+0x480>
 8013046:	3301      	adds	r3, #1
 8013048:	085a      	lsrs	r2, r3, #1
 801304a:	fba6 0202 	umull	r0, r2, r6, r2
 801304e:	0892      	lsrs	r2, r2, #2
 8013050:	202a      	movs	r0, #42	; 0x2a
 8013052:	fb00 3312 	mls	r3, r0, r2, r3
 8013056:	297e      	cmp	r1, #126	; 0x7e
 8013058:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801305c:	f000 8192 	beq.w	8013384 <uxr_read_framed_msg+0x4f0>
 8013060:	2304      	movs	r3, #4
 8013062:	8621      	strh	r1, [r4, #48]	; 0x30
 8013064:	7023      	strb	r3, [r4, #0]
 8013066:	e727      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 8013068:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801306c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013070:	4290      	cmp	r0, r2
 8013072:	f000 80b1 	beq.w	80131d8 <uxr_read_framed_msg+0x344>
 8013076:	18a3      	adds	r3, r4, r2
 8013078:	7899      	ldrb	r1, [r3, #2]
 801307a:	297d      	cmp	r1, #125	; 0x7d
 801307c:	f000 8166 	beq.w	801334c <uxr_read_framed_msg+0x4b8>
 8013080:	3201      	adds	r2, #1
 8013082:	0850      	lsrs	r0, r2, #1
 8013084:	fba6 3000 	umull	r3, r0, r6, r0
 8013088:	0880      	lsrs	r0, r0, #2
 801308a:	232a      	movs	r3, #42	; 0x2a
 801308c:	fb03 2210 	mls	r2, r3, r0, r2
 8013090:	297e      	cmp	r1, #126	; 0x7e
 8013092:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013096:	f000 8187 	beq.w	80133a8 <uxr_read_framed_msg+0x514>
 801309a:	7863      	ldrb	r3, [r4, #1]
 801309c:	428b      	cmp	r3, r1
 801309e:	bf0c      	ite	eq
 80130a0:	2303      	moveq	r3, #3
 80130a2:	2300      	movne	r3, #0
 80130a4:	7023      	strb	r3, [r4, #0]
 80130a6:	e707      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 80130a8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80130ac:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80130b0:	2200      	movs	r2, #0
 80130b2:	4299      	cmp	r1, r3
 80130b4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80130b8:	d063      	beq.n	8013182 <uxr_read_framed_msg+0x2ee>
 80130ba:	18e2      	adds	r2, r4, r3
 80130bc:	7892      	ldrb	r2, [r2, #2]
 80130be:	2a7d      	cmp	r2, #125	; 0x7d
 80130c0:	f000 8107 	beq.w	80132d2 <uxr_read_framed_msg+0x43e>
 80130c4:	1c59      	adds	r1, r3, #1
 80130c6:	084b      	lsrs	r3, r1, #1
 80130c8:	fba6 0303 	umull	r0, r3, r6, r3
 80130cc:	089b      	lsrs	r3, r3, #2
 80130ce:	202a      	movs	r0, #42	; 0x2a
 80130d0:	fb00 1313 	mls	r3, r0, r3, r1
 80130d4:	2a7e      	cmp	r2, #126	; 0x7e
 80130d6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80130da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80130de:	d050      	beq.n	8013182 <uxr_read_framed_msg+0x2ee>
 80130e0:	2302      	movs	r3, #2
 80130e2:	7023      	strb	r3, [r4, #0]
 80130e4:	e6e8      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 80130e6:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 80130ea:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80130ee:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80130f2:	1c51      	adds	r1, r2, #1
 80130f4:	084b      	lsrs	r3, r1, #1
 80130f6:	fba6 5303 	umull	r5, r3, r6, r3
 80130fa:	089b      	lsrs	r3, r3, #2
 80130fc:	fb0c 1313 	mls	r3, ip, r3, r1
 8013100:	4596      	cmp	lr, r2
 8013102:	eb04 0002 	add.w	r0, r4, r2
 8013106:	b2da      	uxtb	r2, r3
 8013108:	f43f af06 	beq.w	8012f18 <uxr_read_framed_msg+0x84>
 801310c:	7883      	ldrb	r3, [r0, #2]
 801310e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013112:	2b7e      	cmp	r3, #126	; 0x7e
 8013114:	d1ed      	bne.n	80130f2 <uxr_read_framed_msg+0x25e>
 8013116:	2301      	movs	r3, #1
 8013118:	7023      	strb	r3, [r4, #0]
 801311a:	e6cd      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 801311c:	f101 0b01 	add.w	fp, r1, #1
 8013120:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8013124:	fba6 e202 	umull	lr, r2, r6, r2
 8013128:	3102      	adds	r1, #2
 801312a:	0892      	lsrs	r2, r2, #2
 801312c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8013130:	fb0c b212 	mls	r2, ip, r2, fp
 8013134:	fba6 9e0e 	umull	r9, lr, r6, lr
 8013138:	eb04 0b02 	add.w	fp, r4, r2
 801313c:	b2d2      	uxtb	r2, r2
 801313e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8013142:	4290      	cmp	r0, r2
 8013144:	fb0c 111e 	mls	r1, ip, lr, r1
 8013148:	f43f af40 	beq.w	8012fcc <uxr_read_framed_msg+0x138>
 801314c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8013150:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8013154:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8013158:	d036      	beq.n	80131c8 <uxr_read_framed_msg+0x334>
 801315a:	f08e 0e20 	eor.w	lr, lr, #32
 801315e:	e711      	b.n	8012f84 <uxr_read_framed_msg+0xf0>
 8013160:	2301      	movs	r3, #1
 8013162:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013164:	4649      	mov	r1, r9
 8013166:	e9cd 2300 	strd	r2, r3, [sp]
 801316a:	4620      	mov	r0, r4
 801316c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801316e:	4652      	mov	r2, sl
 8013170:	f7ff fe0e 	bl	8012d90 <uxr_framing_read_transport>
 8013174:	2800      	cmp	r0, #0
 8013176:	f43f aecf 	beq.w	8012f18 <uxr_read_framed_msg+0x84>
 801317a:	7823      	ldrb	r3, [r4, #0]
 801317c:	e69c      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 801317e:	2302      	movs	r3, #2
 8013180:	e7ef      	b.n	8013162 <uxr_read_framed_msg+0x2ce>
 8013182:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013184:	2304      	movs	r3, #4
 8013186:	e9cd 2300 	strd	r2, r3, [sp]
 801318a:	4649      	mov	r1, r9
 801318c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801318e:	4652      	mov	r2, sl
 8013190:	4620      	mov	r0, r4
 8013192:	f7ff fdfd 	bl	8012d90 <uxr_framing_read_transport>
 8013196:	2800      	cmp	r0, #0
 8013198:	d1ef      	bne.n	801317a <uxr_read_framed_msg+0x2e6>
 801319a:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801319e:	387e      	subs	r0, #126	; 0x7e
 80131a0:	bf18      	it	ne
 80131a2:	2001      	movne	r0, #1
 80131a4:	2800      	cmp	r0, #0
 80131a6:	d0e8      	beq.n	801317a <uxr_read_framed_msg+0x2e6>
 80131a8:	e6b6      	b.n	8012f18 <uxr_read_framed_msg+0x84>
 80131aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80131ac:	2305      	movs	r3, #5
 80131ae:	e9cd 5300 	strd	r5, r3, [sp]
 80131b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131b4:	f7ff fdec 	bl	8012d90 <uxr_framing_read_transport>
 80131b8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80131bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80131c0:	429a      	cmp	r2, r3
 80131c2:	f43f aea9 	beq.w	8012f18 <uxr_read_framed_msg+0x84>
 80131c6:	e673      	b.n	8012eb0 <uxr_read_framed_msg+0x1c>
 80131c8:	429d      	cmp	r5, r3
 80131ca:	ee17 9a90 	vmov	r9, s15
 80131ce:	f43f af02 	beq.w	8012fd6 <uxr_read_framed_msg+0x142>
 80131d2:	2301      	movs	r3, #1
 80131d4:	7023      	strb	r3, [r4, #0]
 80131d6:	e66f      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 80131d8:	2303      	movs	r3, #3
 80131da:	e7c2      	b.n	8013162 <uxr_read_framed_msg+0x2ce>
 80131dc:	2305      	movs	r3, #5
 80131de:	7023      	strb	r3, [r4, #0]
 80131e0:	e66a      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 80131e2:	bf00      	nop
 80131e4:	30c30c31 	.word	0x30c30c31
 80131e8:	0801ee60 	.word	0x0801ee60
 80131ec:	ee17 9a90 	vmov	r9, s15
 80131f0:	f43f aef1 	beq.w	8012fd6 <uxr_read_framed_msg+0x142>
 80131f4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80131f8:	d08d      	beq.n	8013116 <uxr_read_framed_msg+0x282>
 80131fa:	1aeb      	subs	r3, r5, r3
 80131fc:	3302      	adds	r3, #2
 80131fe:	9301      	str	r3, [sp, #4]
 8013200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	4652      	mov	r2, sl
 8013206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013208:	4649      	mov	r1, r9
 801320a:	4620      	mov	r0, r4
 801320c:	f7ff fdc0 	bl	8012d90 <uxr_framing_read_transport>
 8013210:	fab0 f080 	clz	r0, r0
 8013214:	0940      	lsrs	r0, r0, #5
 8013216:	2800      	cmp	r0, #0
 8013218:	d0af      	beq.n	801317a <uxr_read_framed_msg+0x2e6>
 801321a:	e67d      	b.n	8012f18 <uxr_read_framed_msg+0x84>
 801321c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801321e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013222:	7013      	strb	r3, [r2, #0]
 8013224:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013226:	b003      	add	sp, #12
 8013228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801322c:	1c59      	adds	r1, r3, #1
 801322e:	084a      	lsrs	r2, r1, #1
 8013230:	fba6 5202 	umull	r5, r2, r6, r2
 8013234:	0892      	lsrs	r2, r2, #2
 8013236:	252a      	movs	r5, #42	; 0x2a
 8013238:	fb05 1212 	mls	r2, r5, r2, r1
 801323c:	b2d1      	uxtb	r1, r2
 801323e:	4288      	cmp	r0, r1
 8013240:	d08e      	beq.n	8013160 <uxr_read_framed_msg+0x2cc>
 8013242:	3302      	adds	r3, #2
 8013244:	4422      	add	r2, r4
 8013246:	0858      	lsrs	r0, r3, #1
 8013248:	fba6 1000 	umull	r1, r0, r6, r0
 801324c:	7891      	ldrb	r1, [r2, #2]
 801324e:	0882      	lsrs	r2, r0, #2
 8013250:	fb05 3312 	mls	r3, r5, r2, r3
 8013254:	297e      	cmp	r1, #126	; 0x7e
 8013256:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801325a:	f000 80a3 	beq.w	80133a4 <uxr_read_framed_msg+0x510>
 801325e:	f081 0120 	eor.w	r1, r1, #32
 8013262:	e64e      	b.n	8012f02 <uxr_read_framed_msg+0x6e>
 8013264:	1c59      	adds	r1, r3, #1
 8013266:	084a      	lsrs	r2, r1, #1
 8013268:	fba6 5202 	umull	r5, r2, r6, r2
 801326c:	0892      	lsrs	r2, r2, #2
 801326e:	252a      	movs	r5, #42	; 0x2a
 8013270:	fb05 1212 	mls	r2, r5, r2, r1
 8013274:	b2d1      	uxtb	r1, r2
 8013276:	4288      	cmp	r0, r1
 8013278:	d081      	beq.n	801317e <uxr_read_framed_msg+0x2ea>
 801327a:	3302      	adds	r3, #2
 801327c:	4422      	add	r2, r4
 801327e:	0858      	lsrs	r0, r3, #1
 8013280:	fba6 1000 	umull	r1, r0, r6, r0
 8013284:	7891      	ldrb	r1, [r2, #2]
 8013286:	0882      	lsrs	r2, r0, #2
 8013288:	fb05 3312 	mls	r3, r5, r2, r3
 801328c:	297e      	cmp	r1, #126	; 0x7e
 801328e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013292:	d077      	beq.n	8013384 <uxr_read_framed_msg+0x4f0>
 8013294:	f081 0120 	eor.w	r1, r1, #32
 8013298:	e65b      	b.n	8012f52 <uxr_read_framed_msg+0xbe>
 801329a:	1c59      	adds	r1, r3, #1
 801329c:	084a      	lsrs	r2, r1, #1
 801329e:	fba6 5202 	umull	r5, r2, r6, r2
 80132a2:	0892      	lsrs	r2, r2, #2
 80132a4:	252a      	movs	r5, #42	; 0x2a
 80132a6:	fb05 1212 	mls	r2, r5, r2, r1
 80132aa:	b2d1      	uxtb	r1, r2
 80132ac:	4288      	cmp	r0, r1
 80132ae:	f43f af57 	beq.w	8013160 <uxr_read_framed_msg+0x2cc>
 80132b2:	3302      	adds	r3, #2
 80132b4:	4422      	add	r2, r4
 80132b6:	0858      	lsrs	r0, r3, #1
 80132b8:	fba6 1000 	umull	r1, r0, r6, r0
 80132bc:	7891      	ldrb	r1, [r2, #2]
 80132be:	0882      	lsrs	r2, r0, #2
 80132c0:	fb05 3312 	mls	r3, r5, r2, r3
 80132c4:	297e      	cmp	r1, #126	; 0x7e
 80132c6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80132ca:	d06b      	beq.n	80133a4 <uxr_read_framed_msg+0x510>
 80132cc:	f081 0120 	eor.w	r1, r1, #32
 80132d0:	e69d      	b.n	801300e <uxr_read_framed_msg+0x17a>
 80132d2:	1c5d      	adds	r5, r3, #1
 80132d4:	086a      	lsrs	r2, r5, #1
 80132d6:	fba6 0202 	umull	r0, r2, r6, r2
 80132da:	0892      	lsrs	r2, r2, #2
 80132dc:	202a      	movs	r0, #42	; 0x2a
 80132de:	fb00 5212 	mls	r2, r0, r2, r5
 80132e2:	b2d5      	uxtb	r5, r2
 80132e4:	42a9      	cmp	r1, r5
 80132e6:	f43f af4c 	beq.w	8013182 <uxr_read_framed_msg+0x2ee>
 80132ea:	3302      	adds	r3, #2
 80132ec:	4422      	add	r2, r4
 80132ee:	0859      	lsrs	r1, r3, #1
 80132f0:	fba6 5101 	umull	r5, r1, r6, r1
 80132f4:	7895      	ldrb	r5, [r2, #2]
 80132f6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80132fa:	088a      	lsrs	r2, r1, #2
 80132fc:	fb00 3312 	mls	r3, r0, r2, r3
 8013300:	2d7e      	cmp	r5, #126	; 0x7e
 8013302:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013306:	f43f af3c 	beq.w	8013182 <uxr_read_framed_msg+0x2ee>
 801330a:	f085 0520 	eor.w	r5, r5, #32
 801330e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8013312:	e6e5      	b.n	80130e0 <uxr_read_framed_msg+0x24c>
 8013314:	1c59      	adds	r1, r3, #1
 8013316:	084a      	lsrs	r2, r1, #1
 8013318:	fba6 5202 	umull	r5, r2, r6, r2
 801331c:	0892      	lsrs	r2, r2, #2
 801331e:	252a      	movs	r5, #42	; 0x2a
 8013320:	fb05 1212 	mls	r2, r5, r2, r1
 8013324:	b2d1      	uxtb	r1, r2
 8013326:	4288      	cmp	r0, r1
 8013328:	f43f af29 	beq.w	801317e <uxr_read_framed_msg+0x2ea>
 801332c:	3302      	adds	r3, #2
 801332e:	4422      	add	r2, r4
 8013330:	0858      	lsrs	r0, r3, #1
 8013332:	fba6 1000 	umull	r1, r0, r6, r0
 8013336:	7891      	ldrb	r1, [r2, #2]
 8013338:	0882      	lsrs	r2, r0, #2
 801333a:	fb05 3312 	mls	r3, r5, r2, r3
 801333e:	297e      	cmp	r1, #126	; 0x7e
 8013340:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013344:	d01e      	beq.n	8013384 <uxr_read_framed_msg+0x4f0>
 8013346:	f081 0120 	eor.w	r1, r1, #32
 801334a:	e689      	b.n	8013060 <uxr_read_framed_msg+0x1cc>
 801334c:	1c51      	adds	r1, r2, #1
 801334e:	084b      	lsrs	r3, r1, #1
 8013350:	fba6 5303 	umull	r5, r3, r6, r3
 8013354:	089b      	lsrs	r3, r3, #2
 8013356:	252a      	movs	r5, #42	; 0x2a
 8013358:	fb05 1313 	mls	r3, r5, r3, r1
 801335c:	b2d9      	uxtb	r1, r3
 801335e:	4288      	cmp	r0, r1
 8013360:	f43f af3a 	beq.w	80131d8 <uxr_read_framed_msg+0x344>
 8013364:	3202      	adds	r2, #2
 8013366:	4423      	add	r3, r4
 8013368:	0850      	lsrs	r0, r2, #1
 801336a:	789b      	ldrb	r3, [r3, #2]
 801336c:	fba6 1000 	umull	r1, r0, r6, r0
 8013370:	0880      	lsrs	r0, r0, #2
 8013372:	fb05 2210 	mls	r2, r5, r0, r2
 8013376:	2b7e      	cmp	r3, #126	; 0x7e
 8013378:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801337c:	d014      	beq.n	80133a8 <uxr_read_framed_msg+0x514>
 801337e:	f083 0120 	eor.w	r1, r3, #32
 8013382:	e68a      	b.n	801309a <uxr_read_framed_msg+0x206>
 8013384:	2302      	movs	r3, #2
 8013386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013388:	4649      	mov	r1, r9
 801338a:	e9cd 2300 	strd	r2, r3, [sp]
 801338e:	4620      	mov	r0, r4
 8013390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013392:	4652      	mov	r2, sl
 8013394:	f7ff fcfc 	bl	8012d90 <uxr_framing_read_transport>
 8013398:	2800      	cmp	r0, #0
 801339a:	f47f aeee 	bne.w	801317a <uxr_read_framed_msg+0x2e6>
 801339e:	2301      	movs	r3, #1
 80133a0:	7023      	strb	r3, [r4, #0]
 80133a2:	e589      	b.n	8012eb8 <uxr_read_framed_msg+0x24>
 80133a4:	2301      	movs	r3, #1
 80133a6:	e7ee      	b.n	8013386 <uxr_read_framed_msg+0x4f2>
 80133a8:	2303      	movs	r3, #3
 80133aa:	e7ec      	b.n	8013386 <uxr_read_framed_msg+0x4f2>
 80133ac:	ee17 9a90 	vmov	r9, s15
 80133b0:	e6b1      	b.n	8013116 <uxr_read_framed_msg+0x282>
 80133b2:	bf00      	nop

080133b4 <uxr_stream_id>:
 80133b4:	b410      	push	{r4}
 80133b6:	2901      	cmp	r1, #1
 80133b8:	b083      	sub	sp, #12
 80133ba:	d01f      	beq.n	80133fc <uxr_stream_id+0x48>
 80133bc:	2902      	cmp	r1, #2
 80133be:	f04f 0400 	mov.w	r4, #0
 80133c2:	d01e      	beq.n	8013402 <uxr_stream_id+0x4e>
 80133c4:	2300      	movs	r3, #0
 80133c6:	f364 0307 	bfi	r3, r4, #0, #8
 80133ca:	f360 230f 	bfi	r3, r0, #8, #8
 80133ce:	f361 4317 	bfi	r3, r1, #16, #8
 80133d2:	f362 631f 	bfi	r3, r2, #24, #8
 80133d6:	b2da      	uxtb	r2, r3
 80133d8:	2000      	movs	r0, #0
 80133da:	f362 0007 	bfi	r0, r2, #0, #8
 80133de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80133e2:	f362 200f 	bfi	r0, r2, #8, #8
 80133e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80133ea:	f362 4017 	bfi	r0, r2, #16, #8
 80133ee:	0e1b      	lsrs	r3, r3, #24
 80133f0:	f363 601f 	bfi	r0, r3, #24, #8
 80133f4:	b003      	add	sp, #12
 80133f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133fa:	4770      	bx	lr
 80133fc:	1c44      	adds	r4, r0, #1
 80133fe:	b2e4      	uxtb	r4, r4
 8013400:	e7e0      	b.n	80133c4 <uxr_stream_id+0x10>
 8013402:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8013406:	e7dd      	b.n	80133c4 <uxr_stream_id+0x10>

08013408 <uxr_stream_id_from_raw>:
 8013408:	b410      	push	{r4}
 801340a:	b083      	sub	sp, #12
 801340c:	b128      	cbz	r0, 801341a <uxr_stream_id_from_raw+0x12>
 801340e:	0603      	lsls	r3, r0, #24
 8013410:	d421      	bmi.n	8013456 <uxr_stream_id_from_raw+0x4e>
 8013412:	1e42      	subs	r2, r0, #1
 8013414:	b2d2      	uxtb	r2, r2
 8013416:	2401      	movs	r4, #1
 8013418:	e001      	b.n	801341e <uxr_stream_id_from_raw+0x16>
 801341a:	4604      	mov	r4, r0
 801341c:	4602      	mov	r2, r0
 801341e:	2300      	movs	r3, #0
 8013420:	f360 0307 	bfi	r3, r0, #0, #8
 8013424:	f362 230f 	bfi	r3, r2, #8, #8
 8013428:	f364 4317 	bfi	r3, r4, #16, #8
 801342c:	f361 631f 	bfi	r3, r1, #24, #8
 8013430:	b2da      	uxtb	r2, r3
 8013432:	2000      	movs	r0, #0
 8013434:	f362 0007 	bfi	r0, r2, #0, #8
 8013438:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801343c:	f362 200f 	bfi	r0, r2, #8, #8
 8013440:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013444:	f362 4017 	bfi	r0, r2, #16, #8
 8013448:	0e1b      	lsrs	r3, r3, #24
 801344a:	f363 601f 	bfi	r0, r3, #24, #8
 801344e:	b003      	add	sp, #12
 8013450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013454:	4770      	bx	lr
 8013456:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801345a:	2402      	movs	r4, #2
 801345c:	e7df      	b.n	801341e <uxr_stream_id_from_raw+0x16>
 801345e:	bf00      	nop

08013460 <uxr_init_stream_storage>:
 8013460:	2300      	movs	r3, #0
 8013462:	7403      	strb	r3, [r0, #16]
 8013464:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013468:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801346c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop

08013474 <uxr_reset_stream_storage>:
 8013474:	b570      	push	{r4, r5, r6, lr}
 8013476:	7c03      	ldrb	r3, [r0, #16]
 8013478:	4604      	mov	r4, r0
 801347a:	b153      	cbz	r3, 8013492 <uxr_reset_stream_storage+0x1e>
 801347c:	4606      	mov	r6, r0
 801347e:	2500      	movs	r5, #0
 8013480:	4630      	mov	r0, r6
 8013482:	f005 fe9d 	bl	80191c0 <uxr_reset_output_best_effort_stream>
 8013486:	7c23      	ldrb	r3, [r4, #16]
 8013488:	3501      	adds	r5, #1
 801348a:	42ab      	cmp	r3, r5
 801348c:	f106 0610 	add.w	r6, r6, #16
 8013490:	d8f6      	bhi.n	8013480 <uxr_reset_stream_storage+0xc>
 8013492:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013496:	b163      	cbz	r3, 80134b2 <uxr_reset_stream_storage+0x3e>
 8013498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801349c:	2500      	movs	r5, #0
 801349e:	4630      	mov	r0, r6
 80134a0:	f005 fc9a 	bl	8018dd8 <uxr_reset_input_best_effort_stream>
 80134a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80134a8:	3501      	adds	r5, #1
 80134aa:	42ab      	cmp	r3, r5
 80134ac:	f106 0602 	add.w	r6, r6, #2
 80134b0:	d8f5      	bhi.n	801349e <uxr_reset_stream_storage+0x2a>
 80134b2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80134b6:	b163      	cbz	r3, 80134d2 <uxr_reset_stream_storage+0x5e>
 80134b8:	f104 0618 	add.w	r6, r4, #24
 80134bc:	2500      	movs	r5, #0
 80134be:	4630      	mov	r0, r6
 80134c0:	f005 ff1e 	bl	8019300 <uxr_reset_output_reliable_stream>
 80134c4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80134c8:	3501      	adds	r5, #1
 80134ca:	42ab      	cmp	r3, r5
 80134cc:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80134d0:	d8f5      	bhi.n	80134be <uxr_reset_stream_storage+0x4a>
 80134d2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80134d6:	b163      	cbz	r3, 80134f2 <uxr_reset_stream_storage+0x7e>
 80134d8:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80134dc:	2500      	movs	r5, #0
 80134de:	4630      	mov	r0, r6
 80134e0:	f005 fce2 	bl	8018ea8 <uxr_reset_input_reliable_stream>
 80134e4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80134e8:	3501      	adds	r5, #1
 80134ea:	42ab      	cmp	r3, r5
 80134ec:	f106 0618 	add.w	r6, r6, #24
 80134f0:	d8f5      	bhi.n	80134de <uxr_reset_stream_storage+0x6a>
 80134f2:	bd70      	pop	{r4, r5, r6, pc}

080134f4 <uxr_add_output_best_effort_buffer>:
 80134f4:	b530      	push	{r4, r5, lr}
 80134f6:	7c04      	ldrb	r4, [r0, #16]
 80134f8:	1c65      	adds	r5, r4, #1
 80134fa:	b083      	sub	sp, #12
 80134fc:	7405      	strb	r5, [r0, #16]
 80134fe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013502:	f005 fe51 	bl	80191a8 <uxr_init_output_best_effort_stream>
 8013506:	2201      	movs	r2, #1
 8013508:	4620      	mov	r0, r4
 801350a:	4611      	mov	r1, r2
 801350c:	b003      	add	sp, #12
 801350e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013512:	f7ff bf4f 	b.w	80133b4 <uxr_stream_id>
 8013516:	bf00      	nop

08013518 <uxr_add_output_reliable_buffer>:
 8013518:	b570      	push	{r4, r5, r6, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8013520:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8013524:	9600      	str	r6, [sp, #0]
 8013526:	2528      	movs	r5, #40	; 0x28
 8013528:	1c66      	adds	r6, r4, #1
 801352a:	fb05 0504 	mla	r5, r5, r4, r0
 801352e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8013532:	f105 0018 	add.w	r0, r5, #24
 8013536:	f005 feb1 	bl	801929c <uxr_init_output_reliable_stream>
 801353a:	4620      	mov	r0, r4
 801353c:	2201      	movs	r2, #1
 801353e:	2102      	movs	r1, #2
 8013540:	b004      	add	sp, #16
 8013542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013546:	f7ff bf35 	b.w	80133b4 <uxr_stream_id>
 801354a:	bf00      	nop

0801354c <uxr_add_input_best_effort_buffer>:
 801354c:	b510      	push	{r4, lr}
 801354e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8013552:	1c62      	adds	r2, r4, #1
 8013554:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8013558:	b082      	sub	sp, #8
 801355a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801355e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013562:	f005 fc35 	bl	8018dd0 <uxr_init_input_best_effort_stream>
 8013566:	4620      	mov	r0, r4
 8013568:	2200      	movs	r2, #0
 801356a:	2101      	movs	r1, #1
 801356c:	b002      	add	sp, #8
 801356e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013572:	f7ff bf1f 	b.w	80133b4 <uxr_stream_id>
 8013576:	bf00      	nop

08013578 <uxr_add_input_reliable_buffer>:
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8013580:	9e08      	ldr	r6, [sp, #32]
 8013582:	9600      	str	r6, [sp, #0]
 8013584:	2518      	movs	r5, #24
 8013586:	1c66      	adds	r6, r4, #1
 8013588:	fb05 0504 	mla	r5, r5, r4, r0
 801358c:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8013590:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8013594:	f005 fc64 	bl	8018e60 <uxr_init_input_reliable_stream>
 8013598:	4620      	mov	r0, r4
 801359a:	2200      	movs	r2, #0
 801359c:	2102      	movs	r1, #2
 801359e:	b004      	add	sp, #16
 80135a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135a4:	f7ff bf06 	b.w	80133b4 <uxr_stream_id>

080135a8 <uxr_get_output_best_effort_stream>:
 80135a8:	7c03      	ldrb	r3, [r0, #16]
 80135aa:	428b      	cmp	r3, r1
 80135ac:	bf8c      	ite	hi
 80135ae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80135b2:	2000      	movls	r0, #0
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop

080135b8 <uxr_get_output_reliable_stream>:
 80135b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80135bc:	428b      	cmp	r3, r1
 80135be:	bf83      	ittte	hi
 80135c0:	2328      	movhi	r3, #40	; 0x28
 80135c2:	fb03 0101 	mlahi	r1, r3, r1, r0
 80135c6:	f101 0018 	addhi.w	r0, r1, #24
 80135ca:	2000      	movls	r0, #0
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop

080135d0 <uxr_get_input_best_effort_stream>:
 80135d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80135d4:	428b      	cmp	r3, r1
 80135d6:	bf86      	itte	hi
 80135d8:	3121      	addhi	r1, #33	; 0x21
 80135da:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80135de:	2000      	movls	r0, #0
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop

080135e4 <uxr_get_input_reliable_stream>:
 80135e4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80135e8:	428b      	cmp	r3, r1
 80135ea:	bf83      	ittte	hi
 80135ec:	2318      	movhi	r3, #24
 80135ee:	fb03 0101 	mlahi	r1, r3, r1, r0
 80135f2:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 80135f6:	2000      	movls	r0, #0
 80135f8:	4770      	bx	lr
 80135fa:	bf00      	nop

080135fc <uxr_output_streams_confirmed>:
 80135fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013600:	b183      	cbz	r3, 8013624 <uxr_output_streams_confirmed+0x28>
 8013602:	b570      	push	{r4, r5, r6, lr}
 8013604:	4606      	mov	r6, r0
 8013606:	f100 0518 	add.w	r5, r0, #24
 801360a:	2400      	movs	r4, #0
 801360c:	e001      	b.n	8013612 <uxr_output_streams_confirmed+0x16>
 801360e:	3528      	adds	r5, #40	; 0x28
 8013610:	b138      	cbz	r0, 8013622 <uxr_output_streams_confirmed+0x26>
 8013612:	4628      	mov	r0, r5
 8013614:	f006 f8d8 	bl	80197c8 <uxr_is_output_up_to_date>
 8013618:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801361c:	3401      	adds	r4, #1
 801361e:	42a3      	cmp	r3, r4
 8013620:	d8f5      	bhi.n	801360e <uxr_output_streams_confirmed+0x12>
 8013622:	bd70      	pop	{r4, r5, r6, pc}
 8013624:	2001      	movs	r0, #1
 8013626:	4770      	bx	lr

08013628 <uxr_buffer_submessage_header>:
 8013628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801362a:	4604      	mov	r4, r0
 801362c:	460e      	mov	r6, r1
 801362e:	2104      	movs	r1, #4
 8013630:	4615      	mov	r5, r2
 8013632:	461f      	mov	r7, r3
 8013634:	f7fd fcd6 	bl	8010fe4 <ucdr_align_to>
 8013638:	2301      	movs	r3, #1
 801363a:	ea47 0203 	orr.w	r2, r7, r3
 801363e:	4631      	mov	r1, r6
 8013640:	7523      	strb	r3, [r4, #20]
 8013642:	4620      	mov	r0, r4
 8013644:	462b      	mov	r3, r5
 8013646:	f000 fa2b 	bl	8013aa0 <uxr_serialize_submessage_header>
 801364a:	4620      	mov	r0, r4
 801364c:	f7fd fce0 	bl	8011010 <ucdr_buffer_remaining>
 8013650:	42a8      	cmp	r0, r5
 8013652:	bf34      	ite	cc
 8013654:	2000      	movcc	r0, #0
 8013656:	2001      	movcs	r0, #1
 8013658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801365a:	bf00      	nop

0801365c <uxr_read_submessage_header>:
 801365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013660:	4604      	mov	r4, r0
 8013662:	460d      	mov	r5, r1
 8013664:	2104      	movs	r1, #4
 8013666:	4616      	mov	r6, r2
 8013668:	4698      	mov	r8, r3
 801366a:	f7fd fcbb 	bl	8010fe4 <ucdr_align_to>
 801366e:	4620      	mov	r0, r4
 8013670:	f7fd fcce 	bl	8011010 <ucdr_buffer_remaining>
 8013674:	2803      	cmp	r0, #3
 8013676:	bf8c      	ite	hi
 8013678:	2701      	movhi	r7, #1
 801367a:	2700      	movls	r7, #0
 801367c:	d802      	bhi.n	8013684 <uxr_read_submessage_header+0x28>
 801367e:	4638      	mov	r0, r7
 8013680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013684:	4633      	mov	r3, r6
 8013686:	4642      	mov	r2, r8
 8013688:	4620      	mov	r0, r4
 801368a:	4629      	mov	r1, r5
 801368c:	f000 fa1c 	bl	8013ac8 <uxr_deserialize_submessage_header>
 8013690:	f898 3000 	ldrb.w	r3, [r8]
 8013694:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8013698:	f003 0301 	and.w	r3, r3, #1
 801369c:	f888 2000 	strb.w	r2, [r8]
 80136a0:	7523      	strb	r3, [r4, #20]
 80136a2:	4638      	mov	r0, r7
 80136a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136a8 <uxr_submessage_padding>:
 80136a8:	f010 0003 	ands.w	r0, r0, #3
 80136ac:	bf18      	it	ne
 80136ae:	f1c0 0004 	rsbne	r0, r0, #4
 80136b2:	4770      	bx	lr

080136b4 <uxr_millis>:
 80136b4:	b510      	push	{r4, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	4669      	mov	r1, sp
 80136ba:	2001      	movs	r0, #1
 80136bc:	f7f0 f8e4 	bl	8003888 <clock_gettime>
 80136c0:	e9dd 2400 	ldrd	r2, r4, [sp]
 80136c4:	4907      	ldr	r1, [pc, #28]	; (80136e4 <uxr_millis+0x30>)
 80136c6:	9802      	ldr	r0, [sp, #8]
 80136c8:	fba2 2301 	umull	r2, r3, r2, r1
 80136cc:	fb01 3304 	mla	r3, r1, r4, r3
 80136d0:	4604      	mov	r4, r0
 80136d2:	1810      	adds	r0, r2, r0
 80136d4:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80136d8:	4a03      	ldr	r2, [pc, #12]	; (80136e8 <uxr_millis+0x34>)
 80136da:	2300      	movs	r3, #0
 80136dc:	f7ed faec 	bl	8000cb8 <__aeabi_ldivmod>
 80136e0:	b004      	add	sp, #16
 80136e2:	bd10      	pop	{r4, pc}
 80136e4:	3b9aca00 	.word	0x3b9aca00
 80136e8:	000f4240 	.word	0x000f4240

080136ec <uxr_nanos>:
 80136ec:	b510      	push	{r4, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	4669      	mov	r1, sp
 80136f2:	2001      	movs	r0, #1
 80136f4:	f7f0 f8c8 	bl	8003888 <clock_gettime>
 80136f8:	e9dd 2400 	ldrd	r2, r4, [sp]
 80136fc:	4905      	ldr	r1, [pc, #20]	; (8013714 <uxr_nanos+0x28>)
 80136fe:	9802      	ldr	r0, [sp, #8]
 8013700:	fba2 2301 	umull	r2, r3, r2, r1
 8013704:	fb01 3304 	mla	r3, r1, r4, r3
 8013708:	4604      	mov	r4, r0
 801370a:	1810      	adds	r0, r2, r0
 801370c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013710:	b004      	add	sp, #16
 8013712:	bd10      	pop	{r4, pc}
 8013714:	3b9aca00 	.word	0x3b9aca00

08013718 <on_full_output_buffer_fragmented>:
 8013718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801371c:	460c      	mov	r4, r1
 801371e:	b08a      	sub	sp, #40	; 0x28
 8013720:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8013724:	4606      	mov	r6, r0
 8013726:	f104 0008 	add.w	r0, r4, #8
 801372a:	f7ff ff45 	bl	80135b8 <uxr_get_output_reliable_stream>
 801372e:	4605      	mov	r5, r0
 8013730:	f006 f854 	bl	80197dc <get_available_free_slots>
 8013734:	b968      	cbnz	r0, 8013752 <on_full_output_buffer_fragmented+0x3a>
 8013736:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801373a:	4620      	mov	r0, r4
 801373c:	4798      	blx	r3
 801373e:	b918      	cbnz	r0, 8013748 <on_full_output_buffer_fragmented+0x30>
 8013740:	2001      	movs	r0, #1
 8013742:	b00a      	add	sp, #40	; 0x28
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013748:	4628      	mov	r0, r5
 801374a:	f006 f847 	bl	80197dc <get_available_free_slots>
 801374e:	2800      	cmp	r0, #0
 8013750:	d0f6      	beq.n	8013740 <on_full_output_buffer_fragmented+0x28>
 8013752:	8928      	ldrh	r0, [r5, #8]
 8013754:	89eb      	ldrh	r3, [r5, #14]
 8013756:	7b2a      	ldrb	r2, [r5, #12]
 8013758:	fbb3 f1f0 	udiv	r1, r3, r0
 801375c:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8013760:	fb00 3111 	mls	r1, r0, r1, r3
 8013764:	b28b      	uxth	r3, r1
 8013766:	32fc      	adds	r2, #252	; 0xfc
 8013768:	6869      	ldr	r1, [r5, #4]
 801376a:	fbb1 f1f0 	udiv	r1, r1, r0
 801376e:	1f0f      	subs	r7, r1, #4
 8013770:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8013774:	fb01 f103 	mul.w	r1, r1, r3
 8013778:	443a      	add	r2, r7
 801377a:	682b      	ldr	r3, [r5, #0]
 801377c:	fa1f f882 	uxth.w	r8, r2
 8013780:	3104      	adds	r1, #4
 8013782:	4419      	add	r1, r3
 8013784:	eba0 0008 	sub.w	r0, r0, r8
 8013788:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 801378c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	463a      	mov	r2, r7
 8013794:	2300      	movs	r3, #0
 8013796:	a802      	add	r0, sp, #8
 8013798:	f7fd fbf8 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 801379c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80137a0:	f102 0308 	add.w	r3, r2, #8
 80137a4:	42bb      	cmp	r3, r7
 80137a6:	d927      	bls.n	80137f8 <on_full_output_buffer_fragmented+0xe0>
 80137a8:	4642      	mov	r2, r8
 80137aa:	2300      	movs	r3, #0
 80137ac:	210d      	movs	r1, #13
 80137ae:	a802      	add	r0, sp, #8
 80137b0:	f7ff ff3a 	bl	8013628 <uxr_buffer_submessage_header>
 80137b4:	8928      	ldrh	r0, [r5, #8]
 80137b6:	89eb      	ldrh	r3, [r5, #14]
 80137b8:	fbb3 f1f0 	udiv	r1, r3, r0
 80137bc:	fb00 3111 	mls	r1, r0, r1, r3
 80137c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80137c4:	b289      	uxth	r1, r1
 80137c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80137ca:	fb03 f301 	mul.w	r3, r3, r1
 80137ce:	50d7      	str	r7, [r2, r3]
 80137d0:	89e8      	ldrh	r0, [r5, #14]
 80137d2:	2101      	movs	r1, #1
 80137d4:	f006 f822 	bl	801981c <uxr_seq_num_add>
 80137d8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80137dc:	81e8      	strh	r0, [r5, #14]
 80137de:	1a52      	subs	r2, r2, r1
 80137e0:	4630      	mov	r0, r6
 80137e2:	f7fd fbe5 	bl	8010fb0 <ucdr_init_buffer>
 80137e6:	4630      	mov	r0, r6
 80137e8:	490f      	ldr	r1, [pc, #60]	; (8013828 <on_full_output_buffer_fragmented+0x110>)
 80137ea:	4622      	mov	r2, r4
 80137ec:	f7fd fbb6 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 80137f0:	2000      	movs	r0, #0
 80137f2:	b00a      	add	sp, #40	; 0x28
 80137f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137f8:	b292      	uxth	r2, r2
 80137fa:	2302      	movs	r3, #2
 80137fc:	210d      	movs	r1, #13
 80137fe:	a802      	add	r0, sp, #8
 8013800:	f7ff ff12 	bl	8013628 <uxr_buffer_submessage_header>
 8013804:	8928      	ldrh	r0, [r5, #8]
 8013806:	89eb      	ldrh	r3, [r5, #14]
 8013808:	fbb3 f2f0 	udiv	r2, r3, r0
 801380c:	fb00 3212 	mls	r2, r0, r2, r3
 8013810:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8013814:	686b      	ldr	r3, [r5, #4]
 8013816:	fbb3 f3f0 	udiv	r3, r3, r0
 801381a:	b292      	uxth	r2, r2
 801381c:	6828      	ldr	r0, [r5, #0]
 801381e:	fb03 f302 	mul.w	r3, r3, r2
 8013822:	3108      	adds	r1, #8
 8013824:	50c1      	str	r1, [r0, r3]
 8013826:	e7d3      	b.n	80137d0 <on_full_output_buffer_fragmented+0xb8>
 8013828:	08013719 	.word	0x08013719

0801382c <uxr_prepare_output_stream>:
 801382c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801382e:	b087      	sub	sp, #28
 8013830:	2407      	movs	r4, #7
 8013832:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013834:	9202      	str	r2, [sp, #8]
 8013836:	2500      	movs	r5, #0
 8013838:	1d32      	adds	r2, r6, #4
 801383a:	e9cd 4500 	strd	r4, r5, [sp]
 801383e:	9103      	str	r1, [sp, #12]
 8013840:	461c      	mov	r4, r3
 8013842:	4606      	mov	r6, r0
 8013844:	f7fe ffce 	bl	80127e4 <uxr_prepare_stream_to_write_submessage>
 8013848:	f080 0201 	eor.w	r2, r0, #1
 801384c:	b2d2      	uxtb	r2, r2
 801384e:	75a2      	strb	r2, [r4, #22]
 8013850:	b112      	cbz	r2, 8013858 <uxr_prepare_output_stream+0x2c>
 8013852:	4628      	mov	r0, r5
 8013854:	b007      	add	sp, #28
 8013856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013858:	aa05      	add	r2, sp, #20
 801385a:	9902      	ldr	r1, [sp, #8]
 801385c:	4630      	mov	r0, r6
 801385e:	f7ff f8fb 	bl	8012a58 <uxr_init_base_object_request>
 8013862:	a905      	add	r1, sp, #20
 8013864:	4605      	mov	r5, r0
 8013866:	4620      	mov	r0, r4
 8013868:	f001 f872 	bl	8014950 <uxr_serialize_WRITE_DATA_Payload_Data>
 801386c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013870:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8013874:	1a52      	subs	r2, r2, r1
 8013876:	4620      	mov	r0, r4
 8013878:	f7fd fb9a 	bl	8010fb0 <ucdr_init_buffer>
 801387c:	4620      	mov	r0, r4
 801387e:	463a      	mov	r2, r7
 8013880:	4631      	mov	r1, r6
 8013882:	f7fd fb6b 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 8013886:	4628      	mov	r0, r5
 8013888:	b007      	add	sp, #28
 801388a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801388c <uxr_prepare_output_stream_fragmented>:
 801388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013890:	b093      	sub	sp, #76	; 0x4c
 8013892:	4605      	mov	r5, r0
 8013894:	9107      	str	r1, [sp, #28]
 8013896:	3008      	adds	r0, #8
 8013898:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801389c:	9303      	str	r3, [sp, #12]
 801389e:	9206      	str	r2, [sp, #24]
 80138a0:	f7ff fe8a 	bl	80135b8 <uxr_get_output_reliable_stream>
 80138a4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	f000 8094 	beq.w	80139d6 <uxr_prepare_output_stream_fragmented+0x14a>
 80138ae:	4604      	mov	r4, r0
 80138b0:	2800      	cmp	r0, #0
 80138b2:	f000 8090 	beq.w	80139d6 <uxr_prepare_output_stream_fragmented+0x14a>
 80138b6:	f005 ff91 	bl	80197dc <get_available_free_slots>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	f000 8086 	beq.w	80139cc <uxr_prepare_output_stream_fragmented+0x140>
 80138c0:	8922      	ldrh	r2, [r4, #8]
 80138c2:	89e7      	ldrh	r7, [r4, #14]
 80138c4:	fbb7 f8f2 	udiv	r8, r7, r2
 80138c8:	e9d4 3100 	ldrd	r3, r1, [r4]
 80138cc:	fb02 7818 	mls	r8, r2, r8, r7
 80138d0:	fa1f f888 	uxth.w	r8, r8
 80138d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80138d8:	fb02 f808 	mul.w	r8, r2, r8
 80138dc:	f108 0804 	add.w	r8, r8, #4
 80138e0:	4498      	add	r8, r3
 80138e2:	7b23      	ldrb	r3, [r4, #12]
 80138e4:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80138e8:	9204      	str	r2, [sp, #16]
 80138ea:	4553      	cmp	r3, sl
 80138ec:	f1a2 0b04 	sub.w	fp, r2, #4
 80138f0:	d37d      	bcc.n	80139ee <uxr_prepare_output_stream_fragmented+0x162>
 80138f2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80138f4:	f8cd a000 	str.w	sl, [sp]
 80138f8:	f1ab 0904 	sub.w	r9, fp, #4
 80138fc:	eba9 0903 	sub.w	r9, r9, r3
 8013900:	3608      	adds	r6, #8
 8013902:	a80a      	add	r0, sp, #40	; 0x28
 8013904:	2300      	movs	r3, #0
 8013906:	465a      	mov	r2, fp
 8013908:	4641      	mov	r1, r8
 801390a:	fa1f f989 	uxth.w	r9, r9
 801390e:	9605      	str	r6, [sp, #20]
 8013910:	f7fd fb3c 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 8013914:	455e      	cmp	r6, fp
 8013916:	bf34      	ite	cc
 8013918:	2302      	movcc	r3, #2
 801391a:	2300      	movcs	r3, #0
 801391c:	464a      	mov	r2, r9
 801391e:	210d      	movs	r1, #13
 8013920:	a80a      	add	r0, sp, #40	; 0x28
 8013922:	f7ff fe81 	bl	8013628 <uxr_buffer_submessage_header>
 8013926:	8920      	ldrh	r0, [r4, #8]
 8013928:	fbb7 f3f0 	udiv	r3, r7, r0
 801392c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013930:	fb00 7313 	mls	r3, r0, r3, r7
 8013934:	b29b      	uxth	r3, r3
 8013936:	fbb1 f1f0 	udiv	r1, r1, r0
 801393a:	fb03 f301 	mul.w	r3, r3, r1
 801393e:	4638      	mov	r0, r7
 8013940:	f842 b003 	str.w	fp, [r2, r3]
 8013944:	2101      	movs	r1, #1
 8013946:	f005 ff69 	bl	801981c <uxr_seq_num_add>
 801394a:	9b04      	ldr	r3, [sp, #16]
 801394c:	9e03      	ldr	r6, [sp, #12]
 801394e:	f1a3 0208 	sub.w	r2, r3, #8
 8013952:	f10a 0104 	add.w	r1, sl, #4
 8013956:	4607      	mov	r7, r0
 8013958:	eba2 020a 	sub.w	r2, r2, sl
 801395c:	4441      	add	r1, r8
 801395e:	4630      	mov	r0, r6
 8013960:	f7fd fb26 	bl	8010fb0 <ucdr_init_buffer>
 8013964:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013966:	81e7      	strh	r7, [r4, #14]
 8013968:	1d1a      	adds	r2, r3, #4
 801396a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801396e:	bf28      	it	cs
 8013970:	2200      	movcs	r2, #0
 8013972:	b292      	uxth	r2, r2
 8013974:	2300      	movs	r3, #0
 8013976:	2107      	movs	r1, #7
 8013978:	4630      	mov	r0, r6
 801397a:	f7ff fe55 	bl	8013628 <uxr_buffer_submessage_header>
 801397e:	9906      	ldr	r1, [sp, #24]
 8013980:	aa09      	add	r2, sp, #36	; 0x24
 8013982:	4628      	mov	r0, r5
 8013984:	f7ff f868 	bl	8012a58 <uxr_init_base_object_request>
 8013988:	4604      	mov	r4, r0
 801398a:	b328      	cbz	r0, 80139d8 <uxr_prepare_output_stream_fragmented+0x14c>
 801398c:	9e03      	ldr	r6, [sp, #12]
 801398e:	a909      	add	r1, sp, #36	; 0x24
 8013990:	4630      	mov	r0, r6
 8013992:	f000 ffdd 	bl	8014950 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013996:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801399a:	4630      	mov	r0, r6
 801399c:	1a52      	subs	r2, r2, r1
 801399e:	f7fd fb07 	bl	8010fb0 <ucdr_init_buffer>
 80139a2:	9a05      	ldr	r2, [sp, #20]
 80139a4:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80139a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80139aa:	9b07      	ldr	r3, [sp, #28]
 80139ac:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80139b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80139b2:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 80139b6:	4630      	mov	r0, r6
 80139b8:	4919      	ldr	r1, [pc, #100]	; (8013a20 <uxr_prepare_output_stream_fragmented+0x194>)
 80139ba:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80139be:	462a      	mov	r2, r5
 80139c0:	f7fd facc 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 80139c4:	4620      	mov	r0, r4
 80139c6:	b013      	add	sp, #76	; 0x4c
 80139c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80139ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80139d0:	4628      	mov	r0, r5
 80139d2:	4798      	blx	r3
 80139d4:	b920      	cbnz	r0, 80139e0 <uxr_prepare_output_stream_fragmented+0x154>
 80139d6:	2400      	movs	r4, #0
 80139d8:	4620      	mov	r0, r4
 80139da:	b013      	add	sp, #76	; 0x4c
 80139dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e0:	4620      	mov	r0, r4
 80139e2:	f005 fefb 	bl	80197dc <get_available_free_slots>
 80139e6:	2800      	cmp	r0, #0
 80139e8:	f47f af6a 	bne.w	80138c0 <uxr_prepare_output_stream_fragmented+0x34>
 80139ec:	e7f3      	b.n	80139d6 <uxr_prepare_output_stream_fragmented+0x14a>
 80139ee:	4638      	mov	r0, r7
 80139f0:	2101      	movs	r1, #1
 80139f2:	f005 ff13 	bl	801981c <uxr_seq_num_add>
 80139f6:	8922      	ldrh	r2, [r4, #8]
 80139f8:	fbb0 f8f2 	udiv	r8, r0, r2
 80139fc:	fb02 0818 	mls	r8, r2, r8, r0
 8013a00:	fa1f f888 	uxth.w	r8, r8
 8013a04:	6863      	ldr	r3, [r4, #4]
 8013a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a0a:	6822      	ldr	r2, [r4, #0]
 8013a0c:	fb08 f803 	mul.w	r8, r8, r3
 8013a10:	f108 0804 	add.w	r8, r8, #4
 8013a14:	4490      	add	r8, r2
 8013a16:	7b23      	ldrb	r3, [r4, #12]
 8013a18:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013a1c:	4607      	mov	r7, r0
 8013a1e:	e768      	b.n	80138f2 <uxr_prepare_output_stream_fragmented+0x66>
 8013a20:	08013719 	.word	0x08013719

08013a24 <uxr_serialize_message_header>:
 8013a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a26:	b083      	sub	sp, #12
 8013a28:	4616      	mov	r6, r2
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	9301      	str	r3, [sp, #4]
 8013a2e:	460d      	mov	r5, r1
 8013a30:	9f08      	ldr	r7, [sp, #32]
 8013a32:	f004 fa5d 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013a36:	4631      	mov	r1, r6
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f004 fa59 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013a3e:	9a01      	ldr	r2, [sp, #4]
 8013a40:	4620      	mov	r0, r4
 8013a42:	2101      	movs	r1, #1
 8013a44:	f004 fb00 	bl	8018048 <ucdr_serialize_endian_uint16_t>
 8013a48:	062b      	lsls	r3, r5, #24
 8013a4a:	d501      	bpl.n	8013a50 <uxr_serialize_message_header+0x2c>
 8013a4c:	b003      	add	sp, #12
 8013a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a50:	4639      	mov	r1, r7
 8013a52:	4620      	mov	r0, r4
 8013a54:	2204      	movs	r2, #4
 8013a56:	b003      	add	sp, #12
 8013a58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013a5c:	f004 b950 	b.w	8017d00 <ucdr_serialize_array_uint8_t>

08013a60 <uxr_deserialize_message_header>:
 8013a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a62:	b083      	sub	sp, #12
 8013a64:	4616      	mov	r6, r2
 8013a66:	4604      	mov	r4, r0
 8013a68:	9301      	str	r3, [sp, #4]
 8013a6a:	460d      	mov	r5, r1
 8013a6c:	9f08      	ldr	r7, [sp, #32]
 8013a6e:	f004 fa55 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8013a72:	4631      	mov	r1, r6
 8013a74:	4620      	mov	r0, r4
 8013a76:	f004 fa51 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8013a7a:	9a01      	ldr	r2, [sp, #4]
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	2101      	movs	r1, #1
 8013a80:	f004 fbd6 	bl	8018230 <ucdr_deserialize_endian_uint16_t>
 8013a84:	f995 3000 	ldrsb.w	r3, [r5]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	da01      	bge.n	8013a90 <uxr_deserialize_message_header+0x30>
 8013a8c:	b003      	add	sp, #12
 8013a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a90:	4639      	mov	r1, r7
 8013a92:	4620      	mov	r0, r4
 8013a94:	2204      	movs	r2, #4
 8013a96:	b003      	add	sp, #12
 8013a98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013a9c:	f004 b994 	b.w	8017dc8 <ucdr_deserialize_array_uint8_t>

08013aa0 <uxr_serialize_submessage_header>:
 8013aa0:	b530      	push	{r4, r5, lr}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	4615      	mov	r5, r2
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	9301      	str	r3, [sp, #4]
 8013aaa:	f004 fa21 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013aae:	4629      	mov	r1, r5
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f004 fa1d 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013ab6:	9a01      	ldr	r2, [sp, #4]
 8013ab8:	4620      	mov	r0, r4
 8013aba:	2101      	movs	r1, #1
 8013abc:	b003      	add	sp, #12
 8013abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ac2:	f004 bac1 	b.w	8018048 <ucdr_serialize_endian_uint16_t>
 8013ac6:	bf00      	nop

08013ac8 <uxr_deserialize_submessage_header>:
 8013ac8:	b530      	push	{r4, r5, lr}
 8013aca:	b083      	sub	sp, #12
 8013acc:	4615      	mov	r5, r2
 8013ace:	4604      	mov	r4, r0
 8013ad0:	9301      	str	r3, [sp, #4]
 8013ad2:	f004 fa23 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f004 fa1f 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8013ade:	9a01      	ldr	r2, [sp, #4]
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	b003      	add	sp, #12
 8013ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013aea:	f004 bba1 	b.w	8018230 <ucdr_deserialize_endian_uint16_t>
 8013aee:	bf00      	nop

08013af0 <uxr_serialize_CLIENT_Representation>:
 8013af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013af4:	2204      	movs	r2, #4
 8013af6:	460c      	mov	r4, r1
 8013af8:	4605      	mov	r5, r0
 8013afa:	f004 f901 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013afe:	1d21      	adds	r1, r4, #4
 8013b00:	4607      	mov	r7, r0
 8013b02:	2202      	movs	r2, #2
 8013b04:	4628      	mov	r0, r5
 8013b06:	f004 f8fb 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013b0a:	1da1      	adds	r1, r4, #6
 8013b0c:	4007      	ands	r7, r0
 8013b0e:	2202      	movs	r2, #2
 8013b10:	4628      	mov	r0, r5
 8013b12:	f004 f8f5 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013b16:	fa5f f887 	uxtb.w	r8, r7
 8013b1a:	2204      	movs	r2, #4
 8013b1c:	4607      	mov	r7, r0
 8013b1e:	f104 0108 	add.w	r1, r4, #8
 8013b22:	4628      	mov	r0, r5
 8013b24:	f004 f8ec 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013b28:	ea08 0707 	and.w	r7, r8, r7
 8013b2c:	7b21      	ldrb	r1, [r4, #12]
 8013b2e:	4680      	mov	r8, r0
 8013b30:	4628      	mov	r0, r5
 8013b32:	f004 f9dd 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013b36:	ea08 0807 	and.w	r8, r8, r7
 8013b3a:	7b61      	ldrb	r1, [r4, #13]
 8013b3c:	4607      	mov	r7, r0
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f004 f9a6 	bl	8017e90 <ucdr_serialize_bool>
 8013b44:	7b63      	ldrb	r3, [r4, #13]
 8013b46:	ea08 0707 	and.w	r7, r8, r7
 8013b4a:	ea07 0600 	and.w	r6, r7, r0
 8013b4e:	b933      	cbnz	r3, 8013b5e <uxr_serialize_CLIENT_Representation+0x6e>
 8013b50:	8ba1      	ldrh	r1, [r4, #28]
 8013b52:	4628      	mov	r0, r5
 8013b54:	f004 f9f8 	bl	8017f48 <ucdr_serialize_uint16_t>
 8013b58:	4030      	ands	r0, r6
 8013b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b5e:	6921      	ldr	r1, [r4, #16]
 8013b60:	4628      	mov	r0, r5
 8013b62:	f004 fbdb 	bl	801831c <ucdr_serialize_uint32_t>
 8013b66:	6923      	ldr	r3, [r4, #16]
 8013b68:	b1cb      	cbz	r3, 8013b9e <uxr_serialize_CLIENT_Representation+0xae>
 8013b6a:	b1d0      	cbz	r0, 8013ba2 <uxr_serialize_CLIENT_Representation+0xb2>
 8013b6c:	46a0      	mov	r8, r4
 8013b6e:	f04f 0900 	mov.w	r9, #0
 8013b72:	e002      	b.n	8013b7a <uxr_serialize_CLIENT_Representation+0x8a>
 8013b74:	f108 0808 	add.w	r8, r8, #8
 8013b78:	b198      	cbz	r0, 8013ba2 <uxr_serialize_CLIENT_Representation+0xb2>
 8013b7a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f005 f90e 	bl	8018da0 <ucdr_serialize_string>
 8013b84:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013b88:	4607      	mov	r7, r0
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f005 f908 	bl	8018da0 <ucdr_serialize_string>
 8013b90:	6923      	ldr	r3, [r4, #16]
 8013b92:	f109 0901 	add.w	r9, r9, #1
 8013b96:	4038      	ands	r0, r7
 8013b98:	4599      	cmp	r9, r3
 8013b9a:	b2c0      	uxtb	r0, r0
 8013b9c:	d3ea      	bcc.n	8013b74 <uxr_serialize_CLIENT_Representation+0x84>
 8013b9e:	4006      	ands	r6, r0
 8013ba0:	e7d6      	b.n	8013b50 <uxr_serialize_CLIENT_Representation+0x60>
 8013ba2:	2600      	movs	r6, #0
 8013ba4:	e7d4      	b.n	8013b50 <uxr_serialize_CLIENT_Representation+0x60>
 8013ba6:	bf00      	nop

08013ba8 <uxr_deserialize_CLIENT_Representation>:
 8013ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bac:	2204      	movs	r2, #4
 8013bae:	460c      	mov	r4, r1
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	f004 f909 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8013bb6:	1d21      	adds	r1, r4, #4
 8013bb8:	4607      	mov	r7, r0
 8013bba:	2202      	movs	r2, #2
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f004 f903 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8013bc2:	1da1      	adds	r1, r4, #6
 8013bc4:	4007      	ands	r7, r0
 8013bc6:	2202      	movs	r2, #2
 8013bc8:	4628      	mov	r0, r5
 8013bca:	f004 f8fd 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8013bce:	fa5f f887 	uxtb.w	r8, r7
 8013bd2:	2204      	movs	r2, #4
 8013bd4:	4607      	mov	r7, r0
 8013bd6:	f104 0108 	add.w	r1, r4, #8
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f004 f8f4 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8013be0:	ea08 0707 	and.w	r7, r8, r7
 8013be4:	f104 010c 	add.w	r1, r4, #12
 8013be8:	4680      	mov	r8, r0
 8013bea:	4628      	mov	r0, r5
 8013bec:	f004 f996 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8013bf0:	ea08 0807 	and.w	r8, r8, r7
 8013bf4:	f104 010d 	add.w	r1, r4, #13
 8013bf8:	4607      	mov	r7, r0
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f004 f95e 	bl	8017ebc <ucdr_deserialize_bool>
 8013c00:	7b63      	ldrb	r3, [r4, #13]
 8013c02:	ea08 0707 	and.w	r7, r8, r7
 8013c06:	ea07 0600 	and.w	r6, r7, r0
 8013c0a:	b93b      	cbnz	r3, 8013c1c <uxr_deserialize_CLIENT_Representation+0x74>
 8013c0c:	f104 011c 	add.w	r1, r4, #28
 8013c10:	4628      	mov	r0, r5
 8013c12:	f004 fa99 	bl	8018148 <ucdr_deserialize_uint16_t>
 8013c16:	4030      	ands	r0, r6
 8013c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c1c:	f104 0110 	add.w	r1, r4, #16
 8013c20:	4628      	mov	r0, r5
 8013c22:	f004 fcab 	bl	801857c <ucdr_deserialize_uint32_t>
 8013c26:	6923      	ldr	r3, [r4, #16]
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	d903      	bls.n	8013c34 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	75ab      	strb	r3, [r5, #22]
 8013c30:	2600      	movs	r6, #0
 8013c32:	e7eb      	b.n	8013c0c <uxr_deserialize_CLIENT_Representation+0x64>
 8013c34:	b1fb      	cbz	r3, 8013c76 <uxr_deserialize_CLIENT_Representation+0xce>
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d0fa      	beq.n	8013c30 <uxr_deserialize_CLIENT_Representation+0x88>
 8013c3a:	46a0      	mov	r8, r4
 8013c3c:	f04f 0900 	mov.w	r9, #0
 8013c40:	e003      	b.n	8013c4a <uxr_deserialize_CLIENT_Representation+0xa2>
 8013c42:	f108 0808 	add.w	r8, r8, #8
 8013c46:	2800      	cmp	r0, #0
 8013c48:	d0f2      	beq.n	8013c30 <uxr_deserialize_CLIENT_Representation+0x88>
 8013c4a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c52:	4628      	mov	r0, r5
 8013c54:	f005 f8b4 	bl	8018dc0 <ucdr_deserialize_string>
 8013c58:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013c5c:	4607      	mov	r7, r0
 8013c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c62:	4628      	mov	r0, r5
 8013c64:	f005 f8ac 	bl	8018dc0 <ucdr_deserialize_string>
 8013c68:	6923      	ldr	r3, [r4, #16]
 8013c6a:	f109 0901 	add.w	r9, r9, #1
 8013c6e:	4038      	ands	r0, r7
 8013c70:	4599      	cmp	r9, r3
 8013c72:	b2c0      	uxtb	r0, r0
 8013c74:	d3e5      	bcc.n	8013c42 <uxr_deserialize_CLIENT_Representation+0x9a>
 8013c76:	4006      	ands	r6, r0
 8013c78:	e7c8      	b.n	8013c0c <uxr_deserialize_CLIENT_Representation+0x64>
 8013c7a:	bf00      	nop

08013c7c <uxr_serialize_AGENT_Representation>:
 8013c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c80:	2204      	movs	r2, #4
 8013c82:	460c      	mov	r4, r1
 8013c84:	4605      	mov	r5, r0
 8013c86:	f004 f83b 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013c8a:	1d21      	adds	r1, r4, #4
 8013c8c:	4606      	mov	r6, r0
 8013c8e:	2202      	movs	r2, #2
 8013c90:	4628      	mov	r0, r5
 8013c92:	f004 f835 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013c96:	1da1      	adds	r1, r4, #6
 8013c98:	4006      	ands	r6, r0
 8013c9a:	2202      	movs	r2, #2
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	f004 f82f 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013ca2:	b2f6      	uxtb	r6, r6
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	7a21      	ldrb	r1, [r4, #8]
 8013ca8:	4628      	mov	r0, r5
 8013caa:	401e      	ands	r6, r3
 8013cac:	f004 f8f0 	bl	8017e90 <ucdr_serialize_bool>
 8013cb0:	7a23      	ldrb	r3, [r4, #8]
 8013cb2:	ea00 0706 	and.w	r7, r0, r6
 8013cb6:	b913      	cbnz	r3, 8013cbe <uxr_serialize_AGENT_Representation+0x42>
 8013cb8:	4638      	mov	r0, r7
 8013cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cbe:	68e1      	ldr	r1, [r4, #12]
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f004 fb2b 	bl	801831c <ucdr_serialize_uint32_t>
 8013cc6:	68e3      	ldr	r3, [r4, #12]
 8013cc8:	b313      	cbz	r3, 8013d10 <uxr_serialize_AGENT_Representation+0x94>
 8013cca:	b1e8      	cbz	r0, 8013d08 <uxr_serialize_AGENT_Representation+0x8c>
 8013ccc:	46a0      	mov	r8, r4
 8013cce:	f04f 0900 	mov.w	r9, #0
 8013cd2:	e002      	b.n	8013cda <uxr_serialize_AGENT_Representation+0x5e>
 8013cd4:	f108 0808 	add.w	r8, r8, #8
 8013cd8:	b1b3      	cbz	r3, 8013d08 <uxr_serialize_AGENT_Representation+0x8c>
 8013cda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013cde:	4628      	mov	r0, r5
 8013ce0:	f005 f85e 	bl	8018da0 <ucdr_serialize_string>
 8013ce4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013ce8:	4606      	mov	r6, r0
 8013cea:	4628      	mov	r0, r5
 8013cec:	f005 f858 	bl	8018da0 <ucdr_serialize_string>
 8013cf0:	68e2      	ldr	r2, [r4, #12]
 8013cf2:	f109 0901 	add.w	r9, r9, #1
 8013cf6:	ea06 0300 	and.w	r3, r6, r0
 8013cfa:	4591      	cmp	r9, r2
 8013cfc:	b2db      	uxtb	r3, r3
 8013cfe:	d3e9      	bcc.n	8013cd4 <uxr_serialize_AGENT_Representation+0x58>
 8013d00:	401f      	ands	r7, r3
 8013d02:	4638      	mov	r0, r7
 8013d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d08:	2700      	movs	r7, #0
 8013d0a:	4638      	mov	r0, r7
 8013d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d10:	4007      	ands	r7, r0
 8013d12:	e7d1      	b.n	8013cb8 <uxr_serialize_AGENT_Representation+0x3c>

08013d14 <uxr_serialize_ObjectVariant.part.0>:
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	780b      	ldrb	r3, [r1, #0]
 8013d18:	3b01      	subs	r3, #1
 8013d1a:	460c      	mov	r4, r1
 8013d1c:	4605      	mov	r5, r0
 8013d1e:	2b0d      	cmp	r3, #13
 8013d20:	d869      	bhi.n	8013df6 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013d22:	e8df f003 	tbb	[pc, r3]
 8013d26:	074a      	.short	0x074a
 8013d28:	07073030 	.word	0x07073030
 8013d2c:	21680707 	.word	0x21680707
 8013d30:	45632121 	.word	0x45632121
 8013d34:	7909      	ldrb	r1, [r1, #4]
 8013d36:	f004 f8db 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013d3a:	4606      	mov	r6, r0
 8013d3c:	b158      	cbz	r0, 8013d56 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013d3e:	7923      	ldrb	r3, [r4, #4]
 8013d40:	2b02      	cmp	r3, #2
 8013d42:	d003      	beq.n	8013d4c <uxr_serialize_ObjectVariant.part.0+0x38>
 8013d44:	2b03      	cmp	r3, #3
 8013d46:	d029      	beq.n	8013d9c <uxr_serialize_ObjectVariant.part.0+0x88>
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d104      	bne.n	8013d56 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013d4c:	68a1      	ldr	r1, [r4, #8]
 8013d4e:	4628      	mov	r0, r5
 8013d50:	f005 f826 	bl	8018da0 <ucdr_serialize_string>
 8013d54:	4606      	mov	r6, r0
 8013d56:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013d5a:	4628      	mov	r0, r5
 8013d5c:	2202      	movs	r2, #2
 8013d5e:	f003 ffcf 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8013d62:	4030      	ands	r0, r6
 8013d64:	b2c0      	uxtb	r0, r0
 8013d66:	bd70      	pop	{r4, r5, r6, pc}
 8013d68:	7909      	ldrb	r1, [r1, #4]
 8013d6a:	f004 f8c1 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013d6e:	b1e8      	cbz	r0, 8013dac <uxr_serialize_ObjectVariant.part.0+0x98>
 8013d70:	7923      	ldrb	r3, [r4, #4]
 8013d72:	2b01      	cmp	r3, #1
 8013d74:	d001      	beq.n	8013d7a <uxr_serialize_ObjectVariant.part.0+0x66>
 8013d76:	2b02      	cmp	r3, #2
 8013d78:	d13d      	bne.n	8013df6 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013d7a:	68a1      	ldr	r1, [r4, #8]
 8013d7c:	4628      	mov	r0, r5
 8013d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d82:	f005 b80d 	b.w	8018da0 <ucdr_serialize_string>
 8013d86:	7909      	ldrb	r1, [r1, #4]
 8013d88:	f004 f8b2 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013d8c:	4606      	mov	r6, r0
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d0e1      	beq.n	8013d56 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013d92:	7923      	ldrb	r3, [r4, #4]
 8013d94:	2b02      	cmp	r3, #2
 8013d96:	d0d9      	beq.n	8013d4c <uxr_serialize_ObjectVariant.part.0+0x38>
 8013d98:	2b03      	cmp	r3, #3
 8013d9a:	d1dc      	bne.n	8013d56 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013d9c:	68a2      	ldr	r2, [r4, #8]
 8013d9e:	f104 010c 	add.w	r1, r4, #12
 8013da2:	4628      	mov	r0, r5
 8013da4:	f7fd f9a0 	bl	80110e8 <ucdr_serialize_sequence_uint8_t>
 8013da8:	4606      	mov	r6, r0
 8013daa:	e7d4      	b.n	8013d56 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013dac:	2000      	movs	r0, #0
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
 8013db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013db4:	3104      	adds	r1, #4
 8013db6:	f7ff be9b 	b.w	8013af0 <uxr_serialize_CLIENT_Representation>
 8013dba:	7909      	ldrb	r1, [r1, #4]
 8013dbc:	f004 f898 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	b158      	cbz	r0, 8013ddc <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013dc4:	7923      	ldrb	r3, [r4, #4]
 8013dc6:	2b02      	cmp	r3, #2
 8013dc8:	d003      	beq.n	8013dd2 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013dca:	2b03      	cmp	r3, #3
 8013dcc:	d015      	beq.n	8013dfa <uxr_serialize_ObjectVariant.part.0+0xe6>
 8013dce:	2b01      	cmp	r3, #1
 8013dd0:	d104      	bne.n	8013ddc <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013dd2:	68a1      	ldr	r1, [r4, #8]
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	f004 ffe3 	bl	8018da0 <ucdr_serialize_string>
 8013dda:	4606      	mov	r6, r0
 8013ddc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013de0:	4628      	mov	r0, r5
 8013de2:	f004 fdc1 	bl	8018968 <ucdr_serialize_int16_t>
 8013de6:	4030      	ands	r0, r6
 8013de8:	b2c0      	uxtb	r0, r0
 8013dea:	bd70      	pop	{r4, r5, r6, pc}
 8013dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013df0:	3104      	adds	r1, #4
 8013df2:	f7ff bf43 	b.w	8013c7c <uxr_serialize_AGENT_Representation>
 8013df6:	2001      	movs	r0, #1
 8013df8:	bd70      	pop	{r4, r5, r6, pc}
 8013dfa:	68a2      	ldr	r2, [r4, #8]
 8013dfc:	f104 010c 	add.w	r1, r4, #12
 8013e00:	4628      	mov	r0, r5
 8013e02:	f7fd f971 	bl	80110e8 <ucdr_serialize_sequence_uint8_t>
 8013e06:	4606      	mov	r6, r0
 8013e08:	e7e8      	b.n	8013ddc <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013e0a:	bf00      	nop

08013e0c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	460d      	mov	r5, r1
 8013e10:	7809      	ldrb	r1, [r1, #0]
 8013e12:	4606      	mov	r6, r0
 8013e14:	f004 f83c 	bl	8017e90 <ucdr_serialize_bool>
 8013e18:	782b      	ldrb	r3, [r5, #0]
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	b94b      	cbnz	r3, 8013e32 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013e1e:	7a29      	ldrb	r1, [r5, #8]
 8013e20:	4630      	mov	r0, r6
 8013e22:	f004 f835 	bl	8017e90 <ucdr_serialize_bool>
 8013e26:	7a2b      	ldrb	r3, [r5, #8]
 8013e28:	4004      	ands	r4, r0
 8013e2a:	b2e4      	uxtb	r4, r4
 8013e2c:	b943      	cbnz	r3, 8013e40 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013e2e:	4620      	mov	r0, r4
 8013e30:	bd70      	pop	{r4, r5, r6, pc}
 8013e32:	6869      	ldr	r1, [r5, #4]
 8013e34:	4630      	mov	r0, r6
 8013e36:	f004 ffb3 	bl	8018da0 <ucdr_serialize_string>
 8013e3a:	4004      	ands	r4, r0
 8013e3c:	b2e4      	uxtb	r4, r4
 8013e3e:	e7ee      	b.n	8013e1e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013e40:	68e9      	ldr	r1, [r5, #12]
 8013e42:	4630      	mov	r0, r6
 8013e44:	f004 ffac 	bl	8018da0 <ucdr_serialize_string>
 8013e48:	4004      	ands	r4, r0
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	bd70      	pop	{r4, r5, r6, pc}
 8013e4e:	bf00      	nop

08013e50 <uxr_serialize_OBJK_Topic_Binary>:
 8013e50:	b570      	push	{r4, r5, r6, lr}
 8013e52:	460d      	mov	r5, r1
 8013e54:	6809      	ldr	r1, [r1, #0]
 8013e56:	4606      	mov	r6, r0
 8013e58:	f004 ffa2 	bl	8018da0 <ucdr_serialize_string>
 8013e5c:	7929      	ldrb	r1, [r5, #4]
 8013e5e:	4604      	mov	r4, r0
 8013e60:	4630      	mov	r0, r6
 8013e62:	f004 f815 	bl	8017e90 <ucdr_serialize_bool>
 8013e66:	792b      	ldrb	r3, [r5, #4]
 8013e68:	4004      	ands	r4, r0
 8013e6a:	b2e4      	uxtb	r4, r4
 8013e6c:	b943      	cbnz	r3, 8013e80 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013e6e:	7b29      	ldrb	r1, [r5, #12]
 8013e70:	4630      	mov	r0, r6
 8013e72:	f004 f80d 	bl	8017e90 <ucdr_serialize_bool>
 8013e76:	7b2b      	ldrb	r3, [r5, #12]
 8013e78:	4004      	ands	r4, r0
 8013e7a:	b93b      	cbnz	r3, 8013e8c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	bd70      	pop	{r4, r5, r6, pc}
 8013e80:	68a9      	ldr	r1, [r5, #8]
 8013e82:	4630      	mov	r0, r6
 8013e84:	f004 ff8c 	bl	8018da0 <ucdr_serialize_string>
 8013e88:	4004      	ands	r4, r0
 8013e8a:	e7f0      	b.n	8013e6e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013e8c:	6929      	ldr	r1, [r5, #16]
 8013e8e:	4630      	mov	r0, r6
 8013e90:	f004 ff86 	bl	8018da0 <ucdr_serialize_string>
 8013e94:	4004      	ands	r4, r0
 8013e96:	b2e4      	uxtb	r4, r4
 8013e98:	4620      	mov	r0, r4
 8013e9a:	bd70      	pop	{r4, r5, r6, pc}

08013e9c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ea0:	460c      	mov	r4, r1
 8013ea2:	7809      	ldrb	r1, [r1, #0]
 8013ea4:	4606      	mov	r6, r0
 8013ea6:	f003 fff3 	bl	8017e90 <ucdr_serialize_bool>
 8013eaa:	7823      	ldrb	r3, [r4, #0]
 8013eac:	4605      	mov	r5, r0
 8013eae:	b96b      	cbnz	r3, 8013ecc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013eb0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f003 ffeb 	bl	8017e90 <ucdr_serialize_bool>
 8013eba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013ebe:	4005      	ands	r5, r0
 8013ec0:	b2ed      	uxtb	r5, r5
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d169      	bne.n	8013f9a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013ec6:	4628      	mov	r0, r5
 8013ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ecc:	6861      	ldr	r1, [r4, #4]
 8013ece:	4630      	mov	r0, r6
 8013ed0:	f004 fa24 	bl	801831c <ucdr_serialize_uint32_t>
 8013ed4:	6863      	ldr	r3, [r4, #4]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d06b      	beq.n	8013fb2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d067      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ede:	68a1      	ldr	r1, [r4, #8]
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f004 ff5d 	bl	8018da0 <ucdr_serialize_string>
 8013ee6:	6863      	ldr	r3, [r4, #4]
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	d953      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d05e      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ef0:	68e1      	ldr	r1, [r4, #12]
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f004 ff54 	bl	8018da0 <ucdr_serialize_string>
 8013ef8:	6863      	ldr	r3, [r4, #4]
 8013efa:	2b02      	cmp	r3, #2
 8013efc:	d94a      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d055      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f02:	6921      	ldr	r1, [r4, #16]
 8013f04:	4630      	mov	r0, r6
 8013f06:	f004 ff4b 	bl	8018da0 <ucdr_serialize_string>
 8013f0a:	6863      	ldr	r3, [r4, #4]
 8013f0c:	2b03      	cmp	r3, #3
 8013f0e:	d941      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d04c      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f14:	6961      	ldr	r1, [r4, #20]
 8013f16:	4630      	mov	r0, r6
 8013f18:	f004 ff42 	bl	8018da0 <ucdr_serialize_string>
 8013f1c:	6863      	ldr	r3, [r4, #4]
 8013f1e:	2b04      	cmp	r3, #4
 8013f20:	d938      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f22:	2800      	cmp	r0, #0
 8013f24:	d043      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f26:	69a1      	ldr	r1, [r4, #24]
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f004 ff39 	bl	8018da0 <ucdr_serialize_string>
 8013f2e:	6863      	ldr	r3, [r4, #4]
 8013f30:	2b05      	cmp	r3, #5
 8013f32:	d92f      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d03a      	beq.n	8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f38:	69e1      	ldr	r1, [r4, #28]
 8013f3a:	4630      	mov	r0, r6
 8013f3c:	f004 ff30 	bl	8018da0 <ucdr_serialize_string>
 8013f40:	6863      	ldr	r3, [r4, #4]
 8013f42:	2b06      	cmp	r3, #6
 8013f44:	d926      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f46:	b390      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f48:	6a21      	ldr	r1, [r4, #32]
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f004 ff28 	bl	8018da0 <ucdr_serialize_string>
 8013f50:	6863      	ldr	r3, [r4, #4]
 8013f52:	2b07      	cmp	r3, #7
 8013f54:	d91e      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f56:	b350      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	f004 ff20 	bl	8018da0 <ucdr_serialize_string>
 8013f60:	6863      	ldr	r3, [r4, #4]
 8013f62:	2b08      	cmp	r3, #8
 8013f64:	d916      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f66:	b310      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013f6a:	4630      	mov	r0, r6
 8013f6c:	f004 ff18 	bl	8018da0 <ucdr_serialize_string>
 8013f70:	6863      	ldr	r3, [r4, #4]
 8013f72:	2b09      	cmp	r3, #9
 8013f74:	d90e      	bls.n	8013f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013f76:	b1d0      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f78:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013f7c:	2709      	movs	r7, #9
 8013f7e:	e000      	b.n	8013f82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013f80:	b1a8      	cbz	r0, 8013fae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013f82:	f858 1b04 	ldr.w	r1, [r8], #4
 8013f86:	4630      	mov	r0, r6
 8013f88:	f004 ff0a 	bl	8018da0 <ucdr_serialize_string>
 8013f8c:	6862      	ldr	r2, [r4, #4]
 8013f8e:	3701      	adds	r7, #1
 8013f90:	4297      	cmp	r7, r2
 8013f92:	d3f5      	bcc.n	8013f80 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013f94:	4005      	ands	r5, r0
 8013f96:	b2ed      	uxtb	r5, r5
 8013f98:	e78a      	b.n	8013eb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013f9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013fa2:	f7fd f8a1 	bl	80110e8 <ucdr_serialize_sequence_uint8_t>
 8013fa6:	4005      	ands	r5, r0
 8013fa8:	4628      	mov	r0, r5
 8013faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fae:	2500      	movs	r5, #0
 8013fb0:	e77e      	b.n	8013eb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013fb2:	4028      	ands	r0, r5
 8013fb4:	b2c5      	uxtb	r5, r0
 8013fb6:	e77b      	b.n	8013eb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013fb8 <uxr_serialize_OBJK_Publisher_Binary>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	460d      	mov	r5, r1
 8013fbc:	7809      	ldrb	r1, [r1, #0]
 8013fbe:	4606      	mov	r6, r0
 8013fc0:	f003 ff66 	bl	8017e90 <ucdr_serialize_bool>
 8013fc4:	782b      	ldrb	r3, [r5, #0]
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	b94b      	cbnz	r3, 8013fde <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013fca:	7a29      	ldrb	r1, [r5, #8]
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f003 ff5f 	bl	8017e90 <ucdr_serialize_bool>
 8013fd2:	7a2b      	ldrb	r3, [r5, #8]
 8013fd4:	4004      	ands	r4, r0
 8013fd6:	b2e4      	uxtb	r4, r4
 8013fd8:	b943      	cbnz	r3, 8013fec <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	bd70      	pop	{r4, r5, r6, pc}
 8013fde:	6869      	ldr	r1, [r5, #4]
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f004 fedd 	bl	8018da0 <ucdr_serialize_string>
 8013fe6:	4004      	ands	r4, r0
 8013fe8:	b2e4      	uxtb	r4, r4
 8013fea:	e7ee      	b.n	8013fca <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013fec:	f105 010c 	add.w	r1, r5, #12
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f7ff ff53 	bl	8013e9c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013ff6:	4004      	ands	r4, r0
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	bd70      	pop	{r4, r5, r6, pc}

08013ffc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014000:	460c      	mov	r4, r1
 8014002:	7809      	ldrb	r1, [r1, #0]
 8014004:	4606      	mov	r6, r0
 8014006:	f003 ff43 	bl	8017e90 <ucdr_serialize_bool>
 801400a:	7823      	ldrb	r3, [r4, #0]
 801400c:	4605      	mov	r5, r0
 801400e:	b96b      	cbnz	r3, 801402c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014010:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8014014:	4630      	mov	r0, r6
 8014016:	f003 ff3b 	bl	8017e90 <ucdr_serialize_bool>
 801401a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801401e:	4005      	ands	r5, r0
 8014020:	b2ed      	uxtb	r5, r5
 8014022:	2b00      	cmp	r3, #0
 8014024:	d169      	bne.n	80140fa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8014026:	4628      	mov	r0, r5
 8014028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801402c:	6861      	ldr	r1, [r4, #4]
 801402e:	4630      	mov	r0, r6
 8014030:	f004 f974 	bl	801831c <ucdr_serialize_uint32_t>
 8014034:	6863      	ldr	r3, [r4, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d06b      	beq.n	8014112 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801403a:	2800      	cmp	r0, #0
 801403c:	d067      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801403e:	68a1      	ldr	r1, [r4, #8]
 8014040:	4630      	mov	r0, r6
 8014042:	f004 fead 	bl	8018da0 <ucdr_serialize_string>
 8014046:	6863      	ldr	r3, [r4, #4]
 8014048:	2b01      	cmp	r3, #1
 801404a:	d953      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801404c:	2800      	cmp	r0, #0
 801404e:	d05e      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014050:	68e1      	ldr	r1, [r4, #12]
 8014052:	4630      	mov	r0, r6
 8014054:	f004 fea4 	bl	8018da0 <ucdr_serialize_string>
 8014058:	6863      	ldr	r3, [r4, #4]
 801405a:	2b02      	cmp	r3, #2
 801405c:	d94a      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801405e:	2800      	cmp	r0, #0
 8014060:	d055      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014062:	6921      	ldr	r1, [r4, #16]
 8014064:	4630      	mov	r0, r6
 8014066:	f004 fe9b 	bl	8018da0 <ucdr_serialize_string>
 801406a:	6863      	ldr	r3, [r4, #4]
 801406c:	2b03      	cmp	r3, #3
 801406e:	d941      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014070:	2800      	cmp	r0, #0
 8014072:	d04c      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014074:	6961      	ldr	r1, [r4, #20]
 8014076:	4630      	mov	r0, r6
 8014078:	f004 fe92 	bl	8018da0 <ucdr_serialize_string>
 801407c:	6863      	ldr	r3, [r4, #4]
 801407e:	2b04      	cmp	r3, #4
 8014080:	d938      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014082:	2800      	cmp	r0, #0
 8014084:	d043      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014086:	69a1      	ldr	r1, [r4, #24]
 8014088:	4630      	mov	r0, r6
 801408a:	f004 fe89 	bl	8018da0 <ucdr_serialize_string>
 801408e:	6863      	ldr	r3, [r4, #4]
 8014090:	2b05      	cmp	r3, #5
 8014092:	d92f      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014094:	2800      	cmp	r0, #0
 8014096:	d03a      	beq.n	801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014098:	69e1      	ldr	r1, [r4, #28]
 801409a:	4630      	mov	r0, r6
 801409c:	f004 fe80 	bl	8018da0 <ucdr_serialize_string>
 80140a0:	6863      	ldr	r3, [r4, #4]
 80140a2:	2b06      	cmp	r3, #6
 80140a4:	d926      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140a6:	b390      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140a8:	6a21      	ldr	r1, [r4, #32]
 80140aa:	4630      	mov	r0, r6
 80140ac:	f004 fe78 	bl	8018da0 <ucdr_serialize_string>
 80140b0:	6863      	ldr	r3, [r4, #4]
 80140b2:	2b07      	cmp	r3, #7
 80140b4:	d91e      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140b6:	b350      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80140ba:	4630      	mov	r0, r6
 80140bc:	f004 fe70 	bl	8018da0 <ucdr_serialize_string>
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	2b08      	cmp	r3, #8
 80140c4:	d916      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140c6:	b310      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80140ca:	4630      	mov	r0, r6
 80140cc:	f004 fe68 	bl	8018da0 <ucdr_serialize_string>
 80140d0:	6863      	ldr	r3, [r4, #4]
 80140d2:	2b09      	cmp	r3, #9
 80140d4:	d90e      	bls.n	80140f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80140d6:	b1d0      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140d8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80140dc:	2709      	movs	r7, #9
 80140de:	e000      	b.n	80140e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80140e0:	b1a8      	cbz	r0, 801410e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80140e2:	f858 1b04 	ldr.w	r1, [r8], #4
 80140e6:	4630      	mov	r0, r6
 80140e8:	f004 fe5a 	bl	8018da0 <ucdr_serialize_string>
 80140ec:	6862      	ldr	r2, [r4, #4]
 80140ee:	3701      	adds	r7, #1
 80140f0:	4297      	cmp	r7, r2
 80140f2:	d3f5      	bcc.n	80140e0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80140f4:	4005      	ands	r5, r0
 80140f6:	b2ed      	uxtb	r5, r5
 80140f8:	e78a      	b.n	8014010 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80140fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80140fc:	4630      	mov	r0, r6
 80140fe:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014102:	f7fc fff1 	bl	80110e8 <ucdr_serialize_sequence_uint8_t>
 8014106:	4005      	ands	r5, r0
 8014108:	4628      	mov	r0, r5
 801410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801410e:	2500      	movs	r5, #0
 8014110:	e77e      	b.n	8014010 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014112:	4028      	ands	r0, r5
 8014114:	b2c5      	uxtb	r5, r0
 8014116:	e77b      	b.n	8014010 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08014118 <uxr_serialize_OBJK_Subscriber_Binary>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	460d      	mov	r5, r1
 801411c:	7809      	ldrb	r1, [r1, #0]
 801411e:	4606      	mov	r6, r0
 8014120:	f003 feb6 	bl	8017e90 <ucdr_serialize_bool>
 8014124:	782b      	ldrb	r3, [r5, #0]
 8014126:	4604      	mov	r4, r0
 8014128:	b94b      	cbnz	r3, 801413e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801412a:	7a29      	ldrb	r1, [r5, #8]
 801412c:	4630      	mov	r0, r6
 801412e:	f003 feaf 	bl	8017e90 <ucdr_serialize_bool>
 8014132:	7a2b      	ldrb	r3, [r5, #8]
 8014134:	4004      	ands	r4, r0
 8014136:	b2e4      	uxtb	r4, r4
 8014138:	b943      	cbnz	r3, 801414c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801413a:	4620      	mov	r0, r4
 801413c:	bd70      	pop	{r4, r5, r6, pc}
 801413e:	6869      	ldr	r1, [r5, #4]
 8014140:	4630      	mov	r0, r6
 8014142:	f004 fe2d 	bl	8018da0 <ucdr_serialize_string>
 8014146:	4004      	ands	r4, r0
 8014148:	b2e4      	uxtb	r4, r4
 801414a:	e7ee      	b.n	801412a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801414c:	f105 010c 	add.w	r1, r5, #12
 8014150:	4630      	mov	r0, r6
 8014152:	f7ff ff53 	bl	8013ffc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8014156:	4004      	ands	r4, r0
 8014158:	4620      	mov	r0, r4
 801415a:	bd70      	pop	{r4, r5, r6, pc}

0801415c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801415c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014160:	4688      	mov	r8, r1
 8014162:	8809      	ldrh	r1, [r1, #0]
 8014164:	4681      	mov	r9, r0
 8014166:	f003 feef 	bl	8017f48 <ucdr_serialize_uint16_t>
 801416a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801416e:	4606      	mov	r6, r0
 8014170:	4648      	mov	r0, r9
 8014172:	f003 fe8d 	bl	8017e90 <ucdr_serialize_bool>
 8014176:	f898 3002 	ldrb.w	r3, [r8, #2]
 801417a:	4030      	ands	r0, r6
 801417c:	b2c5      	uxtb	r5, r0
 801417e:	b9eb      	cbnz	r3, 80141bc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014180:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014184:	4648      	mov	r0, r9
 8014186:	f003 fe83 	bl	8017e90 <ucdr_serialize_bool>
 801418a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801418e:	4005      	ands	r5, r0
 8014190:	bb7b      	cbnz	r3, 80141f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014192:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014196:	4648      	mov	r0, r9
 8014198:	f003 fe7a 	bl	8017e90 <ucdr_serialize_bool>
 801419c:	f898 300c 	ldrb.w	r3, [r8, #12]
 80141a0:	4005      	ands	r5, r0
 80141a2:	b9f3      	cbnz	r3, 80141e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80141a4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80141a8:	4648      	mov	r0, r9
 80141aa:	f003 fe71 	bl	8017e90 <ucdr_serialize_bool>
 80141ae:	f898 3014 	ldrb.w	r3, [r8, #20]
 80141b2:	4005      	ands	r5, r0
 80141b4:	b94b      	cbnz	r3, 80141ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80141b6:	4628      	mov	r0, r5
 80141b8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80141bc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80141c0:	4648      	mov	r0, r9
 80141c2:	f003 fec1 	bl	8017f48 <ucdr_serialize_uint16_t>
 80141c6:	4005      	ands	r5, r0
 80141c8:	e7da      	b.n	8014180 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80141ca:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80141ce:	4648      	mov	r0, r9
 80141d0:	f108 011c 	add.w	r1, r8, #28
 80141d4:	f7fc ff88 	bl	80110e8 <ucdr_serialize_sequence_uint8_t>
 80141d8:	4028      	ands	r0, r5
 80141da:	b2c5      	uxtb	r5, r0
 80141dc:	4628      	mov	r0, r5
 80141de:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80141e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80141e6:	4648      	mov	r0, r9
 80141e8:	f004 f898 	bl	801831c <ucdr_serialize_uint32_t>
 80141ec:	4028      	ands	r0, r5
 80141ee:	b2c5      	uxtb	r5, r0
 80141f0:	e7d8      	b.n	80141a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80141f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80141f6:	4648      	mov	r0, r9
 80141f8:	f004 f890 	bl	801831c <ucdr_serialize_uint32_t>
 80141fc:	4028      	ands	r0, r5
 80141fe:	b2c5      	uxtb	r5, r0
 8014200:	e7c7      	b.n	8014192 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014202:	bf00      	nop

08014204 <uxr_serialize_OBJK_DataReader_Binary>:
 8014204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014206:	2202      	movs	r2, #2
 8014208:	460c      	mov	r4, r1
 801420a:	4606      	mov	r6, r0
 801420c:	f003 fd78 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014210:	78a1      	ldrb	r1, [r4, #2]
 8014212:	4605      	mov	r5, r0
 8014214:	4630      	mov	r0, r6
 8014216:	f003 fe3b 	bl	8017e90 <ucdr_serialize_bool>
 801421a:	78a3      	ldrb	r3, [r4, #2]
 801421c:	4005      	ands	r5, r0
 801421e:	b2ed      	uxtb	r5, r5
 8014220:	b90b      	cbnz	r3, 8014226 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014222:	4628      	mov	r0, r5
 8014224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014226:	f104 0108 	add.w	r1, r4, #8
 801422a:	4630      	mov	r0, r6
 801422c:	f7ff ff96 	bl	801415c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014230:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014234:	4607      	mov	r7, r0
 8014236:	4630      	mov	r0, r6
 8014238:	f003 fe2a 	bl	8017e90 <ucdr_serialize_bool>
 801423c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014240:	4038      	ands	r0, r7
 8014242:	b2c7      	uxtb	r7, r0
 8014244:	b95b      	cbnz	r3, 801425e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014246:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801424a:	4630      	mov	r0, r6
 801424c:	f003 fe20 	bl	8017e90 <ucdr_serialize_bool>
 8014250:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014254:	4007      	ands	r7, r0
 8014256:	b94b      	cbnz	r3, 801426c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014258:	403d      	ands	r5, r7
 801425a:	4628      	mov	r0, r5
 801425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801425e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8014262:	4630      	mov	r0, r6
 8014264:	f004 fab0 	bl	80187c8 <ucdr_serialize_uint64_t>
 8014268:	4007      	ands	r7, r0
 801426a:	e7ec      	b.n	8014246 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801426c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801426e:	4630      	mov	r0, r6
 8014270:	f004 fd96 	bl	8018da0 <ucdr_serialize_string>
 8014274:	4007      	ands	r7, r0
 8014276:	b2ff      	uxtb	r7, r7
 8014278:	e7ee      	b.n	8014258 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801427a:	bf00      	nop

0801427c <uxr_serialize_OBJK_DataWriter_Binary>:
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	2202      	movs	r2, #2
 8014280:	460d      	mov	r5, r1
 8014282:	4606      	mov	r6, r0
 8014284:	f003 fd3c 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014288:	78a9      	ldrb	r1, [r5, #2]
 801428a:	4604      	mov	r4, r0
 801428c:	4630      	mov	r0, r6
 801428e:	f003 fdff 	bl	8017e90 <ucdr_serialize_bool>
 8014292:	78ab      	ldrb	r3, [r5, #2]
 8014294:	4004      	ands	r4, r0
 8014296:	b2e4      	uxtb	r4, r4
 8014298:	b90b      	cbnz	r3, 801429e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801429a:	4620      	mov	r0, r4
 801429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801429e:	f105 0108 	add.w	r1, r5, #8
 80142a2:	4630      	mov	r0, r6
 80142a4:	f7ff ff5a 	bl	801415c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80142a8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80142ac:	4607      	mov	r7, r0
 80142ae:	4630      	mov	r0, r6
 80142b0:	f003 fdee 	bl	8017e90 <ucdr_serialize_bool>
 80142b4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80142b8:	4007      	ands	r7, r0
 80142ba:	b2ff      	uxtb	r7, r7
 80142bc:	b913      	cbnz	r3, 80142c4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80142be:	403c      	ands	r4, r7
 80142c0:	4620      	mov	r0, r4
 80142c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142c4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80142c8:	4630      	mov	r0, r6
 80142ca:	f004 fa7d 	bl	80187c8 <ucdr_serialize_uint64_t>
 80142ce:	4007      	ands	r7, r0
 80142d0:	e7f5      	b.n	80142be <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80142d2:	bf00      	nop

080142d4 <uxr_deserialize_ObjectVariant>:
 80142d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142d6:	4605      	mov	r5, r0
 80142d8:	460e      	mov	r6, r1
 80142da:	f003 fe1f 	bl	8017f1c <ucdr_deserialize_uint8_t>
 80142de:	b320      	cbz	r0, 801432a <uxr_deserialize_ObjectVariant+0x56>
 80142e0:	7833      	ldrb	r3, [r6, #0]
 80142e2:	3b01      	subs	r3, #1
 80142e4:	4604      	mov	r4, r0
 80142e6:	2b0d      	cmp	r3, #13
 80142e8:	d81d      	bhi.n	8014326 <uxr_deserialize_ObjectVariant+0x52>
 80142ea:	e8df f003 	tbb	[pc, r3]
 80142ee:	2107      	.short	0x2107
 80142f0:	21214b4b 	.word	0x21214b4b
 80142f4:	381c2121 	.word	0x381c2121
 80142f8:	876a3838 	.word	0x876a3838
 80142fc:	1d31      	adds	r1, r6, #4
 80142fe:	4628      	mov	r0, r5
 8014300:	f003 fe0c 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014304:	4607      	mov	r7, r0
 8014306:	b138      	cbz	r0, 8014318 <uxr_deserialize_ObjectVariant+0x44>
 8014308:	7933      	ldrb	r3, [r6, #4]
 801430a:	2b02      	cmp	r3, #2
 801430c:	d07c      	beq.n	8014408 <uxr_deserialize_ObjectVariant+0x134>
 801430e:	2b03      	cmp	r3, #3
 8014310:	f000 8082 	beq.w	8014418 <uxr_deserialize_ObjectVariant+0x144>
 8014314:	2b01      	cmp	r3, #1
 8014316:	d077      	beq.n	8014408 <uxr_deserialize_ObjectVariant+0x134>
 8014318:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801431c:	4628      	mov	r0, r5
 801431e:	f004 fba3 	bl	8018a68 <ucdr_deserialize_int16_t>
 8014322:	4038      	ands	r0, r7
 8014324:	b2c4      	uxtb	r4, r0
 8014326:	4620      	mov	r0, r4
 8014328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801432a:	2400      	movs	r4, #0
 801432c:	4620      	mov	r0, r4
 801432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014330:	1d31      	adds	r1, r6, #4
 8014332:	4628      	mov	r0, r5
 8014334:	f003 fdf2 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014338:	4607      	mov	r7, r0
 801433a:	b130      	cbz	r0, 801434a <uxr_deserialize_ObjectVariant+0x76>
 801433c:	7933      	ldrb	r3, [r6, #4]
 801433e:	2b02      	cmp	r3, #2
 8014340:	d037      	beq.n	80143b2 <uxr_deserialize_ObjectVariant+0xde>
 8014342:	2b03      	cmp	r3, #3
 8014344:	d02a      	beq.n	801439c <uxr_deserialize_ObjectVariant+0xc8>
 8014346:	2b01      	cmp	r3, #1
 8014348:	d033      	beq.n	80143b2 <uxr_deserialize_ObjectVariant+0xde>
 801434a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801434e:	4628      	mov	r0, r5
 8014350:	2202      	movs	r2, #2
 8014352:	f003 fd39 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014356:	4038      	ands	r0, r7
 8014358:	b2c4      	uxtb	r4, r0
 801435a:	4620      	mov	r0, r4
 801435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801435e:	1d31      	adds	r1, r6, #4
 8014360:	4628      	mov	r0, r5
 8014362:	f003 fddb 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014366:	2800      	cmp	r0, #0
 8014368:	d0df      	beq.n	801432a <uxr_deserialize_ObjectVariant+0x56>
 801436a:	7933      	ldrb	r3, [r6, #4]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d001      	beq.n	8014374 <uxr_deserialize_ObjectVariant+0xa0>
 8014370:	2b02      	cmp	r3, #2
 8014372:	d1d8      	bne.n	8014326 <uxr_deserialize_ObjectVariant+0x52>
 8014374:	68b1      	ldr	r1, [r6, #8]
 8014376:	4628      	mov	r0, r5
 8014378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801437c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014380:	f004 bd1e 	b.w	8018dc0 <ucdr_deserialize_string>
 8014384:	1d31      	adds	r1, r6, #4
 8014386:	4628      	mov	r0, r5
 8014388:	f003 fdc8 	bl	8017f1c <ucdr_deserialize_uint8_t>
 801438c:	4607      	mov	r7, r0
 801438e:	2800      	cmp	r0, #0
 8014390:	d0db      	beq.n	801434a <uxr_deserialize_ObjectVariant+0x76>
 8014392:	7933      	ldrb	r3, [r6, #4]
 8014394:	2b02      	cmp	r3, #2
 8014396:	d00c      	beq.n	80143b2 <uxr_deserialize_ObjectVariant+0xde>
 8014398:	2b03      	cmp	r3, #3
 801439a:	d1d6      	bne.n	801434a <uxr_deserialize_ObjectVariant+0x76>
 801439c:	f106 0308 	add.w	r3, r6, #8
 80143a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80143a4:	f106 010c 	add.w	r1, r6, #12
 80143a8:	4628      	mov	r0, r5
 80143aa:	f7fc feaf 	bl	801110c <ucdr_deserialize_sequence_uint8_t>
 80143ae:	4607      	mov	r7, r0
 80143b0:	e7cb      	b.n	801434a <uxr_deserialize_ObjectVariant+0x76>
 80143b2:	68b1      	ldr	r1, [r6, #8]
 80143b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80143b8:	4628      	mov	r0, r5
 80143ba:	f004 fd01 	bl	8018dc0 <ucdr_deserialize_string>
 80143be:	4607      	mov	r7, r0
 80143c0:	e7c3      	b.n	801434a <uxr_deserialize_ObjectVariant+0x76>
 80143c2:	2204      	movs	r2, #4
 80143c4:	18b1      	adds	r1, r6, r2
 80143c6:	4628      	mov	r0, r5
 80143c8:	f003 fcfe 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80143cc:	2202      	movs	r2, #2
 80143ce:	4604      	mov	r4, r0
 80143d0:	f106 0108 	add.w	r1, r6, #8
 80143d4:	4628      	mov	r0, r5
 80143d6:	f003 fcf7 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80143da:	2202      	movs	r2, #2
 80143dc:	4004      	ands	r4, r0
 80143de:	f106 010a 	add.w	r1, r6, #10
 80143e2:	4628      	mov	r0, r5
 80143e4:	f003 fcf0 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80143e8:	b2e4      	uxtb	r4, r4
 80143ea:	4603      	mov	r3, r0
 80143ec:	f106 010c 	add.w	r1, r6, #12
 80143f0:	4628      	mov	r0, r5
 80143f2:	401c      	ands	r4, r3
 80143f4:	f003 fd62 	bl	8017ebc <ucdr_deserialize_bool>
 80143f8:	4004      	ands	r4, r0
 80143fa:	e794      	b.n	8014326 <uxr_deserialize_ObjectVariant+0x52>
 80143fc:	1d31      	adds	r1, r6, #4
 80143fe:	4628      	mov	r0, r5
 8014400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014404:	f7ff bbd0 	b.w	8013ba8 <uxr_deserialize_CLIENT_Representation>
 8014408:	68b1      	ldr	r1, [r6, #8]
 801440a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801440e:	4628      	mov	r0, r5
 8014410:	f004 fcd6 	bl	8018dc0 <ucdr_deserialize_string>
 8014414:	4607      	mov	r7, r0
 8014416:	e77f      	b.n	8014318 <uxr_deserialize_ObjectVariant+0x44>
 8014418:	f106 0308 	add.w	r3, r6, #8
 801441c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014420:	f106 010c 	add.w	r1, r6, #12
 8014424:	4628      	mov	r0, r5
 8014426:	f7fc fe71 	bl	801110c <ucdr_deserialize_sequence_uint8_t>
 801442a:	4607      	mov	r7, r0
 801442c:	e774      	b.n	8014318 <uxr_deserialize_ObjectVariant+0x44>
 801442e:	bf00      	nop

08014430 <uxr_deserialize_BaseObjectRequest>:
 8014430:	b570      	push	{r4, r5, r6, lr}
 8014432:	2202      	movs	r2, #2
 8014434:	4605      	mov	r5, r0
 8014436:	460e      	mov	r6, r1
 8014438:	f003 fcc6 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 801443c:	1cb1      	adds	r1, r6, #2
 801443e:	4604      	mov	r4, r0
 8014440:	2202      	movs	r2, #2
 8014442:	4628      	mov	r0, r5
 8014444:	f003 fcc0 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014448:	4020      	ands	r0, r4
 801444a:	b2c0      	uxtb	r0, r0
 801444c:	bd70      	pop	{r4, r5, r6, pc}
 801444e:	bf00      	nop

08014450 <uxr_serialize_AGENT_ActivityInfo>:
 8014450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014454:	460e      	mov	r6, r1
 8014456:	f9b1 1000 	ldrsh.w	r1, [r1]
 801445a:	4607      	mov	r7, r0
 801445c:	f004 fa84 	bl	8018968 <ucdr_serialize_int16_t>
 8014460:	6871      	ldr	r1, [r6, #4]
 8014462:	4680      	mov	r8, r0
 8014464:	4638      	mov	r0, r7
 8014466:	f003 ff59 	bl	801831c <ucdr_serialize_uint32_t>
 801446a:	6873      	ldr	r3, [r6, #4]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d06a      	beq.n	8014546 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8014470:	b318      	cbz	r0, 80144ba <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8014472:	f106 0904 	add.w	r9, r6, #4
 8014476:	2500      	movs	r5, #0
 8014478:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 801447c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8014480:	7a21      	ldrb	r1, [r4, #8]
 8014482:	4638      	mov	r0, r7
 8014484:	f003 fd34 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8014488:	2800      	cmp	r0, #0
 801448a:	d051      	beq.n	8014530 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 801448c:	7a23      	ldrb	r3, [r4, #8]
 801448e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014492:	00c9      	lsls	r1, r1, #3
 8014494:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8014498:	2b03      	cmp	r3, #3
 801449a:	d859      	bhi.n	8014550 <uxr_serialize_AGENT_ActivityInfo+0x100>
 801449c:	e8df f003 	tbb	[pc, r3]
 80144a0:	02122436 	.word	0x02122436
 80144a4:	4449      	add	r1, r9
 80144a6:	4638      	mov	r0, r7
 80144a8:	6889      	ldr	r1, [r1, #8]
 80144aa:	f004 fc79 	bl	8018da0 <ucdr_serialize_string>
 80144ae:	6873      	ldr	r3, [r6, #4]
 80144b0:	3501      	adds	r5, #1
 80144b2:	429d      	cmp	r5, r3
 80144b4:	d240      	bcs.n	8014538 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 80144b6:	2800      	cmp	r0, #0
 80144b8:	d1de      	bne.n	8014478 <uxr_serialize_AGENT_ActivityInfo+0x28>
 80144ba:	f04f 0800 	mov.w	r8, #0
 80144be:	4640      	mov	r0, r8
 80144c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144c4:	3108      	adds	r1, #8
 80144c6:	4449      	add	r1, r9
 80144c8:	2210      	movs	r2, #16
 80144ca:	4638      	mov	r0, r7
 80144cc:	f003 fc18 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 80144d0:	44aa      	add	sl, r5
 80144d2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80144d6:	4604      	mov	r4, r0
 80144d8:	f8da 101c 	ldr.w	r1, [sl, #28]
 80144dc:	4638      	mov	r0, r7
 80144de:	f003 ff1d 	bl	801831c <ucdr_serialize_uint32_t>
 80144e2:	4020      	ands	r0, r4
 80144e4:	b2c0      	uxtb	r0, r0
 80144e6:	e7e2      	b.n	80144ae <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80144e8:	3108      	adds	r1, #8
 80144ea:	4449      	add	r1, r9
 80144ec:	2204      	movs	r2, #4
 80144ee:	4638      	mov	r0, r7
 80144f0:	f003 fc06 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 80144f4:	44aa      	add	sl, r5
 80144f6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80144fa:	4604      	mov	r4, r0
 80144fc:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8014500:	4638      	mov	r0, r7
 8014502:	f003 fd21 	bl	8017f48 <ucdr_serialize_uint16_t>
 8014506:	4020      	ands	r0, r4
 8014508:	b2c0      	uxtb	r0, r0
 801450a:	e7d0      	b.n	80144ae <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801450c:	3108      	adds	r1, #8
 801450e:	4449      	add	r1, r9
 8014510:	2202      	movs	r2, #2
 8014512:	4638      	mov	r0, r7
 8014514:	f003 fbf4 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014518:	44aa      	add	sl, r5
 801451a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801451e:	4604      	mov	r4, r0
 8014520:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8014524:	4638      	mov	r0, r7
 8014526:	f003 fce3 	bl	8017ef0 <ucdr_serialize_uint8_t>
 801452a:	4020      	ands	r0, r4
 801452c:	b2c0      	uxtb	r0, r0
 801452e:	e7be      	b.n	80144ae <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8014530:	6873      	ldr	r3, [r6, #4]
 8014532:	3501      	adds	r5, #1
 8014534:	429d      	cmp	r5, r3
 8014536:	d3c0      	bcc.n	80144ba <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8014538:	ea08 0000 	and.w	r0, r8, r0
 801453c:	fa5f f880 	uxtb.w	r8, r0
 8014540:	4640      	mov	r0, r8
 8014542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014546:	ea08 0800 	and.w	r8, r8, r0
 801454a:	fa5f f888 	uxtb.w	r8, r8
 801454e:	e7b6      	b.n	80144be <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8014550:	6873      	ldr	r3, [r6, #4]
 8014552:	3501      	adds	r5, #1
 8014554:	42ab      	cmp	r3, r5
 8014556:	f104 0418 	add.w	r4, r4, #24
 801455a:	d891      	bhi.n	8014480 <uxr_serialize_AGENT_ActivityInfo+0x30>
 801455c:	e7af      	b.n	80144be <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801455e:	bf00      	nop

08014560 <uxr_serialize_ActivityInfoVariant>:
 8014560:	b570      	push	{r4, r5, r6, lr}
 8014562:	460d      	mov	r5, r1
 8014564:	7809      	ldrb	r1, [r1, #0]
 8014566:	4606      	mov	r6, r0
 8014568:	f003 fcc2 	bl	8017ef0 <ucdr_serialize_uint8_t>
 801456c:	b130      	cbz	r0, 801457c <uxr_serialize_ActivityInfoVariant+0x1c>
 801456e:	782b      	ldrb	r3, [r5, #0]
 8014570:	2b06      	cmp	r3, #6
 8014572:	d019      	beq.n	80145a8 <uxr_serialize_ActivityInfoVariant+0x48>
 8014574:	2b0d      	cmp	r3, #13
 8014576:	d010      	beq.n	801459a <uxr_serialize_ActivityInfoVariant+0x3a>
 8014578:	2b05      	cmp	r3, #5
 801457a:	d000      	beq.n	801457e <uxr_serialize_ActivityInfoVariant+0x1e>
 801457c:	bd70      	pop	{r4, r5, r6, pc}
 801457e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014582:	4630      	mov	r0, r6
 8014584:	f004 f9f0 	bl	8018968 <ucdr_serialize_int16_t>
 8014588:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801458c:	4604      	mov	r4, r0
 801458e:	4630      	mov	r0, r6
 8014590:	f004 f91a 	bl	80187c8 <ucdr_serialize_uint64_t>
 8014594:	4020      	ands	r0, r4
 8014596:	b2c0      	uxtb	r0, r0
 8014598:	bd70      	pop	{r4, r5, r6, pc}
 801459a:	f105 0108 	add.w	r1, r5, #8
 801459e:	4630      	mov	r0, r6
 80145a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145a4:	f7ff bf54 	b.w	8014450 <uxr_serialize_AGENT_ActivityInfo>
 80145a8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80145ac:	4630      	mov	r0, r6
 80145ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145b2:	f004 b9d9 	b.w	8018968 <ucdr_serialize_int16_t>
 80145b6:	bf00      	nop

080145b8 <uxr_deserialize_BaseObjectReply>:
 80145b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145bc:	2202      	movs	r2, #2
 80145be:	4606      	mov	r6, r0
 80145c0:	460f      	mov	r7, r1
 80145c2:	f003 fc01 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80145c6:	2202      	movs	r2, #2
 80145c8:	1cb9      	adds	r1, r7, #2
 80145ca:	4605      	mov	r5, r0
 80145cc:	4630      	mov	r0, r6
 80145ce:	f003 fbfb 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80145d2:	1d39      	adds	r1, r7, #4
 80145d4:	4680      	mov	r8, r0
 80145d6:	4630      	mov	r0, r6
 80145d8:	f003 fca0 	bl	8017f1c <ucdr_deserialize_uint8_t>
 80145dc:	1d79      	adds	r1, r7, #5
 80145de:	4604      	mov	r4, r0
 80145e0:	4630      	mov	r0, r6
 80145e2:	f003 fc9b 	bl	8017f1c <ucdr_deserialize_uint8_t>
 80145e6:	ea05 0508 	and.w	r5, r5, r8
 80145ea:	402c      	ands	r4, r5
 80145ec:	4020      	ands	r0, r4
 80145ee:	b2c0      	uxtb	r0, r0
 80145f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145f4 <uxr_serialize_ReadSpecification>:
 80145f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f8:	460e      	mov	r6, r1
 80145fa:	7809      	ldrb	r1, [r1, #0]
 80145fc:	4607      	mov	r7, r0
 80145fe:	f003 fc77 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8014602:	7871      	ldrb	r1, [r6, #1]
 8014604:	4604      	mov	r4, r0
 8014606:	4638      	mov	r0, r7
 8014608:	f003 fc72 	bl	8017ef0 <ucdr_serialize_uint8_t>
 801460c:	78b1      	ldrb	r1, [r6, #2]
 801460e:	4004      	ands	r4, r0
 8014610:	4638      	mov	r0, r7
 8014612:	f003 fc3d 	bl	8017e90 <ucdr_serialize_bool>
 8014616:	78b3      	ldrb	r3, [r6, #2]
 8014618:	b2e4      	uxtb	r4, r4
 801461a:	4004      	ands	r4, r0
 801461c:	b94b      	cbnz	r3, 8014632 <uxr_serialize_ReadSpecification+0x3e>
 801461e:	7a31      	ldrb	r1, [r6, #8]
 8014620:	4638      	mov	r0, r7
 8014622:	f003 fc35 	bl	8017e90 <ucdr_serialize_bool>
 8014626:	7a33      	ldrb	r3, [r6, #8]
 8014628:	4004      	ands	r4, r0
 801462a:	b943      	cbnz	r3, 801463e <uxr_serialize_ReadSpecification+0x4a>
 801462c:	4620      	mov	r0, r4
 801462e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014632:	6871      	ldr	r1, [r6, #4]
 8014634:	4638      	mov	r0, r7
 8014636:	f004 fbb3 	bl	8018da0 <ucdr_serialize_string>
 801463a:	4004      	ands	r4, r0
 801463c:	e7ef      	b.n	801461e <uxr_serialize_ReadSpecification+0x2a>
 801463e:	8971      	ldrh	r1, [r6, #10]
 8014640:	4638      	mov	r0, r7
 8014642:	f003 fc81 	bl	8017f48 <ucdr_serialize_uint16_t>
 8014646:	89b1      	ldrh	r1, [r6, #12]
 8014648:	4605      	mov	r5, r0
 801464a:	4638      	mov	r0, r7
 801464c:	f003 fc7c 	bl	8017f48 <ucdr_serialize_uint16_t>
 8014650:	89f1      	ldrh	r1, [r6, #14]
 8014652:	4005      	ands	r5, r0
 8014654:	4638      	mov	r0, r7
 8014656:	f003 fc77 	bl	8017f48 <ucdr_serialize_uint16_t>
 801465a:	8a31      	ldrh	r1, [r6, #16]
 801465c:	4680      	mov	r8, r0
 801465e:	4638      	mov	r0, r7
 8014660:	f003 fc72 	bl	8017f48 <ucdr_serialize_uint16_t>
 8014664:	b2ed      	uxtb	r5, r5
 8014666:	4025      	ands	r5, r4
 8014668:	ea08 0505 	and.w	r5, r8, r5
 801466c:	ea00 0405 	and.w	r4, r0, r5
 8014670:	4620      	mov	r0, r4
 8014672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014676:	bf00      	nop

08014678 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014678:	f7ff ba3a 	b.w	8013af0 <uxr_serialize_CLIENT_Representation>

0801467c <uxr_serialize_CREATE_Payload>:
 801467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801467e:	2202      	movs	r2, #2
 8014680:	4606      	mov	r6, r0
 8014682:	460d      	mov	r5, r1
 8014684:	f003 fb3c 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014688:	1ca9      	adds	r1, r5, #2
 801468a:	4604      	mov	r4, r0
 801468c:	2202      	movs	r2, #2
 801468e:	4630      	mov	r0, r6
 8014690:	f003 fb36 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014694:	7929      	ldrb	r1, [r5, #4]
 8014696:	4607      	mov	r7, r0
 8014698:	4630      	mov	r0, r6
 801469a:	f003 fc29 	bl	8017ef0 <ucdr_serialize_uint8_t>
 801469e:	b328      	cbz	r0, 80146ec <uxr_serialize_CREATE_Payload+0x70>
 80146a0:	792b      	ldrb	r3, [r5, #4]
 80146a2:	403c      	ands	r4, r7
 80146a4:	3b01      	subs	r3, #1
 80146a6:	b2e4      	uxtb	r4, r4
 80146a8:	2b0d      	cmp	r3, #13
 80146aa:	d81d      	bhi.n	80146e8 <uxr_serialize_CREATE_Payload+0x6c>
 80146ac:	e8df f003 	tbb	[pc, r3]
 80146b0:	32320753 	.word	0x32320753
 80146b4:	07070707 	.word	0x07070707
 80146b8:	2121211c 	.word	0x2121211c
 80146bc:	684c      	.short	0x684c
 80146be:	7a29      	ldrb	r1, [r5, #8]
 80146c0:	4630      	mov	r0, r6
 80146c2:	f003 fc15 	bl	8017ef0 <ucdr_serialize_uint8_t>
 80146c6:	4607      	mov	r7, r0
 80146c8:	b130      	cbz	r0, 80146d8 <uxr_serialize_CREATE_Payload+0x5c>
 80146ca:	7a2b      	ldrb	r3, [r5, #8]
 80146cc:	2b02      	cmp	r3, #2
 80146ce:	d035      	beq.n	801473c <uxr_serialize_CREATE_Payload+0xc0>
 80146d0:	2b03      	cmp	r3, #3
 80146d2:	d02b      	beq.n	801472c <uxr_serialize_CREATE_Payload+0xb0>
 80146d4:	2b01      	cmp	r3, #1
 80146d6:	d031      	beq.n	801473c <uxr_serialize_CREATE_Payload+0xc0>
 80146d8:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80146dc:	4630      	mov	r0, r6
 80146de:	2202      	movs	r2, #2
 80146e0:	f003 fb0e 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 80146e4:	4038      	ands	r0, r7
 80146e6:	4004      	ands	r4, r0
 80146e8:	4620      	mov	r0, r4
 80146ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146ec:	2400      	movs	r4, #0
 80146ee:	4620      	mov	r0, r4
 80146f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146f2:	7a29      	ldrb	r1, [r5, #8]
 80146f4:	4630      	mov	r0, r6
 80146f6:	f003 fbfb 	bl	8017ef0 <ucdr_serialize_uint8_t>
 80146fa:	2800      	cmp	r0, #0
 80146fc:	d0f6      	beq.n	80146ec <uxr_serialize_CREATE_Payload+0x70>
 80146fe:	7a2b      	ldrb	r3, [r5, #8]
 8014700:	2b01      	cmp	r3, #1
 8014702:	d001      	beq.n	8014708 <uxr_serialize_CREATE_Payload+0x8c>
 8014704:	2b02      	cmp	r3, #2
 8014706:	d1ef      	bne.n	80146e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014708:	68e9      	ldr	r1, [r5, #12]
 801470a:	4630      	mov	r0, r6
 801470c:	f004 fb48 	bl	8018da0 <ucdr_serialize_string>
 8014710:	4004      	ands	r4, r0
 8014712:	e7e9      	b.n	80146e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014714:	7a29      	ldrb	r1, [r5, #8]
 8014716:	4630      	mov	r0, r6
 8014718:	f003 fbea 	bl	8017ef0 <ucdr_serialize_uint8_t>
 801471c:	4607      	mov	r7, r0
 801471e:	2800      	cmp	r0, #0
 8014720:	d0da      	beq.n	80146d8 <uxr_serialize_CREATE_Payload+0x5c>
 8014722:	7a2b      	ldrb	r3, [r5, #8]
 8014724:	2b02      	cmp	r3, #2
 8014726:	d009      	beq.n	801473c <uxr_serialize_CREATE_Payload+0xc0>
 8014728:	2b03      	cmp	r3, #3
 801472a:	d1d5      	bne.n	80146d8 <uxr_serialize_CREATE_Payload+0x5c>
 801472c:	68ea      	ldr	r2, [r5, #12]
 801472e:	f105 0110 	add.w	r1, r5, #16
 8014732:	4630      	mov	r0, r6
 8014734:	f7fc fcd8 	bl	80110e8 <ucdr_serialize_sequence_uint8_t>
 8014738:	4607      	mov	r7, r0
 801473a:	e7cd      	b.n	80146d8 <uxr_serialize_CREATE_Payload+0x5c>
 801473c:	68e9      	ldr	r1, [r5, #12]
 801473e:	4630      	mov	r0, r6
 8014740:	f004 fb2e 	bl	8018da0 <ucdr_serialize_string>
 8014744:	4607      	mov	r7, r0
 8014746:	e7c7      	b.n	80146d8 <uxr_serialize_CREATE_Payload+0x5c>
 8014748:	f105 0108 	add.w	r1, r5, #8
 801474c:	4630      	mov	r0, r6
 801474e:	f7ff fa95 	bl	8013c7c <uxr_serialize_AGENT_Representation>
 8014752:	4004      	ands	r4, r0
 8014754:	e7c8      	b.n	80146e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014756:	7a29      	ldrb	r1, [r5, #8]
 8014758:	4630      	mov	r0, r6
 801475a:	f003 fbc9 	bl	8017ef0 <ucdr_serialize_uint8_t>
 801475e:	4607      	mov	r7, r0
 8014760:	b130      	cbz	r0, 8014770 <uxr_serialize_CREATE_Payload+0xf4>
 8014762:	7a2b      	ldrb	r3, [r5, #8]
 8014764:	2b02      	cmp	r3, #2
 8014766:	d012      	beq.n	801478e <uxr_serialize_CREATE_Payload+0x112>
 8014768:	2b03      	cmp	r3, #3
 801476a:	d016      	beq.n	801479a <uxr_serialize_CREATE_Payload+0x11e>
 801476c:	2b01      	cmp	r3, #1
 801476e:	d00e      	beq.n	801478e <uxr_serialize_CREATE_Payload+0x112>
 8014770:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8014774:	4630      	mov	r0, r6
 8014776:	f004 f8f7 	bl	8018968 <ucdr_serialize_int16_t>
 801477a:	4038      	ands	r0, r7
 801477c:	4004      	ands	r4, r0
 801477e:	e7b3      	b.n	80146e8 <uxr_serialize_CREATE_Payload+0x6c>
 8014780:	f105 0108 	add.w	r1, r5, #8
 8014784:	4630      	mov	r0, r6
 8014786:	f7ff f9b3 	bl	8013af0 <uxr_serialize_CLIENT_Representation>
 801478a:	4004      	ands	r4, r0
 801478c:	e7ac      	b.n	80146e8 <uxr_serialize_CREATE_Payload+0x6c>
 801478e:	68e9      	ldr	r1, [r5, #12]
 8014790:	4630      	mov	r0, r6
 8014792:	f004 fb05 	bl	8018da0 <ucdr_serialize_string>
 8014796:	4607      	mov	r7, r0
 8014798:	e7ea      	b.n	8014770 <uxr_serialize_CREATE_Payload+0xf4>
 801479a:	68ea      	ldr	r2, [r5, #12]
 801479c:	f105 0110 	add.w	r1, r5, #16
 80147a0:	4630      	mov	r0, r6
 80147a2:	f7fc fca1 	bl	80110e8 <ucdr_serialize_sequence_uint8_t>
 80147a6:	4607      	mov	r7, r0
 80147a8:	e7e2      	b.n	8014770 <uxr_serialize_CREATE_Payload+0xf4>
 80147aa:	bf00      	nop

080147ac <uxr_deserialize_GET_INFO_Payload>:
 80147ac:	b570      	push	{r4, r5, r6, lr}
 80147ae:	2202      	movs	r2, #2
 80147b0:	4605      	mov	r5, r0
 80147b2:	460e      	mov	r6, r1
 80147b4:	f003 fb08 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80147b8:	1cb1      	adds	r1, r6, #2
 80147ba:	2202      	movs	r2, #2
 80147bc:	4604      	mov	r4, r0
 80147be:	4628      	mov	r0, r5
 80147c0:	f003 fb02 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80147c4:	1d31      	adds	r1, r6, #4
 80147c6:	4004      	ands	r4, r0
 80147c8:	4628      	mov	r0, r5
 80147ca:	f003 fed7 	bl	801857c <ucdr_deserialize_uint32_t>
 80147ce:	b2e4      	uxtb	r4, r4
 80147d0:	4020      	ands	r0, r4
 80147d2:	bd70      	pop	{r4, r5, r6, pc}

080147d4 <uxr_serialize_DELETE_Payload>:
 80147d4:	b570      	push	{r4, r5, r6, lr}
 80147d6:	2202      	movs	r2, #2
 80147d8:	4605      	mov	r5, r0
 80147da:	460e      	mov	r6, r1
 80147dc:	f003 fa90 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 80147e0:	1cb1      	adds	r1, r6, #2
 80147e2:	4604      	mov	r4, r0
 80147e4:	2202      	movs	r2, #2
 80147e6:	4628      	mov	r0, r5
 80147e8:	f003 fa8a 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 80147ec:	4020      	ands	r0, r4
 80147ee:	b2c0      	uxtb	r0, r0
 80147f0:	bd70      	pop	{r4, r5, r6, pc}
 80147f2:	bf00      	nop

080147f4 <uxr_deserialize_STATUS_AGENT_Payload>:
 80147f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147f8:	4606      	mov	r6, r0
 80147fa:	460f      	mov	r7, r1
 80147fc:	f003 fb8e 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014800:	1c79      	adds	r1, r7, #1
 8014802:	4605      	mov	r5, r0
 8014804:	4630      	mov	r0, r6
 8014806:	f003 fb89 	bl	8017f1c <ucdr_deserialize_uint8_t>
 801480a:	1d39      	adds	r1, r7, #4
 801480c:	4681      	mov	r9, r0
 801480e:	2204      	movs	r2, #4
 8014810:	4630      	mov	r0, r6
 8014812:	f003 fad9 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014816:	f107 0108 	add.w	r1, r7, #8
 801481a:	4604      	mov	r4, r0
 801481c:	2202      	movs	r2, #2
 801481e:	4630      	mov	r0, r6
 8014820:	f003 fad2 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014824:	f107 010a 	add.w	r1, r7, #10
 8014828:	4680      	mov	r8, r0
 801482a:	2202      	movs	r2, #2
 801482c:	4630      	mov	r0, r6
 801482e:	f003 facb 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014832:	ea05 0509 	and.w	r5, r5, r9
 8014836:	b2ed      	uxtb	r5, r5
 8014838:	402c      	ands	r4, r5
 801483a:	f107 010c 	add.w	r1, r7, #12
 801483e:	4605      	mov	r5, r0
 8014840:	4630      	mov	r0, r6
 8014842:	f003 fb3b 	bl	8017ebc <ucdr_deserialize_bool>
 8014846:	ea08 0404 	and.w	r4, r8, r4
 801484a:	4025      	ands	r5, r4
 801484c:	4028      	ands	r0, r5
 801484e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014852:	bf00      	nop

08014854 <uxr_deserialize_STATUS_Payload>:
 8014854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014858:	2202      	movs	r2, #2
 801485a:	4606      	mov	r6, r0
 801485c:	460f      	mov	r7, r1
 801485e:	f003 fab3 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014862:	2202      	movs	r2, #2
 8014864:	1cb9      	adds	r1, r7, #2
 8014866:	4605      	mov	r5, r0
 8014868:	4630      	mov	r0, r6
 801486a:	f003 faad 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 801486e:	1d39      	adds	r1, r7, #4
 8014870:	4680      	mov	r8, r0
 8014872:	4630      	mov	r0, r6
 8014874:	f003 fb52 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014878:	1d79      	adds	r1, r7, #5
 801487a:	4604      	mov	r4, r0
 801487c:	4630      	mov	r0, r6
 801487e:	f003 fb4d 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014882:	ea05 0508 	and.w	r5, r5, r8
 8014886:	402c      	ands	r4, r5
 8014888:	4020      	ands	r0, r4
 801488a:	b2c0      	uxtb	r0, r0
 801488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014890 <uxr_serialize_INFO_Payload>:
 8014890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014894:	2202      	movs	r2, #2
 8014896:	460c      	mov	r4, r1
 8014898:	4605      	mov	r5, r0
 801489a:	f003 fa31 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 801489e:	2202      	movs	r2, #2
 80148a0:	4680      	mov	r8, r0
 80148a2:	1ca1      	adds	r1, r4, #2
 80148a4:	4628      	mov	r0, r5
 80148a6:	f003 fa2b 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 80148aa:	7921      	ldrb	r1, [r4, #4]
 80148ac:	4607      	mov	r7, r0
 80148ae:	4628      	mov	r0, r5
 80148b0:	f003 fb1e 	bl	8017ef0 <ucdr_serialize_uint8_t>
 80148b4:	7961      	ldrb	r1, [r4, #5]
 80148b6:	4606      	mov	r6, r0
 80148b8:	4628      	mov	r0, r5
 80148ba:	f003 fb19 	bl	8017ef0 <ucdr_serialize_uint8_t>
 80148be:	ea08 0807 	and.w	r8, r8, r7
 80148c2:	ea06 0608 	and.w	r6, r6, r8
 80148c6:	4006      	ands	r6, r0
 80148c8:	7a21      	ldrb	r1, [r4, #8]
 80148ca:	4628      	mov	r0, r5
 80148cc:	f003 fae0 	bl	8017e90 <ucdr_serialize_bool>
 80148d0:	7a23      	ldrb	r3, [r4, #8]
 80148d2:	b2f7      	uxtb	r7, r6
 80148d4:	4606      	mov	r6, r0
 80148d6:	b96b      	cbnz	r3, 80148f4 <uxr_serialize_INFO_Payload+0x64>
 80148d8:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80148dc:	4628      	mov	r0, r5
 80148de:	f003 fad7 	bl	8017e90 <ucdr_serialize_bool>
 80148e2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80148e6:	4030      	ands	r0, r6
 80148e8:	b2c6      	uxtb	r6, r0
 80148ea:	b983      	cbnz	r3, 801490e <uxr_serialize_INFO_Payload+0x7e>
 80148ec:	ea06 0007 	and.w	r0, r6, r7
 80148f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f4:	7b21      	ldrb	r1, [r4, #12]
 80148f6:	4628      	mov	r0, r5
 80148f8:	f003 fafa 	bl	8017ef0 <ucdr_serialize_uint8_t>
 80148fc:	b188      	cbz	r0, 8014922 <uxr_serialize_INFO_Payload+0x92>
 80148fe:	f104 010c 	add.w	r1, r4, #12
 8014902:	4628      	mov	r0, r5
 8014904:	f7ff fa06 	bl	8013d14 <uxr_serialize_ObjectVariant.part.0>
 8014908:	4030      	ands	r0, r6
 801490a:	b2c6      	uxtb	r6, r0
 801490c:	e7e4      	b.n	80148d8 <uxr_serialize_INFO_Payload+0x48>
 801490e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8014912:	4628      	mov	r0, r5
 8014914:	f7ff fe24 	bl	8014560 <uxr_serialize_ActivityInfoVariant>
 8014918:	4006      	ands	r6, r0
 801491a:	ea06 0007 	and.w	r0, r6, r7
 801491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014922:	4606      	mov	r6, r0
 8014924:	e7d8      	b.n	80148d8 <uxr_serialize_INFO_Payload+0x48>
 8014926:	bf00      	nop

08014928 <uxr_serialize_READ_DATA_Payload>:
 8014928:	b570      	push	{r4, r5, r6, lr}
 801492a:	2202      	movs	r2, #2
 801492c:	4605      	mov	r5, r0
 801492e:	460e      	mov	r6, r1
 8014930:	f003 f9e6 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014934:	1cb1      	adds	r1, r6, #2
 8014936:	2202      	movs	r2, #2
 8014938:	4604      	mov	r4, r0
 801493a:	4628      	mov	r0, r5
 801493c:	f003 f9e0 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014940:	1d31      	adds	r1, r6, #4
 8014942:	4004      	ands	r4, r0
 8014944:	4628      	mov	r0, r5
 8014946:	f7ff fe55 	bl	80145f4 <uxr_serialize_ReadSpecification>
 801494a:	b2e4      	uxtb	r4, r4
 801494c:	4020      	ands	r0, r4
 801494e:	bd70      	pop	{r4, r5, r6, pc}

08014950 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014950:	b570      	push	{r4, r5, r6, lr}
 8014952:	2202      	movs	r2, #2
 8014954:	4605      	mov	r5, r0
 8014956:	460e      	mov	r6, r1
 8014958:	f003 f9d2 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 801495c:	1cb1      	adds	r1, r6, #2
 801495e:	4604      	mov	r4, r0
 8014960:	2202      	movs	r2, #2
 8014962:	4628      	mov	r0, r5
 8014964:	f003 f9cc 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014968:	4020      	ands	r0, r4
 801496a:	b2c0      	uxtb	r0, r0
 801496c:	bd70      	pop	{r4, r5, r6, pc}
 801496e:	bf00      	nop

08014970 <uxr_serialize_ACKNACK_Payload>:
 8014970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014972:	460f      	mov	r7, r1
 8014974:	460e      	mov	r6, r1
 8014976:	f837 1b02 	ldrh.w	r1, [r7], #2
 801497a:	4605      	mov	r5, r0
 801497c:	f003 fae4 	bl	8017f48 <ucdr_serialize_uint16_t>
 8014980:	4639      	mov	r1, r7
 8014982:	2202      	movs	r2, #2
 8014984:	4604      	mov	r4, r0
 8014986:	4628      	mov	r0, r5
 8014988:	f003 f9ba 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 801498c:	7931      	ldrb	r1, [r6, #4]
 801498e:	4004      	ands	r4, r0
 8014990:	4628      	mov	r0, r5
 8014992:	f003 faad 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8014996:	b2e4      	uxtb	r4, r4
 8014998:	4020      	ands	r0, r4
 801499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801499c <uxr_deserialize_ACKNACK_Payload>:
 801499c:	b570      	push	{r4, r5, r6, lr}
 801499e:	4605      	mov	r5, r0
 80149a0:	460e      	mov	r6, r1
 80149a2:	f003 fbd1 	bl	8018148 <ucdr_deserialize_uint16_t>
 80149a6:	1cb1      	adds	r1, r6, #2
 80149a8:	2202      	movs	r2, #2
 80149aa:	4604      	mov	r4, r0
 80149ac:	4628      	mov	r0, r5
 80149ae:	f003 fa0b 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80149b2:	1d31      	adds	r1, r6, #4
 80149b4:	4004      	ands	r4, r0
 80149b6:	4628      	mov	r0, r5
 80149b8:	f003 fab0 	bl	8017f1c <ucdr_deserialize_uint8_t>
 80149bc:	b2e4      	uxtb	r4, r4
 80149be:	4020      	ands	r0, r4
 80149c0:	bd70      	pop	{r4, r5, r6, pc}
 80149c2:	bf00      	nop

080149c4 <uxr_serialize_HEARTBEAT_Payload>:
 80149c4:	b570      	push	{r4, r5, r6, lr}
 80149c6:	460d      	mov	r5, r1
 80149c8:	8809      	ldrh	r1, [r1, #0]
 80149ca:	4606      	mov	r6, r0
 80149cc:	f003 fabc 	bl	8017f48 <ucdr_serialize_uint16_t>
 80149d0:	8869      	ldrh	r1, [r5, #2]
 80149d2:	4604      	mov	r4, r0
 80149d4:	4630      	mov	r0, r6
 80149d6:	f003 fab7 	bl	8017f48 <ucdr_serialize_uint16_t>
 80149da:	7929      	ldrb	r1, [r5, #4]
 80149dc:	4004      	ands	r4, r0
 80149de:	4630      	mov	r0, r6
 80149e0:	f003 fa86 	bl	8017ef0 <ucdr_serialize_uint8_t>
 80149e4:	b2e4      	uxtb	r4, r4
 80149e6:	4020      	ands	r0, r4
 80149e8:	bd70      	pop	{r4, r5, r6, pc}
 80149ea:	bf00      	nop

080149ec <uxr_deserialize_HEARTBEAT_Payload>:
 80149ec:	b570      	push	{r4, r5, r6, lr}
 80149ee:	4605      	mov	r5, r0
 80149f0:	460e      	mov	r6, r1
 80149f2:	f003 fba9 	bl	8018148 <ucdr_deserialize_uint16_t>
 80149f6:	1cb1      	adds	r1, r6, #2
 80149f8:	4604      	mov	r4, r0
 80149fa:	4628      	mov	r0, r5
 80149fc:	f003 fba4 	bl	8018148 <ucdr_deserialize_uint16_t>
 8014a00:	1d31      	adds	r1, r6, #4
 8014a02:	4004      	ands	r4, r0
 8014a04:	4628      	mov	r0, r5
 8014a06:	f003 fa89 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014a0a:	b2e4      	uxtb	r4, r4
 8014a0c:	4020      	ands	r0, r4
 8014a0e:	bd70      	pop	{r4, r5, r6, pc}

08014a10 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a14:	4605      	mov	r5, r0
 8014a16:	460e      	mov	r6, r1
 8014a18:	f004 f932 	bl	8018c80 <ucdr_deserialize_int32_t>
 8014a1c:	1d31      	adds	r1, r6, #4
 8014a1e:	4607      	mov	r7, r0
 8014a20:	4628      	mov	r0, r5
 8014a22:	f003 fdab 	bl	801857c <ucdr_deserialize_uint32_t>
 8014a26:	f106 0108 	add.w	r1, r6, #8
 8014a2a:	4680      	mov	r8, r0
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	f004 f927 	bl	8018c80 <ucdr_deserialize_int32_t>
 8014a32:	f106 010c 	add.w	r1, r6, #12
 8014a36:	4604      	mov	r4, r0
 8014a38:	4628      	mov	r0, r5
 8014a3a:	f003 fd9f 	bl	801857c <ucdr_deserialize_uint32_t>
 8014a3e:	ea07 0708 	and.w	r7, r7, r8
 8014a42:	403c      	ands	r4, r7
 8014a44:	f106 0110 	add.w	r1, r6, #16
 8014a48:	4004      	ands	r4, r0
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	f004 f918 	bl	8018c80 <ucdr_deserialize_int32_t>
 8014a50:	f106 0114 	add.w	r1, r6, #20
 8014a54:	4603      	mov	r3, r0
 8014a56:	4628      	mov	r0, r5
 8014a58:	461d      	mov	r5, r3
 8014a5a:	f003 fd8f 	bl	801857c <ucdr_deserialize_uint32_t>
 8014a5e:	b2e4      	uxtb	r4, r4
 8014a60:	402c      	ands	r4, r5
 8014a62:	4020      	ands	r0, r4
 8014a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a68 <uxr_serialize_SampleIdentity>:
 8014a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a6c:	220c      	movs	r2, #12
 8014a6e:	4604      	mov	r4, r0
 8014a70:	460d      	mov	r5, r1
 8014a72:	f003 f945 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014a76:	2203      	movs	r2, #3
 8014a78:	f105 010c 	add.w	r1, r5, #12
 8014a7c:	4607      	mov	r7, r0
 8014a7e:	4620      	mov	r0, r4
 8014a80:	f003 f93e 	bl	8017d00 <ucdr_serialize_array_uint8_t>
 8014a84:	7be9      	ldrb	r1, [r5, #15]
 8014a86:	4680      	mov	r8, r0
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f003 fa31 	bl	8017ef0 <ucdr_serialize_uint8_t>
 8014a8e:	6929      	ldr	r1, [r5, #16]
 8014a90:	4606      	mov	r6, r0
 8014a92:	4620      	mov	r0, r4
 8014a94:	f004 f85c 	bl	8018b50 <ucdr_serialize_int32_t>
 8014a98:	6969      	ldr	r1, [r5, #20]
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	ea07 0708 	and.w	r7, r7, r8
 8014aa2:	461c      	mov	r4, r3
 8014aa4:	f003 fc3a 	bl	801831c <ucdr_serialize_uint32_t>
 8014aa8:	403e      	ands	r6, r7
 8014aaa:	4034      	ands	r4, r6
 8014aac:	4020      	ands	r0, r4
 8014aae:	b2c0      	uxtb	r0, r0
 8014ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ab4 <uxr_deserialize_SampleIdentity>:
 8014ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ab8:	220c      	movs	r2, #12
 8014aba:	4604      	mov	r4, r0
 8014abc:	460d      	mov	r5, r1
 8014abe:	f003 f983 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014ac2:	2203      	movs	r2, #3
 8014ac4:	f105 010c 	add.w	r1, r5, #12
 8014ac8:	4607      	mov	r7, r0
 8014aca:	4620      	mov	r0, r4
 8014acc:	f003 f97c 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8014ad0:	f105 010f 	add.w	r1, r5, #15
 8014ad4:	4680      	mov	r8, r0
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	f003 fa20 	bl	8017f1c <ucdr_deserialize_uint8_t>
 8014adc:	f105 0110 	add.w	r1, r5, #16
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f004 f8cc 	bl	8018c80 <ucdr_deserialize_int32_t>
 8014ae8:	f105 0114 	add.w	r1, r5, #20
 8014aec:	4603      	mov	r3, r0
 8014aee:	4620      	mov	r0, r4
 8014af0:	ea07 0708 	and.w	r7, r7, r8
 8014af4:	461c      	mov	r4, r3
 8014af6:	f003 fd41 	bl	801857c <ucdr_deserialize_uint32_t>
 8014afa:	403e      	ands	r6, r7
 8014afc:	4034      	ands	r4, r6
 8014afe:	4020      	ands	r0, r4
 8014b00:	b2c0      	uxtb	r0, r0
 8014b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b06:	bf00      	nop

08014b08 <rcl_client_get_rmw_handle>:
 8014b08:	b110      	cbz	r0, 8014b10 <rcl_client_get_rmw_handle+0x8>
 8014b0a:	6800      	ldr	r0, [r0, #0]
 8014b0c:	b100      	cbz	r0, 8014b10 <rcl_client_get_rmw_handle+0x8>
 8014b0e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014b10:	4770      	bx	lr
 8014b12:	bf00      	nop

08014b14 <rcl_take_response>:
 8014b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b16:	460e      	mov	r6, r1
 8014b18:	460c      	mov	r4, r1
 8014b1a:	4607      	mov	r7, r0
 8014b1c:	4694      	mov	ip, r2
 8014b1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014b20:	b08d      	sub	sp, #52	; 0x34
 8014b22:	ad06      	add	r5, sp, #24
 8014b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014b2e:	b337      	cbz	r7, 8014b7e <rcl_take_response+0x6a>
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	b323      	cbz	r3, 8014b7e <rcl_take_response+0x6a>
 8014b34:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014b36:	b310      	cbz	r0, 8014b7e <rcl_take_response+0x6a>
 8014b38:	4662      	mov	r2, ip
 8014b3a:	b31a      	cbz	r2, 8014b84 <rcl_take_response+0x70>
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	2600      	movs	r6, #0
 8014b40:	2700      	movs	r7, #0
 8014b42:	f88d 3007 	strb.w	r3, [sp, #7]
 8014b46:	a902      	add	r1, sp, #8
 8014b48:	f10d 0307 	add.w	r3, sp, #7
 8014b4c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014b50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b54:	f002 fe24 	bl	80177a0 <rmw_take_response>
 8014b58:	4606      	mov	r6, r0
 8014b5a:	b9a8      	cbnz	r0, 8014b88 <rcl_take_response+0x74>
 8014b5c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014b60:	f240 13f5 	movw	r3, #501	; 0x1f5
 8014b64:	2a00      	cmp	r2, #0
 8014b66:	bf08      	it	eq
 8014b68:	461e      	moveq	r6, r3
 8014b6a:	ad06      	add	r5, sp, #24
 8014b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b74:	e884 0003 	stmia.w	r4, {r0, r1}
 8014b78:	4630      	mov	r0, r6
 8014b7a:	b00d      	add	sp, #52	; 0x34
 8014b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b7e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8014b82:	e7f2      	b.n	8014b6a <rcl_take_response+0x56>
 8014b84:	260b      	movs	r6, #11
 8014b86:	e7f0      	b.n	8014b6a <rcl_take_response+0x56>
 8014b88:	2601      	movs	r6, #1
 8014b8a:	e7ee      	b.n	8014b6a <rcl_take_response+0x56>

08014b8c <rcl_convert_rmw_ret_to_rcl_ret>:
 8014b8c:	280b      	cmp	r0, #11
 8014b8e:	dc0d      	bgt.n	8014bac <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	db09      	blt.n	8014ba8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014b94:	280b      	cmp	r0, #11
 8014b96:	d807      	bhi.n	8014ba8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014b98:	e8df f000 	tbb	[pc, r0]
 8014b9c:	07060607 	.word	0x07060607
 8014ba0:	06060606 	.word	0x06060606
 8014ba4:	07070606 	.word	0x07070606
 8014ba8:	2001      	movs	r0, #1
 8014baa:	4770      	bx	lr
 8014bac:	28cb      	cmp	r0, #203	; 0xcb
 8014bae:	bf18      	it	ne
 8014bb0:	2001      	movne	r0, #1
 8014bb2:	4770      	bx	lr

08014bb4 <rcl_get_zero_initialized_context>:
 8014bb4:	4a03      	ldr	r2, [pc, #12]	; (8014bc4 <rcl_get_zero_initialized_context+0x10>)
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014bbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	4770      	bx	lr
 8014bc4:	0801f060 	.word	0x0801f060

08014bc8 <rcl_context_is_valid>:
 8014bc8:	b118      	cbz	r0, 8014bd2 <rcl_context_is_valid+0xa>
 8014bca:	6840      	ldr	r0, [r0, #4]
 8014bcc:	3800      	subs	r0, #0
 8014bce:	bf18      	it	ne
 8014bd0:	2001      	movne	r0, #1
 8014bd2:	4770      	bx	lr

08014bd4 <__cleanup_context>:
 8014bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bd8:	4606      	mov	r6, r0
 8014bda:	6800      	ldr	r0, [r0, #0]
 8014bdc:	2300      	movs	r3, #0
 8014bde:	6073      	str	r3, [r6, #4]
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d04d      	beq.n	8014c80 <__cleanup_context+0xac>
 8014be4:	6947      	ldr	r7, [r0, #20]
 8014be6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014bea:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8014bee:	b137      	cbz	r7, 8014bfe <__cleanup_context+0x2a>
 8014bf0:	3014      	adds	r0, #20
 8014bf2:	f7f9 fe37 	bl	800e864 <rcl_init_options_fini>
 8014bf6:	4607      	mov	r7, r0
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d148      	bne.n	8014c8e <__cleanup_context+0xba>
 8014bfc:	6830      	ldr	r0, [r6, #0]
 8014bfe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014c00:	b143      	cbz	r3, 8014c14 <__cleanup_context+0x40>
 8014c02:	3028      	adds	r0, #40	; 0x28
 8014c04:	f7fb f972 	bl	800feec <rmw_context_fini>
 8014c08:	b118      	cbz	r0, 8014c12 <__cleanup_context+0x3e>
 8014c0a:	2f00      	cmp	r7, #0
 8014c0c:	d042      	beq.n	8014c94 <__cleanup_context+0xc0>
 8014c0e:	f7fa fd11 	bl	800f634 <rcutils_reset_error>
 8014c12:	6830      	ldr	r0, [r6, #0]
 8014c14:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8014c18:	f1bc 0f00 	cmp.w	ip, #0
 8014c1c:	d01c      	beq.n	8014c58 <__cleanup_context+0x84>
 8014c1e:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014c22:	2a01      	cmp	r2, #1
 8014c24:	f173 0100 	sbcs.w	r1, r3, #0
 8014c28:	db12      	blt.n	8014c50 <__cleanup_context+0x7c>
 8014c2a:	2400      	movs	r4, #0
 8014c2c:	2500      	movs	r5, #0
 8014c2e:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8014c32:	4649      	mov	r1, r9
 8014c34:	b1c0      	cbz	r0, 8014c68 <__cleanup_context+0x94>
 8014c36:	47c0      	blx	r8
 8014c38:	6831      	ldr	r1, [r6, #0]
 8014c3a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8014c3e:	3401      	adds	r4, #1
 8014c40:	f145 0500 	adc.w	r5, r5, #0
 8014c44:	4294      	cmp	r4, r2
 8014c46:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8014c4a:	eb75 0103 	sbcs.w	r1, r5, r3
 8014c4e:	dbee      	blt.n	8014c2e <__cleanup_context+0x5a>
 8014c50:	4660      	mov	r0, ip
 8014c52:	4649      	mov	r1, r9
 8014c54:	47c0      	blx	r8
 8014c56:	6830      	ldr	r0, [r6, #0]
 8014c58:	4649      	mov	r1, r9
 8014c5a:	47c0      	blx	r8
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	e9c6 3300 	strd	r3, r3, [r6]
 8014c62:	4638      	mov	r0, r7
 8014c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c68:	3401      	adds	r4, #1
 8014c6a:	f145 0500 	adc.w	r5, r5, #0
 8014c6e:	4294      	cmp	r4, r2
 8014c70:	eb75 0103 	sbcs.w	r1, r5, r3
 8014c74:	dbdb      	blt.n	8014c2e <__cleanup_context+0x5a>
 8014c76:	4660      	mov	r0, ip
 8014c78:	4649      	mov	r1, r9
 8014c7a:	47c0      	blx	r8
 8014c7c:	6830      	ldr	r0, [r6, #0]
 8014c7e:	e7eb      	b.n	8014c58 <__cleanup_context+0x84>
 8014c80:	4607      	mov	r7, r0
 8014c82:	2300      	movs	r3, #0
 8014c84:	e9c6 3300 	strd	r3, r3, [r6]
 8014c88:	4638      	mov	r0, r7
 8014c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c8e:	f7fa fcd1 	bl	800f634 <rcutils_reset_error>
 8014c92:	e7b3      	b.n	8014bfc <__cleanup_context+0x28>
 8014c94:	f7ff ff7a 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 8014c98:	4607      	mov	r7, r0
 8014c9a:	e7b8      	b.n	8014c0e <__cleanup_context+0x3a>

08014c9c <rcl_expand_topic_name>:
 8014c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca0:	b08b      	sub	sp, #44	; 0x2c
 8014ca2:	9306      	str	r3, [sp, #24]
 8014ca4:	2800      	cmp	r0, #0
 8014ca6:	f000 80d2 	beq.w	8014e4e <rcl_expand_topic_name+0x1b2>
 8014caa:	460e      	mov	r6, r1
 8014cac:	2900      	cmp	r1, #0
 8014cae:	f000 80ce 	beq.w	8014e4e <rcl_expand_topic_name+0x1b2>
 8014cb2:	4617      	mov	r7, r2
 8014cb4:	2a00      	cmp	r2, #0
 8014cb6:	f000 80ca 	beq.w	8014e4e <rcl_expand_topic_name+0x1b2>
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f000 80c7 	beq.w	8014e4e <rcl_expand_topic_name+0x1b2>
 8014cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	f000 80c3 	beq.w	8014e4e <rcl_expand_topic_name+0x1b2>
 8014cc8:	a909      	add	r1, sp, #36	; 0x24
 8014cca:	2200      	movs	r2, #0
 8014ccc:	4680      	mov	r8, r0
 8014cce:	f001 f8f5 	bl	8015ebc <rcl_validate_topic_name>
 8014cd2:	4604      	mov	r4, r0
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	f040 80b6 	bne.w	8014e46 <rcl_expand_topic_name+0x1aa>
 8014cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	f040 80bf 	bne.w	8014e60 <rcl_expand_topic_name+0x1c4>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	a909      	add	r1, sp, #36	; 0x24
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	f002 fa6a 	bl	80171c0 <rmw_validate_node_name>
 8014cec:	2800      	cmp	r0, #0
 8014cee:	f040 80b3 	bne.w	8014e58 <rcl_expand_topic_name+0x1bc>
 8014cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cf4:	2a00      	cmp	r2, #0
 8014cf6:	f040 80b8 	bne.w	8014e6a <rcl_expand_topic_name+0x1ce>
 8014cfa:	a909      	add	r1, sp, #36	; 0x24
 8014cfc:	4638      	mov	r0, r7
 8014cfe:	f002 fa41 	bl	8017184 <rmw_validate_namespace>
 8014d02:	2800      	cmp	r0, #0
 8014d04:	f040 80a8 	bne.w	8014e58 <rcl_expand_topic_name+0x1bc>
 8014d08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d0a:	2c00      	cmp	r4, #0
 8014d0c:	f040 80f6 	bne.w	8014efc <rcl_expand_topic_name+0x260>
 8014d10:	217b      	movs	r1, #123	; 0x7b
 8014d12:	4640      	mov	r0, r8
 8014d14:	f006 f9e7 	bl	801b0e6 <strchr>
 8014d18:	f898 3000 	ldrb.w	r3, [r8]
 8014d1c:	2b2f      	cmp	r3, #47	; 0x2f
 8014d1e:	4605      	mov	r5, r0
 8014d20:	f000 80c4 	beq.w	8014eac <rcl_expand_topic_name+0x210>
 8014d24:	2b7e      	cmp	r3, #126	; 0x7e
 8014d26:	d16f      	bne.n	8014e08 <rcl_expand_topic_name+0x16c>
 8014d28:	4638      	mov	r0, r7
 8014d2a:	f7eb fa63 	bl	80001f4 <strlen>
 8014d2e:	4b87      	ldr	r3, [pc, #540]	; (8014f4c <rcl_expand_topic_name+0x2b0>)
 8014d30:	4987      	ldr	r1, [pc, #540]	; (8014f50 <rcl_expand_topic_name+0x2b4>)
 8014d32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014d34:	9604      	str	r6, [sp, #16]
 8014d36:	2801      	cmp	r0, #1
 8014d38:	bf0c      	ite	eq
 8014d3a:	4618      	moveq	r0, r3
 8014d3c:	4608      	movne	r0, r1
 8014d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d42:	e9cd 2300 	strd	r2, r3, [sp]
 8014d46:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014d4a:	f108 0101 	add.w	r1, r8, #1
 8014d4e:	9105      	str	r1, [sp, #20]
 8014d50:	ab14      	add	r3, sp, #80	; 0x50
 8014d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014d54:	f002 f842 	bl	8016ddc <rcutils_format_string_limit>
 8014d58:	4682      	mov	sl, r0
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	f000 80d0 	beq.w	8014f00 <rcl_expand_topic_name+0x264>
 8014d60:	2d00      	cmp	r5, #0
 8014d62:	f000 80aa 	beq.w	8014eba <rcl_expand_topic_name+0x21e>
 8014d66:	217b      	movs	r1, #123	; 0x7b
 8014d68:	f006 f9bd 	bl	801b0e6 <strchr>
 8014d6c:	46d1      	mov	r9, sl
 8014d6e:	4605      	mov	r5, r0
 8014d70:	9407      	str	r4, [sp, #28]
 8014d72:	46d3      	mov	fp, sl
 8014d74:	464c      	mov	r4, r9
 8014d76:	2d00      	cmp	r5, #0
 8014d78:	f000 80c7 	beq.w	8014f0a <rcl_expand_topic_name+0x26e>
 8014d7c:	217d      	movs	r1, #125	; 0x7d
 8014d7e:	4620      	mov	r0, r4
 8014d80:	f006 f9b1 	bl	801b0e6 <strchr>
 8014d84:	eba0 0905 	sub.w	r9, r0, r5
 8014d88:	f109 0a01 	add.w	sl, r9, #1
 8014d8c:	4871      	ldr	r0, [pc, #452]	; (8014f54 <rcl_expand_topic_name+0x2b8>)
 8014d8e:	4652      	mov	r2, sl
 8014d90:	4629      	mov	r1, r5
 8014d92:	f006 f9bd 	bl	801b110 <strncmp>
 8014d96:	2800      	cmp	r0, #0
 8014d98:	f000 808d 	beq.w	8014eb6 <rcl_expand_topic_name+0x21a>
 8014d9c:	486e      	ldr	r0, [pc, #440]	; (8014f58 <rcl_expand_topic_name+0x2bc>)
 8014d9e:	4652      	mov	r2, sl
 8014da0:	4629      	mov	r1, r5
 8014da2:	f006 f9b5 	bl	801b110 <strncmp>
 8014da6:	b130      	cbz	r0, 8014db6 <rcl_expand_topic_name+0x11a>
 8014da8:	486c      	ldr	r0, [pc, #432]	; (8014f5c <rcl_expand_topic_name+0x2c0>)
 8014daa:	4652      	mov	r2, sl
 8014dac:	4629      	mov	r1, r5
 8014dae:	f006 f9af 	bl	801b110 <strncmp>
 8014db2:	2800      	cmp	r0, #0
 8014db4:	d15b      	bne.n	8014e6e <rcl_expand_topic_name+0x1d2>
 8014db6:	46b9      	mov	r9, r7
 8014db8:	ab16      	add	r3, sp, #88	; 0x58
 8014dba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014dbe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014dc2:	ab14      	add	r3, sp, #80	; 0x50
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	cb0c      	ldmia	r3, {r2, r3}
 8014dc8:	4651      	mov	r1, sl
 8014dca:	f002 f953 	bl	8017074 <rcutils_strndup>
 8014dce:	4605      	mov	r5, r0
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	f000 80a4 	beq.w	8014f1e <rcl_expand_topic_name+0x282>
 8014dd6:	464a      	mov	r2, r9
 8014dd8:	4620      	mov	r0, r4
 8014dda:	ab14      	add	r3, sp, #80	; 0x50
 8014ddc:	4629      	mov	r1, r5
 8014dde:	f002 f84f 	bl	8016e80 <rcutils_repl_str>
 8014de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014de4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014de6:	4604      	mov	r4, r0
 8014de8:	4628      	mov	r0, r5
 8014dea:	4798      	blx	r3
 8014dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014df0:	4658      	mov	r0, fp
 8014df2:	4798      	blx	r3
 8014df4:	2c00      	cmp	r4, #0
 8014df6:	f000 8083 	beq.w	8014f00 <rcl_expand_topic_name+0x264>
 8014dfa:	217b      	movs	r1, #123	; 0x7b
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	f006 f972 	bl	801b0e6 <strchr>
 8014e02:	46a3      	mov	fp, r4
 8014e04:	4605      	mov	r5, r0
 8014e06:	e7b6      	b.n	8014d76 <rcl_expand_topic_name+0xda>
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	d151      	bne.n	8014eb0 <rcl_expand_topic_name+0x214>
 8014e0c:	4638      	mov	r0, r7
 8014e0e:	f7eb f9f1 	bl	80001f4 <strlen>
 8014e12:	4b53      	ldr	r3, [pc, #332]	; (8014f60 <rcl_expand_topic_name+0x2c4>)
 8014e14:	4a53      	ldr	r2, [pc, #332]	; (8014f64 <rcl_expand_topic_name+0x2c8>)
 8014e16:	f8cd 8010 	str.w	r8, [sp, #16]
 8014e1a:	2801      	cmp	r0, #1
 8014e1c:	bf0c      	ite	eq
 8014e1e:	4618      	moveq	r0, r3
 8014e20:	4610      	movne	r0, r2
 8014e22:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e28:	e9cd 3200 	strd	r3, r2, [sp]
 8014e2c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014e30:	ab14      	add	r3, sp, #80	; 0x50
 8014e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014e34:	f001 ffd2 	bl	8016ddc <rcutils_format_string_limit>
 8014e38:	4682      	mov	sl, r0
 8014e3a:	4653      	mov	r3, sl
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d05f      	beq.n	8014f00 <rcl_expand_topic_name+0x264>
 8014e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e42:	f8c3 a000 	str.w	sl, [r3]
 8014e46:	4620      	mov	r0, r4
 8014e48:	b00b      	add	sp, #44	; 0x2c
 8014e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4e:	240b      	movs	r4, #11
 8014e50:	4620      	mov	r0, r4
 8014e52:	b00b      	add	sp, #44	; 0x2c
 8014e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e58:	f7ff fe98 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 8014e5c:	4604      	mov	r4, r0
 8014e5e:	e7f2      	b.n	8014e46 <rcl_expand_topic_name+0x1aa>
 8014e60:	2467      	movs	r4, #103	; 0x67
 8014e62:	4620      	mov	r0, r4
 8014e64:	b00b      	add	sp, #44	; 0x2c
 8014e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e6a:	24c9      	movs	r4, #201	; 0xc9
 8014e6c:	e7eb      	b.n	8014e46 <rcl_expand_topic_name+0x1aa>
 8014e6e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014e72:	9806      	ldr	r0, [sp, #24]
 8014e74:	1c69      	adds	r1, r5, #1
 8014e76:	f7fa fcf3 	bl	800f860 <rcutils_string_map_getn>
 8014e7a:	4681      	mov	r9, r0
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d19b      	bne.n	8014db8 <rcl_expand_topic_name+0x11c>
 8014e80:	aa16      	add	r2, sp, #88	; 0x58
 8014e82:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e86:	f8c3 9000 	str.w	r9, [r3]
 8014e8a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e8e:	ab14      	add	r3, sp, #80	; 0x50
 8014e90:	cb0c      	ldmia	r3, {r2, r3}
 8014e92:	4651      	mov	r1, sl
 8014e94:	4628      	mov	r0, r5
 8014e96:	f002 f8ed 	bl	8017074 <rcutils_strndup>
 8014e9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014e9e:	4798      	blx	r3
 8014ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ea2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014ea4:	4658      	mov	r0, fp
 8014ea6:	4798      	blx	r3
 8014ea8:	2469      	movs	r4, #105	; 0x69
 8014eaa:	e7cc      	b.n	8014e46 <rcl_expand_topic_name+0x1aa>
 8014eac:	2800      	cmp	r0, #0
 8014eae:	d03e      	beq.n	8014f2e <rcl_expand_topic_name+0x292>
 8014eb0:	46c1      	mov	r9, r8
 8014eb2:	46a2      	mov	sl, r4
 8014eb4:	e75c      	b.n	8014d70 <rcl_expand_topic_name+0xd4>
 8014eb6:	46b1      	mov	r9, r6
 8014eb8:	e77e      	b.n	8014db8 <rcl_expand_topic_name+0x11c>
 8014eba:	f89a 3000 	ldrb.w	r3, [sl]
 8014ebe:	2b2f      	cmp	r3, #47	; 0x2f
 8014ec0:	d0be      	beq.n	8014e40 <rcl_expand_topic_name+0x1a4>
 8014ec2:	4638      	mov	r0, r7
 8014ec4:	f7eb f996 	bl	80001f4 <strlen>
 8014ec8:	4b25      	ldr	r3, [pc, #148]	; (8014f60 <rcl_expand_topic_name+0x2c4>)
 8014eca:	4926      	ldr	r1, [pc, #152]	; (8014f64 <rcl_expand_topic_name+0x2c8>)
 8014ecc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ece:	f8cd a010 	str.w	sl, [sp, #16]
 8014ed2:	2801      	cmp	r0, #1
 8014ed4:	bf0c      	ite	eq
 8014ed6:	4618      	moveq	r0, r3
 8014ed8:	4608      	movne	r0, r1
 8014eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ede:	e9cd 2300 	strd	r2, r3, [sp]
 8014ee2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014ee6:	ab14      	add	r3, sp, #80	; 0x50
 8014ee8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014eea:	f001 ff77 	bl	8016ddc <rcutils_format_string_limit>
 8014eee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ef0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	4650      	mov	r0, sl
 8014ef6:	469a      	mov	sl, r3
 8014ef8:	4790      	blx	r2
 8014efa:	e79e      	b.n	8014e3a <rcl_expand_topic_name+0x19e>
 8014efc:	24ca      	movs	r4, #202	; 0xca
 8014efe:	e7a2      	b.n	8014e46 <rcl_expand_topic_name+0x1aa>
 8014f00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014f02:	2300      	movs	r3, #0
 8014f04:	6013      	str	r3, [r2, #0]
 8014f06:	240a      	movs	r4, #10
 8014f08:	e79d      	b.n	8014e46 <rcl_expand_topic_name+0x1aa>
 8014f0a:	465b      	mov	r3, fp
 8014f0c:	9c07      	ldr	r4, [sp, #28]
 8014f0e:	46da      	mov	sl, fp
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d1d2      	bne.n	8014eba <rcl_expand_topic_name+0x21e>
 8014f14:	f898 3000 	ldrb.w	r3, [r8]
 8014f18:	2b2f      	cmp	r3, #47	; 0x2f
 8014f1a:	d091      	beq.n	8014e40 <rcl_expand_topic_name+0x1a4>
 8014f1c:	e776      	b.n	8014e0c <rcl_expand_topic_name+0x170>
 8014f1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f20:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014f22:	601d      	str	r5, [r3, #0]
 8014f24:	4658      	mov	r0, fp
 8014f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f28:	4798      	blx	r3
 8014f2a:	240a      	movs	r4, #10
 8014f2c:	e78b      	b.n	8014e46 <rcl_expand_topic_name+0x1aa>
 8014f2e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014f32:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014f36:	ab14      	add	r3, sp, #80	; 0x50
 8014f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014f3a:	4640      	mov	r0, r8
 8014f3c:	f002 f878 	bl	8017030 <rcutils_strdup>
 8014f40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f42:	2800      	cmp	r0, #0
 8014f44:	bf08      	it	eq
 8014f46:	240a      	moveq	r4, #10
 8014f48:	6018      	str	r0, [r3, #0]
 8014f4a:	e77c      	b.n	8014e46 <rcl_expand_topic_name+0x1aa>
 8014f4c:	0801ee2c 	.word	0x0801ee2c
 8014f50:	0801f068 	.word	0x0801f068
 8014f54:	0801f070 	.word	0x0801f070
 8014f58:	0801f078 	.word	0x0801f078
 8014f5c:	0801f080 	.word	0x0801f080
 8014f60:	0801ee3c 	.word	0x0801ee3c
 8014f64:	0801edf4 	.word	0x0801edf4

08014f68 <rcl_get_default_topic_name_substitutions>:
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	bf0c      	ite	eq
 8014f6c:	200b      	moveq	r0, #11
 8014f6e:	2000      	movne	r0, #0
 8014f70:	4770      	bx	lr
 8014f72:	bf00      	nop

08014f74 <rcl_init>:
 8014f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f78:	1e07      	subs	r7, r0, #0
 8014f7a:	b09f      	sub	sp, #124	; 0x7c
 8014f7c:	4688      	mov	r8, r1
 8014f7e:	4692      	mov	sl, r2
 8014f80:	4699      	mov	r9, r3
 8014f82:	f340 8097 	ble.w	80150b4 <rcl_init+0x140>
 8014f86:	2900      	cmp	r1, #0
 8014f88:	f000 8097 	beq.w	80150ba <rcl_init+0x146>
 8014f8c:	1f0d      	subs	r5, r1, #4
 8014f8e:	2400      	movs	r4, #0
 8014f90:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014f94:	3401      	adds	r4, #1
 8014f96:	2e00      	cmp	r6, #0
 8014f98:	f000 808f 	beq.w	80150ba <rcl_init+0x146>
 8014f9c:	42a7      	cmp	r7, r4
 8014f9e:	d1f7      	bne.n	8014f90 <rcl_init+0x1c>
 8014fa0:	f1ba 0f00 	cmp.w	sl, #0
 8014fa4:	f000 8089 	beq.w	80150ba <rcl_init+0x146>
 8014fa8:	f8da 4000 	ldr.w	r4, [sl]
 8014fac:	2c00      	cmp	r4, #0
 8014fae:	f000 8084 	beq.w	80150ba <rcl_init+0x146>
 8014fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fb4:	ad19      	add	r5, sp, #100	; 0x64
 8014fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fb8:	6823      	ldr	r3, [r4, #0]
 8014fba:	602b      	str	r3, [r5, #0]
 8014fbc:	a819      	add	r0, sp, #100	; 0x64
 8014fbe:	f7fa fb15 	bl	800f5ec <rcutils_allocator_is_valid>
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	d079      	beq.n	80150ba <rcl_init+0x146>
 8014fc6:	f1b9 0f00 	cmp.w	r9, #0
 8014fca:	d076      	beq.n	80150ba <rcl_init+0x146>
 8014fcc:	f8d9 3000 	ldr.w	r3, [r9]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d177      	bne.n	80150c4 <rcl_init+0x150>
 8014fd4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014fd8:	2178      	movs	r1, #120	; 0x78
 8014fda:	2001      	movs	r0, #1
 8014fdc:	4798      	blx	r3
 8014fde:	4604      	mov	r4, r0
 8014fe0:	f8c9 0000 	str.w	r0, [r9]
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	f000 80ba 	beq.w	801515e <rcl_init+0x1ea>
 8014fea:	a802      	add	r0, sp, #8
 8014fec:	f002 f85e 	bl	80170ac <rmw_get_zero_initialized_context>
 8014ff0:	a902      	add	r1, sp, #8
 8014ff2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014ff6:	2250      	movs	r2, #80	; 0x50
 8014ff8:	ac19      	add	r4, sp, #100	; 0x64
 8014ffa:	f004 febb 	bl	8019d74 <memcpy>
 8014ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015000:	f8d9 5000 	ldr.w	r5, [r9]
 8015004:	6826      	ldr	r6, [r4, #0]
 8015006:	462c      	mov	r4, r5
 8015008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801500a:	f105 0114 	add.w	r1, r5, #20
 801500e:	6026      	str	r6, [r4, #0]
 8015010:	4650      	mov	r0, sl
 8015012:	f7f9 fc4b 	bl	800e8ac <rcl_init_options_copy>
 8015016:	4606      	mov	r6, r0
 8015018:	2800      	cmp	r0, #0
 801501a:	d144      	bne.n	80150a6 <rcl_init+0x132>
 801501c:	f8d9 a000 	ldr.w	sl, [r9]
 8015020:	463c      	mov	r4, r7
 8015022:	17fd      	asrs	r5, r7, #31
 8015024:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8015028:	f8ca 0020 	str.w	r0, [sl, #32]
 801502c:	2f00      	cmp	r7, #0
 801502e:	d050      	beq.n	80150d2 <rcl_init+0x15e>
 8015030:	f1b8 0f00 	cmp.w	r8, #0
 8015034:	d04d      	beq.n	80150d2 <rcl_init+0x15e>
 8015036:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801503a:	4638      	mov	r0, r7
 801503c:	2104      	movs	r1, #4
 801503e:	4798      	blx	r3
 8015040:	f8ca 0020 	str.w	r0, [sl, #32]
 8015044:	f8d9 a000 	ldr.w	sl, [r9]
 8015048:	f8da 3020 	ldr.w	r3, [sl, #32]
 801504c:	46d3      	mov	fp, sl
 801504e:	b34b      	cbz	r3, 80150a4 <rcl_init+0x130>
 8015050:	2f01      	cmp	r7, #1
 8015052:	f175 0300 	sbcs.w	r3, r5, #0
 8015056:	db3c      	blt.n	80150d2 <rcl_init+0x15e>
 8015058:	f1a8 0804 	sub.w	r8, r8, #4
 801505c:	2600      	movs	r6, #0
 801505e:	2700      	movs	r7, #0
 8015060:	e00c      	b.n	801507c <rcl_init+0x108>
 8015062:	f8d8 1000 	ldr.w	r1, [r8]
 8015066:	f004 fe85 	bl	8019d74 <memcpy>
 801506a:	3601      	adds	r6, #1
 801506c:	f147 0700 	adc.w	r7, r7, #0
 8015070:	42bd      	cmp	r5, r7
 8015072:	bf08      	it	eq
 8015074:	42b4      	cmpeq	r4, r6
 8015076:	d02a      	beq.n	80150ce <rcl_init+0x15a>
 8015078:	f8d9 b000 	ldr.w	fp, [r9]
 801507c:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8015080:	f7eb f8b8 	bl	80001f4 <strlen>
 8015084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015086:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015088:	f8db a020 	ldr.w	sl, [fp, #32]
 801508c:	9001      	str	r0, [sp, #4]
 801508e:	4798      	blx	r3
 8015090:	f8d9 1000 	ldr.w	r1, [r9]
 8015094:	9a01      	ldr	r2, [sp, #4]
 8015096:	6a09      	ldr	r1, [r1, #32]
 8015098:	00b3      	lsls	r3, r6, #2
 801509a:	f84a 0003 	str.w	r0, [sl, r3]
 801509e:	58c8      	ldr	r0, [r1, r3]
 80150a0:	2800      	cmp	r0, #0
 80150a2:	d1de      	bne.n	8015062 <rcl_init+0xee>
 80150a4:	260a      	movs	r6, #10
 80150a6:	4648      	mov	r0, r9
 80150a8:	f7ff fd94 	bl	8014bd4 <__cleanup_context>
 80150ac:	4630      	mov	r0, r6
 80150ae:	b01f      	add	sp, #124	; 0x7c
 80150b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150b4:	2900      	cmp	r1, #0
 80150b6:	f43f af73 	beq.w	8014fa0 <rcl_init+0x2c>
 80150ba:	260b      	movs	r6, #11
 80150bc:	4630      	mov	r0, r6
 80150be:	b01f      	add	sp, #124	; 0x7c
 80150c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c4:	2664      	movs	r6, #100	; 0x64
 80150c6:	4630      	mov	r0, r6
 80150c8:	b01f      	add	sp, #124	; 0x7c
 80150ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ce:	f8d9 a000 	ldr.w	sl, [r9]
 80150d2:	4a2c      	ldr	r2, [pc, #176]	; (8015184 <rcl_init+0x210>)
 80150d4:	6813      	ldr	r3, [r2, #0]
 80150d6:	3301      	adds	r3, #1
 80150d8:	d03b      	beq.n	8015152 <rcl_init+0x1de>
 80150da:	6013      	str	r3, [r2, #0]
 80150dc:	4619      	mov	r1, r3
 80150de:	2000      	movs	r0, #0
 80150e0:	f8da 4014 	ldr.w	r4, [sl, #20]
 80150e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80150e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80150ea:	3301      	adds	r3, #1
 80150ec:	e9c4 1006 	strd	r1, r0, [r4, #24]
 80150f0:	d039      	beq.n	8015166 <rcl_init+0x1f2>
 80150f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80150f6:	b94b      	cbnz	r3, 801510c <rcl_init+0x198>
 80150f8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80150fc:	f000 f844 	bl	8015188 <rcl_get_localhost_only>
 8015100:	4606      	mov	r6, r0
 8015102:	2800      	cmp	r0, #0
 8015104:	d1cf      	bne.n	80150a6 <rcl_init+0x132>
 8015106:	f8d9 3000 	ldr.w	r3, [r9]
 801510a:	695c      	ldr	r4, [r3, #20]
 801510c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801510e:	aa18      	add	r2, sp, #96	; 0x60
 8015110:	a917      	add	r1, sp, #92	; 0x5c
 8015112:	f000 fec1 	bl	8015e98 <rcl_validate_enclave_name>
 8015116:	4606      	mov	r6, r0
 8015118:	2800      	cmp	r0, #0
 801511a:	d1c4      	bne.n	80150a6 <rcl_init+0x132>
 801511c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801511e:	bb03      	cbnz	r3, 8015162 <rcl_init+0x1ee>
 8015120:	f8d9 1000 	ldr.w	r1, [r9]
 8015124:	694b      	ldr	r3, [r1, #20]
 8015126:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015128:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801512c:	f000 fa9a 	bl	8015664 <rcl_get_security_options_from_environment>
 8015130:	4606      	mov	r6, r0
 8015132:	2800      	cmp	r0, #0
 8015134:	d1b7      	bne.n	80150a6 <rcl_init+0x132>
 8015136:	f8d9 1000 	ldr.w	r1, [r9]
 801513a:	6948      	ldr	r0, [r1, #20]
 801513c:	3128      	adds	r1, #40	; 0x28
 801513e:	3018      	adds	r0, #24
 8015140:	f7fa fd9c 	bl	800fc7c <rmw_init>
 8015144:	4606      	mov	r6, r0
 8015146:	2800      	cmp	r0, #0
 8015148:	d0b8      	beq.n	80150bc <rcl_init+0x148>
 801514a:	f7ff fd1f 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 801514e:	4606      	mov	r6, r0
 8015150:	e7a9      	b.n	80150a6 <rcl_init+0x132>
 8015152:	2401      	movs	r4, #1
 8015154:	4618      	mov	r0, r3
 8015156:	4621      	mov	r1, r4
 8015158:	6014      	str	r4, [r2, #0]
 801515a:	4623      	mov	r3, r4
 801515c:	e7c0      	b.n	80150e0 <rcl_init+0x16c>
 801515e:	260a      	movs	r6, #10
 8015160:	e7ac      	b.n	80150bc <rcl_init+0x148>
 8015162:	2601      	movs	r6, #1
 8015164:	e79f      	b.n	80150a6 <rcl_init+0x132>
 8015166:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801516a:	f004 fb77 	bl	801985c <rcl_get_default_domain_id>
 801516e:	4606      	mov	r6, r0
 8015170:	2800      	cmp	r0, #0
 8015172:	d198      	bne.n	80150a6 <rcl_init+0x132>
 8015174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015176:	3301      	adds	r3, #1
 8015178:	f8d9 3000 	ldr.w	r3, [r9]
 801517c:	bf08      	it	eq
 801517e:	6260      	streq	r0, [r4, #36]	; 0x24
 8015180:	695c      	ldr	r4, [r3, #20]
 8015182:	e7b6      	b.n	80150f2 <rcl_init+0x17e>
 8015184:	20009dd8 	.word	0x20009dd8

08015188 <rcl_get_localhost_only>:
 8015188:	b510      	push	{r4, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	2300      	movs	r3, #0
 801518e:	9301      	str	r3, [sp, #4]
 8015190:	b1b8      	cbz	r0, 80151c2 <rcl_get_localhost_only+0x3a>
 8015192:	4604      	mov	r4, r0
 8015194:	a901      	add	r1, sp, #4
 8015196:	480c      	ldr	r0, [pc, #48]	; (80151c8 <rcl_get_localhost_only+0x40>)
 8015198:	f001 fe5a 	bl	8016e50 <rcutils_get_env>
 801519c:	b110      	cbz	r0, 80151a4 <rcl_get_localhost_only+0x1c>
 801519e:	2001      	movs	r0, #1
 80151a0:	b002      	add	sp, #8
 80151a2:	bd10      	pop	{r4, pc}
 80151a4:	9b01      	ldr	r3, [sp, #4]
 80151a6:	b113      	cbz	r3, 80151ae <rcl_get_localhost_only+0x26>
 80151a8:	781a      	ldrb	r2, [r3, #0]
 80151aa:	2a31      	cmp	r2, #49	; 0x31
 80151ac:	d004      	beq.n	80151b8 <rcl_get_localhost_only+0x30>
 80151ae:	2302      	movs	r3, #2
 80151b0:	2000      	movs	r0, #0
 80151b2:	7023      	strb	r3, [r4, #0]
 80151b4:	b002      	add	sp, #8
 80151b6:	bd10      	pop	{r4, pc}
 80151b8:	785b      	ldrb	r3, [r3, #1]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d1f7      	bne.n	80151ae <rcl_get_localhost_only+0x26>
 80151be:	2301      	movs	r3, #1
 80151c0:	e7f6      	b.n	80151b0 <rcl_get_localhost_only+0x28>
 80151c2:	200b      	movs	r0, #11
 80151c4:	b002      	add	sp, #8
 80151c6:	bd10      	pop	{r4, pc}
 80151c8:	0801f08c 	.word	0x0801f08c

080151cc <rcl_get_zero_initialized_node>:
 80151cc:	4a03      	ldr	r2, [pc, #12]	; (80151dc <rcl_get_zero_initialized_node+0x10>)
 80151ce:	4603      	mov	r3, r0
 80151d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80151d8:	4618      	mov	r0, r3
 80151da:	4770      	bx	lr
 80151dc:	0801f0a8 	.word	0x0801f0a8

080151e0 <rcl_node_init>:
 80151e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e4:	b09b      	sub	sp, #108	; 0x6c
 80151e6:	4604      	mov	r4, r0
 80151e8:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80151ec:	f04f 0c00 	mov.w	ip, #0
 80151f0:	a815      	add	r0, sp, #84	; 0x54
 80151f2:	460e      	mov	r6, r1
 80151f4:	4615      	mov	r5, r2
 80151f6:	461f      	mov	r7, r3
 80151f8:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80151fc:	f004 fbea 	bl	80199d4 <rcl_guard_condition_get_default_options>
 8015200:	f1b8 0f00 	cmp.w	r8, #0
 8015204:	f000 80fd 	beq.w	8015402 <rcl_node_init+0x222>
 8015208:	f108 0b04 	add.w	fp, r8, #4
 801520c:	4658      	mov	r0, fp
 801520e:	f7fa f9ed 	bl	800f5ec <rcutils_allocator_is_valid>
 8015212:	2800      	cmp	r0, #0
 8015214:	f000 80f5 	beq.w	8015402 <rcl_node_init+0x222>
 8015218:	2e00      	cmp	r6, #0
 801521a:	f000 80f2 	beq.w	8015402 <rcl_node_init+0x222>
 801521e:	2d00      	cmp	r5, #0
 8015220:	f000 80ef 	beq.w	8015402 <rcl_node_init+0x222>
 8015224:	2c00      	cmp	r4, #0
 8015226:	f000 80ec 	beq.w	8015402 <rcl_node_init+0x222>
 801522a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801522e:	f1b9 0f00 	cmp.w	r9, #0
 8015232:	f040 8112 	bne.w	801545a <rcl_node_init+0x27a>
 8015236:	2f00      	cmp	r7, #0
 8015238:	f000 80e3 	beq.w	8015402 <rcl_node_init+0x222>
 801523c:	4638      	mov	r0, r7
 801523e:	f7ff fcc3 	bl	8014bc8 <rcl_context_is_valid>
 8015242:	4682      	mov	sl, r0
 8015244:	2800      	cmp	r0, #0
 8015246:	f000 80e2 	beq.w	801540e <rcl_node_init+0x22e>
 801524a:	464a      	mov	r2, r9
 801524c:	a914      	add	r1, sp, #80	; 0x50
 801524e:	4630      	mov	r0, r6
 8015250:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8015254:	f001 ffb4 	bl	80171c0 <rmw_validate_node_name>
 8015258:	4681      	mov	r9, r0
 801525a:	2800      	cmp	r0, #0
 801525c:	f040 80d3 	bne.w	8015406 <rcl_node_init+0x226>
 8015260:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015262:	2800      	cmp	r0, #0
 8015264:	f040 8105 	bne.w	8015472 <rcl_node_init+0x292>
 8015268:	4628      	mov	r0, r5
 801526a:	f7ea ffc3 	bl	80001f4 <strlen>
 801526e:	2800      	cmp	r0, #0
 8015270:	f040 80d0 	bne.w	8015414 <rcl_node_init+0x234>
 8015274:	4d8e      	ldr	r5, [pc, #568]	; (80154b0 <rcl_node_init+0x2d0>)
 8015276:	a914      	add	r1, sp, #80	; 0x50
 8015278:	2200      	movs	r2, #0
 801527a:	4628      	mov	r0, r5
 801527c:	f001 ff82 	bl	8017184 <rmw_validate_namespace>
 8015280:	4681      	mov	r9, r0
 8015282:	2800      	cmp	r0, #0
 8015284:	f040 80bf 	bne.w	8015406 <rcl_node_init+0x226>
 8015288:	4682      	mov	sl, r0
 801528a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801528c:	2b00      	cmp	r3, #0
 801528e:	f040 80f5 	bne.w	801547c <rcl_node_init+0x29c>
 8015292:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015296:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801529a:	9307      	str	r3, [sp, #28]
 801529c:	2030      	movs	r0, #48	; 0x30
 801529e:	4790      	blx	r2
 80152a0:	4681      	mov	r9, r0
 80152a2:	6060      	str	r0, [r4, #4]
 80152a4:	2800      	cmp	r0, #0
 80152a6:	f000 80de 	beq.w	8015466 <rcl_node_init+0x286>
 80152aa:	9b07      	ldr	r3, [sp, #28]
 80152ac:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80152b0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80152b4:	a80a      	add	r0, sp, #40	; 0x28
 80152b6:	f7f9 fba7 	bl	800ea08 <rcl_node_get_default_options>
 80152ba:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80152be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152c2:	46cc      	mov	ip, r9
 80152c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152c8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80152cc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80152d0:	6861      	ldr	r1, [r4, #4]
 80152d2:	6027      	str	r7, [r4, #0]
 80152d4:	4640      	mov	r0, r8
 80152d6:	f7f9 fbb3 	bl	800ea40 <rcl_node_options_copy>
 80152da:	2800      	cmp	r0, #0
 80152dc:	d167      	bne.n	80153ae <rcl_node_init+0x1ce>
 80152de:	4628      	mov	r0, r5
 80152e0:	f7ea ff88 	bl	80001f4 <strlen>
 80152e4:	4428      	add	r0, r5
 80152e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152ea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80152ee:	2b2f      	cmp	r3, #47	; 0x2f
 80152f0:	bf08      	it	eq
 80152f2:	4970      	ldreq	r1, [pc, #448]	; (80154b4 <rcl_node_init+0x2d4>)
 80152f4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80152f8:	bf18      	it	ne
 80152fa:	496f      	ldrne	r1, [pc, #444]	; (80154b8 <rcl_node_init+0x2d8>)
 80152fc:	9604      	str	r6, [sp, #16]
 80152fe:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8015302:	e9cd 3200 	strd	r3, r2, [sp]
 8015306:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801530a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801530e:	f001 fd65 	bl	8016ddc <rcutils_format_string_limit>
 8015312:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8015316:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801531a:	f8d9 3000 	ldr.w	r3, [r9]
 801531e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015320:	1c59      	adds	r1, r3, #1
 8015322:	f000 80b7 	beq.w	8015494 <rcl_node_init+0x2b4>
 8015326:	683a      	ldr	r2, [r7, #0]
 8015328:	f8c9 301c 	str.w	r3, [r9, #28]
 801532c:	6952      	ldr	r2, [r2, #20]
 801532e:	6821      	ldr	r1, [r4, #0]
 8015330:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8015334:	6808      	ldr	r0, [r1, #0]
 8015336:	f1a2 0201 	sub.w	r2, r2, #1
 801533a:	fab2 f282 	clz	r2, r2
 801533e:	0952      	lsrs	r2, r2, #5
 8015340:	9200      	str	r2, [sp, #0]
 8015342:	4631      	mov	r1, r6
 8015344:	3028      	adds	r0, #40	; 0x28
 8015346:	462a      	mov	r2, r5
 8015348:	f7fa fe7c 	bl	8010044 <rmw_create_node>
 801534c:	6863      	ldr	r3, [r4, #4]
 801534e:	f8c9 0020 	str.w	r0, [r9, #32]
 8015352:	6a18      	ldr	r0, [r3, #32]
 8015354:	b368      	cbz	r0, 80153b2 <rcl_node_init+0x1d2>
 8015356:	f7fa ff07 	bl	8010168 <rmw_node_get_graph_guard_condition>
 801535a:	4681      	mov	r9, r0
 801535c:	b338      	cbz	r0, 80153ae <rcl_node_init+0x1ce>
 801535e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015362:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015366:	6866      	ldr	r6, [r4, #4]
 8015368:	2008      	movs	r0, #8
 801536a:	4798      	blx	r3
 801536c:	6863      	ldr	r3, [r4, #4]
 801536e:	6270      	str	r0, [r6, #36]	; 0x24
 8015370:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8015372:	b1f6      	cbz	r6, 80153b2 <rcl_node_init+0x1d2>
 8015374:	a808      	add	r0, sp, #32
 8015376:	f004 faa5 	bl	80198c4 <rcl_get_zero_initialized_guard_condition>
 801537a:	a808      	add	r0, sp, #32
 801537c:	c803      	ldmia	r0, {r0, r1}
 801537e:	e886 0003 	stmia.w	r6, {r0, r1}
 8015382:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8015386:	ae15      	add	r6, sp, #84	; 0x54
 8015388:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801538a:	f8db 3000 	ldr.w	r3, [fp]
 801538e:	6033      	str	r3, [r6, #0]
 8015390:	ab1a      	add	r3, sp, #104	; 0x68
 8015392:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015396:	6866      	ldr	r6, [r4, #4]
 8015398:	6a76      	ldr	r6, [r6, #36]	; 0x24
 801539a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801539e:	4649      	mov	r1, r9
 80153a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153a2:	4630      	mov	r0, r6
 80153a4:	463a      	mov	r2, r7
 80153a6:	f004 fa97 	bl	80198d8 <rcl_guard_condition_init_from_rmw>
 80153aa:	4681      	mov	r9, r0
 80153ac:	b328      	cbz	r0, 80153fa <rcl_node_init+0x21a>
 80153ae:	6863      	ldr	r3, [r4, #4]
 80153b0:	b1f3      	cbz	r3, 80153f0 <rcl_node_init+0x210>
 80153b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80153b4:	b128      	cbz	r0, 80153c2 <rcl_node_init+0x1e2>
 80153b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153ba:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153be:	4798      	blx	r3
 80153c0:	6863      	ldr	r3, [r4, #4]
 80153c2:	6a18      	ldr	r0, [r3, #32]
 80153c4:	b110      	cbz	r0, 80153cc <rcl_node_init+0x1ec>
 80153c6:	f7fa fe55 	bl	8010074 <rmw_destroy_node>
 80153ca:	6863      	ldr	r3, [r4, #4]
 80153cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80153ce:	b148      	cbz	r0, 80153e4 <rcl_node_init+0x204>
 80153d0:	f004 fada 	bl	8019988 <rcl_guard_condition_fini>
 80153d4:	6862      	ldr	r2, [r4, #4]
 80153d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153da:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80153dc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153e0:	4798      	blx	r3
 80153e2:	6863      	ldr	r3, [r4, #4]
 80153e4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80153e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153ec:	4618      	mov	r0, r3
 80153ee:	4790      	blx	r2
 80153f0:	2300      	movs	r3, #0
 80153f2:	e9c4 3300 	strd	r3, r3, [r4]
 80153f6:	f04f 0901 	mov.w	r9, #1
 80153fa:	f1ba 0f00 	cmp.w	sl, #0
 80153fe:	d125      	bne.n	801544c <rcl_node_init+0x26c>
 8015400:	e001      	b.n	8015406 <rcl_node_init+0x226>
 8015402:	f04f 090b 	mov.w	r9, #11
 8015406:	4648      	mov	r0, r9
 8015408:	b01b      	add	sp, #108	; 0x6c
 801540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540e:	f04f 0965 	mov.w	r9, #101	; 0x65
 8015412:	e7f8      	b.n	8015406 <rcl_node_init+0x226>
 8015414:	782b      	ldrb	r3, [r5, #0]
 8015416:	2b2f      	cmp	r3, #47	; 0x2f
 8015418:	f43f af2d 	beq.w	8015276 <rcl_node_init+0x96>
 801541c:	4927      	ldr	r1, [pc, #156]	; (80154bc <rcl_node_init+0x2dc>)
 801541e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015422:	9300      	str	r3, [sp, #0]
 8015424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015428:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801542c:	9503      	str	r5, [sp, #12]
 801542e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015432:	f001 fcd3 	bl	8016ddc <rcutils_format_string_limit>
 8015436:	4605      	mov	r5, r0
 8015438:	b348      	cbz	r0, 801548e <rcl_node_init+0x2ae>
 801543a:	2200      	movs	r2, #0
 801543c:	a914      	add	r1, sp, #80	; 0x50
 801543e:	9214      	str	r2, [sp, #80]	; 0x50
 8015440:	f001 fea0 	bl	8017184 <rmw_validate_namespace>
 8015444:	4681      	mov	r9, r0
 8015446:	2800      	cmp	r0, #0
 8015448:	f43f af1f 	beq.w	801528a <rcl_node_init+0xaa>
 801544c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015450:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015454:	4628      	mov	r0, r5
 8015456:	4798      	blx	r3
 8015458:	e7d5      	b.n	8015406 <rcl_node_init+0x226>
 801545a:	f04f 0964 	mov.w	r9, #100	; 0x64
 801545e:	4648      	mov	r0, r9
 8015460:	b01b      	add	sp, #108	; 0x6c
 8015462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015466:	f04f 090a 	mov.w	r9, #10
 801546a:	f1ba 0f00 	cmp.w	sl, #0
 801546e:	d1ed      	bne.n	801544c <rcl_node_init+0x26c>
 8015470:	e7c9      	b.n	8015406 <rcl_node_init+0x226>
 8015472:	f001 fef7 	bl	8017264 <rmw_node_name_validation_result_string>
 8015476:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 801547a:	e7c4      	b.n	8015406 <rcl_node_init+0x226>
 801547c:	4618      	mov	r0, r3
 801547e:	f001 fe93 	bl	80171a8 <rmw_namespace_validation_result_string>
 8015482:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8015486:	f1ba 0f00 	cmp.w	sl, #0
 801548a:	d1df      	bne.n	801544c <rcl_node_init+0x26c>
 801548c:	e7bb      	b.n	8015406 <rcl_node_init+0x226>
 801548e:	f04f 090a 	mov.w	r9, #10
 8015492:	e7b8      	b.n	8015406 <rcl_node_init+0x226>
 8015494:	a813      	add	r0, sp, #76	; 0x4c
 8015496:	f004 f9e1 	bl	801985c <rcl_get_default_domain_id>
 801549a:	2800      	cmp	r0, #0
 801549c:	d187      	bne.n	80153ae <rcl_node_init+0x1ce>
 801549e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154a0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80154a4:	1c5a      	adds	r2, r3, #1
 80154a6:	bf04      	itt	eq
 80154a8:	9013      	streq	r0, [sp, #76]	; 0x4c
 80154aa:	4603      	moveq	r3, r0
 80154ac:	e73b      	b.n	8015326 <rcl_node_init+0x146>
 80154ae:	bf00      	nop
 80154b0:	0801edf0 	.word	0x0801edf0
 80154b4:	0801ee3c 	.word	0x0801ee3c
 80154b8:	0801edf4 	.word	0x0801edf4
 80154bc:	0801f0a4 	.word	0x0801f0a4

080154c0 <rcl_node_is_valid>:
 80154c0:	b130      	cbz	r0, 80154d0 <rcl_node_is_valid+0x10>
 80154c2:	6843      	ldr	r3, [r0, #4]
 80154c4:	b123      	cbz	r3, 80154d0 <rcl_node_is_valid+0x10>
 80154c6:	6a1b      	ldr	r3, [r3, #32]
 80154c8:	b113      	cbz	r3, 80154d0 <rcl_node_is_valid+0x10>
 80154ca:	6800      	ldr	r0, [r0, #0]
 80154cc:	f7ff bb7c 	b.w	8014bc8 <rcl_context_is_valid>
 80154d0:	2000      	movs	r0, #0
 80154d2:	4770      	bx	lr

080154d4 <rcl_node_get_name>:
 80154d4:	b120      	cbz	r0, 80154e0 <rcl_node_get_name+0xc>
 80154d6:	6840      	ldr	r0, [r0, #4]
 80154d8:	b110      	cbz	r0, 80154e0 <rcl_node_get_name+0xc>
 80154da:	6a00      	ldr	r0, [r0, #32]
 80154dc:	b100      	cbz	r0, 80154e0 <rcl_node_get_name+0xc>
 80154de:	6880      	ldr	r0, [r0, #8]
 80154e0:	4770      	bx	lr
 80154e2:	bf00      	nop

080154e4 <rcl_node_get_namespace>:
 80154e4:	b120      	cbz	r0, 80154f0 <rcl_node_get_namespace+0xc>
 80154e6:	6840      	ldr	r0, [r0, #4]
 80154e8:	b110      	cbz	r0, 80154f0 <rcl_node_get_namespace+0xc>
 80154ea:	6a00      	ldr	r0, [r0, #32]
 80154ec:	b100      	cbz	r0, 80154f0 <rcl_node_get_namespace+0xc>
 80154ee:	68c0      	ldr	r0, [r0, #12]
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop

080154f4 <rcl_node_get_options>:
 80154f4:	b128      	cbz	r0, 8015502 <rcl_node_get_options+0xe>
 80154f6:	6840      	ldr	r0, [r0, #4]
 80154f8:	b118      	cbz	r0, 8015502 <rcl_node_get_options+0xe>
 80154fa:	6a03      	ldr	r3, [r0, #32]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	bf08      	it	eq
 8015500:	2000      	moveq	r0, #0
 8015502:	4770      	bx	lr

08015504 <rcl_node_get_rmw_handle>:
 8015504:	b110      	cbz	r0, 801550c <rcl_node_get_rmw_handle+0x8>
 8015506:	6840      	ldr	r0, [r0, #4]
 8015508:	b100      	cbz	r0, 801550c <rcl_node_get_rmw_handle+0x8>
 801550a:	6a00      	ldr	r0, [r0, #32]
 801550c:	4770      	bx	lr
 801550e:	bf00      	nop

08015510 <exact_match_lookup>:
 8015510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015512:	f102 0708 	add.w	r7, r2, #8
 8015516:	460b      	mov	r3, r1
 8015518:	4614      	mov	r4, r2
 801551a:	4606      	mov	r6, r0
 801551c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015520:	b085      	sub	sp, #20
 8015522:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015526:	4618      	mov	r0, r3
 8015528:	4918      	ldr	r1, [pc, #96]	; (801558c <exact_match_lookup+0x7c>)
 801552a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801552e:	f001 fc47 	bl	8016dc0 <rcutils_join_path>
 8015532:	7833      	ldrb	r3, [r6, #0]
 8015534:	2b2f      	cmp	r3, #47	; 0x2f
 8015536:	4605      	mov	r5, r0
 8015538:	d021      	beq.n	801557e <exact_match_lookup+0x6e>
 801553a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801553e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015542:	1c70      	adds	r0, r6, #1
 8015544:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015548:	f001 fc40 	bl	8016dcc <rcutils_to_native_path>
 801554c:	4606      	mov	r6, r0
 801554e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015552:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015556:	4631      	mov	r1, r6
 8015558:	e894 000c 	ldmia.w	r4, {r2, r3}
 801555c:	4628      	mov	r0, r5
 801555e:	f001 fc2f 	bl	8016dc0 <rcutils_join_path>
 8015562:	6862      	ldr	r2, [r4, #4]
 8015564:	6921      	ldr	r1, [r4, #16]
 8015566:	4603      	mov	r3, r0
 8015568:	4630      	mov	r0, r6
 801556a:	461e      	mov	r6, r3
 801556c:	4790      	blx	r2
 801556e:	4628      	mov	r0, r5
 8015570:	6863      	ldr	r3, [r4, #4]
 8015572:	6921      	ldr	r1, [r4, #16]
 8015574:	4798      	blx	r3
 8015576:	4635      	mov	r5, r6
 8015578:	4628      	mov	r0, r5
 801557a:	b005      	add	sp, #20
 801557c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801557e:	7873      	ldrb	r3, [r6, #1]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d1da      	bne.n	801553a <exact_match_lookup+0x2a>
 8015584:	4628      	mov	r0, r5
 8015586:	b005      	add	sp, #20
 8015588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801558a:	bf00      	nop
 801558c:	0801f0ec 	.word	0x0801f0ec

08015590 <rcl_get_secure_root>:
 8015590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015594:	b085      	sub	sp, #20
 8015596:	b168      	cbz	r0, 80155b4 <rcl_get_secure_root+0x24>
 8015598:	4607      	mov	r7, r0
 801559a:	4608      	mov	r0, r1
 801559c:	460c      	mov	r4, r1
 801559e:	f7fa f825 	bl	800f5ec <rcutils_allocator_is_valid>
 80155a2:	b138      	cbz	r0, 80155b4 <rcl_get_secure_root+0x24>
 80155a4:	2300      	movs	r3, #0
 80155a6:	482d      	ldr	r0, [pc, #180]	; (801565c <rcl_get_secure_root+0xcc>)
 80155a8:	9303      	str	r3, [sp, #12]
 80155aa:	a903      	add	r1, sp, #12
 80155ac:	f001 fc50 	bl	8016e50 <rcutils_get_env>
 80155b0:	4605      	mov	r5, r0
 80155b2:	b120      	cbz	r0, 80155be <rcl_get_secure_root+0x2e>
 80155b4:	2500      	movs	r5, #0
 80155b6:	4628      	mov	r0, r5
 80155b8:	b005      	add	sp, #20
 80155ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155be:	9b03      	ldr	r3, [sp, #12]
 80155c0:	781a      	ldrb	r2, [r3, #0]
 80155c2:	2a00      	cmp	r2, #0
 80155c4:	d0f6      	beq.n	80155b4 <rcl_get_secure_root+0x24>
 80155c6:	f104 090c 	add.w	r9, r4, #12
 80155ca:	e899 0003 	ldmia.w	r9, {r0, r1}
 80155ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80155d2:	4618      	mov	r0, r3
 80155d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80155d8:	f001 fd2a 	bl	8017030 <rcutils_strdup>
 80155dc:	4680      	mov	r8, r0
 80155de:	2800      	cmp	r0, #0
 80155e0:	d0e8      	beq.n	80155b4 <rcl_get_secure_root+0x24>
 80155e2:	481f      	ldr	r0, [pc, #124]	; (8015660 <rcl_get_secure_root+0xd0>)
 80155e4:	9503      	str	r5, [sp, #12]
 80155e6:	a903      	add	r1, sp, #12
 80155e8:	f001 fc32 	bl	8016e50 <rcutils_get_env>
 80155ec:	b160      	cbz	r0, 8015608 <rcl_get_secure_root+0x78>
 80155ee:	2600      	movs	r6, #0
 80155f0:	6863      	ldr	r3, [r4, #4]
 80155f2:	6921      	ldr	r1, [r4, #16]
 80155f4:	4630      	mov	r0, r6
 80155f6:	4798      	blx	r3
 80155f8:	4640      	mov	r0, r8
 80155fa:	6863      	ldr	r3, [r4, #4]
 80155fc:	6921      	ldr	r1, [r4, #16]
 80155fe:	4798      	blx	r3
 8015600:	4628      	mov	r0, r5
 8015602:	b005      	add	sp, #20
 8015604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015608:	9b03      	ldr	r3, [sp, #12]
 801560a:	781e      	ldrb	r6, [r3, #0]
 801560c:	b1f6      	cbz	r6, 801564c <rcl_get_secure_root+0xbc>
 801560e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015612:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015616:	4618      	mov	r0, r3
 8015618:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801561c:	f001 fd08 	bl	8017030 <rcutils_strdup>
 8015620:	4606      	mov	r6, r0
 8015622:	2800      	cmp	r0, #0
 8015624:	d0e3      	beq.n	80155ee <rcl_get_secure_root+0x5e>
 8015626:	4622      	mov	r2, r4
 8015628:	4641      	mov	r1, r8
 801562a:	f7ff ff71 	bl	8015510 <exact_match_lookup>
 801562e:	4605      	mov	r5, r0
 8015630:	2d00      	cmp	r5, #0
 8015632:	d0dd      	beq.n	80155f0 <rcl_get_secure_root+0x60>
 8015634:	4628      	mov	r0, r5
 8015636:	f001 fbc1 	bl	8016dbc <rcutils_is_directory>
 801563a:	4607      	mov	r7, r0
 801563c:	2800      	cmp	r0, #0
 801563e:	d1d7      	bne.n	80155f0 <rcl_get_secure_root+0x60>
 8015640:	4628      	mov	r0, r5
 8015642:	6863      	ldr	r3, [r4, #4]
 8015644:	6921      	ldr	r1, [r4, #16]
 8015646:	4798      	blx	r3
 8015648:	463d      	mov	r5, r7
 801564a:	e7d1      	b.n	80155f0 <rcl_get_secure_root+0x60>
 801564c:	4638      	mov	r0, r7
 801564e:	4622      	mov	r2, r4
 8015650:	4641      	mov	r1, r8
 8015652:	f7ff ff5d 	bl	8015510 <exact_match_lookup>
 8015656:	4605      	mov	r5, r0
 8015658:	e7ea      	b.n	8015630 <rcl_get_secure_root+0xa0>
 801565a:	bf00      	nop
 801565c:	0801f0f8 	.word	0x0801f0f8
 8015660:	0801f110 	.word	0x0801f110

08015664 <rcl_get_security_options_from_environment>:
 8015664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015668:	b082      	sub	sp, #8
 801566a:	4607      	mov	r7, r0
 801566c:	4688      	mov	r8, r1
 801566e:	2400      	movs	r4, #0
 8015670:	481d      	ldr	r0, [pc, #116]	; (80156e8 <rcl_get_security_options_from_environment+0x84>)
 8015672:	9401      	str	r4, [sp, #4]
 8015674:	a901      	add	r1, sp, #4
 8015676:	4616      	mov	r6, r2
 8015678:	f001 fbea 	bl	8016e50 <rcutils_get_env>
 801567c:	b120      	cbz	r0, 8015688 <rcl_get_security_options_from_environment+0x24>
 801567e:	2501      	movs	r5, #1
 8015680:	4628      	mov	r0, r5
 8015682:	b002      	add	sp, #8
 8015684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015688:	4918      	ldr	r1, [pc, #96]	; (80156ec <rcl_get_security_options_from_environment+0x88>)
 801568a:	4604      	mov	r4, r0
 801568c:	9801      	ldr	r0, [sp, #4]
 801568e:	f7ea fda7 	bl	80001e0 <strcmp>
 8015692:	4605      	mov	r5, r0
 8015694:	b9c8      	cbnz	r0, 80156ca <rcl_get_security_options_from_environment+0x66>
 8015696:	9001      	str	r0, [sp, #4]
 8015698:	b1ee      	cbz	r6, 80156d6 <rcl_get_security_options_from_environment+0x72>
 801569a:	4815      	ldr	r0, [pc, #84]	; (80156f0 <rcl_get_security_options_from_environment+0x8c>)
 801569c:	a901      	add	r1, sp, #4
 801569e:	f001 fbd7 	bl	8016e50 <rcutils_get_env>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d1eb      	bne.n	801567e <rcl_get_security_options_from_environment+0x1a>
 80156a6:	4913      	ldr	r1, [pc, #76]	; (80156f4 <rcl_get_security_options_from_environment+0x90>)
 80156a8:	9801      	ldr	r0, [sp, #4]
 80156aa:	f7ea fd99 	bl	80001e0 <strcmp>
 80156ae:	fab0 f080 	clz	r0, r0
 80156b2:	0940      	lsrs	r0, r0, #5
 80156b4:	7030      	strb	r0, [r6, #0]
 80156b6:	4641      	mov	r1, r8
 80156b8:	4638      	mov	r0, r7
 80156ba:	f7ff ff69 	bl	8015590 <rcl_get_secure_root>
 80156be:	b160      	cbz	r0, 80156da <rcl_get_security_options_from_environment+0x76>
 80156c0:	6070      	str	r0, [r6, #4]
 80156c2:	4628      	mov	r0, r5
 80156c4:	b002      	add	sp, #8
 80156c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ca:	4625      	mov	r5, r4
 80156cc:	4628      	mov	r0, r5
 80156ce:	7034      	strb	r4, [r6, #0]
 80156d0:	b002      	add	sp, #8
 80156d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d6:	250b      	movs	r5, #11
 80156d8:	e7d2      	b.n	8015680 <rcl_get_security_options_from_environment+0x1c>
 80156da:	7835      	ldrb	r5, [r6, #0]
 80156dc:	f1a5 0501 	sub.w	r5, r5, #1
 80156e0:	fab5 f585 	clz	r5, r5
 80156e4:	096d      	lsrs	r5, r5, #5
 80156e6:	e7cb      	b.n	8015680 <rcl_get_security_options_from_environment+0x1c>
 80156e8:	0801f0b0 	.word	0x0801f0b0
 80156ec:	0801f0c4 	.word	0x0801f0c4
 80156f0:	0801f0cc 	.word	0x0801f0cc
 80156f4:	0801f0e4 	.word	0x0801f0e4

080156f8 <rcl_service_get_rmw_handle>:
 80156f8:	b110      	cbz	r0, 8015700 <rcl_service_get_rmw_handle+0x8>
 80156fa:	6800      	ldr	r0, [r0, #0]
 80156fc:	b100      	cbz	r0, 8015700 <rcl_service_get_rmw_handle+0x8>
 80156fe:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015700:	4770      	bx	lr
 8015702:	bf00      	nop

08015704 <rcl_take_request>:
 8015704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015706:	460e      	mov	r6, r1
 8015708:	460c      	mov	r4, r1
 801570a:	4607      	mov	r7, r0
 801570c:	4694      	mov	ip, r2
 801570e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015710:	b08d      	sub	sp, #52	; 0x34
 8015712:	ad06      	add	r5, sp, #24
 8015714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015716:	e896 0003 	ldmia.w	r6, {r0, r1}
 801571a:	e885 0003 	stmia.w	r5, {r0, r1}
 801571e:	b1e7      	cbz	r7, 801575a <rcl_take_request+0x56>
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	b1d3      	cbz	r3, 801575a <rcl_take_request+0x56>
 8015724:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015726:	b1c0      	cbz	r0, 801575a <rcl_take_request+0x56>
 8015728:	4662      	mov	r2, ip
 801572a:	b30a      	cbz	r2, 8015770 <rcl_take_request+0x6c>
 801572c:	2500      	movs	r5, #0
 801572e:	f10d 0307 	add.w	r3, sp, #7
 8015732:	a902      	add	r1, sp, #8
 8015734:	f88d 5007 	strb.w	r5, [sp, #7]
 8015738:	f001 ff76 	bl	8017628 <rmw_take_request>
 801573c:	4606      	mov	r6, r0
 801573e:	b178      	cbz	r0, 8015760 <rcl_take_request+0x5c>
 8015740:	280a      	cmp	r0, #10
 8015742:	bf18      	it	ne
 8015744:	2601      	movne	r6, #1
 8015746:	ad06      	add	r5, sp, #24
 8015748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801574a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801574c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015750:	e884 0003 	stmia.w	r4, {r0, r1}
 8015754:	4630      	mov	r0, r6
 8015756:	b00d      	add	sp, #52	; 0x34
 8015758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801575a:	f44f 7616 	mov.w	r6, #600	; 0x258
 801575e:	e7f2      	b.n	8015746 <rcl_take_request+0x42>
 8015760:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015764:	f240 2359 	movw	r3, #601	; 0x259
 8015768:	2a00      	cmp	r2, #0
 801576a:	bf08      	it	eq
 801576c:	461e      	moveq	r6, r3
 801576e:	e7ea      	b.n	8015746 <rcl_take_request+0x42>
 8015770:	260b      	movs	r6, #11
 8015772:	e7e8      	b.n	8015746 <rcl_take_request+0x42>

08015774 <rcl_send_response>:
 8015774:	b160      	cbz	r0, 8015790 <rcl_send_response+0x1c>
 8015776:	6800      	ldr	r0, [r0, #0]
 8015778:	b150      	cbz	r0, 8015790 <rcl_send_response+0x1c>
 801577a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801577c:	b140      	cbz	r0, 8015790 <rcl_send_response+0x1c>
 801577e:	b151      	cbz	r1, 8015796 <rcl_send_response+0x22>
 8015780:	b510      	push	{r4, lr}
 8015782:	b152      	cbz	r2, 801579a <rcl_send_response+0x26>
 8015784:	f001 ffae 	bl	80176e4 <rmw_send_response>
 8015788:	3800      	subs	r0, #0
 801578a:	bf18      	it	ne
 801578c:	2001      	movne	r0, #1
 801578e:	bd10      	pop	{r4, pc}
 8015790:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015794:	4770      	bx	lr
 8015796:	200b      	movs	r0, #11
 8015798:	4770      	bx	lr
 801579a:	200b      	movs	r0, #11
 801579c:	bd10      	pop	{r4, pc}
 801579e:	bf00      	nop

080157a0 <rcl_get_zero_initialized_subscription>:
 80157a0:	4b01      	ldr	r3, [pc, #4]	; (80157a8 <rcl_get_zero_initialized_subscription+0x8>)
 80157a2:	6818      	ldr	r0, [r3, #0]
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop
 80157a8:	0801f130 	.word	0x0801f130

080157ac <rcl_subscription_init>:
 80157ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b0:	b091      	sub	sp, #68	; 0x44
 80157b2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80157b4:	b1d7      	cbz	r7, 80157ec <rcl_subscription_init+0x40>
 80157b6:	f107 0950 	add.w	r9, r7, #80	; 0x50
 80157ba:	4604      	mov	r4, r0
 80157bc:	4648      	mov	r0, r9
 80157be:	4688      	mov	r8, r1
 80157c0:	4616      	mov	r6, r2
 80157c2:	461d      	mov	r5, r3
 80157c4:	f7f9 ff12 	bl	800f5ec <rcutils_allocator_is_valid>
 80157c8:	b180      	cbz	r0, 80157ec <rcl_subscription_init+0x40>
 80157ca:	b17c      	cbz	r4, 80157ec <rcl_subscription_init+0x40>
 80157cc:	4640      	mov	r0, r8
 80157ce:	f7ff fe77 	bl	80154c0 <rcl_node_is_valid>
 80157d2:	b380      	cbz	r0, 8015836 <rcl_subscription_init+0x8a>
 80157d4:	b156      	cbz	r6, 80157ec <rcl_subscription_init+0x40>
 80157d6:	b14d      	cbz	r5, 80157ec <rcl_subscription_init+0x40>
 80157d8:	f8d4 a000 	ldr.w	sl, [r4]
 80157dc:	f1ba 0f00 	cmp.w	sl, #0
 80157e0:	d009      	beq.n	80157f6 <rcl_subscription_init+0x4a>
 80157e2:	2564      	movs	r5, #100	; 0x64
 80157e4:	4628      	mov	r0, r5
 80157e6:	b011      	add	sp, #68	; 0x44
 80157e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ec:	250b      	movs	r5, #11
 80157ee:	4628      	mov	r0, r5
 80157f0:	b011      	add	sp, #68	; 0x44
 80157f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157f6:	46ce      	mov	lr, r9
 80157f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157fc:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8015800:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015804:	f8de 3000 	ldr.w	r3, [lr]
 8015808:	f8cc 3000 	str.w	r3, [ip]
 801580c:	f7f9 ff2a 	bl	800f664 <rcutils_get_zero_initialized_string_map>
 8015810:	ab10      	add	r3, sp, #64	; 0x40
 8015812:	4684      	mov	ip, r0
 8015814:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015818:	f8cd c020 	str.w	ip, [sp, #32]
 801581c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015820:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8015824:	4651      	mov	r1, sl
 8015826:	a808      	add	r0, sp, #32
 8015828:	f7f9 ff96 	bl	800f758 <rcutils_string_map_init>
 801582c:	b140      	cbz	r0, 8015840 <rcl_subscription_init+0x94>
 801582e:	280a      	cmp	r0, #10
 8015830:	d011      	beq.n	8015856 <rcl_subscription_init+0xaa>
 8015832:	2501      	movs	r5, #1
 8015834:	e7db      	b.n	80157ee <rcl_subscription_init+0x42>
 8015836:	25c8      	movs	r5, #200	; 0xc8
 8015838:	4628      	mov	r0, r5
 801583a:	b011      	add	sp, #68	; 0x44
 801583c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015840:	a808      	add	r0, sp, #32
 8015842:	f7ff fb91 	bl	8014f68 <rcl_get_default_topic_name_substitutions>
 8015846:	4682      	mov	sl, r0
 8015848:	b138      	cbz	r0, 801585a <rcl_subscription_init+0xae>
 801584a:	a808      	add	r0, sp, #32
 801584c:	f7f9 ffc4 	bl	800f7d8 <rcutils_string_map_fini>
 8015850:	f1ba 0f0a 	cmp.w	sl, #10
 8015854:	d1ed      	bne.n	8015832 <rcl_subscription_init+0x86>
 8015856:	250a      	movs	r5, #10
 8015858:	e7c9      	b.n	80157ee <rcl_subscription_init+0x42>
 801585a:	4640      	mov	r0, r8
 801585c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015860:	f7ff fe38 	bl	80154d4 <rcl_node_get_name>
 8015864:	4682      	mov	sl, r0
 8015866:	4640      	mov	r0, r8
 8015868:	f7ff fe3c 	bl	80154e4 <rcl_node_get_namespace>
 801586c:	4686      	mov	lr, r0
 801586e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8015872:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8015876:	46ec      	mov	ip, sp
 8015878:	f8cd b014 	str.w	fp, [sp, #20]
 801587c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015880:	f8d9 3000 	ldr.w	r3, [r9]
 8015884:	f8cc 3000 	str.w	r3, [ip]
 8015888:	4628      	mov	r0, r5
 801588a:	4651      	mov	r1, sl
 801588c:	4672      	mov	r2, lr
 801588e:	ab08      	add	r3, sp, #32
 8015890:	f7ff fa04 	bl	8014c9c <rcl_expand_topic_name>
 8015894:	4605      	mov	r5, r0
 8015896:	a808      	add	r0, sp, #32
 8015898:	f7f9 ff9e 	bl	800f7d8 <rcutils_string_map_fini>
 801589c:	b920      	cbnz	r0, 80158a8 <rcl_subscription_init+0xfc>
 801589e:	b15d      	cbz	r5, 80158b8 <rcl_subscription_init+0x10c>
 80158a0:	2d67      	cmp	r5, #103	; 0x67
 80158a2:	d002      	beq.n	80158aa <rcl_subscription_init+0xfe>
 80158a4:	2d69      	cmp	r5, #105	; 0x69
 80158a6:	d05a      	beq.n	801595e <rcl_subscription_init+0x1b2>
 80158a8:	2501      	movs	r5, #1
 80158aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d09e      	beq.n	80157ee <rcl_subscription_init+0x42>
 80158b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80158b4:	4798      	blx	r3
 80158b6:	e79a      	b.n	80157ee <rcl_subscription_init+0x42>
 80158b8:	4640      	mov	r0, r8
 80158ba:	f7ff fe1b 	bl	80154f4 <rcl_node_get_options>
 80158be:	2800      	cmp	r0, #0
 80158c0:	d0f2      	beq.n	80158a8 <rcl_subscription_init+0xfc>
 80158c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158c4:	f7ea fc96 	bl	80001f4 <strlen>
 80158c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80158cc:	3001      	adds	r0, #1
 80158ce:	4798      	blx	r3
 80158d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158d2:	9107      	str	r1, [sp, #28]
 80158d4:	4681      	mov	r9, r0
 80158d6:	4608      	mov	r0, r1
 80158d8:	f7ea fc8c 	bl	80001f4 <strlen>
 80158dc:	9907      	ldr	r1, [sp, #28]
 80158de:	1c42      	adds	r2, r0, #1
 80158e0:	4648      	mov	r0, r9
 80158e2:	f004 fa47 	bl	8019d74 <memcpy>
 80158e6:	462a      	mov	r2, r5
 80158e8:	4648      	mov	r0, r9
 80158ea:	a90a      	add	r1, sp, #40	; 0x28
 80158ec:	f7fa f850 	bl	800f990 <rmw_validate_full_topic_name>
 80158f0:	2800      	cmp	r0, #0
 80158f2:	d132      	bne.n	801595a <rcl_subscription_init+0x1ae>
 80158f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d133      	bne.n	8015962 <rcl_subscription_init+0x1b6>
 80158fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80158fe:	20c8      	movs	r0, #200	; 0xc8
 8015900:	4798      	blx	r3
 8015902:	6020      	str	r0, [r4, #0]
 8015904:	b378      	cbz	r0, 8015966 <rcl_subscription_init+0x1ba>
 8015906:	4640      	mov	r0, r8
 8015908:	f7ff fdfc 	bl	8015504 <rcl_node_get_rmw_handle>
 801590c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	4631      	mov	r1, r6
 8015914:	463b      	mov	r3, r7
 8015916:	464a      	mov	r2, r9
 8015918:	6825      	ldr	r5, [r4, #0]
 801591a:	f7fa fe03 	bl	8010524 <rmw_create_subscription>
 801591e:	6821      	ldr	r1, [r4, #0]
 8015920:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 8015924:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8015928:	b368      	cbz	r0, 8015986 <rcl_subscription_init+0x1da>
 801592a:	3170      	adds	r1, #112	; 0x70
 801592c:	f7fa feda 	bl	80106e4 <rmw_subscription_get_actual_qos>
 8015930:	4605      	mov	r5, r0
 8015932:	b9d0      	cbnz	r0, 801596a <rcl_subscription_init+0x1be>
 8015934:	6820      	ldr	r0, [r4, #0]
 8015936:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801593a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 801593e:	2270      	movs	r2, #112	; 0x70
 8015940:	4639      	mov	r1, r7
 8015942:	f004 fa17 	bl	8019d74 <memcpy>
 8015946:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015948:	b110      	cbz	r0, 8015950 <rcl_subscription_init+0x1a4>
 801594a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801594c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801594e:	4798      	blx	r3
 8015950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015952:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015954:	4648      	mov	r0, r9
 8015956:	4798      	blx	r3
 8015958:	e749      	b.n	80157ee <rcl_subscription_init+0x42>
 801595a:	2501      	movs	r5, #1
 801595c:	e7f3      	b.n	8015946 <rcl_subscription_init+0x19a>
 801595e:	2567      	movs	r5, #103	; 0x67
 8015960:	e7a3      	b.n	80158aa <rcl_subscription_init+0xfe>
 8015962:	2567      	movs	r5, #103	; 0x67
 8015964:	e7ef      	b.n	8015946 <rcl_subscription_init+0x19a>
 8015966:	250a      	movs	r5, #10
 8015968:	e7ed      	b.n	8015946 <rcl_subscription_init+0x19a>
 801596a:	6823      	ldr	r3, [r4, #0]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d0f4      	beq.n	801595a <rcl_subscription_init+0x1ae>
 8015970:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015974:	b13b      	cbz	r3, 8015986 <rcl_subscription_init+0x1da>
 8015976:	4640      	mov	r0, r8
 8015978:	f7ff fdc4 	bl	8015504 <rcl_node_get_rmw_handle>
 801597c:	6823      	ldr	r3, [r4, #0]
 801597e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8015982:	f7fa feb1 	bl	80106e8 <rmw_destroy_subscription>
 8015986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015988:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801598a:	6820      	ldr	r0, [r4, #0]
 801598c:	4798      	blx	r3
 801598e:	2300      	movs	r3, #0
 8015990:	6023      	str	r3, [r4, #0]
 8015992:	2501      	movs	r5, #1
 8015994:	e7d7      	b.n	8015946 <rcl_subscription_init+0x19a>
 8015996:	bf00      	nop

08015998 <rcl_subscription_get_default_options>:
 8015998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801599c:	4f12      	ldr	r7, [pc, #72]	; (80159e8 <rcl_subscription_get_default_options+0x50>)
 801599e:	4913      	ldr	r1, [pc, #76]	; (80159ec <rcl_subscription_get_default_options+0x54>)
 80159a0:	b088      	sub	sp, #32
 80159a2:	4606      	mov	r6, r0
 80159a4:	2250      	movs	r2, #80	; 0x50
 80159a6:	4638      	mov	r0, r7
 80159a8:	f004 f9e4 	bl	8019d74 <memcpy>
 80159ac:	ac02      	add	r4, sp, #8
 80159ae:	a802      	add	r0, sp, #8
 80159b0:	f7f9 fe0e 	bl	800f5d0 <rcutils_get_default_allocator>
 80159b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159b6:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80159ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159bc:	46e8      	mov	r8, sp
 80159be:	6823      	ldr	r3, [r4, #0]
 80159c0:	602b      	str	r3, [r5, #0]
 80159c2:	4640      	mov	r0, r8
 80159c4:	f001 fb7a 	bl	80170bc <rmw_get_default_subscription_options>
 80159c8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80159cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80159d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80159d4:	2270      	movs	r2, #112	; 0x70
 80159d6:	4639      	mov	r1, r7
 80159d8:	4630      	mov	r0, r6
 80159da:	f004 f9cb 	bl	8019d74 <memcpy>
 80159de:	4630      	mov	r0, r6
 80159e0:	b008      	add	sp, #32
 80159e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159e6:	bf00      	nop
 80159e8:	20009de0 	.word	0x20009de0
 80159ec:	0801f138 	.word	0x0801f138

080159f0 <rcl_take>:
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d03f      	beq.n	8015a74 <rcl_take+0x84>
 80159f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159f8:	4617      	mov	r7, r2
 80159fa:	6802      	ldr	r2, [r0, #0]
 80159fc:	b09d      	sub	sp, #116	; 0x74
 80159fe:	4606      	mov	r6, r0
 8015a00:	b382      	cbz	r2, 8015a64 <rcl_take+0x74>
 8015a02:	4699      	mov	r9, r3
 8015a04:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8015a08:	b363      	cbz	r3, 8015a64 <rcl_take+0x74>
 8015a0a:	4688      	mov	r8, r1
 8015a0c:	b381      	cbz	r1, 8015a70 <rcl_take+0x80>
 8015a0e:	2f00      	cmp	r7, #0
 8015a10:	d034      	beq.n	8015a7c <rcl_take+0x8c>
 8015a12:	a802      	add	r0, sp, #8
 8015a14:	ac02      	add	r4, sp, #8
 8015a16:	f001 fb55 	bl	80170c4 <rmw_get_zero_initialized_message_info>
 8015a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a1c:	463d      	mov	r5, r7
 8015a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015a28:	6834      	ldr	r4, [r6, #0]
 8015a2a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 8015a2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015a32:	2400      	movs	r4, #0
 8015a34:	463b      	mov	r3, r7
 8015a36:	4630      	mov	r0, r6
 8015a38:	f8cd 9000 	str.w	r9, [sp]
 8015a3c:	4641      	mov	r1, r8
 8015a3e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8015a42:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 8015a46:	f001 fef7 	bl	8017838 <rmw_take_with_info>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	b9c0      	cbnz	r0, 8015a80 <rcl_take+0x90>
 8015a4e:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8015a52:	f240 1291 	movw	r2, #401	; 0x191
 8015a56:	2900      	cmp	r1, #0
 8015a58:	bf08      	it	eq
 8015a5a:	4613      	moveq	r3, r2
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	b01d      	add	sp, #116	; 0x74
 8015a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a64:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015a68:	4618      	mov	r0, r3
 8015a6a:	b01d      	add	sp, #116	; 0x74
 8015a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a70:	230b      	movs	r3, #11
 8015a72:	e7f3      	b.n	8015a5c <rcl_take+0x6c>
 8015a74:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015a78:	4618      	mov	r0, r3
 8015a7a:	4770      	bx	lr
 8015a7c:	af10      	add	r7, sp, #64	; 0x40
 8015a7e:	e7c8      	b.n	8015a12 <rcl_take+0x22>
 8015a80:	f7ff f884 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 8015a84:	4603      	mov	r3, r0
 8015a86:	e7e9      	b.n	8015a5c <rcl_take+0x6c>

08015a88 <rcl_subscription_get_rmw_handle>:
 8015a88:	b118      	cbz	r0, 8015a92 <rcl_subscription_get_rmw_handle+0xa>
 8015a8a:	6800      	ldr	r0, [r0, #0]
 8015a8c:	b108      	cbz	r0, 8015a92 <rcl_subscription_get_rmw_handle+0xa>
 8015a8e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8015a92:	4770      	bx	lr

08015a94 <rcl_get_system_time>:
 8015a94:	4608      	mov	r0, r1
 8015a96:	f7f9 bf15 	b.w	800f8c4 <rcutils_system_time_now>
 8015a9a:	bf00      	nop

08015a9c <rcl_get_steady_time>:
 8015a9c:	4608      	mov	r0, r1
 8015a9e:	f7f9 bf39 	b.w	800f914 <rcutils_steady_time_now>
 8015aa2:	bf00      	nop

08015aa4 <rcl_get_ros_time>:
 8015aa4:	7a03      	ldrb	r3, [r0, #8]
 8015aa6:	b510      	push	{r4, lr}
 8015aa8:	460c      	mov	r4, r1
 8015aaa:	b133      	cbz	r3, 8015aba <rcl_get_ros_time+0x16>
 8015aac:	2105      	movs	r1, #5
 8015aae:	f001 f8e3 	bl	8016c78 <__atomic_load_8>
 8015ab2:	e9c4 0100 	strd	r0, r1, [r4]
 8015ab6:	2000      	movs	r0, #0
 8015ab8:	bd10      	pop	{r4, pc}
 8015aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015abe:	4608      	mov	r0, r1
 8015ac0:	f7f9 bf00 	b.w	800f8c4 <rcutils_system_time_now>

08015ac4 <rcl_clock_init>:
 8015ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ac8:	4606      	mov	r6, r0
 8015aca:	4610      	mov	r0, r2
 8015acc:	4614      	mov	r4, r2
 8015ace:	460d      	mov	r5, r1
 8015ad0:	f7f9 fd8c 	bl	800f5ec <rcutils_allocator_is_valid>
 8015ad4:	b128      	cbz	r0, 8015ae2 <rcl_clock_init+0x1e>
 8015ad6:	2e03      	cmp	r6, #3
 8015ad8:	d803      	bhi.n	8015ae2 <rcl_clock_init+0x1e>
 8015ada:	e8df f006 	tbb	[pc, r6]
 8015ade:	2c1b      	.short	0x2c1b
 8015ae0:	0554      	.short	0x0554
 8015ae2:	200b      	movs	r0, #11
 8015ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ae8:	2d00      	cmp	r5, #0
 8015aea:	d0fa      	beq.n	8015ae2 <rcl_clock_init+0x1e>
 8015aec:	2c00      	cmp	r4, #0
 8015aee:	d0f8      	beq.n	8015ae2 <rcl_clock_init+0x1e>
 8015af0:	2600      	movs	r6, #0
 8015af2:	702e      	strb	r6, [r5, #0]
 8015af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015af6:	f105 0714 	add.w	r7, r5, #20
 8015afa:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015afe:	612e      	str	r6, [r5, #16]
 8015b00:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015b02:	6823      	ldr	r3, [r4, #0]
 8015b04:	603b      	str	r3, [r7, #0]
 8015b06:	2303      	movs	r3, #3
 8015b08:	4a2b      	ldr	r2, [pc, #172]	; (8015bb8 <rcl_clock_init+0xf4>)
 8015b0a:	702b      	strb	r3, [r5, #0]
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	60ea      	str	r2, [r5, #12]
 8015b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b14:	2d00      	cmp	r5, #0
 8015b16:	d0e4      	beq.n	8015ae2 <rcl_clock_init+0x1e>
 8015b18:	2600      	movs	r6, #0
 8015b1a:	702e      	strb	r6, [r5, #0]
 8015b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b1e:	f105 0714 	add.w	r7, r5, #20
 8015b22:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015b26:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015b2a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015b2c:	6823      	ldr	r3, [r4, #0]
 8015b2e:	603b      	str	r3, [r7, #0]
 8015b30:	4630      	mov	r0, r6
 8015b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b36:	2d00      	cmp	r5, #0
 8015b38:	d0d3      	beq.n	8015ae2 <rcl_clock_init+0x1e>
 8015b3a:	2c00      	cmp	r4, #0
 8015b3c:	d0d1      	beq.n	8015ae2 <rcl_clock_init+0x1e>
 8015b3e:	2600      	movs	r6, #0
 8015b40:	702e      	strb	r6, [r5, #0]
 8015b42:	46a4      	mov	ip, r4
 8015b44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b48:	f105 0714 	add.w	r7, r5, #20
 8015b4c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015b50:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015b54:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015b56:	f8dc 3000 	ldr.w	r3, [ip]
 8015b5a:	603b      	str	r3, [r7, #0]
 8015b5c:	6921      	ldr	r1, [r4, #16]
 8015b5e:	6823      	ldr	r3, [r4, #0]
 8015b60:	2010      	movs	r0, #16
 8015b62:	4798      	blx	r3
 8015b64:	4603      	mov	r3, r0
 8015b66:	6128      	str	r0, [r5, #16]
 8015b68:	b318      	cbz	r0, 8015bb2 <rcl_clock_init+0xee>
 8015b6a:	f04f 0800 	mov.w	r8, #0
 8015b6e:	f04f 0900 	mov.w	r9, #0
 8015b72:	7206      	strb	r6, [r0, #8]
 8015b74:	e9c3 8900 	strd	r8, r9, [r3]
 8015b78:	2301      	movs	r3, #1
 8015b7a:	4a10      	ldr	r2, [pc, #64]	; (8015bbc <rcl_clock_init+0xf8>)
 8015b7c:	702b      	strb	r3, [r5, #0]
 8015b7e:	4630      	mov	r0, r6
 8015b80:	60ea      	str	r2, [r5, #12]
 8015b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b86:	2d00      	cmp	r5, #0
 8015b88:	d0ab      	beq.n	8015ae2 <rcl_clock_init+0x1e>
 8015b8a:	2c00      	cmp	r4, #0
 8015b8c:	d0a9      	beq.n	8015ae2 <rcl_clock_init+0x1e>
 8015b8e:	2600      	movs	r6, #0
 8015b90:	702e      	strb	r6, [r5, #0]
 8015b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b94:	f105 0714 	add.w	r7, r5, #20
 8015b98:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015b9c:	612e      	str	r6, [r5, #16]
 8015b9e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015ba0:	6823      	ldr	r3, [r4, #0]
 8015ba2:	603b      	str	r3, [r7, #0]
 8015ba4:	2302      	movs	r3, #2
 8015ba6:	4a06      	ldr	r2, [pc, #24]	; (8015bc0 <rcl_clock_init+0xfc>)
 8015ba8:	702b      	strb	r3, [r5, #0]
 8015baa:	4630      	mov	r0, r6
 8015bac:	60ea      	str	r2, [r5, #12]
 8015bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bb2:	200a      	movs	r0, #10
 8015bb4:	e796      	b.n	8015ae4 <rcl_clock_init+0x20>
 8015bb6:	bf00      	nop
 8015bb8:	08015a9d 	.word	0x08015a9d
 8015bbc:	08015aa5 	.word	0x08015aa5
 8015bc0:	08015a95 	.word	0x08015a95

08015bc4 <rcl_clock_get_now>:
 8015bc4:	b140      	cbz	r0, 8015bd8 <rcl_clock_get_now+0x14>
 8015bc6:	b139      	cbz	r1, 8015bd8 <rcl_clock_get_now+0x14>
 8015bc8:	7803      	ldrb	r3, [r0, #0]
 8015bca:	b11b      	cbz	r3, 8015bd4 <rcl_clock_get_now+0x10>
 8015bcc:	68c3      	ldr	r3, [r0, #12]
 8015bce:	b10b      	cbz	r3, 8015bd4 <rcl_clock_get_now+0x10>
 8015bd0:	6900      	ldr	r0, [r0, #16]
 8015bd2:	4718      	bx	r3
 8015bd4:	2001      	movs	r0, #1
 8015bd6:	4770      	bx	lr
 8015bd8:	200b      	movs	r0, #11
 8015bda:	4770      	bx	lr

08015bdc <rcl_timer_call>:
 8015bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015be0:	b08b      	sub	sp, #44	; 0x2c
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d06e      	beq.n	8015cc4 <rcl_timer_call+0xe8>
 8015be6:	6803      	ldr	r3, [r0, #0]
 8015be8:	f3bf 8f5b 	dmb	ish
 8015bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015bf0:	f3bf 8f5b 	dmb	ish
 8015bf4:	4604      	mov	r4, r0
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d159      	bne.n	8015cae <rcl_timer_call+0xd2>
 8015bfa:	6803      	ldr	r3, [r0, #0]
 8015bfc:	a908      	add	r1, sp, #32
 8015bfe:	6818      	ldr	r0, [r3, #0]
 8015c00:	f7ff ffe0 	bl	8015bc4 <rcl_clock_get_now>
 8015c04:	4605      	mov	r5, r0
 8015c06:	2800      	cmp	r0, #0
 8015c08:	d14d      	bne.n	8015ca6 <rcl_timer_call+0xca>
 8015c0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015c0e:	2a00      	cmp	r2, #0
 8015c10:	f173 0100 	sbcs.w	r1, r3, #0
 8015c14:	db51      	blt.n	8015cba <rcl_timer_call+0xde>
 8015c16:	6820      	ldr	r0, [r4, #0]
 8015c18:	2605      	movs	r6, #5
 8015c1a:	9600      	str	r6, [sp, #0]
 8015c1c:	3020      	adds	r0, #32
 8015c1e:	f001 f893 	bl	8016d48 <__atomic_exchange_8>
 8015c22:	6822      	ldr	r2, [r4, #0]
 8015c24:	f3bf 8f5b 	dmb	ish
 8015c28:	4682      	mov	sl, r0
 8015c2a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8015c2e:	f3bf 8f5b 	dmb	ish
 8015c32:	6820      	ldr	r0, [r4, #0]
 8015c34:	460b      	mov	r3, r1
 8015c36:	3028      	adds	r0, #40	; 0x28
 8015c38:	4631      	mov	r1, r6
 8015c3a:	9305      	str	r3, [sp, #20]
 8015c3c:	f001 f81c 	bl	8016c78 <__atomic_load_8>
 8015c40:	4603      	mov	r3, r0
 8015c42:	6820      	ldr	r0, [r4, #0]
 8015c44:	460a      	mov	r2, r1
 8015c46:	3018      	adds	r0, #24
 8015c48:	4631      	mov	r1, r6
 8015c4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8015c4e:	f001 f813 	bl	8016c78 <__atomic_load_8>
 8015c52:	9b04      	ldr	r3, [sp, #16]
 8015c54:	9a03      	ldr	r2, [sp, #12]
 8015c56:	4606      	mov	r6, r0
 8015c58:	460f      	mov	r7, r1
 8015c5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015c5e:	eb13 0806 	adds.w	r8, r3, r6
 8015c62:	eb42 0907 	adc.w	r9, r2, r7
 8015c66:	4580      	cmp	r8, r0
 8015c68:	eb79 0301 	sbcs.w	r3, r9, r1
 8015c6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c70:	460a      	mov	r2, r1
 8015c72:	da04      	bge.n	8015c7e <rcl_timer_call+0xa2>
 8015c74:	ea56 0307 	orrs.w	r3, r6, r7
 8015c78:	d129      	bne.n	8015cce <rcl_timer_call+0xf2>
 8015c7a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015c7e:	6820      	ldr	r0, [r4, #0]
 8015c80:	2105      	movs	r1, #5
 8015c82:	4642      	mov	r2, r8
 8015c84:	464b      	mov	r3, r9
 8015c86:	3028      	adds	r0, #40	; 0x28
 8015c88:	9100      	str	r1, [sp, #0]
 8015c8a:	f001 f829 	bl	8016ce0 <__atomic_store_8>
 8015c8e:	f1bb 0f00 	cmp.w	fp, #0
 8015c92:	d008      	beq.n	8015ca6 <rcl_timer_call+0xca>
 8015c94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015c98:	9905      	ldr	r1, [sp, #20]
 8015c9a:	ebb2 020a 	subs.w	r2, r2, sl
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	eb63 0301 	sbc.w	r3, r3, r1
 8015ca4:	47d8      	blx	fp
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	b00b      	add	sp, #44	; 0x2c
 8015caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cae:	f240 3521 	movw	r5, #801	; 0x321
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	b00b      	add	sp, #44	; 0x2c
 8015cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cba:	2501      	movs	r5, #1
 8015cbc:	4628      	mov	r0, r5
 8015cbe:	b00b      	add	sp, #44	; 0x2c
 8015cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cc4:	250b      	movs	r5, #11
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	b00b      	add	sp, #44	; 0x2c
 8015cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cce:	ebb0 0008 	subs.w	r0, r0, r8
 8015cd2:	eb62 0109 	sbc.w	r1, r2, r9
 8015cd6:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8015cda:	463b      	mov	r3, r7
 8015cdc:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8015ce0:	4632      	mov	r2, r6
 8015ce2:	f7ea ffe9 	bl	8000cb8 <__aeabi_ldivmod>
 8015ce6:	1c43      	adds	r3, r0, #1
 8015ce8:	f141 0100 	adc.w	r1, r1, #0
 8015cec:	fb00 7007 	mla	r0, r0, r7, r7
 8015cf0:	fb06 0001 	mla	r0, r6, r1, r0
 8015cf4:	fba3 6706 	umull	r6, r7, r3, r6
 8015cf8:	4407      	add	r7, r0
 8015cfa:	eb18 0806 	adds.w	r8, r8, r6
 8015cfe:	eb49 0907 	adc.w	r9, r9, r7
 8015d02:	e7bc      	b.n	8015c7e <rcl_timer_call+0xa2>

08015d04 <rcl_timer_is_ready>:
 8015d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d08:	b082      	sub	sp, #8
 8015d0a:	b310      	cbz	r0, 8015d52 <rcl_timer_is_ready+0x4e>
 8015d0c:	4688      	mov	r8, r1
 8015d0e:	b301      	cbz	r1, 8015d52 <rcl_timer_is_ready+0x4e>
 8015d10:	6803      	ldr	r3, [r0, #0]
 8015d12:	4604      	mov	r4, r0
 8015d14:	4669      	mov	r1, sp
 8015d16:	6818      	ldr	r0, [r3, #0]
 8015d18:	f7ff ff54 	bl	8015bc4 <rcl_clock_get_now>
 8015d1c:	4605      	mov	r5, r0
 8015d1e:	b118      	cbz	r0, 8015d28 <rcl_timer_is_ready+0x24>
 8015d20:	4628      	mov	r0, r5
 8015d22:	b002      	add	sp, #8
 8015d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d28:	6820      	ldr	r0, [r4, #0]
 8015d2a:	2105      	movs	r1, #5
 8015d2c:	3028      	adds	r0, #40	; 0x28
 8015d2e:	f000 ffa3 	bl	8016c78 <__atomic_load_8>
 8015d32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015d36:	1ac6      	subs	r6, r0, r3
 8015d38:	eb61 0702 	sbc.w	r7, r1, r2
 8015d3c:	2e01      	cmp	r6, #1
 8015d3e:	f177 0300 	sbcs.w	r3, r7, #0
 8015d42:	db0b      	blt.n	8015d5c <rcl_timer_is_ready+0x58>
 8015d44:	462b      	mov	r3, r5
 8015d46:	4628      	mov	r0, r5
 8015d48:	f888 3000 	strb.w	r3, [r8]
 8015d4c:	b002      	add	sp, #8
 8015d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d52:	250b      	movs	r5, #11
 8015d54:	4628      	mov	r0, r5
 8015d56:	b002      	add	sp, #8
 8015d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d5c:	6823      	ldr	r3, [r4, #0]
 8015d5e:	f3bf 8f5b 	dmb	ish
 8015d62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015d66:	f3bf 8f5b 	dmb	ish
 8015d6a:	fab3 f383 	clz	r3, r3
 8015d6e:	095b      	lsrs	r3, r3, #5
 8015d70:	e7e9      	b.n	8015d46 <rcl_timer_is_ready+0x42>
 8015d72:	bf00      	nop

08015d74 <rcl_timer_get_time_until_next_call>:
 8015d74:	b570      	push	{r4, r5, r6, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	b1d8      	cbz	r0, 8015db2 <rcl_timer_get_time_until_next_call+0x3e>
 8015d7a:	460d      	mov	r5, r1
 8015d7c:	b1c9      	cbz	r1, 8015db2 <rcl_timer_get_time_until_next_call+0x3e>
 8015d7e:	6803      	ldr	r3, [r0, #0]
 8015d80:	4604      	mov	r4, r0
 8015d82:	4669      	mov	r1, sp
 8015d84:	6818      	ldr	r0, [r3, #0]
 8015d86:	f7ff ff1d 	bl	8015bc4 <rcl_clock_get_now>
 8015d8a:	4606      	mov	r6, r0
 8015d8c:	b110      	cbz	r0, 8015d94 <rcl_timer_get_time_until_next_call+0x20>
 8015d8e:	4630      	mov	r0, r6
 8015d90:	b002      	add	sp, #8
 8015d92:	bd70      	pop	{r4, r5, r6, pc}
 8015d94:	6820      	ldr	r0, [r4, #0]
 8015d96:	2105      	movs	r1, #5
 8015d98:	3028      	adds	r0, #40	; 0x28
 8015d9a:	f000 ff6d 	bl	8016c78 <__atomic_load_8>
 8015d9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015da2:	1ac0      	subs	r0, r0, r3
 8015da4:	eb61 0102 	sbc.w	r1, r1, r2
 8015da8:	e9c5 0100 	strd	r0, r1, [r5]
 8015dac:	4630      	mov	r0, r6
 8015dae:	b002      	add	sp, #8
 8015db0:	bd70      	pop	{r4, r5, r6, pc}
 8015db2:	260b      	movs	r6, #11
 8015db4:	4630      	mov	r0, r6
 8015db6:	b002      	add	sp, #8
 8015db8:	bd70      	pop	{r4, r5, r6, pc}
 8015dba:	bf00      	nop

08015dbc <rcl_timer_is_canceled>:
 8015dbc:	b168      	cbz	r0, 8015dda <rcl_timer_is_canceled+0x1e>
 8015dbe:	b161      	cbz	r1, 8015dda <rcl_timer_is_canceled+0x1e>
 8015dc0:	6803      	ldr	r3, [r0, #0]
 8015dc2:	f3bf 8f5b 	dmb	ish
 8015dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015dca:	f3bf 8f5b 	dmb	ish
 8015dce:	3b00      	subs	r3, #0
 8015dd0:	bf18      	it	ne
 8015dd2:	2301      	movne	r3, #1
 8015dd4:	700b      	strb	r3, [r1, #0]
 8015dd6:	2000      	movs	r0, #0
 8015dd8:	4770      	bx	lr
 8015dda:	200b      	movs	r0, #11
 8015ddc:	4770      	bx	lr
 8015dde:	bf00      	nop

08015de0 <rcl_timer_get_guard_condition>:
 8015de0:	b130      	cbz	r0, 8015df0 <rcl_timer_get_guard_condition+0x10>
 8015de2:	6800      	ldr	r0, [r0, #0]
 8015de4:	b120      	cbz	r0, 8015df0 <rcl_timer_get_guard_condition+0x10>
 8015de6:	68c3      	ldr	r3, [r0, #12]
 8015de8:	b10b      	cbz	r3, 8015dee <rcl_timer_get_guard_condition+0xe>
 8015dea:	3008      	adds	r0, #8
 8015dec:	4770      	bx	lr
 8015dee:	4618      	mov	r0, r3
 8015df0:	4770      	bx	lr
 8015df2:	bf00      	nop

08015df4 <rcl_validate_enclave_name_with_size>:
 8015df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015df6:	b0c3      	sub	sp, #268	; 0x10c
 8015df8:	b1d0      	cbz	r0, 8015e30 <rcl_validate_enclave_name_with_size+0x3c>
 8015dfa:	4615      	mov	r5, r2
 8015dfc:	b1c2      	cbz	r2, 8015e30 <rcl_validate_enclave_name_with_size+0x3c>
 8015dfe:	461f      	mov	r7, r3
 8015e00:	466a      	mov	r2, sp
 8015e02:	ab01      	add	r3, sp, #4
 8015e04:	460e      	mov	r6, r1
 8015e06:	f001 f96f 	bl	80170e8 <rmw_validate_namespace_with_size>
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	b9e0      	cbnz	r0, 8015e48 <rcl_validate_enclave_name_with_size+0x54>
 8015e0e:	9b00      	ldr	r3, [sp, #0]
 8015e10:	b923      	cbnz	r3, 8015e1c <rcl_validate_enclave_name_with_size+0x28>
 8015e12:	2300      	movs	r3, #0
 8015e14:	602b      	str	r3, [r5, #0]
 8015e16:	4620      	mov	r0, r4
 8015e18:	b043      	add	sp, #268	; 0x10c
 8015e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e1c:	2b07      	cmp	r3, #7
 8015e1e:	d00b      	beq.n	8015e38 <rcl_validate_enclave_name_with_size+0x44>
 8015e20:	1e5a      	subs	r2, r3, #1
 8015e22:	2a05      	cmp	r2, #5
 8015e24:	d82e      	bhi.n	8015e84 <rcl_validate_enclave_name_with_size+0x90>
 8015e26:	e8df f002 	tbb	[pc, r2]
 8015e2a:	211e      	.short	0x211e
 8015e2c:	152a2724 	.word	0x152a2724
 8015e30:	240b      	movs	r4, #11
 8015e32:	4620      	mov	r0, r4
 8015e34:	b043      	add	sp, #268	; 0x10c
 8015e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e38:	2eff      	cmp	r6, #255	; 0xff
 8015e3a:	d9ea      	bls.n	8015e12 <rcl_validate_enclave_name_with_size+0x1e>
 8015e3c:	602b      	str	r3, [r5, #0]
 8015e3e:	2f00      	cmp	r7, #0
 8015e40:	d0e9      	beq.n	8015e16 <rcl_validate_enclave_name_with_size+0x22>
 8015e42:	23fe      	movs	r3, #254	; 0xfe
 8015e44:	603b      	str	r3, [r7, #0]
 8015e46:	e7e6      	b.n	8015e16 <rcl_validate_enclave_name_with_size+0x22>
 8015e48:	f7fe fea0 	bl	8014b8c <rcl_convert_rmw_ret_to_rcl_ret>
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	4620      	mov	r0, r4
 8015e50:	b043      	add	sp, #268	; 0x10c
 8015e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e54:	2306      	movs	r3, #6
 8015e56:	602b      	str	r3, [r5, #0]
 8015e58:	2f00      	cmp	r7, #0
 8015e5a:	d0dc      	beq.n	8015e16 <rcl_validate_enclave_name_with_size+0x22>
 8015e5c:	9b01      	ldr	r3, [sp, #4]
 8015e5e:	603b      	str	r3, [r7, #0]
 8015e60:	4620      	mov	r0, r4
 8015e62:	b043      	add	sp, #268	; 0x10c
 8015e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e66:	2301      	movs	r3, #1
 8015e68:	602b      	str	r3, [r5, #0]
 8015e6a:	e7f5      	b.n	8015e58 <rcl_validate_enclave_name_with_size+0x64>
 8015e6c:	2302      	movs	r3, #2
 8015e6e:	602b      	str	r3, [r5, #0]
 8015e70:	e7f2      	b.n	8015e58 <rcl_validate_enclave_name_with_size+0x64>
 8015e72:	2303      	movs	r3, #3
 8015e74:	602b      	str	r3, [r5, #0]
 8015e76:	e7ef      	b.n	8015e58 <rcl_validate_enclave_name_with_size+0x64>
 8015e78:	2304      	movs	r3, #4
 8015e7a:	602b      	str	r3, [r5, #0]
 8015e7c:	e7ec      	b.n	8015e58 <rcl_validate_enclave_name_with_size+0x64>
 8015e7e:	2305      	movs	r3, #5
 8015e80:	602b      	str	r3, [r5, #0]
 8015e82:	e7e9      	b.n	8015e58 <rcl_validate_enclave_name_with_size+0x64>
 8015e84:	4a03      	ldr	r2, [pc, #12]	; (8015e94 <rcl_validate_enclave_name_with_size+0xa0>)
 8015e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015e8a:	a802      	add	r0, sp, #8
 8015e8c:	f001 f8a4 	bl	8016fd8 <rcutils_snprintf>
 8015e90:	2401      	movs	r4, #1
 8015e92:	e7c0      	b.n	8015e16 <rcl_validate_enclave_name_with_size+0x22>
 8015e94:	0801f188 	.word	0x0801f188

08015e98 <rcl_validate_enclave_name>:
 8015e98:	b168      	cbz	r0, 8015eb6 <rcl_validate_enclave_name+0x1e>
 8015e9a:	b570      	push	{r4, r5, r6, lr}
 8015e9c:	460d      	mov	r5, r1
 8015e9e:	4616      	mov	r6, r2
 8015ea0:	4604      	mov	r4, r0
 8015ea2:	f7ea f9a7 	bl	80001f4 <strlen>
 8015ea6:	4633      	mov	r3, r6
 8015ea8:	4601      	mov	r1, r0
 8015eaa:	462a      	mov	r2, r5
 8015eac:	4620      	mov	r0, r4
 8015eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015eb2:	f7ff bf9f 	b.w	8015df4 <rcl_validate_enclave_name_with_size>
 8015eb6:	200b      	movs	r0, #11
 8015eb8:	4770      	bx	lr
 8015eba:	bf00      	nop

08015ebc <rcl_validate_topic_name>:
 8015ebc:	2800      	cmp	r0, #0
 8015ebe:	f000 808b 	beq.w	8015fd8 <rcl_validate_topic_name+0x11c>
 8015ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ec6:	460e      	mov	r6, r1
 8015ec8:	2900      	cmp	r1, #0
 8015eca:	f000 808c 	beq.w	8015fe6 <rcl_validate_topic_name+0x12a>
 8015ece:	4617      	mov	r7, r2
 8015ed0:	4605      	mov	r5, r0
 8015ed2:	f7ea f98f 	bl	80001f4 <strlen>
 8015ed6:	b1b0      	cbz	r0, 8015f06 <rcl_validate_topic_name+0x4a>
 8015ed8:	f895 9000 	ldrb.w	r9, [r5]
 8015edc:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 801608c <rcl_validate_topic_name+0x1d0>
 8015ee0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015ee4:	f013 0304 	ands.w	r3, r3, #4
 8015ee8:	d178      	bne.n	8015fdc <rcl_validate_topic_name+0x120>
 8015eea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8015eee:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015ef2:	2a2f      	cmp	r2, #47	; 0x2f
 8015ef4:	d10e      	bne.n	8015f14 <rcl_validate_topic_name+0x58>
 8015ef6:	2202      	movs	r2, #2
 8015ef8:	6032      	str	r2, [r6, #0]
 8015efa:	b36f      	cbz	r7, 8015f58 <rcl_validate_topic_name+0x9c>
 8015efc:	f8c7 8000 	str.w	r8, [r7]
 8015f00:	4618      	mov	r0, r3
 8015f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f06:	2301      	movs	r3, #1
 8015f08:	6033      	str	r3, [r6, #0]
 8015f0a:	b32f      	cbz	r7, 8015f58 <rcl_validate_topic_name+0x9c>
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	6038      	str	r0, [r7, #0]
 8015f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f14:	461c      	mov	r4, r3
 8015f16:	4619      	mov	r1, r3
 8015f18:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8015f1c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015f20:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015f24:	f1be 0f09 	cmp.w	lr, #9
 8015f28:	d946      	bls.n	8015fb8 <rcl_validate_topic_name+0xfc>
 8015f2a:	f022 0e20 	bic.w	lr, r2, #32
 8015f2e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015f32:	f1be 0f19 	cmp.w	lr, #25
 8015f36:	d93f      	bls.n	8015fb8 <rcl_validate_topic_name+0xfc>
 8015f38:	2a5f      	cmp	r2, #95	; 0x5f
 8015f3a:	d014      	beq.n	8015f66 <rcl_validate_topic_name+0xaa>
 8015f3c:	2a2f      	cmp	r2, #47	; 0x2f
 8015f3e:	d05b      	beq.n	8015ff8 <rcl_validate_topic_name+0x13c>
 8015f40:	2a7e      	cmp	r2, #126	; 0x7e
 8015f42:	d052      	beq.n	8015fea <rcl_validate_topic_name+0x12e>
 8015f44:	2a7b      	cmp	r2, #123	; 0x7b
 8015f46:	d00a      	beq.n	8015f5e <rcl_validate_topic_name+0xa2>
 8015f48:	2a7d      	cmp	r2, #125	; 0x7d
 8015f4a:	d16f      	bne.n	801602c <rcl_validate_topic_name+0x170>
 8015f4c:	2c00      	cmp	r4, #0
 8015f4e:	d15e      	bne.n	801600e <rcl_validate_topic_name+0x152>
 8015f50:	2305      	movs	r3, #5
 8015f52:	6033      	str	r3, [r6, #0]
 8015f54:	b107      	cbz	r7, 8015f58 <rcl_validate_topic_name+0x9c>
 8015f56:	6039      	str	r1, [r7, #0]
 8015f58:	2000      	movs	r0, #0
 8015f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f5e:	2c00      	cmp	r4, #0
 8015f60:	d14c      	bne.n	8015ffc <rcl_validate_topic_name+0x140>
 8015f62:	460b      	mov	r3, r1
 8015f64:	2401      	movs	r4, #1
 8015f66:	3101      	adds	r1, #1
 8015f68:	4288      	cmp	r0, r1
 8015f6a:	d1d7      	bne.n	8015f1c <rcl_validate_topic_name+0x60>
 8015f6c:	2c00      	cmp	r4, #0
 8015f6e:	d156      	bne.n	801601e <rcl_validate_topic_name+0x162>
 8015f70:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015f74:	4620      	mov	r0, r4
 8015f76:	d061      	beq.n	801603c <rcl_validate_topic_name+0x180>
 8015f78:	f108 0e01 	add.w	lr, r8, #1
 8015f7c:	e007      	b.n	8015f8e <rcl_validate_topic_name+0xd2>
 8015f7e:	2801      	cmp	r0, #1
 8015f80:	d047      	beq.n	8016012 <rcl_validate_topic_name+0x156>
 8015f82:	461a      	mov	r2, r3
 8015f84:	4291      	cmp	r1, r2
 8015f86:	4618      	mov	r0, r3
 8015f88:	f105 0501 	add.w	r5, r5, #1
 8015f8c:	d944      	bls.n	8016018 <rcl_validate_topic_name+0x15c>
 8015f8e:	4580      	cmp	r8, r0
 8015f90:	f100 0301 	add.w	r3, r0, #1
 8015f94:	d037      	beq.n	8016006 <rcl_validate_topic_name+0x14a>
 8015f96:	782a      	ldrb	r2, [r5, #0]
 8015f98:	2a2f      	cmp	r2, #47	; 0x2f
 8015f9a:	d1f0      	bne.n	8015f7e <rcl_validate_topic_name+0xc2>
 8015f9c:	786b      	ldrb	r3, [r5, #1]
 8015f9e:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015fa2:	1c43      	adds	r3, r0, #1
 8015fa4:	0760      	lsls	r0, r4, #29
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	d5ec      	bpl.n	8015f84 <rcl_validate_topic_name+0xc8>
 8015faa:	2304      	movs	r3, #4
 8015fac:	6033      	str	r3, [r6, #0]
 8015fae:	2f00      	cmp	r7, #0
 8015fb0:	d0d2      	beq.n	8015f58 <rcl_validate_topic_name+0x9c>
 8015fb2:	603a      	str	r2, [r7, #0]
 8015fb4:	2000      	movs	r0, #0
 8015fb6:	e7ab      	b.n	8015f10 <rcl_validate_topic_name+0x54>
 8015fb8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015fbc:	0752      	lsls	r2, r2, #29
 8015fbe:	d5d2      	bpl.n	8015f66 <rcl_validate_topic_name+0xaa>
 8015fc0:	2c00      	cmp	r4, #0
 8015fc2:	d0d0      	beq.n	8015f66 <rcl_validate_topic_name+0xaa>
 8015fc4:	2900      	cmp	r1, #0
 8015fc6:	d0ce      	beq.n	8015f66 <rcl_validate_topic_name+0xaa>
 8015fc8:	1e4a      	subs	r2, r1, #1
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d1cb      	bne.n	8015f66 <rcl_validate_topic_name+0xaa>
 8015fce:	2309      	movs	r3, #9
 8015fd0:	6033      	str	r3, [r6, #0]
 8015fd2:	2f00      	cmp	r7, #0
 8015fd4:	d1bf      	bne.n	8015f56 <rcl_validate_topic_name+0x9a>
 8015fd6:	e7bf      	b.n	8015f58 <rcl_validate_topic_name+0x9c>
 8015fd8:	200b      	movs	r0, #11
 8015fda:	4770      	bx	lr
 8015fdc:	2304      	movs	r3, #4
 8015fde:	6033      	str	r3, [r6, #0]
 8015fe0:	2f00      	cmp	r7, #0
 8015fe2:	d193      	bne.n	8015f0c <rcl_validate_topic_name+0x50>
 8015fe4:	e7b8      	b.n	8015f58 <rcl_validate_topic_name+0x9c>
 8015fe6:	200b      	movs	r0, #11
 8015fe8:	e792      	b.n	8015f10 <rcl_validate_topic_name+0x54>
 8015fea:	2900      	cmp	r1, #0
 8015fec:	d0bb      	beq.n	8015f66 <rcl_validate_topic_name+0xaa>
 8015fee:	2306      	movs	r3, #6
 8015ff0:	6033      	str	r3, [r6, #0]
 8015ff2:	2f00      	cmp	r7, #0
 8015ff4:	d1af      	bne.n	8015f56 <rcl_validate_topic_name+0x9a>
 8015ff6:	e7af      	b.n	8015f58 <rcl_validate_topic_name+0x9c>
 8015ff8:	2c00      	cmp	r4, #0
 8015ffa:	d0b4      	beq.n	8015f66 <rcl_validate_topic_name+0xaa>
 8015ffc:	2308      	movs	r3, #8
 8015ffe:	6033      	str	r3, [r6, #0]
 8016000:	2f00      	cmp	r7, #0
 8016002:	d1a8      	bne.n	8015f56 <rcl_validate_topic_name+0x9a>
 8016004:	e7a8      	b.n	8015f58 <rcl_validate_topic_name+0x9c>
 8016006:	4672      	mov	r2, lr
 8016008:	f108 0301 	add.w	r3, r8, #1
 801600c:	e7ba      	b.n	8015f84 <rcl_validate_topic_name+0xc8>
 801600e:	2400      	movs	r4, #0
 8016010:	e7a9      	b.n	8015f66 <rcl_validate_topic_name+0xaa>
 8016012:	2202      	movs	r2, #2
 8016014:	4613      	mov	r3, r2
 8016016:	e7b5      	b.n	8015f84 <rcl_validate_topic_name+0xc8>
 8016018:	2000      	movs	r0, #0
 801601a:	6030      	str	r0, [r6, #0]
 801601c:	e778      	b.n	8015f10 <rcl_validate_topic_name+0x54>
 801601e:	2205      	movs	r2, #5
 8016020:	6032      	str	r2, [r6, #0]
 8016022:	2f00      	cmp	r7, #0
 8016024:	d098      	beq.n	8015f58 <rcl_validate_topic_name+0x9c>
 8016026:	603b      	str	r3, [r7, #0]
 8016028:	2000      	movs	r0, #0
 801602a:	e771      	b.n	8015f10 <rcl_validate_topic_name+0x54>
 801602c:	2c00      	cmp	r4, #0
 801602e:	bf14      	ite	ne
 8016030:	2308      	movne	r3, #8
 8016032:	2303      	moveq	r3, #3
 8016034:	6033      	str	r3, [r6, #0]
 8016036:	2f00      	cmp	r7, #0
 8016038:	d18d      	bne.n	8015f56 <rcl_validate_topic_name+0x9a>
 801603a:	e78d      	b.n	8015f58 <rcl_validate_topic_name+0x9c>
 801603c:	f108 0401 	add.w	r4, r8, #1
 8016040:	e007      	b.n	8016052 <rcl_validate_topic_name+0x196>
 8016042:	2801      	cmp	r0, #1
 8016044:	d019      	beq.n	801607a <rcl_validate_topic_name+0x1be>
 8016046:	461a      	mov	r2, r3
 8016048:	4291      	cmp	r1, r2
 801604a:	4618      	mov	r0, r3
 801604c:	f105 0501 	add.w	r5, r5, #1
 8016050:	d9e2      	bls.n	8016018 <rcl_validate_topic_name+0x15c>
 8016052:	4580      	cmp	r8, r0
 8016054:	f100 0301 	add.w	r3, r0, #1
 8016058:	d00b      	beq.n	8016072 <rcl_validate_topic_name+0x1b6>
 801605a:	782a      	ldrb	r2, [r5, #0]
 801605c:	2a2f      	cmp	r2, #47	; 0x2f
 801605e:	d1f0      	bne.n	8016042 <rcl_validate_topic_name+0x186>
 8016060:	786b      	ldrb	r3, [r5, #1]
 8016062:	f81c e003 	ldrb.w	lr, [ip, r3]
 8016066:	1c43      	adds	r3, r0, #1
 8016068:	f01e 0f04 	tst.w	lr, #4
 801606c:	461a      	mov	r2, r3
 801606e:	d0eb      	beq.n	8016048 <rcl_validate_topic_name+0x18c>
 8016070:	e79b      	b.n	8015faa <rcl_validate_topic_name+0xee>
 8016072:	4622      	mov	r2, r4
 8016074:	f108 0301 	add.w	r3, r8, #1
 8016078:	e7e6      	b.n	8016048 <rcl_validate_topic_name+0x18c>
 801607a:	2307      	movs	r3, #7
 801607c:	6033      	str	r3, [r6, #0]
 801607e:	2f00      	cmp	r7, #0
 8016080:	f43f af6a 	beq.w	8015f58 <rcl_validate_topic_name+0x9c>
 8016084:	6038      	str	r0, [r7, #0]
 8016086:	2000      	movs	r0, #0
 8016088:	e742      	b.n	8015f10 <rcl_validate_topic_name+0x54>
 801608a:	bf00      	nop
 801608c:	0801f5a1 	.word	0x0801f5a1

08016090 <rcl_get_zero_initialized_wait_set>:
 8016090:	b470      	push	{r4, r5, r6}
 8016092:	4d07      	ldr	r5, [pc, #28]	; (80160b0 <rcl_get_zero_initialized_wait_set+0x20>)
 8016094:	4606      	mov	r6, r0
 8016096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016098:	4634      	mov	r4, r6
 801609a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801609c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801609e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80160a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80160a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80160a4:	682b      	ldr	r3, [r5, #0]
 80160a6:	6023      	str	r3, [r4, #0]
 80160a8:	4630      	mov	r0, r6
 80160aa:	bc70      	pop	{r4, r5, r6}
 80160ac:	4770      	bx	lr
 80160ae:	bf00      	nop
 80160b0:	0801f1e8 	.word	0x0801f1e8

080160b4 <rcl_wait_set_is_valid>:
 80160b4:	b118      	cbz	r0, 80160be <rcl_wait_set_is_valid+0xa>
 80160b6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80160b8:	3800      	subs	r0, #0
 80160ba:	bf18      	it	ne
 80160bc:	2001      	movne	r0, #1
 80160be:	4770      	bx	lr

080160c0 <rcl_wait_set_fini>:
 80160c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160c4:	b082      	sub	sp, #8
 80160c6:	2800      	cmp	r0, #0
 80160c8:	f000 8095 	beq.w	80161f6 <rcl_wait_set_fini+0x136>
 80160cc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80160ce:	4604      	mov	r4, r0
 80160d0:	2e00      	cmp	r6, #0
 80160d2:	f000 808c 	beq.w	80161ee <rcl_wait_set_fini+0x12e>
 80160d6:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80160d8:	f001 fd8c 	bl	8017bf4 <rmw_destroy_wait_set>
 80160dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80160de:	1e06      	subs	r6, r0, #0
 80160e0:	bf18      	it	ne
 80160e2:	f44f 7661 	movne.w	r6, #900	; 0x384
 80160e6:	2d00      	cmp	r5, #0
 80160e8:	f000 8081 	beq.w	80161ee <rcl_wait_set_fini+0x12e>
 80160ec:	6820      	ldr	r0, [r4, #0]
 80160ee:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80160f2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80160f4:	2700      	movs	r7, #0
 80160f6:	6067      	str	r7, [r4, #4]
 80160f8:	602f      	str	r7, [r5, #0]
 80160fa:	b120      	cbz	r0, 8016106 <rcl_wait_set_fini+0x46>
 80160fc:	9101      	str	r1, [sp, #4]
 80160fe:	47c0      	blx	r8
 8016100:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016102:	9901      	ldr	r1, [sp, #4]
 8016104:	6027      	str	r7, [r4, #0]
 8016106:	68a8      	ldr	r0, [r5, #8]
 8016108:	b120      	cbz	r0, 8016114 <rcl_wait_set_fini+0x54>
 801610a:	47c0      	blx	r8
 801610c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801610e:	2300      	movs	r3, #0
 8016110:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016114:	68a0      	ldr	r0, [r4, #8]
 8016116:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016118:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801611a:	f04f 0800 	mov.w	r8, #0
 801611e:	f8c4 800c 	str.w	r8, [r4, #12]
 8016122:	f8c5 800c 	str.w	r8, [r5, #12]
 8016126:	b128      	cbz	r0, 8016134 <rcl_wait_set_fini+0x74>
 8016128:	47b8      	blx	r7
 801612a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801612c:	f8c4 8008 	str.w	r8, [r4, #8]
 8016130:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016132:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016134:	6968      	ldr	r0, [r5, #20]
 8016136:	f04f 0800 	mov.w	r8, #0
 801613a:	f8c5 8010 	str.w	r8, [r5, #16]
 801613e:	b128      	cbz	r0, 801614c <rcl_wait_set_fini+0x8c>
 8016140:	47b8      	blx	r7
 8016142:	f8c5 8014 	str.w	r8, [r5, #20]
 8016146:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016148:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801614a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801614c:	6920      	ldr	r0, [r4, #16]
 801614e:	f04f 0800 	mov.w	r8, #0
 8016152:	f8c4 8014 	str.w	r8, [r4, #20]
 8016156:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801615a:	b128      	cbz	r0, 8016168 <rcl_wait_set_fini+0xa8>
 801615c:	47b8      	blx	r7
 801615e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016160:	f8c4 8010 	str.w	r8, [r4, #16]
 8016164:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016166:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016168:	69a0      	ldr	r0, [r4, #24]
 801616a:	f04f 0800 	mov.w	r8, #0
 801616e:	f8c4 801c 	str.w	r8, [r4, #28]
 8016172:	f8c5 8018 	str.w	r8, [r5, #24]
 8016176:	b128      	cbz	r0, 8016184 <rcl_wait_set_fini+0xc4>
 8016178:	9101      	str	r1, [sp, #4]
 801617a:	47b8      	blx	r7
 801617c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801617e:	9901      	ldr	r1, [sp, #4]
 8016180:	f8c4 8018 	str.w	r8, [r4, #24]
 8016184:	6a28      	ldr	r0, [r5, #32]
 8016186:	b120      	cbz	r0, 8016192 <rcl_wait_set_fini+0xd2>
 8016188:	47b8      	blx	r7
 801618a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801618c:	2300      	movs	r3, #0
 801618e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016192:	6a20      	ldr	r0, [r4, #32]
 8016194:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016198:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801619a:	2700      	movs	r7, #0
 801619c:	6267      	str	r7, [r4, #36]	; 0x24
 801619e:	626f      	str	r7, [r5, #36]	; 0x24
 80161a0:	b120      	cbz	r0, 80161ac <rcl_wait_set_fini+0xec>
 80161a2:	9101      	str	r1, [sp, #4]
 80161a4:	47c0      	blx	r8
 80161a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161a8:	9901      	ldr	r1, [sp, #4]
 80161aa:	6227      	str	r7, [r4, #32]
 80161ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80161ae:	b120      	cbz	r0, 80161ba <rcl_wait_set_fini+0xfa>
 80161b0:	47c0      	blx	r8
 80161b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161b4:	2300      	movs	r3, #0
 80161b6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80161ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80161bc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80161c0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161c2:	2700      	movs	r7, #0
 80161c4:	62e7      	str	r7, [r4, #44]	; 0x2c
 80161c6:	632f      	str	r7, [r5, #48]	; 0x30
 80161c8:	b120      	cbz	r0, 80161d4 <rcl_wait_set_fini+0x114>
 80161ca:	9101      	str	r1, [sp, #4]
 80161cc:	47c0      	blx	r8
 80161ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161d0:	9901      	ldr	r1, [sp, #4]
 80161d2:	62a7      	str	r7, [r4, #40]	; 0x28
 80161d4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80161d6:	b120      	cbz	r0, 80161e2 <rcl_wait_set_fini+0x122>
 80161d8:	47c0      	blx	r8
 80161da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161dc:	2300      	movs	r3, #0
 80161de:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80161e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80161e4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161e6:	4628      	mov	r0, r5
 80161e8:	4798      	blx	r3
 80161ea:	2300      	movs	r3, #0
 80161ec:	6323      	str	r3, [r4, #48]	; 0x30
 80161ee:	4630      	mov	r0, r6
 80161f0:	b002      	add	sp, #8
 80161f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f6:	260b      	movs	r6, #11
 80161f8:	4630      	mov	r0, r6
 80161fa:	b002      	add	sp, #8
 80161fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016200 <rcl_wait_set_add_subscription>:
 8016200:	b320      	cbz	r0, 801624c <rcl_wait_set_add_subscription+0x4c>
 8016202:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016204:	b570      	push	{r4, r5, r6, lr}
 8016206:	4604      	mov	r4, r0
 8016208:	b1d3      	cbz	r3, 8016240 <rcl_wait_set_add_subscription+0x40>
 801620a:	b319      	cbz	r1, 8016254 <rcl_wait_set_add_subscription+0x54>
 801620c:	681d      	ldr	r5, [r3, #0]
 801620e:	6860      	ldr	r0, [r4, #4]
 8016210:	4285      	cmp	r5, r0
 8016212:	d218      	bcs.n	8016246 <rcl_wait_set_add_subscription+0x46>
 8016214:	6820      	ldr	r0, [r4, #0]
 8016216:	1c6e      	adds	r6, r5, #1
 8016218:	601e      	str	r6, [r3, #0]
 801621a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801621e:	b102      	cbz	r2, 8016222 <rcl_wait_set_add_subscription+0x22>
 8016220:	6015      	str	r5, [r2, #0]
 8016222:	4608      	mov	r0, r1
 8016224:	f7ff fc30 	bl	8015a88 <rcl_subscription_get_rmw_handle>
 8016228:	b190      	cbz	r0, 8016250 <rcl_wait_set_add_subscription+0x50>
 801622a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801622c:	6842      	ldr	r2, [r0, #4]
 801622e:	689b      	ldr	r3, [r3, #8]
 8016230:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016234:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016236:	6853      	ldr	r3, [r2, #4]
 8016238:	3301      	adds	r3, #1
 801623a:	6053      	str	r3, [r2, #4]
 801623c:	2000      	movs	r0, #0
 801623e:	bd70      	pop	{r4, r5, r6, pc}
 8016240:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016244:	bd70      	pop	{r4, r5, r6, pc}
 8016246:	f240 3086 	movw	r0, #902	; 0x386
 801624a:	bd70      	pop	{r4, r5, r6, pc}
 801624c:	200b      	movs	r0, #11
 801624e:	4770      	bx	lr
 8016250:	2001      	movs	r0, #1
 8016252:	bd70      	pop	{r4, r5, r6, pc}
 8016254:	200b      	movs	r0, #11
 8016256:	bd70      	pop	{r4, r5, r6, pc}

08016258 <rcl_wait_set_clear>:
 8016258:	2800      	cmp	r0, #0
 801625a:	d073      	beq.n	8016344 <rcl_wait_set_clear+0xec>
 801625c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801625e:	b510      	push	{r4, lr}
 8016260:	4604      	mov	r4, r0
 8016262:	2b00      	cmp	r3, #0
 8016264:	d070      	beq.n	8016348 <rcl_wait_set_clear+0xf0>
 8016266:	6800      	ldr	r0, [r0, #0]
 8016268:	b138      	cbz	r0, 801627a <rcl_wait_set_clear+0x22>
 801626a:	6862      	ldr	r2, [r4, #4]
 801626c:	2100      	movs	r1, #0
 801626e:	0092      	lsls	r2, r2, #2
 8016270:	f003 fda8 	bl	8019dc4 <memset>
 8016274:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016276:	2200      	movs	r2, #0
 8016278:	601a      	str	r2, [r3, #0]
 801627a:	68a0      	ldr	r0, [r4, #8]
 801627c:	b138      	cbz	r0, 801628e <rcl_wait_set_clear+0x36>
 801627e:	68e2      	ldr	r2, [r4, #12]
 8016280:	2100      	movs	r1, #0
 8016282:	0092      	lsls	r2, r2, #2
 8016284:	f003 fd9e 	bl	8019dc4 <memset>
 8016288:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801628a:	2200      	movs	r2, #0
 801628c:	60da      	str	r2, [r3, #12]
 801628e:	69a0      	ldr	r0, [r4, #24]
 8016290:	b138      	cbz	r0, 80162a2 <rcl_wait_set_clear+0x4a>
 8016292:	69e2      	ldr	r2, [r4, #28]
 8016294:	2100      	movs	r1, #0
 8016296:	0092      	lsls	r2, r2, #2
 8016298:	f003 fd94 	bl	8019dc4 <memset>
 801629c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801629e:	2200      	movs	r2, #0
 80162a0:	619a      	str	r2, [r3, #24]
 80162a2:	6a20      	ldr	r0, [r4, #32]
 80162a4:	b138      	cbz	r0, 80162b6 <rcl_wait_set_clear+0x5e>
 80162a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80162a8:	2100      	movs	r1, #0
 80162aa:	0092      	lsls	r2, r2, #2
 80162ac:	f003 fd8a 	bl	8019dc4 <memset>
 80162b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162b2:	2200      	movs	r2, #0
 80162b4:	625a      	str	r2, [r3, #36]	; 0x24
 80162b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80162b8:	b138      	cbz	r0, 80162ca <rcl_wait_set_clear+0x72>
 80162ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80162bc:	2100      	movs	r1, #0
 80162be:	0092      	lsls	r2, r2, #2
 80162c0:	f003 fd80 	bl	8019dc4 <memset>
 80162c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162c6:	2200      	movs	r2, #0
 80162c8:	631a      	str	r2, [r3, #48]	; 0x30
 80162ca:	6920      	ldr	r0, [r4, #16]
 80162cc:	b138      	cbz	r0, 80162de <rcl_wait_set_clear+0x86>
 80162ce:	6962      	ldr	r2, [r4, #20]
 80162d0:	2100      	movs	r1, #0
 80162d2:	0092      	lsls	r2, r2, #2
 80162d4:	f003 fd76 	bl	8019dc4 <memset>
 80162d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162da:	2200      	movs	r2, #0
 80162dc:	641a      	str	r2, [r3, #64]	; 0x40
 80162de:	6898      	ldr	r0, [r3, #8]
 80162e0:	b138      	cbz	r0, 80162f2 <rcl_wait_set_clear+0x9a>
 80162e2:	685a      	ldr	r2, [r3, #4]
 80162e4:	2100      	movs	r1, #0
 80162e6:	0092      	lsls	r2, r2, #2
 80162e8:	f003 fd6c 	bl	8019dc4 <memset>
 80162ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162ee:	2200      	movs	r2, #0
 80162f0:	605a      	str	r2, [r3, #4]
 80162f2:	6958      	ldr	r0, [r3, #20]
 80162f4:	b138      	cbz	r0, 8016306 <rcl_wait_set_clear+0xae>
 80162f6:	691a      	ldr	r2, [r3, #16]
 80162f8:	2100      	movs	r1, #0
 80162fa:	0092      	lsls	r2, r2, #2
 80162fc:	f003 fd62 	bl	8019dc4 <memset>
 8016300:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016302:	2200      	movs	r2, #0
 8016304:	611a      	str	r2, [r3, #16]
 8016306:	6a18      	ldr	r0, [r3, #32]
 8016308:	b138      	cbz	r0, 801631a <rcl_wait_set_clear+0xc2>
 801630a:	69da      	ldr	r2, [r3, #28]
 801630c:	2100      	movs	r1, #0
 801630e:	0092      	lsls	r2, r2, #2
 8016310:	f003 fd58 	bl	8019dc4 <memset>
 8016314:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016316:	2200      	movs	r2, #0
 8016318:	61da      	str	r2, [r3, #28]
 801631a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801631c:	b138      	cbz	r0, 801632e <rcl_wait_set_clear+0xd6>
 801631e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016320:	2100      	movs	r1, #0
 8016322:	0092      	lsls	r2, r2, #2
 8016324:	f003 fd4e 	bl	8019dc4 <memset>
 8016328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801632a:	2200      	movs	r2, #0
 801632c:	629a      	str	r2, [r3, #40]	; 0x28
 801632e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016330:	b138      	cbz	r0, 8016342 <rcl_wait_set_clear+0xea>
 8016332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016334:	2100      	movs	r1, #0
 8016336:	0092      	lsls	r2, r2, #2
 8016338:	f003 fd44 	bl	8019dc4 <memset>
 801633c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801633e:	2000      	movs	r0, #0
 8016340:	6358      	str	r0, [r3, #52]	; 0x34
 8016342:	bd10      	pop	{r4, pc}
 8016344:	200b      	movs	r0, #11
 8016346:	4770      	bx	lr
 8016348:	f44f 7061 	mov.w	r0, #900	; 0x384
 801634c:	bd10      	pop	{r4, pc}
 801634e:	bf00      	nop

08016350 <rcl_wait_set_resize>:
 8016350:	2800      	cmp	r0, #0
 8016352:	f000 81a6 	beq.w	80166a2 <rcl_wait_set_resize+0x352>
 8016356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635a:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 801635e:	b083      	sub	sp, #12
 8016360:	4604      	mov	r4, r0
 8016362:	f1ba 0f00 	cmp.w	sl, #0
 8016366:	f000 819e 	beq.w	80166a6 <rcl_wait_set_resize+0x356>
 801636a:	461e      	mov	r6, r3
 801636c:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8016370:	f04f 0800 	mov.w	r8, #0
 8016374:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	f8c0 8004 	str.w	r8, [r0, #4]
 801637e:	460f      	mov	r7, r1
 8016380:	4615      	mov	r5, r2
 8016382:	f8ca 8000 	str.w	r8, [sl]
 8016386:	2900      	cmp	r1, #0
 8016388:	f000 80c9 	beq.w	801651e <rcl_wait_set_resize+0x1ce>
 801638c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8016390:	6800      	ldr	r0, [r0, #0]
 8016392:	4651      	mov	r1, sl
 8016394:	464a      	mov	r2, r9
 8016396:	4798      	blx	r3
 8016398:	6020      	str	r0, [r4, #0]
 801639a:	2800      	cmp	r0, #0
 801639c:	f000 80d8 	beq.w	8016550 <rcl_wait_set_resize+0x200>
 80163a0:	4652      	mov	r2, sl
 80163a2:	4641      	mov	r1, r8
 80163a4:	f003 fd0e 	bl	8019dc4 <memset>
 80163a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163aa:	6067      	str	r7, [r4, #4]
 80163ac:	6898      	ldr	r0, [r3, #8]
 80163ae:	f8c3 8004 	str.w	r8, [r3, #4]
 80163b2:	9301      	str	r3, [sp, #4]
 80163b4:	464a      	mov	r2, r9
 80163b6:	9b00      	ldr	r3, [sp, #0]
 80163b8:	4651      	mov	r1, sl
 80163ba:	4798      	blx	r3
 80163bc:	9b01      	ldr	r3, [sp, #4]
 80163be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80163c0:	6098      	str	r0, [r3, #8]
 80163c2:	6897      	ldr	r7, [r2, #8]
 80163c4:	2f00      	cmp	r7, #0
 80163c6:	f000 80be 	beq.w	8016546 <rcl_wait_set_resize+0x1f6>
 80163ca:	4652      	mov	r2, sl
 80163cc:	4641      	mov	r1, r8
 80163ce:	4638      	mov	r0, r7
 80163d0:	f003 fcf8 	bl	8019dc4 <memset>
 80163d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163d8:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80163dc:	2700      	movs	r7, #0
 80163de:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 80163e2:	60e7      	str	r7, [r4, #12]
 80163e4:	f8ca 700c 	str.w	r7, [sl, #12]
 80163e8:	2d00      	cmp	r5, #0
 80163ea:	f040 80b5 	bne.w	8016558 <rcl_wait_set_resize+0x208>
 80163ee:	68a0      	ldr	r0, [r4, #8]
 80163f0:	b130      	cbz	r0, 8016400 <rcl_wait_set_resize+0xb0>
 80163f2:	4641      	mov	r1, r8
 80163f4:	4790      	blx	r2
 80163f6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163fa:	60a5      	str	r5, [r4, #8]
 80163fc:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016400:	2700      	movs	r7, #0
 8016402:	19ad      	adds	r5, r5, r6
 8016404:	f8ca 7010 	str.w	r7, [sl, #16]
 8016408:	f040 80be 	bne.w	8016588 <rcl_wait_set_resize+0x238>
 801640c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016410:	b148      	cbz	r0, 8016426 <rcl_wait_set_resize+0xd6>
 8016412:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8016416:	4641      	mov	r1, r8
 8016418:	4798      	blx	r3
 801641a:	f8ca 5014 	str.w	r5, [sl, #20]
 801641e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016422:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016426:	2500      	movs	r5, #0
 8016428:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801642c:	6165      	str	r5, [r4, #20]
 801642e:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8016432:	2e00      	cmp	r6, #0
 8016434:	f040 80bf 	bne.w	80165b6 <rcl_wait_set_resize+0x266>
 8016438:	6920      	ldr	r0, [r4, #16]
 801643a:	b140      	cbz	r0, 801644e <rcl_wait_set_resize+0xfe>
 801643c:	4641      	mov	r1, r8
 801643e:	47c8      	blx	r9
 8016440:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016444:	6126      	str	r6, [r4, #16]
 8016446:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801644a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801644e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016450:	2500      	movs	r5, #0
 8016452:	61e5      	str	r5, [r4, #28]
 8016454:	f8ca 5018 	str.w	r5, [sl, #24]
 8016458:	2b00      	cmp	r3, #0
 801645a:	f040 80c1 	bne.w	80165e0 <rcl_wait_set_resize+0x290>
 801645e:	69a0      	ldr	r0, [r4, #24]
 8016460:	b128      	cbz	r0, 801646e <rcl_wait_set_resize+0x11e>
 8016462:	4641      	mov	r1, r8
 8016464:	47c8      	blx	r9
 8016466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016468:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801646c:	61a3      	str	r3, [r4, #24]
 801646e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016472:	b130      	cbz	r0, 8016482 <rcl_wait_set_resize+0x132>
 8016474:	4641      	mov	r1, r8
 8016476:	47c8      	blx	r9
 8016478:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801647c:	2300      	movs	r3, #0
 801647e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8016482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016484:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8016488:	2600      	movs	r6, #0
 801648a:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 801648e:	6266      	str	r6, [r4, #36]	; 0x24
 8016490:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8016494:	2b00      	cmp	r3, #0
 8016496:	f000 80c8 	beq.w	801662a <rcl_wait_set_resize+0x2da>
 801649a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801649e:	6a20      	ldr	r0, [r4, #32]
 80164a0:	4651      	mov	r1, sl
 80164a2:	463a      	mov	r2, r7
 80164a4:	47c8      	blx	r9
 80164a6:	6220      	str	r0, [r4, #32]
 80164a8:	2800      	cmp	r0, #0
 80164aa:	d051      	beq.n	8016550 <rcl_wait_set_resize+0x200>
 80164ac:	4652      	mov	r2, sl
 80164ae:	4631      	mov	r1, r6
 80164b0:	f003 fc88 	bl	8019dc4 <memset>
 80164b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80164b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164b8:	6263      	str	r3, [r4, #36]	; 0x24
 80164ba:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80164bc:	62ae      	str	r6, [r5, #40]	; 0x28
 80164be:	463a      	mov	r2, r7
 80164c0:	4651      	mov	r1, sl
 80164c2:	47c8      	blx	r9
 80164c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164c6:	62e8      	str	r0, [r5, #44]	; 0x2c
 80164c8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80164ca:	2d00      	cmp	r5, #0
 80164cc:	f000 8105 	beq.w	80166da <rcl_wait_set_resize+0x38a>
 80164d0:	4652      	mov	r2, sl
 80164d2:	4631      	mov	r1, r6
 80164d4:	4628      	mov	r0, r5
 80164d6:	f003 fc75 	bl	8019dc4 <memset>
 80164da:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80164de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164e0:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 80164e4:	2500      	movs	r5, #0
 80164e6:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 80164ea:	62e5      	str	r5, [r4, #44]	; 0x2c
 80164ec:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	f040 80af 	bne.w	8016654 <rcl_wait_set_resize+0x304>
 80164f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80164f8:	b128      	cbz	r0, 8016506 <rcl_wait_set_resize+0x1b6>
 80164fa:	4631      	mov	r1, r6
 80164fc:	47b8      	blx	r7
 80164fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016500:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016504:	62a3      	str	r3, [r4, #40]	; 0x28
 8016506:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801650a:	b310      	cbz	r0, 8016552 <rcl_wait_set_resize+0x202>
 801650c:	4631      	mov	r1, r6
 801650e:	47b8      	blx	r7
 8016510:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016512:	2000      	movs	r0, #0
 8016514:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8016518:	b003      	add	sp, #12
 801651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801651e:	6800      	ldr	r0, [r0, #0]
 8016520:	b120      	cbz	r0, 801652c <rcl_wait_set_resize+0x1dc>
 8016522:	4649      	mov	r1, r9
 8016524:	47d8      	blx	fp
 8016526:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801652a:	6027      	str	r7, [r4, #0]
 801652c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016530:	2800      	cmp	r0, #0
 8016532:	f43f af51 	beq.w	80163d8 <rcl_wait_set_resize+0x88>
 8016536:	4649      	mov	r1, r9
 8016538:	47d8      	blx	fp
 801653a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801653e:	2300      	movs	r3, #0
 8016540:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8016544:	e748      	b.n	80163d8 <rcl_wait_set_resize+0x88>
 8016546:	6820      	ldr	r0, [r4, #0]
 8016548:	4649      	mov	r1, r9
 801654a:	47d8      	blx	fp
 801654c:	e9c4 7700 	strd	r7, r7, [r4]
 8016550:	200a      	movs	r0, #10
 8016552:	b003      	add	sp, #12
 8016554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016558:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801655c:	68a0      	ldr	r0, [r4, #8]
 801655e:	4642      	mov	r2, r8
 8016560:	4649      	mov	r1, r9
 8016562:	4798      	blx	r3
 8016564:	60a0      	str	r0, [r4, #8]
 8016566:	2800      	cmp	r0, #0
 8016568:	d0f2      	beq.n	8016550 <rcl_wait_set_resize+0x200>
 801656a:	4639      	mov	r1, r7
 801656c:	464a      	mov	r2, r9
 801656e:	f003 fc29 	bl	8019dc4 <memset>
 8016572:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016576:	60e5      	str	r5, [r4, #12]
 8016578:	2700      	movs	r7, #0
 801657a:	19ad      	adds	r5, r5, r6
 801657c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016580:	f8ca 7010 	str.w	r7, [sl, #16]
 8016584:	f43f af42 	beq.w	801640c <rcl_wait_set_resize+0xbc>
 8016588:	00ad      	lsls	r5, r5, #2
 801658a:	4642      	mov	r2, r8
 801658c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8016590:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016594:	4629      	mov	r1, r5
 8016596:	4798      	blx	r3
 8016598:	4680      	mov	r8, r0
 801659a:	f8ca 0014 	str.w	r0, [sl, #20]
 801659e:	2800      	cmp	r0, #0
 80165a0:	f000 8084 	beq.w	80166ac <rcl_wait_set_resize+0x35c>
 80165a4:	462a      	mov	r2, r5
 80165a6:	4639      	mov	r1, r7
 80165a8:	f003 fc0c 	bl	8019dc4 <memset>
 80165ac:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80165b0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80165b4:	e737      	b.n	8016426 <rcl_wait_set_resize+0xd6>
 80165b6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80165ba:	6920      	ldr	r0, [r4, #16]
 80165bc:	4642      	mov	r2, r8
 80165be:	4649      	mov	r1, r9
 80165c0:	47b8      	blx	r7
 80165c2:	6120      	str	r0, [r4, #16]
 80165c4:	2800      	cmp	r0, #0
 80165c6:	d0c3      	beq.n	8016550 <rcl_wait_set_resize+0x200>
 80165c8:	464a      	mov	r2, r9
 80165ca:	4629      	mov	r1, r5
 80165cc:	f003 fbfa 	bl	8019dc4 <memset>
 80165d0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80165d4:	6166      	str	r6, [r4, #20]
 80165d6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80165da:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80165de:	e736      	b.n	801644e <rcl_wait_set_resize+0xfe>
 80165e0:	009e      	lsls	r6, r3, #2
 80165e2:	69a0      	ldr	r0, [r4, #24]
 80165e4:	4631      	mov	r1, r6
 80165e6:	4642      	mov	r2, r8
 80165e8:	47b8      	blx	r7
 80165ea:	61a0      	str	r0, [r4, #24]
 80165ec:	2800      	cmp	r0, #0
 80165ee:	d0af      	beq.n	8016550 <rcl_wait_set_resize+0x200>
 80165f0:	4632      	mov	r2, r6
 80165f2:	4629      	mov	r1, r5
 80165f4:	f003 fbe6 	bl	8019dc4 <memset>
 80165f8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80165fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165fe:	61e3      	str	r3, [r4, #28]
 8016600:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016604:	f8ca 501c 	str.w	r5, [sl, #28]
 8016608:	4642      	mov	r2, r8
 801660a:	4631      	mov	r1, r6
 801660c:	47b8      	blx	r7
 801660e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016610:	f8ca 0020 	str.w	r0, [sl, #32]
 8016614:	6a1f      	ldr	r7, [r3, #32]
 8016616:	2f00      	cmp	r7, #0
 8016618:	d058      	beq.n	80166cc <rcl_wait_set_resize+0x37c>
 801661a:	4632      	mov	r2, r6
 801661c:	4629      	mov	r1, r5
 801661e:	4638      	mov	r0, r7
 8016620:	f003 fbd0 	bl	8019dc4 <memset>
 8016624:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016628:	e72b      	b.n	8016482 <rcl_wait_set_resize+0x132>
 801662a:	6a20      	ldr	r0, [r4, #32]
 801662c:	b128      	cbz	r0, 801663a <rcl_wait_set_resize+0x2ea>
 801662e:	4639      	mov	r1, r7
 8016630:	47c0      	blx	r8
 8016632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016634:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016638:	6223      	str	r3, [r4, #32]
 801663a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 801663e:	2800      	cmp	r0, #0
 8016640:	f43f af4d 	beq.w	80164de <rcl_wait_set_resize+0x18e>
 8016644:	4639      	mov	r1, r7
 8016646:	47c0      	blx	r8
 8016648:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801664c:	2300      	movs	r3, #0
 801664e:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8016652:	e744      	b.n	80164de <rcl_wait_set_resize+0x18e>
 8016654:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8016658:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801665a:	4641      	mov	r1, r8
 801665c:	4632      	mov	r2, r6
 801665e:	47c8      	blx	r9
 8016660:	62a0      	str	r0, [r4, #40]	; 0x28
 8016662:	2800      	cmp	r0, #0
 8016664:	f43f af74 	beq.w	8016550 <rcl_wait_set_resize+0x200>
 8016668:	4642      	mov	r2, r8
 801666a:	4629      	mov	r1, r5
 801666c:	f003 fbaa 	bl	8019dc4 <memset>
 8016670:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016676:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016678:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801667c:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8016680:	4632      	mov	r2, r6
 8016682:	4641      	mov	r1, r8
 8016684:	47c8      	blx	r9
 8016686:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016688:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801668e:	b35b      	cbz	r3, 80166e8 <rcl_wait_set_resize+0x398>
 8016690:	4642      	mov	r2, r8
 8016692:	4618      	mov	r0, r3
 8016694:	4629      	mov	r1, r5
 8016696:	f003 fb95 	bl	8019dc4 <memset>
 801669a:	4628      	mov	r0, r5
 801669c:	b003      	add	sp, #12
 801669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166a2:	200b      	movs	r0, #11
 80166a4:	4770      	bx	lr
 80166a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80166aa:	e752      	b.n	8016552 <rcl_wait_set_resize+0x202>
 80166ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80166ae:	68a0      	ldr	r0, [r4, #8]
 80166b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80166b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80166b4:	4790      	blx	r2
 80166b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80166b8:	6920      	ldr	r0, [r4, #16]
 80166ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80166bc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80166be:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80166c2:	4790      	blx	r2
 80166c4:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80166c8:	200a      	movs	r0, #10
 80166ca:	e742      	b.n	8016552 <rcl_wait_set_resize+0x202>
 80166cc:	69a0      	ldr	r0, [r4, #24]
 80166ce:	4641      	mov	r1, r8
 80166d0:	47c8      	blx	r9
 80166d2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80166d6:	200a      	movs	r0, #10
 80166d8:	e73b      	b.n	8016552 <rcl_wait_set_resize+0x202>
 80166da:	6a20      	ldr	r0, [r4, #32]
 80166dc:	4639      	mov	r1, r7
 80166de:	47c0      	blx	r8
 80166e0:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80166e4:	200a      	movs	r0, #10
 80166e6:	e734      	b.n	8016552 <rcl_wait_set_resize+0x202>
 80166e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80166ea:	9300      	str	r3, [sp, #0]
 80166ec:	4631      	mov	r1, r6
 80166ee:	47b8      	blx	r7
 80166f0:	9b00      	ldr	r3, [sp, #0]
 80166f2:	200a      	movs	r0, #10
 80166f4:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80166f8:	e72b      	b.n	8016552 <rcl_wait_set_resize+0x202>
 80166fa:	bf00      	nop

080166fc <rcl_wait_set_init>:
 80166fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016700:	b084      	sub	sp, #16
 8016702:	4604      	mov	r4, r0
 8016704:	a810      	add	r0, sp, #64	; 0x40
 8016706:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801670a:	460f      	mov	r7, r1
 801670c:	4690      	mov	r8, r2
 801670e:	4699      	mov	r9, r3
 8016710:	f7f8 ff6c 	bl	800f5ec <rcutils_allocator_is_valid>
 8016714:	2800      	cmp	r0, #0
 8016716:	d06b      	beq.n	80167f0 <rcl_wait_set_init+0xf4>
 8016718:	2c00      	cmp	r4, #0
 801671a:	d069      	beq.n	80167f0 <rcl_wait_set_init+0xf4>
 801671c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801671e:	b125      	cbz	r5, 801672a <rcl_wait_set_init+0x2e>
 8016720:	2564      	movs	r5, #100	; 0x64
 8016722:	4628      	mov	r0, r5
 8016724:	b004      	add	sp, #16
 8016726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801672a:	f1ba 0f00 	cmp.w	sl, #0
 801672e:	d05f      	beq.n	80167f0 <rcl_wait_set_init+0xf4>
 8016730:	4650      	mov	r0, sl
 8016732:	f7fe fa49 	bl	8014bc8 <rcl_context_is_valid>
 8016736:	2800      	cmp	r0, #0
 8016738:	d067      	beq.n	801680a <rcl_wait_set_init+0x10e>
 801673a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801673c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801673e:	205c      	movs	r0, #92	; 0x5c
 8016740:	4798      	blx	r3
 8016742:	6320      	str	r0, [r4, #48]	; 0x30
 8016744:	2800      	cmp	r0, #0
 8016746:	d062      	beq.n	801680e <rcl_wait_set_init+0x112>
 8016748:	225c      	movs	r2, #92	; 0x5c
 801674a:	4629      	mov	r1, r5
 801674c:	f003 fb3a 	bl	8019dc4 <memset>
 8016750:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8016754:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016758:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801675a:	f8dc e000 	ldr.w	lr, [ip]
 801675e:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8016762:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 8016766:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801676a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801676e:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8016772:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8016776:	60b5      	str	r5, [r6, #8]
 8016778:	6075      	str	r5, [r6, #4]
 801677a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801677e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8016782:	1899      	adds	r1, r3, r2
 8016784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016786:	f8da 0000 	ldr.w	r0, [sl]
 801678a:	f8cc e000 	str.w	lr, [ip]
 801678e:	4419      	add	r1, r3
 8016790:	4441      	add	r1, r8
 8016792:	3028      	adds	r0, #40	; 0x28
 8016794:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8016798:	f001 fa22 	bl	8017be0 <rmw_create_wait_set>
 801679c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801679e:	63f0      	str	r0, [r6, #60]	; 0x3c
 80167a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80167a2:	b350      	cbz	r0, 80167fa <rcl_wait_set_init+0xfe>
 80167a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167a6:	9302      	str	r3, [sp, #8]
 80167a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167aa:	9301      	str	r3, [sp, #4]
 80167ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167ae:	9300      	str	r3, [sp, #0]
 80167b0:	4642      	mov	r2, r8
 80167b2:	464b      	mov	r3, r9
 80167b4:	4639      	mov	r1, r7
 80167b6:	4620      	mov	r0, r4
 80167b8:	f7ff fdca 	bl	8016350 <rcl_wait_set_resize>
 80167bc:	4605      	mov	r5, r0
 80167be:	2800      	cmp	r0, #0
 80167c0:	d0af      	beq.n	8016722 <rcl_wait_set_init+0x26>
 80167c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167c4:	bb2b      	cbnz	r3, 8016812 <rcl_wait_set_init+0x116>
 80167c6:	2600      	movs	r6, #0
 80167c8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80167cc:	9600      	str	r6, [sp, #0]
 80167ce:	4633      	mov	r3, r6
 80167d0:	4632      	mov	r2, r6
 80167d2:	4631      	mov	r1, r6
 80167d4:	4620      	mov	r0, r4
 80167d6:	f7ff fdbb 	bl	8016350 <rcl_wait_set_resize>
 80167da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80167dc:	2800      	cmp	r0, #0
 80167de:	d0a0      	beq.n	8016722 <rcl_wait_set_init+0x26>
 80167e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80167e2:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80167e4:	4798      	blx	r3
 80167e6:	4628      	mov	r0, r5
 80167e8:	6326      	str	r6, [r4, #48]	; 0x30
 80167ea:	b004      	add	sp, #16
 80167ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167f0:	250b      	movs	r5, #11
 80167f2:	4628      	mov	r0, r5
 80167f4:	b004      	add	sp, #16
 80167f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167fa:	2501      	movs	r5, #1
 80167fc:	f001 f9fa 	bl	8017bf4 <rmw_destroy_wait_set>
 8016800:	2800      	cmp	r0, #0
 8016802:	bf18      	it	ne
 8016804:	f44f 7561 	movne.w	r5, #900	; 0x384
 8016808:	e7dd      	b.n	80167c6 <rcl_wait_set_init+0xca>
 801680a:	2565      	movs	r5, #101	; 0x65
 801680c:	e789      	b.n	8016722 <rcl_wait_set_init+0x26>
 801680e:	250a      	movs	r5, #10
 8016810:	e787      	b.n	8016722 <rcl_wait_set_init+0x26>
 8016812:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016814:	e7f2      	b.n	80167fc <rcl_wait_set_init+0x100>
 8016816:	bf00      	nop

08016818 <rcl_wait_set_add_guard_condition>:
 8016818:	b320      	cbz	r0, 8016864 <rcl_wait_set_add_guard_condition+0x4c>
 801681a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801681c:	b570      	push	{r4, r5, r6, lr}
 801681e:	4604      	mov	r4, r0
 8016820:	b1d3      	cbz	r3, 8016858 <rcl_wait_set_add_guard_condition+0x40>
 8016822:	b319      	cbz	r1, 801686c <rcl_wait_set_add_guard_condition+0x54>
 8016824:	68dd      	ldr	r5, [r3, #12]
 8016826:	68e0      	ldr	r0, [r4, #12]
 8016828:	4285      	cmp	r5, r0
 801682a:	d218      	bcs.n	801685e <rcl_wait_set_add_guard_condition+0x46>
 801682c:	68a0      	ldr	r0, [r4, #8]
 801682e:	1c6e      	adds	r6, r5, #1
 8016830:	60de      	str	r6, [r3, #12]
 8016832:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016836:	b102      	cbz	r2, 801683a <rcl_wait_set_add_guard_condition+0x22>
 8016838:	6015      	str	r5, [r2, #0]
 801683a:	4608      	mov	r0, r1
 801683c:	f003 f8e4 	bl	8019a08 <rcl_guard_condition_get_rmw_handle>
 8016840:	b190      	cbz	r0, 8016868 <rcl_wait_set_add_guard_condition+0x50>
 8016842:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016844:	6842      	ldr	r2, [r0, #4]
 8016846:	695b      	ldr	r3, [r3, #20]
 8016848:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801684c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801684e:	6913      	ldr	r3, [r2, #16]
 8016850:	3301      	adds	r3, #1
 8016852:	6113      	str	r3, [r2, #16]
 8016854:	2000      	movs	r0, #0
 8016856:	bd70      	pop	{r4, r5, r6, pc}
 8016858:	f44f 7061 	mov.w	r0, #900	; 0x384
 801685c:	bd70      	pop	{r4, r5, r6, pc}
 801685e:	f240 3086 	movw	r0, #902	; 0x386
 8016862:	bd70      	pop	{r4, r5, r6, pc}
 8016864:	200b      	movs	r0, #11
 8016866:	4770      	bx	lr
 8016868:	2001      	movs	r0, #1
 801686a:	bd70      	pop	{r4, r5, r6, pc}
 801686c:	200b      	movs	r0, #11
 801686e:	bd70      	pop	{r4, r5, r6, pc}

08016870 <rcl_wait_set_add_timer>:
 8016870:	b340      	cbz	r0, 80168c4 <rcl_wait_set_add_timer+0x54>
 8016872:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016874:	b570      	push	{r4, r5, r6, lr}
 8016876:	4604      	mov	r4, r0
 8016878:	b1f3      	cbz	r3, 80168b8 <rcl_wait_set_add_timer+0x48>
 801687a:	b329      	cbz	r1, 80168c8 <rcl_wait_set_add_timer+0x58>
 801687c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801687e:	6965      	ldr	r5, [r4, #20]
 8016880:	42a8      	cmp	r0, r5
 8016882:	d21c      	bcs.n	80168be <rcl_wait_set_add_timer+0x4e>
 8016884:	6925      	ldr	r5, [r4, #16]
 8016886:	1c46      	adds	r6, r0, #1
 8016888:	641e      	str	r6, [r3, #64]	; 0x40
 801688a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801688e:	b102      	cbz	r2, 8016892 <rcl_wait_set_add_timer+0x22>
 8016890:	6010      	str	r0, [r2, #0]
 8016892:	4608      	mov	r0, r1
 8016894:	f7ff faa4 	bl	8015de0 <rcl_timer_get_guard_condition>
 8016898:	b168      	cbz	r0, 80168b6 <rcl_wait_set_add_timer+0x46>
 801689a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801689c:	68e3      	ldr	r3, [r4, #12]
 801689e:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80168a0:	3b01      	subs	r3, #1
 80168a2:	441d      	add	r5, r3
 80168a4:	f003 f8b0 	bl	8019a08 <rcl_guard_condition_get_rmw_handle>
 80168a8:	b180      	cbz	r0, 80168cc <rcl_wait_set_add_timer+0x5c>
 80168aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80168ac:	6842      	ldr	r2, [r0, #4]
 80168ae:	695b      	ldr	r3, [r3, #20]
 80168b0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80168b4:	2000      	movs	r0, #0
 80168b6:	bd70      	pop	{r4, r5, r6, pc}
 80168b8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80168bc:	bd70      	pop	{r4, r5, r6, pc}
 80168be:	f240 3086 	movw	r0, #902	; 0x386
 80168c2:	bd70      	pop	{r4, r5, r6, pc}
 80168c4:	200b      	movs	r0, #11
 80168c6:	4770      	bx	lr
 80168c8:	200b      	movs	r0, #11
 80168ca:	bd70      	pop	{r4, r5, r6, pc}
 80168cc:	2001      	movs	r0, #1
 80168ce:	bd70      	pop	{r4, r5, r6, pc}

080168d0 <rcl_wait_set_add_client>:
 80168d0:	b320      	cbz	r0, 801691c <rcl_wait_set_add_client+0x4c>
 80168d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168d4:	b570      	push	{r4, r5, r6, lr}
 80168d6:	4604      	mov	r4, r0
 80168d8:	b1d3      	cbz	r3, 8016910 <rcl_wait_set_add_client+0x40>
 80168da:	b319      	cbz	r1, 8016924 <rcl_wait_set_add_client+0x54>
 80168dc:	699d      	ldr	r5, [r3, #24]
 80168de:	69e0      	ldr	r0, [r4, #28]
 80168e0:	4285      	cmp	r5, r0
 80168e2:	d218      	bcs.n	8016916 <rcl_wait_set_add_client+0x46>
 80168e4:	69a0      	ldr	r0, [r4, #24]
 80168e6:	1c6e      	adds	r6, r5, #1
 80168e8:	619e      	str	r6, [r3, #24]
 80168ea:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80168ee:	b102      	cbz	r2, 80168f2 <rcl_wait_set_add_client+0x22>
 80168f0:	6015      	str	r5, [r2, #0]
 80168f2:	4608      	mov	r0, r1
 80168f4:	f7fe f908 	bl	8014b08 <rcl_client_get_rmw_handle>
 80168f8:	b190      	cbz	r0, 8016920 <rcl_wait_set_add_client+0x50>
 80168fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80168fc:	6842      	ldr	r2, [r0, #4]
 80168fe:	6a1b      	ldr	r3, [r3, #32]
 8016900:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016904:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016906:	69d3      	ldr	r3, [r2, #28]
 8016908:	3301      	adds	r3, #1
 801690a:	61d3      	str	r3, [r2, #28]
 801690c:	2000      	movs	r0, #0
 801690e:	bd70      	pop	{r4, r5, r6, pc}
 8016910:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016914:	bd70      	pop	{r4, r5, r6, pc}
 8016916:	f240 3086 	movw	r0, #902	; 0x386
 801691a:	bd70      	pop	{r4, r5, r6, pc}
 801691c:	200b      	movs	r0, #11
 801691e:	4770      	bx	lr
 8016920:	2001      	movs	r0, #1
 8016922:	bd70      	pop	{r4, r5, r6, pc}
 8016924:	200b      	movs	r0, #11
 8016926:	bd70      	pop	{r4, r5, r6, pc}

08016928 <rcl_wait_set_add_service>:
 8016928:	b320      	cbz	r0, 8016974 <rcl_wait_set_add_service+0x4c>
 801692a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801692c:	b570      	push	{r4, r5, r6, lr}
 801692e:	4604      	mov	r4, r0
 8016930:	b1d3      	cbz	r3, 8016968 <rcl_wait_set_add_service+0x40>
 8016932:	b319      	cbz	r1, 801697c <rcl_wait_set_add_service+0x54>
 8016934:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8016936:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016938:	4285      	cmp	r5, r0
 801693a:	d218      	bcs.n	801696e <rcl_wait_set_add_service+0x46>
 801693c:	6a20      	ldr	r0, [r4, #32]
 801693e:	1c6e      	adds	r6, r5, #1
 8016940:	625e      	str	r6, [r3, #36]	; 0x24
 8016942:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016946:	b102      	cbz	r2, 801694a <rcl_wait_set_add_service+0x22>
 8016948:	6015      	str	r5, [r2, #0]
 801694a:	4608      	mov	r0, r1
 801694c:	f7fe fed4 	bl	80156f8 <rcl_service_get_rmw_handle>
 8016950:	b190      	cbz	r0, 8016978 <rcl_wait_set_add_service+0x50>
 8016952:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016954:	6842      	ldr	r2, [r0, #4]
 8016956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016958:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801695c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801695e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016960:	3301      	adds	r3, #1
 8016962:	6293      	str	r3, [r2, #40]	; 0x28
 8016964:	2000      	movs	r0, #0
 8016966:	bd70      	pop	{r4, r5, r6, pc}
 8016968:	f44f 7061 	mov.w	r0, #900	; 0x384
 801696c:	bd70      	pop	{r4, r5, r6, pc}
 801696e:	f240 3086 	movw	r0, #902	; 0x386
 8016972:	bd70      	pop	{r4, r5, r6, pc}
 8016974:	200b      	movs	r0, #11
 8016976:	4770      	bx	lr
 8016978:	2001      	movs	r0, #1
 801697a:	bd70      	pop	{r4, r5, r6, pc}
 801697c:	200b      	movs	r0, #11
 801697e:	bd70      	pop	{r4, r5, r6, pc}

08016980 <rcl_wait>:
 8016980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016984:	b08f      	sub	sp, #60	; 0x3c
 8016986:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801698a:	2800      	cmp	r0, #0
 801698c:	f000 814c 	beq.w	8016c28 <rcl_wait+0x2a8>
 8016990:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8016992:	4604      	mov	r4, r0
 8016994:	2d00      	cmp	r5, #0
 8016996:	f000 80bc 	beq.w	8016b12 <rcl_wait+0x192>
 801699a:	6843      	ldr	r3, [r0, #4]
 801699c:	b973      	cbnz	r3, 80169bc <rcl_wait+0x3c>
 801699e:	68e3      	ldr	r3, [r4, #12]
 80169a0:	b963      	cbnz	r3, 80169bc <rcl_wait+0x3c>
 80169a2:	6963      	ldr	r3, [r4, #20]
 80169a4:	b953      	cbnz	r3, 80169bc <rcl_wait+0x3c>
 80169a6:	69e3      	ldr	r3, [r4, #28]
 80169a8:	b943      	cbnz	r3, 80169bc <rcl_wait+0x3c>
 80169aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169ac:	b933      	cbnz	r3, 80169bc <rcl_wait+0x3c>
 80169ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80169b0:	b923      	cbnz	r3, 80169bc <rcl_wait+0x3c>
 80169b2:	f240 3085 	movw	r0, #901	; 0x385
 80169b6:	b00f      	add	sp, #60	; 0x3c
 80169b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80169c0:	2a01      	cmp	r2, #1
 80169c2:	f173 0300 	sbcs.w	r3, r3, #0
 80169c6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80169c8:	db56      	blt.n	8016a78 <rcl_wait+0xf8>
 80169ca:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80169ce:	2900      	cmp	r1, #0
 80169d0:	f000 8149 	beq.w	8016c66 <rcl_wait+0x2e6>
 80169d4:	2300      	movs	r3, #0
 80169d6:	9307      	str	r3, [sp, #28]
 80169d8:	469b      	mov	fp, r3
 80169da:	f04f 0800 	mov.w	r8, #0
 80169de:	f04f 0900 	mov.w	r9, #0
 80169e2:	e00d      	b.n	8016a00 <rcl_wait+0x80>
 80169e4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80169e6:	6922      	ldr	r2, [r4, #16]
 80169e8:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80169ea:	f842 000a 	str.w	r0, [r2, sl]
 80169ee:	f118 0801 	adds.w	r8, r8, #1
 80169f2:	f149 0900 	adc.w	r9, r9, #0
 80169f6:	2300      	movs	r3, #0
 80169f8:	4599      	cmp	r9, r3
 80169fa:	bf08      	it	eq
 80169fc:	4588      	cmpeq	r8, r1
 80169fe:	d243      	bcs.n	8016a88 <rcl_wait+0x108>
 8016a00:	6922      	ldr	r2, [r4, #16]
 8016a02:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8016a06:	f852 000a 	ldr.w	r0, [r2, sl]
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d0ef      	beq.n	80169ee <rcl_wait+0x6e>
 8016a0e:	68e2      	ldr	r2, [r4, #12]
 8016a10:	6969      	ldr	r1, [r5, #20]
 8016a12:	4442      	add	r2, r8
 8016a14:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8016a18:	b13b      	cbz	r3, 8016a2a <rcl_wait+0xaa>
 8016a1a:	692a      	ldr	r2, [r5, #16]
 8016a1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016a20:	6921      	ldr	r1, [r4, #16]
 8016a22:	3201      	adds	r2, #1
 8016a24:	f851 000a 	ldr.w	r0, [r1, sl]
 8016a28:	612a      	str	r2, [r5, #16]
 8016a2a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016a2e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8016a32:	f7ff f9c3 	bl	8015dbc <rcl_timer_is_canceled>
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d1bd      	bne.n	80169b6 <rcl_wait+0x36>
 8016a3a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016a3e:	2a00      	cmp	r2, #0
 8016a40:	d1d0      	bne.n	80169e4 <rcl_wait+0x64>
 8016a42:	6922      	ldr	r2, [r4, #16]
 8016a44:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016a48:	f852 000a 	ldr.w	r0, [r2, sl]
 8016a4c:	a90a      	add	r1, sp, #40	; 0x28
 8016a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a56:	f7ff f98d 	bl	8015d74 <rcl_timer_get_time_until_next_call>
 8016a5a:	2800      	cmp	r0, #0
 8016a5c:	d1ab      	bne.n	80169b6 <rcl_wait+0x36>
 8016a5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016a62:	42b2      	cmp	r2, r6
 8016a64:	eb73 0107 	sbcs.w	r1, r3, r7
 8016a68:	da03      	bge.n	8016a72 <rcl_wait+0xf2>
 8016a6a:	461f      	mov	r7, r3
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	4616      	mov	r6, r2
 8016a70:	9307      	str	r3, [sp, #28]
 8016a72:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016a74:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8016a76:	e7ba      	b.n	80169ee <rcl_wait+0x6e>
 8016a78:	2900      	cmp	r1, #0
 8016a7a:	f000 80de 	beq.w	8016c3a <rcl_wait+0x2ba>
 8016a7e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016a82:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016a86:	e7a5      	b.n	80169d4 <rcl_wait+0x54>
 8016a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a8c:	4313      	orrs	r3, r2
 8016a8e:	d145      	bne.n	8016b1c <rcl_wait+0x19c>
 8016a90:	2300      	movs	r3, #0
 8016a92:	2200      	movs	r2, #0
 8016a94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016a9c:	ab0a      	add	r3, sp, #40	; 0x28
 8016a9e:	9302      	str	r3, [sp, #8]
 8016aa0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8016aa8:	9300      	str	r3, [sp, #0]
 8016aaa:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8016aae:	f105 031c 	add.w	r3, r5, #28
 8016ab2:	f105 0110 	add.w	r1, r5, #16
 8016ab6:	1d28      	adds	r0, r5, #4
 8016ab8:	f000 ff12 	bl	80178e0 <rmw_wait>
 8016abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016ac0:	4680      	mov	r8, r0
 8016ac2:	b30a      	cbz	r2, 8016b08 <rcl_wait+0x188>
 8016ac4:	2500      	movs	r5, #0
 8016ac6:	462f      	mov	r7, r5
 8016ac8:	e004      	b.n	8016ad4 <rcl_wait+0x154>
 8016aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016ace:	3501      	adds	r5, #1
 8016ad0:	42aa      	cmp	r2, r5
 8016ad2:	d919      	bls.n	8016b08 <rcl_wait+0x188>
 8016ad4:	6922      	ldr	r2, [r4, #16]
 8016ad6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016ada:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016ade:	00ae      	lsls	r6, r5, #2
 8016ae0:	2800      	cmp	r0, #0
 8016ae2:	d0f3      	beq.n	8016acc <rcl_wait+0x14c>
 8016ae4:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8016ae8:	f7ff f90c 	bl	8015d04 <rcl_timer_is_ready>
 8016aec:	2800      	cmp	r0, #0
 8016aee:	f47f af62 	bne.w	80169b6 <rcl_wait+0x36>
 8016af2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016af6:	2a00      	cmp	r2, #0
 8016af8:	d1e7      	bne.n	8016aca <rcl_wait+0x14a>
 8016afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016afc:	6921      	ldr	r1, [r4, #16]
 8016afe:	518a      	str	r2, [r1, r6]
 8016b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b02:	3501      	adds	r5, #1
 8016b04:	42aa      	cmp	r2, r5
 8016b06:	d8e5      	bhi.n	8016ad4 <rcl_wait+0x154>
 8016b08:	f038 0002 	bics.w	r0, r8, #2
 8016b0c:	d029      	beq.n	8016b62 <rcl_wait+0x1e2>
 8016b0e:	2001      	movs	r0, #1
 8016b10:	e751      	b.n	80169b6 <rcl_wait+0x36>
 8016b12:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016b16:	b00f      	add	sp, #60	; 0x3c
 8016b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016b20:	2a01      	cmp	r2, #1
 8016b22:	f173 0300 	sbcs.w	r3, r3, #0
 8016b26:	f2c0 8083 	blt.w	8016c30 <rcl_wait+0x2b0>
 8016b2a:	2e00      	cmp	r6, #0
 8016b2c:	f177 0300 	sbcs.w	r3, r7, #0
 8016b30:	bfbc      	itt	lt
 8016b32:	2600      	movlt	r6, #0
 8016b34:	2700      	movlt	r7, #0
 8016b36:	a34e      	add	r3, pc, #312	; (adr r3, 8016c70 <rcl_wait+0x2f0>)
 8016b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	4639      	mov	r1, r7
 8016b40:	f7ea f8ba 	bl	8000cb8 <__aeabi_ldivmod>
 8016b44:	a34a      	add	r3, pc, #296	; (adr r3, 8016c70 <rcl_wait+0x2f0>)
 8016b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b4a:	4680      	mov	r8, r0
 8016b4c:	4689      	mov	r9, r1
 8016b4e:	4630      	mov	r0, r6
 8016b50:	4639      	mov	r1, r7
 8016b52:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8016b56:	f7ea f8af 	bl	8000cb8 <__aeabi_ldivmod>
 8016b5a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016b5e:	ab0a      	add	r3, sp, #40	; 0x28
 8016b60:	e79d      	b.n	8016a9e <rcl_wait+0x11e>
 8016b62:	6866      	ldr	r6, [r4, #4]
 8016b64:	4602      	mov	r2, r0
 8016b66:	b91e      	cbnz	r6, 8016b70 <rcl_wait+0x1f0>
 8016b68:	e00d      	b.n	8016b86 <rcl_wait+0x206>
 8016b6a:	3201      	adds	r2, #1
 8016b6c:	42b2      	cmp	r2, r6
 8016b6e:	d00a      	beq.n	8016b86 <rcl_wait+0x206>
 8016b70:	6899      	ldr	r1, [r3, #8]
 8016b72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b76:	2900      	cmp	r1, #0
 8016b78:	d1f7      	bne.n	8016b6a <rcl_wait+0x1ea>
 8016b7a:	6825      	ldr	r5, [r4, #0]
 8016b7c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016b80:	3201      	adds	r2, #1
 8016b82:	42b2      	cmp	r2, r6
 8016b84:	d1f4      	bne.n	8016b70 <rcl_wait+0x1f0>
 8016b86:	68e6      	ldr	r6, [r4, #12]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	b91e      	cbnz	r6, 8016b94 <rcl_wait+0x214>
 8016b8c:	e00d      	b.n	8016baa <rcl_wait+0x22a>
 8016b8e:	3201      	adds	r2, #1
 8016b90:	42b2      	cmp	r2, r6
 8016b92:	d00a      	beq.n	8016baa <rcl_wait+0x22a>
 8016b94:	6959      	ldr	r1, [r3, #20]
 8016b96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b9a:	2900      	cmp	r1, #0
 8016b9c:	d1f7      	bne.n	8016b8e <rcl_wait+0x20e>
 8016b9e:	68a5      	ldr	r5, [r4, #8]
 8016ba0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016ba4:	3201      	adds	r2, #1
 8016ba6:	42b2      	cmp	r2, r6
 8016ba8:	d1f4      	bne.n	8016b94 <rcl_wait+0x214>
 8016baa:	69e6      	ldr	r6, [r4, #28]
 8016bac:	2200      	movs	r2, #0
 8016bae:	b91e      	cbnz	r6, 8016bb8 <rcl_wait+0x238>
 8016bb0:	e00d      	b.n	8016bce <rcl_wait+0x24e>
 8016bb2:	3201      	adds	r2, #1
 8016bb4:	42b2      	cmp	r2, r6
 8016bb6:	d00a      	beq.n	8016bce <rcl_wait+0x24e>
 8016bb8:	6a19      	ldr	r1, [r3, #32]
 8016bba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bbe:	2900      	cmp	r1, #0
 8016bc0:	d1f7      	bne.n	8016bb2 <rcl_wait+0x232>
 8016bc2:	69a5      	ldr	r5, [r4, #24]
 8016bc4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016bc8:	3201      	adds	r2, #1
 8016bca:	42b2      	cmp	r2, r6
 8016bcc:	d1f4      	bne.n	8016bb8 <rcl_wait+0x238>
 8016bce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	b91e      	cbnz	r6, 8016bdc <rcl_wait+0x25c>
 8016bd4:	e00d      	b.n	8016bf2 <rcl_wait+0x272>
 8016bd6:	3201      	adds	r2, #1
 8016bd8:	4296      	cmp	r6, r2
 8016bda:	d00a      	beq.n	8016bf2 <rcl_wait+0x272>
 8016bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016bde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016be2:	2900      	cmp	r1, #0
 8016be4:	d1f7      	bne.n	8016bd6 <rcl_wait+0x256>
 8016be6:	6a25      	ldr	r5, [r4, #32]
 8016be8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016bec:	3201      	adds	r2, #1
 8016bee:	4296      	cmp	r6, r2
 8016bf0:	d1f4      	bne.n	8016bdc <rcl_wait+0x25c>
 8016bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	b91e      	cbnz	r6, 8016c00 <rcl_wait+0x280>
 8016bf8:	e00d      	b.n	8016c16 <rcl_wait+0x296>
 8016bfa:	3201      	adds	r2, #1
 8016bfc:	42b2      	cmp	r2, r6
 8016bfe:	d00a      	beq.n	8016c16 <rcl_wait+0x296>
 8016c00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016c02:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016c06:	2900      	cmp	r1, #0
 8016c08:	d1f7      	bne.n	8016bfa <rcl_wait+0x27a>
 8016c0a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016c0c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016c10:	3201      	adds	r2, #1
 8016c12:	42b2      	cmp	r2, r6
 8016c14:	d1f4      	bne.n	8016c00 <rcl_wait+0x280>
 8016c16:	f1b8 0f02 	cmp.w	r8, #2
 8016c1a:	f47f aecc 	bne.w	80169b6 <rcl_wait+0x36>
 8016c1e:	9b07      	ldr	r3, [sp, #28]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	bf08      	it	eq
 8016c24:	2002      	moveq	r0, #2
 8016c26:	e6c6      	b.n	80169b6 <rcl_wait+0x36>
 8016c28:	200b      	movs	r0, #11
 8016c2a:	b00f      	add	sp, #60	; 0x3c
 8016c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c30:	9b07      	ldr	r3, [sp, #28]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	f47f af79 	bne.w	8016b2a <rcl_wait+0x1aa>
 8016c38:	e731      	b.n	8016a9e <rcl_wait+0x11e>
 8016c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c3e:	4313      	orrs	r3, r2
 8016c40:	bf08      	it	eq
 8016c42:	9107      	streq	r1, [sp, #28]
 8016c44:	f43f af24 	beq.w	8016a90 <rcl_wait+0x110>
 8016c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c4c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016c50:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016c54:	2a01      	cmp	r2, #1
 8016c56:	f173 0300 	sbcs.w	r3, r3, #0
 8016c5a:	f04f 0300 	mov.w	r3, #0
 8016c5e:	9307      	str	r3, [sp, #28]
 8016c60:	f6bf af63 	bge.w	8016b2a <rcl_wait+0x1aa>
 8016c64:	e71b      	b.n	8016a9e <rcl_wait+0x11e>
 8016c66:	4632      	mov	r2, r6
 8016c68:	463b      	mov	r3, r7
 8016c6a:	e7f3      	b.n	8016c54 <rcl_wait+0x2d4>
 8016c6c:	f3af 8000 	nop.w
 8016c70:	3b9aca00 	.word	0x3b9aca00
 8016c74:	00000000 	.word	0x00000000

08016c78 <__atomic_load_8>:
 8016c78:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016c7c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016c80:	4b14      	ldr	r3, [pc, #80]	; (8016cd4 <__atomic_load_8+0x5c>)
 8016c82:	4a15      	ldr	r2, [pc, #84]	; (8016cd8 <__atomic_load_8+0x60>)
 8016c84:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016c88:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016c8c:	fb03 f301 	mul.w	r3, r3, r1
 8016c90:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8016c94:	fba2 1203 	umull	r1, r2, r2, r3
 8016c98:	0912      	lsrs	r2, r2, #4
 8016c9a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8016c9e:	b430      	push	{r4, r5}
 8016ca0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8016ca4:	4c0d      	ldr	r4, [pc, #52]	; (8016cdc <__atomic_load_8+0x64>)
 8016ca6:	1a9b      	subs	r3, r3, r2
 8016ca8:	18e1      	adds	r1, r4, r3
 8016caa:	f04f 0501 	mov.w	r5, #1
 8016cae:	e8d1 2f4f 	ldrexb	r2, [r1]
 8016cb2:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8016cb6:	f1bc 0f00 	cmp.w	ip, #0
 8016cba:	d1f8      	bne.n	8016cae <__atomic_load_8+0x36>
 8016cbc:	f3bf 8f5b 	dmb	ish
 8016cc0:	b2d2      	uxtb	r2, r2
 8016cc2:	2a00      	cmp	r2, #0
 8016cc4:	d1f3      	bne.n	8016cae <__atomic_load_8+0x36>
 8016cc6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016cca:	f3bf 8f5b 	dmb	ish
 8016cce:	54e2      	strb	r2, [r4, r3]
 8016cd0:	bc30      	pop	{r4, r5}
 8016cd2:	4770      	bx	lr
 8016cd4:	27d4eb2d 	.word	0x27d4eb2d
 8016cd8:	b21642c9 	.word	0xb21642c9
 8016cdc:	20009e50 	.word	0x20009e50

08016ce0 <__atomic_store_8>:
 8016ce0:	b4f0      	push	{r4, r5, r6, r7}
 8016ce2:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016ce6:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016cea:	4914      	ldr	r1, [pc, #80]	; (8016d3c <__atomic_store_8+0x5c>)
 8016cec:	4c14      	ldr	r4, [pc, #80]	; (8016d40 <__atomic_store_8+0x60>)
 8016cee:	4e15      	ldr	r6, [pc, #84]	; (8016d44 <__atomic_store_8+0x64>)
 8016cf0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016cf4:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016cf8:	fb01 f105 	mul.w	r1, r1, r5
 8016cfc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016d00:	fba4 5401 	umull	r5, r4, r4, r1
 8016d04:	0924      	lsrs	r4, r4, #4
 8016d06:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016d0a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8016d0e:	1b09      	subs	r1, r1, r4
 8016d10:	1875      	adds	r5, r6, r1
 8016d12:	f04f 0701 	mov.w	r7, #1
 8016d16:	e8d5 4f4f 	ldrexb	r4, [r5]
 8016d1a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8016d1e:	f1bc 0f00 	cmp.w	ip, #0
 8016d22:	d1f8      	bne.n	8016d16 <__atomic_store_8+0x36>
 8016d24:	f3bf 8f5b 	dmb	ish
 8016d28:	b2e4      	uxtb	r4, r4
 8016d2a:	2c00      	cmp	r4, #0
 8016d2c:	d1f3      	bne.n	8016d16 <__atomic_store_8+0x36>
 8016d2e:	e9c0 2300 	strd	r2, r3, [r0]
 8016d32:	f3bf 8f5b 	dmb	ish
 8016d36:	5474      	strb	r4, [r6, r1]
 8016d38:	bcf0      	pop	{r4, r5, r6, r7}
 8016d3a:	4770      	bx	lr
 8016d3c:	27d4eb2d 	.word	0x27d4eb2d
 8016d40:	b21642c9 	.word	0xb21642c9
 8016d44:	20009e50 	.word	0x20009e50

08016d48 <__atomic_exchange_8>:
 8016d48:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016d4c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016d50:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016d54:	4c16      	ldr	r4, [pc, #88]	; (8016db0 <__atomic_exchange_8+0x68>)
 8016d56:	4917      	ldr	r1, [pc, #92]	; (8016db4 <__atomic_exchange_8+0x6c>)
 8016d58:	4e17      	ldr	r6, [pc, #92]	; (8016db8 <__atomic_exchange_8+0x70>)
 8016d5a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016d5e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016d62:	fb04 f505 	mul.w	r5, r4, r5
 8016d66:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016d6a:	fba1 4105 	umull	r4, r1, r1, r5
 8016d6e:	0909      	lsrs	r1, r1, #4
 8016d70:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016d74:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016d78:	1a6c      	subs	r4, r5, r1
 8016d7a:	1931      	adds	r1, r6, r4
 8016d7c:	f04f 0701 	mov.w	r7, #1
 8016d80:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016d84:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016d88:	f1bc 0f00 	cmp.w	ip, #0
 8016d8c:	d1f8      	bne.n	8016d80 <__atomic_exchange_8+0x38>
 8016d8e:	f3bf 8f5b 	dmb	ish
 8016d92:	b2ed      	uxtb	r5, r5
 8016d94:	2d00      	cmp	r5, #0
 8016d96:	d1f3      	bne.n	8016d80 <__atomic_exchange_8+0x38>
 8016d98:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016d9c:	e9c0 2300 	strd	r2, r3, [r0]
 8016da0:	f3bf 8f5b 	dmb	ish
 8016da4:	5535      	strb	r5, [r6, r4]
 8016da6:	4640      	mov	r0, r8
 8016da8:	4649      	mov	r1, r9
 8016daa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8016dae:	4770      	bx	lr
 8016db0:	27d4eb2d 	.word	0x27d4eb2d
 8016db4:	b21642c9 	.word	0xb21642c9
 8016db8:	20009e50 	.word	0x20009e50

08016dbc <rcutils_is_directory>:
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	4770      	bx	lr

08016dc0 <rcutils_join_path>:
 8016dc0:	b082      	sub	sp, #8
 8016dc2:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016dc6:	2000      	movs	r0, #0
 8016dc8:	b002      	add	sp, #8
 8016dca:	4770      	bx	lr

08016dcc <rcutils_to_native_path>:
 8016dcc:	b084      	sub	sp, #16
 8016dce:	a801      	add	r0, sp, #4
 8016dd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016dd4:	b004      	add	sp, #16
 8016dd6:	2000      	movs	r0, #0
 8016dd8:	4770      	bx	lr
 8016dda:	bf00      	nop

08016ddc <rcutils_format_string_limit>:
 8016ddc:	b40f      	push	{r0, r1, r2, r3}
 8016dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016de0:	b083      	sub	sp, #12
 8016de2:	ac08      	add	r4, sp, #32
 8016de4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016de6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016dea:	b34e      	cbz	r6, 8016e40 <rcutils_format_string_limit+0x64>
 8016dec:	a808      	add	r0, sp, #32
 8016dee:	f7f8 fbfd 	bl	800f5ec <rcutils_allocator_is_valid>
 8016df2:	b328      	cbz	r0, 8016e40 <rcutils_format_string_limit+0x64>
 8016df4:	2100      	movs	r1, #0
 8016df6:	ab0f      	add	r3, sp, #60	; 0x3c
 8016df8:	4608      	mov	r0, r1
 8016dfa:	4632      	mov	r2, r6
 8016dfc:	e9cd 3300 	strd	r3, r3, [sp]
 8016e00:	f000 f904 	bl	801700c <rcutils_vsnprintf>
 8016e04:	1c43      	adds	r3, r0, #1
 8016e06:	4605      	mov	r5, r0
 8016e08:	d01a      	beq.n	8016e40 <rcutils_format_string_limit+0x64>
 8016e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e0e:	1c47      	adds	r7, r0, #1
 8016e10:	429f      	cmp	r7, r3
 8016e12:	bf84      	itt	hi
 8016e14:	461f      	movhi	r7, r3
 8016e16:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8016e1a:	4638      	mov	r0, r7
 8016e1c:	9b08      	ldr	r3, [sp, #32]
 8016e1e:	4798      	blx	r3
 8016e20:	4604      	mov	r4, r0
 8016e22:	b168      	cbz	r0, 8016e40 <rcutils_format_string_limit+0x64>
 8016e24:	9b01      	ldr	r3, [sp, #4]
 8016e26:	4632      	mov	r2, r6
 8016e28:	4639      	mov	r1, r7
 8016e2a:	f000 f8ef 	bl	801700c <rcutils_vsnprintf>
 8016e2e:	2800      	cmp	r0, #0
 8016e30:	db02      	blt.n	8016e38 <rcutils_format_string_limit+0x5c>
 8016e32:	2300      	movs	r3, #0
 8016e34:	5563      	strb	r3, [r4, r5]
 8016e36:	e004      	b.n	8016e42 <rcutils_format_string_limit+0x66>
 8016e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	4798      	blx	r3
 8016e40:	2400      	movs	r4, #0
 8016e42:	4620      	mov	r0, r4
 8016e44:	b003      	add	sp, #12
 8016e46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016e4a:	b004      	add	sp, #16
 8016e4c:	4770      	bx	lr
 8016e4e:	bf00      	nop

08016e50 <rcutils_get_env>:
 8016e50:	b168      	cbz	r0, 8016e6e <rcutils_get_env+0x1e>
 8016e52:	b510      	push	{r4, lr}
 8016e54:	460c      	mov	r4, r1
 8016e56:	b129      	cbz	r1, 8016e64 <rcutils_get_env+0x14>
 8016e58:	f002 ff0c 	bl	8019c74 <getenv>
 8016e5c:	b120      	cbz	r0, 8016e68 <rcutils_get_env+0x18>
 8016e5e:	6020      	str	r0, [r4, #0]
 8016e60:	2000      	movs	r0, #0
 8016e62:	bd10      	pop	{r4, pc}
 8016e64:	4803      	ldr	r0, [pc, #12]	; (8016e74 <rcutils_get_env+0x24>)
 8016e66:	bd10      	pop	{r4, pc}
 8016e68:	4b03      	ldr	r3, [pc, #12]	; (8016e78 <rcutils_get_env+0x28>)
 8016e6a:	6023      	str	r3, [r4, #0]
 8016e6c:	bd10      	pop	{r4, pc}
 8016e6e:	4803      	ldr	r0, [pc, #12]	; (8016e7c <rcutils_get_env+0x2c>)
 8016e70:	4770      	bx	lr
 8016e72:	bf00      	nop
 8016e74:	0801f238 	.word	0x0801f238
 8016e78:	0801f35c 	.word	0x0801f35c
 8016e7c:	0801f21c 	.word	0x0801f21c

08016e80 <rcutils_repl_str>:
 8016e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e84:	ed2d 8b02 	vpush	{d8}
 8016e88:	b087      	sub	sp, #28
 8016e8a:	4680      	mov	r8, r0
 8016e8c:	4608      	mov	r0, r1
 8016e8e:	f8cd 8000 	str.w	r8, [sp]
 8016e92:	ee08 2a10 	vmov	s16, r2
 8016e96:	468a      	mov	sl, r1
 8016e98:	4699      	mov	r9, r3
 8016e9a:	f7e9 f9ab 	bl	80001f4 <strlen>
 8016e9e:	2600      	movs	r6, #0
 8016ea0:	4647      	mov	r7, r8
 8016ea2:	9001      	str	r0, [sp, #4]
 8016ea4:	46b3      	mov	fp, r6
 8016ea6:	2510      	movs	r5, #16
 8016ea8:	46b0      	mov	r8, r6
 8016eaa:	e01d      	b.n	8016ee8 <rcutils_repl_str+0x68>
 8016eac:	f10b 0b01 	add.w	fp, fp, #1
 8016eb0:	455e      	cmp	r6, fp
 8016eb2:	d211      	bcs.n	8016ed8 <rcutils_repl_str+0x58>
 8016eb4:	442e      	add	r6, r5
 8016eb6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016eba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016ebe:	00b1      	lsls	r1, r6, #2
 8016ec0:	4798      	blx	r3
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	f000 8084 	beq.w	8016fd0 <rcutils_repl_str+0x150>
 8016ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ecc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016ed0:	bf28      	it	cs
 8016ed2:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016ed6:	4680      	mov	r8, r0
 8016ed8:	9a00      	ldr	r2, [sp, #0]
 8016eda:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016ede:	1aa2      	subs	r2, r4, r2
 8016ee0:	f843 2c04 	str.w	r2, [r3, #-4]
 8016ee4:	9b01      	ldr	r3, [sp, #4]
 8016ee6:	18e7      	adds	r7, r4, r3
 8016ee8:	4651      	mov	r1, sl
 8016eea:	4638      	mov	r0, r7
 8016eec:	f004 f924 	bl	801b138 <strstr>
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	4640      	mov	r0, r8
 8016ef4:	2c00      	cmp	r4, #0
 8016ef6:	d1d9      	bne.n	8016eac <rcutils_repl_str+0x2c>
 8016ef8:	46b8      	mov	r8, r7
 8016efa:	4607      	mov	r7, r0
 8016efc:	4640      	mov	r0, r8
 8016efe:	f7e9 f979 	bl	80001f4 <strlen>
 8016f02:	9b00      	ldr	r3, [sp, #0]
 8016f04:	eba8 0303 	sub.w	r3, r8, r3
 8016f08:	181d      	adds	r5, r3, r0
 8016f0a:	9504      	str	r5, [sp, #16]
 8016f0c:	f1bb 0f00 	cmp.w	fp, #0
 8016f10:	d03d      	beq.n	8016f8e <rcutils_repl_str+0x10e>
 8016f12:	ee18 0a10 	vmov	r0, s16
 8016f16:	f7e9 f96d 	bl	80001f4 <strlen>
 8016f1a:	9b01      	ldr	r3, [sp, #4]
 8016f1c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016f20:	1ac3      	subs	r3, r0, r3
 8016f22:	fb0b 5303 	mla	r3, fp, r3, r5
 8016f26:	9305      	str	r3, [sp, #20]
 8016f28:	4606      	mov	r6, r0
 8016f2a:	1c58      	adds	r0, r3, #1
 8016f2c:	f8d9 3000 	ldr.w	r3, [r9]
 8016f30:	4798      	blx	r3
 8016f32:	9003      	str	r0, [sp, #12]
 8016f34:	2800      	cmp	r0, #0
 8016f36:	d04c      	beq.n	8016fd2 <rcutils_repl_str+0x152>
 8016f38:	683a      	ldr	r2, [r7, #0]
 8016f3a:	9900      	ldr	r1, [sp, #0]
 8016f3c:	f002 ff1a 	bl	8019d74 <memcpy>
 8016f40:	9b03      	ldr	r3, [sp, #12]
 8016f42:	683d      	ldr	r5, [r7, #0]
 8016f44:	ee18 8a10 	vmov	r8, s16
 8016f48:	441d      	add	r5, r3
 8016f4a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8016f4e:	9302      	str	r3, [sp, #8]
 8016f50:	46ba      	mov	sl, r7
 8016f52:	4632      	mov	r2, r6
 8016f54:	4641      	mov	r1, r8
 8016f56:	4628      	mov	r0, r5
 8016f58:	f002 ff0c 	bl	8019d74 <memcpy>
 8016f5c:	9b01      	ldr	r3, [sp, #4]
 8016f5e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016f62:	441a      	add	r2, r3
 8016f64:	9b00      	ldr	r3, [sp, #0]
 8016f66:	1899      	adds	r1, r3, r2
 8016f68:	9b02      	ldr	r3, [sp, #8]
 8016f6a:	4435      	add	r5, r6
 8016f6c:	429c      	cmp	r4, r3
 8016f6e:	4628      	mov	r0, r5
 8016f70:	d025      	beq.n	8016fbe <rcutils_repl_str+0x13e>
 8016f72:	f8da 3000 	ldr.w	r3, [sl]
 8016f76:	3401      	adds	r4, #1
 8016f78:	1a9a      	subs	r2, r3, r2
 8016f7a:	4415      	add	r5, r2
 8016f7c:	f002 fefa 	bl	8019d74 <memcpy>
 8016f80:	455c      	cmp	r4, fp
 8016f82:	d3e6      	bcc.n	8016f52 <rcutils_repl_str+0xd2>
 8016f84:	9a03      	ldr	r2, [sp, #12]
 8016f86:	9905      	ldr	r1, [sp, #20]
 8016f88:	2300      	movs	r3, #0
 8016f8a:	5453      	strb	r3, [r2, r1]
 8016f8c:	e00b      	b.n	8016fa6 <rcutils_repl_str+0x126>
 8016f8e:	4628      	mov	r0, r5
 8016f90:	f8d9 3000 	ldr.w	r3, [r9]
 8016f94:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016f98:	3001      	adds	r0, #1
 8016f9a:	4798      	blx	r3
 8016f9c:	9003      	str	r0, [sp, #12]
 8016f9e:	b110      	cbz	r0, 8016fa6 <rcutils_repl_str+0x126>
 8016fa0:	9900      	ldr	r1, [sp, #0]
 8016fa2:	f004 f8ad 	bl	801b100 <strcpy>
 8016fa6:	4638      	mov	r0, r7
 8016fa8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016fac:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016fb0:	4798      	blx	r3
 8016fb2:	9803      	ldr	r0, [sp, #12]
 8016fb4:	b007      	add	sp, #28
 8016fb6:	ecbd 8b02 	vpop	{d8}
 8016fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fbe:	9b04      	ldr	r3, [sp, #16]
 8016fc0:	3401      	adds	r4, #1
 8016fc2:	1a9a      	subs	r2, r3, r2
 8016fc4:	4415      	add	r5, r2
 8016fc6:	f002 fed5 	bl	8019d74 <memcpy>
 8016fca:	455c      	cmp	r4, fp
 8016fcc:	d3c1      	bcc.n	8016f52 <rcutils_repl_str+0xd2>
 8016fce:	e7d9      	b.n	8016f84 <rcutils_repl_str+0x104>
 8016fd0:	4647      	mov	r7, r8
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	9303      	str	r3, [sp, #12]
 8016fd6:	e7e6      	b.n	8016fa6 <rcutils_repl_str+0x126>

08016fd8 <rcutils_snprintf>:
 8016fd8:	b40c      	push	{r2, r3}
 8016fda:	b530      	push	{r4, r5, lr}
 8016fdc:	b083      	sub	sp, #12
 8016fde:	ab06      	add	r3, sp, #24
 8016fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fe4:	9301      	str	r3, [sp, #4]
 8016fe6:	b152      	cbz	r2, 8016ffe <rcutils_snprintf+0x26>
 8016fe8:	b138      	cbz	r0, 8016ffa <rcutils_snprintf+0x22>
 8016fea:	b141      	cbz	r1, 8016ffe <rcutils_snprintf+0x26>
 8016fec:	f005 f878 	bl	801c0e0 <vsniprintf>
 8016ff0:	b003      	add	sp, #12
 8016ff2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ff6:	b002      	add	sp, #8
 8016ff8:	4770      	bx	lr
 8016ffa:	2900      	cmp	r1, #0
 8016ffc:	d0f6      	beq.n	8016fec <rcutils_snprintf+0x14>
 8016ffe:	f002 fd3d 	bl	8019a7c <__errno>
 8017002:	2316      	movs	r3, #22
 8017004:	6003      	str	r3, [r0, #0]
 8017006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801700a:	e7f1      	b.n	8016ff0 <rcutils_snprintf+0x18>

0801700c <rcutils_vsnprintf>:
 801700c:	b570      	push	{r4, r5, r6, lr}
 801700e:	b13a      	cbz	r2, 8017020 <rcutils_vsnprintf+0x14>
 8017010:	b120      	cbz	r0, 801701c <rcutils_vsnprintf+0x10>
 8017012:	b129      	cbz	r1, 8017020 <rcutils_vsnprintf+0x14>
 8017014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017018:	f005 b862 	b.w	801c0e0 <vsniprintf>
 801701c:	2900      	cmp	r1, #0
 801701e:	d0f9      	beq.n	8017014 <rcutils_vsnprintf+0x8>
 8017020:	f002 fd2c 	bl	8019a7c <__errno>
 8017024:	2316      	movs	r3, #22
 8017026:	6003      	str	r3, [r0, #0]
 8017028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801702c:	bd70      	pop	{r4, r5, r6, pc}
 801702e:	bf00      	nop

08017030 <rcutils_strdup>:
 8017030:	b084      	sub	sp, #16
 8017032:	b570      	push	{r4, r5, r6, lr}
 8017034:	b082      	sub	sp, #8
 8017036:	ac07      	add	r4, sp, #28
 8017038:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801703c:	4605      	mov	r5, r0
 801703e:	b1b0      	cbz	r0, 801706e <rcutils_strdup+0x3e>
 8017040:	f7e9 f8d8 	bl	80001f4 <strlen>
 8017044:	1c42      	adds	r2, r0, #1
 8017046:	9b07      	ldr	r3, [sp, #28]
 8017048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801704a:	9201      	str	r2, [sp, #4]
 801704c:	4606      	mov	r6, r0
 801704e:	4610      	mov	r0, r2
 8017050:	4798      	blx	r3
 8017052:	4604      	mov	r4, r0
 8017054:	b128      	cbz	r0, 8017062 <rcutils_strdup+0x32>
 8017056:	9a01      	ldr	r2, [sp, #4]
 8017058:	4629      	mov	r1, r5
 801705a:	f002 fe8b 	bl	8019d74 <memcpy>
 801705e:	2300      	movs	r3, #0
 8017060:	55a3      	strb	r3, [r4, r6]
 8017062:	4620      	mov	r0, r4
 8017064:	b002      	add	sp, #8
 8017066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801706a:	b004      	add	sp, #16
 801706c:	4770      	bx	lr
 801706e:	4604      	mov	r4, r0
 8017070:	e7f7      	b.n	8017062 <rcutils_strdup+0x32>
 8017072:	bf00      	nop

08017074 <rcutils_strndup>:
 8017074:	b082      	sub	sp, #8
 8017076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017078:	460e      	mov	r6, r1
 801707a:	a906      	add	r1, sp, #24
 801707c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017080:	4605      	mov	r5, r0
 8017082:	b180      	cbz	r0, 80170a6 <rcutils_strndup+0x32>
 8017084:	1c77      	adds	r7, r6, #1
 8017086:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017088:	4638      	mov	r0, r7
 801708a:	4790      	blx	r2
 801708c:	4604      	mov	r4, r0
 801708e:	b128      	cbz	r0, 801709c <rcutils_strndup+0x28>
 8017090:	463a      	mov	r2, r7
 8017092:	4629      	mov	r1, r5
 8017094:	f002 fe6e 	bl	8019d74 <memcpy>
 8017098:	2300      	movs	r3, #0
 801709a:	55a3      	strb	r3, [r4, r6]
 801709c:	4620      	mov	r0, r4
 801709e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80170a2:	b002      	add	sp, #8
 80170a4:	4770      	bx	lr
 80170a6:	4604      	mov	r4, r0
 80170a8:	e7f8      	b.n	801709c <rcutils_strndup+0x28>
 80170aa:	bf00      	nop

080170ac <rmw_get_zero_initialized_context>:
 80170ac:	b510      	push	{r4, lr}
 80170ae:	2250      	movs	r2, #80	; 0x50
 80170b0:	4604      	mov	r4, r0
 80170b2:	2100      	movs	r1, #0
 80170b4:	f002 fe86 	bl	8019dc4 <memset>
 80170b8:	4620      	mov	r0, r4
 80170ba:	bd10      	pop	{r4, pc}

080170bc <rmw_get_default_subscription_options>:
 80170bc:	2200      	movs	r2, #0
 80170be:	6002      	str	r2, [r0, #0]
 80170c0:	7102      	strb	r2, [r0, #4]
 80170c2:	4770      	bx	lr

080170c4 <rmw_get_zero_initialized_message_info>:
 80170c4:	b470      	push	{r4, r5, r6}
 80170c6:	4d07      	ldr	r5, [pc, #28]	; (80170e4 <rmw_get_zero_initialized_message_info+0x20>)
 80170c8:	4606      	mov	r6, r0
 80170ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170cc:	4634      	mov	r4, r6
 80170ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80170d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80170dc:	4630      	mov	r0, r6
 80170de:	bc70      	pop	{r4, r5, r6}
 80170e0:	4770      	bx	lr
 80170e2:	bf00      	nop
 80170e4:	0801ec10 	.word	0x0801ec10

080170e8 <rmw_validate_namespace_with_size>:
 80170e8:	b340      	cbz	r0, 801713c <rmw_validate_namespace_with_size+0x54>
 80170ea:	b5d0      	push	{r4, r6, r7, lr}
 80170ec:	4614      	mov	r4, r2
 80170ee:	b0c2      	sub	sp, #264	; 0x108
 80170f0:	b332      	cbz	r2, 8017140 <rmw_validate_namespace_with_size+0x58>
 80170f2:	2901      	cmp	r1, #1
 80170f4:	460f      	mov	r7, r1
 80170f6:	461e      	mov	r6, r3
 80170f8:	d102      	bne.n	8017100 <rmw_validate_namespace_with_size+0x18>
 80170fa:	7803      	ldrb	r3, [r0, #0]
 80170fc:	2b2f      	cmp	r3, #47	; 0x2f
 80170fe:	d019      	beq.n	8017134 <rmw_validate_namespace_with_size+0x4c>
 8017100:	aa01      	add	r2, sp, #4
 8017102:	4669      	mov	r1, sp
 8017104:	f7f8 fc44 	bl	800f990 <rmw_validate_full_topic_name>
 8017108:	b990      	cbnz	r0, 8017130 <rmw_validate_namespace_with_size+0x48>
 801710a:	9b00      	ldr	r3, [sp, #0]
 801710c:	b14b      	cbz	r3, 8017122 <rmw_validate_namespace_with_size+0x3a>
 801710e:	2b07      	cmp	r3, #7
 8017110:	d007      	beq.n	8017122 <rmw_validate_namespace_with_size+0x3a>
 8017112:	1e5a      	subs	r2, r3, #1
 8017114:	2a05      	cmp	r2, #5
 8017116:	d82b      	bhi.n	8017170 <rmw_validate_namespace_with_size+0x88>
 8017118:	e8df f002 	tbb	[pc, r2]
 801711c:	24211e1b 	.word	0x24211e1b
 8017120:	1427      	.short	0x1427
 8017122:	2ff5      	cmp	r7, #245	; 0xf5
 8017124:	d906      	bls.n	8017134 <rmw_validate_namespace_with_size+0x4c>
 8017126:	2307      	movs	r3, #7
 8017128:	6023      	str	r3, [r4, #0]
 801712a:	b10e      	cbz	r6, 8017130 <rmw_validate_namespace_with_size+0x48>
 801712c:	23f4      	movs	r3, #244	; 0xf4
 801712e:	6033      	str	r3, [r6, #0]
 8017130:	b042      	add	sp, #264	; 0x108
 8017132:	bdd0      	pop	{r4, r6, r7, pc}
 8017134:	2000      	movs	r0, #0
 8017136:	6020      	str	r0, [r4, #0]
 8017138:	b042      	add	sp, #264	; 0x108
 801713a:	bdd0      	pop	{r4, r6, r7, pc}
 801713c:	200b      	movs	r0, #11
 801713e:	4770      	bx	lr
 8017140:	200b      	movs	r0, #11
 8017142:	e7f5      	b.n	8017130 <rmw_validate_namespace_with_size+0x48>
 8017144:	2306      	movs	r3, #6
 8017146:	6023      	str	r3, [r4, #0]
 8017148:	2e00      	cmp	r6, #0
 801714a:	d0f1      	beq.n	8017130 <rmw_validate_namespace_with_size+0x48>
 801714c:	9b01      	ldr	r3, [sp, #4]
 801714e:	6033      	str	r3, [r6, #0]
 8017150:	e7ee      	b.n	8017130 <rmw_validate_namespace_with_size+0x48>
 8017152:	2301      	movs	r3, #1
 8017154:	6023      	str	r3, [r4, #0]
 8017156:	e7f7      	b.n	8017148 <rmw_validate_namespace_with_size+0x60>
 8017158:	2302      	movs	r3, #2
 801715a:	6023      	str	r3, [r4, #0]
 801715c:	e7f4      	b.n	8017148 <rmw_validate_namespace_with_size+0x60>
 801715e:	2303      	movs	r3, #3
 8017160:	6023      	str	r3, [r4, #0]
 8017162:	e7f1      	b.n	8017148 <rmw_validate_namespace_with_size+0x60>
 8017164:	2304      	movs	r3, #4
 8017166:	6023      	str	r3, [r4, #0]
 8017168:	e7ee      	b.n	8017148 <rmw_validate_namespace_with_size+0x60>
 801716a:	2305      	movs	r3, #5
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	e7eb      	b.n	8017148 <rmw_validate_namespace_with_size+0x60>
 8017170:	4a03      	ldr	r2, [pc, #12]	; (8017180 <rmw_validate_namespace_with_size+0x98>)
 8017172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017176:	a802      	add	r0, sp, #8
 8017178:	f7ff ff2e 	bl	8016fd8 <rcutils_snprintf>
 801717c:	2001      	movs	r0, #1
 801717e:	e7d7      	b.n	8017130 <rmw_validate_namespace_with_size+0x48>
 8017180:	0801f254 	.word	0x0801f254

08017184 <rmw_validate_namespace>:
 8017184:	b168      	cbz	r0, 80171a2 <rmw_validate_namespace+0x1e>
 8017186:	b570      	push	{r4, r5, r6, lr}
 8017188:	460d      	mov	r5, r1
 801718a:	4616      	mov	r6, r2
 801718c:	4604      	mov	r4, r0
 801718e:	f7e9 f831 	bl	80001f4 <strlen>
 8017192:	4633      	mov	r3, r6
 8017194:	4601      	mov	r1, r0
 8017196:	462a      	mov	r2, r5
 8017198:	4620      	mov	r0, r4
 801719a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801719e:	f7ff bfa3 	b.w	80170e8 <rmw_validate_namespace_with_size>
 80171a2:	200b      	movs	r0, #11
 80171a4:	4770      	bx	lr
 80171a6:	bf00      	nop

080171a8 <rmw_namespace_validation_result_string>:
 80171a8:	2807      	cmp	r0, #7
 80171aa:	bf9a      	itte	ls
 80171ac:	4b02      	ldrls	r3, [pc, #8]	; (80171b8 <rmw_namespace_validation_result_string+0x10>)
 80171ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80171b2:	4802      	ldrhi	r0, [pc, #8]	; (80171bc <rmw_namespace_validation_result_string+0x14>)
 80171b4:	4770      	bx	lr
 80171b6:	bf00      	nop
 80171b8:	0801f44c 	.word	0x0801f44c
 80171bc:	0801f2a4 	.word	0x0801f2a4

080171c0 <rmw_validate_node_name>:
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d03b      	beq.n	801723c <rmw_validate_node_name+0x7c>
 80171c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171c8:	460f      	mov	r7, r1
 80171ca:	2900      	cmp	r1, #0
 80171cc:	d038      	beq.n	8017240 <rmw_validate_node_name+0x80>
 80171ce:	4615      	mov	r5, r2
 80171d0:	4604      	mov	r4, r0
 80171d2:	f7e9 f80f 	bl	80001f4 <strlen>
 80171d6:	b1e0      	cbz	r0, 8017212 <rmw_validate_node_name+0x52>
 80171d8:	1e63      	subs	r3, r4, #1
 80171da:	eb03 0e00 	add.w	lr, r3, r0
 80171de:	f1c4 0c01 	rsb	ip, r4, #1
 80171e2:	eb0c 0803 	add.w	r8, ip, r3
 80171e6:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80171ea:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80171ee:	f026 0220 	bic.w	r2, r6, #32
 80171f2:	2909      	cmp	r1, #9
 80171f4:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 80171f8:	d913      	bls.n	8017222 <rmw_validate_node_name+0x62>
 80171fa:	2a19      	cmp	r2, #25
 80171fc:	d911      	bls.n	8017222 <rmw_validate_node_name+0x62>
 80171fe:	2e5f      	cmp	r6, #95	; 0x5f
 8017200:	d00f      	beq.n	8017222 <rmw_validate_node_name+0x62>
 8017202:	2302      	movs	r3, #2
 8017204:	603b      	str	r3, [r7, #0]
 8017206:	b10d      	cbz	r5, 801720c <rmw_validate_node_name+0x4c>
 8017208:	f8c5 8000 	str.w	r8, [r5]
 801720c:	2000      	movs	r0, #0
 801720e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017212:	2301      	movs	r3, #1
 8017214:	603b      	str	r3, [r7, #0]
 8017216:	2d00      	cmp	r5, #0
 8017218:	d0f8      	beq.n	801720c <rmw_validate_node_name+0x4c>
 801721a:	2000      	movs	r0, #0
 801721c:	6028      	str	r0, [r5, #0]
 801721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017222:	4573      	cmp	r3, lr
 8017224:	d1dd      	bne.n	80171e2 <rmw_validate_node_name+0x22>
 8017226:	7822      	ldrb	r2, [r4, #0]
 8017228:	4b0d      	ldr	r3, [pc, #52]	; (8017260 <rmw_validate_node_name+0xa0>)
 801722a:	5cd3      	ldrb	r3, [r2, r3]
 801722c:	f013 0304 	ands.w	r3, r3, #4
 8017230:	d110      	bne.n	8017254 <rmw_validate_node_name+0x94>
 8017232:	28ff      	cmp	r0, #255	; 0xff
 8017234:	d806      	bhi.n	8017244 <rmw_validate_node_name+0x84>
 8017236:	603b      	str	r3, [r7, #0]
 8017238:	4618      	mov	r0, r3
 801723a:	e7e8      	b.n	801720e <rmw_validate_node_name+0x4e>
 801723c:	200b      	movs	r0, #11
 801723e:	4770      	bx	lr
 8017240:	200b      	movs	r0, #11
 8017242:	e7e4      	b.n	801720e <rmw_validate_node_name+0x4e>
 8017244:	2204      	movs	r2, #4
 8017246:	603a      	str	r2, [r7, #0]
 8017248:	2d00      	cmp	r5, #0
 801724a:	d0df      	beq.n	801720c <rmw_validate_node_name+0x4c>
 801724c:	22fe      	movs	r2, #254	; 0xfe
 801724e:	4618      	mov	r0, r3
 8017250:	602a      	str	r2, [r5, #0]
 8017252:	e7dc      	b.n	801720e <rmw_validate_node_name+0x4e>
 8017254:	2303      	movs	r3, #3
 8017256:	603b      	str	r3, [r7, #0]
 8017258:	2d00      	cmp	r5, #0
 801725a:	d1de      	bne.n	801721a <rmw_validate_node_name+0x5a>
 801725c:	e7d6      	b.n	801720c <rmw_validate_node_name+0x4c>
 801725e:	bf00      	nop
 8017260:	0801f5a1 	.word	0x0801f5a1

08017264 <rmw_node_name_validation_result_string>:
 8017264:	2804      	cmp	r0, #4
 8017266:	bf9a      	itte	ls
 8017268:	4b02      	ldrls	r3, [pc, #8]	; (8017274 <rmw_node_name_validation_result_string+0x10>)
 801726a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801726e:	4802      	ldrhi	r0, [pc, #8]	; (8017278 <rmw_node_name_validation_result_string+0x14>)
 8017270:	4770      	bx	lr
 8017272:	bf00      	nop
 8017274:	0801f558 	.word	0x0801f558
 8017278:	0801f46c 	.word	0x0801f46c

0801727c <on_status>:
 801727c:	b082      	sub	sp, #8
 801727e:	b002      	add	sp, #8
 8017280:	4770      	bx	lr
 8017282:	bf00      	nop

08017284 <on_topic>:
 8017284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017288:	4a21      	ldr	r2, [pc, #132]	; (8017310 <on_topic+0x8c>)
 801728a:	b094      	sub	sp, #80	; 0x50
 801728c:	6812      	ldr	r2, [r2, #0]
 801728e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017290:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8017294:	9113      	str	r1, [sp, #76]	; 0x4c
 8017296:	9312      	str	r3, [sp, #72]	; 0x48
 8017298:	b3ba      	cbz	r2, 801730a <on_topic+0x86>
 801729a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801729e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80172a2:	e001      	b.n	80172a8 <on_topic+0x24>
 80172a4:	6892      	ldr	r2, [r2, #8]
 80172a6:	b382      	cbz	r2, 801730a <on_topic+0x86>
 80172a8:	68d4      	ldr	r4, [r2, #12]
 80172aa:	8aa3      	ldrh	r3, [r4, #20]
 80172ac:	428b      	cmp	r3, r1
 80172ae:	d1f9      	bne.n	80172a4 <on_topic+0x20>
 80172b0:	7da3      	ldrb	r3, [r4, #22]
 80172b2:	4283      	cmp	r3, r0
 80172b4:	d1f6      	bne.n	80172a4 <on_topic+0x20>
 80172b6:	2248      	movs	r2, #72	; 0x48
 80172b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80172bc:	4668      	mov	r0, sp
 80172be:	f002 fd59 	bl	8019d74 <memcpy>
 80172c2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80172c6:	4620      	mov	r0, r4
 80172c8:	f7f9 fc30 	bl	8010b2c <rmw_uxrce_get_static_input_buffer_for_entity>
 80172cc:	4607      	mov	r7, r0
 80172ce:	b1e0      	cbz	r0, 801730a <on_topic+0x86>
 80172d0:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80172d4:	462a      	mov	r2, r5
 80172d6:	4630      	mov	r0, r6
 80172d8:	f108 0110 	add.w	r1, r8, #16
 80172dc:	f000 fd74 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80172e0:	b930      	cbnz	r0, 80172f0 <on_topic+0x6c>
 80172e2:	480c      	ldr	r0, [pc, #48]	; (8017314 <on_topic+0x90>)
 80172e4:	4639      	mov	r1, r7
 80172e6:	b014      	add	sp, #80	; 0x50
 80172e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172ec:	f000 b8ba 	b.w	8017464 <put_memory>
 80172f0:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80172f4:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 80172f8:	f000 fc90 	bl	8017c1c <rmw_uros_epoch_nanos>
 80172fc:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017300:	2305      	movs	r3, #5
 8017302:	e9c2 0100 	strd	r0, r1, [r2]
 8017306:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801730a:	b014      	add	sp, #80	; 0x50
 801730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017310:	2000d1d4 	.word	0x2000d1d4
 8017314:	20009f68 	.word	0x20009f68

08017318 <on_request>:
 8017318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801731c:	4822      	ldr	r0, [pc, #136]	; (80173a8 <on_request+0x90>)
 801731e:	b095      	sub	sp, #84	; 0x54
 8017320:	9113      	str	r1, [sp, #76]	; 0x4c
 8017322:	6801      	ldr	r1, [r0, #0]
 8017324:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017326:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801732a:	2900      	cmp	r1, #0
 801732c:	d039      	beq.n	80173a2 <on_request+0x8a>
 801732e:	461d      	mov	r5, r3
 8017330:	e001      	b.n	8017336 <on_request+0x1e>
 8017332:	6889      	ldr	r1, [r1, #8]
 8017334:	b3a9      	cbz	r1, 80173a2 <on_request+0x8a>
 8017336:	68cc      	ldr	r4, [r1, #12]
 8017338:	8b20      	ldrh	r0, [r4, #24]
 801733a:	4290      	cmp	r0, r2
 801733c:	d1f9      	bne.n	8017332 <on_request+0x1a>
 801733e:	2248      	movs	r2, #72	; 0x48
 8017340:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017344:	4668      	mov	r0, sp
 8017346:	f002 fd15 	bl	8019d74 <memcpy>
 801734a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801734e:	4620      	mov	r0, r4
 8017350:	f7f9 fbec 	bl	8010b2c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017354:	4680      	mov	r8, r0
 8017356:	b320      	cbz	r0, 80173a2 <on_request+0x8a>
 8017358:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801735c:	4632      	mov	r2, r6
 801735e:	4638      	mov	r0, r7
 8017360:	f109 0110 	add.w	r1, r9, #16
 8017364:	f000 fd30 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 8017368:	b930      	cbnz	r0, 8017378 <on_request+0x60>
 801736a:	4810      	ldr	r0, [pc, #64]	; (80173ac <on_request+0x94>)
 801736c:	4641      	mov	r1, r8
 801736e:	b015      	add	sp, #84	; 0x54
 8017370:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017374:	f000 b876 	b.w	8017464 <put_memory>
 8017378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801737a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801737e:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8017382:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017388:	e895 0003 	ldmia.w	r5, {r0, r1}
 801738c:	e884 0003 	stmia.w	r4, {r0, r1}
 8017390:	f000 fc44 	bl	8017c1c <rmw_uros_epoch_nanos>
 8017394:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017398:	2303      	movs	r3, #3
 801739a:	e9c2 0100 	strd	r0, r1, [r2]
 801739e:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80173a2:	b015      	add	sp, #84	; 0x54
 80173a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173a8:	2000d1c4 	.word	0x2000d1c4
 80173ac:	20009f68 	.word	0x20009f68

080173b0 <on_reply>:
 80173b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173b4:	4821      	ldr	r0, [pc, #132]	; (801743c <on_reply+0x8c>)
 80173b6:	b095      	sub	sp, #84	; 0x54
 80173b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80173ba:	6801      	ldr	r1, [r0, #0]
 80173bc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80173be:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80173c2:	b3b9      	cbz	r1, 8017434 <on_reply+0x84>
 80173c4:	461d      	mov	r5, r3
 80173c6:	e001      	b.n	80173cc <on_reply+0x1c>
 80173c8:	6889      	ldr	r1, [r1, #8]
 80173ca:	b399      	cbz	r1, 8017434 <on_reply+0x84>
 80173cc:	68cc      	ldr	r4, [r1, #12]
 80173ce:	8b20      	ldrh	r0, [r4, #24]
 80173d0:	4290      	cmp	r0, r2
 80173d2:	d1f9      	bne.n	80173c8 <on_reply+0x18>
 80173d4:	2248      	movs	r2, #72	; 0x48
 80173d6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80173da:	4668      	mov	r0, sp
 80173dc:	f002 fcca 	bl	8019d74 <memcpy>
 80173e0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80173e4:	4620      	mov	r0, r4
 80173e6:	f7f9 fba1 	bl	8010b2c <rmw_uxrce_get_static_input_buffer_for_entity>
 80173ea:	4680      	mov	r8, r0
 80173ec:	b310      	cbz	r0, 8017434 <on_reply+0x84>
 80173ee:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80173f2:	4632      	mov	r2, r6
 80173f4:	4638      	mov	r0, r7
 80173f6:	f109 0110 	add.w	r1, r9, #16
 80173fa:	f000 fce5 	bl	8017dc8 <ucdr_deserialize_array_uint8_t>
 80173fe:	b930      	cbnz	r0, 801740e <on_reply+0x5e>
 8017400:	480f      	ldr	r0, [pc, #60]	; (8017440 <on_reply+0x90>)
 8017402:	4641      	mov	r1, r8
 8017404:	b015      	add	sp, #84	; 0x54
 8017406:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801740a:	f000 b82b 	b.w	8017464 <put_memory>
 801740e:	b2aa      	uxth	r2, r5
 8017410:	2300      	movs	r3, #0
 8017412:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8017416:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801741a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801741e:	e9c1 2300 	strd	r2, r3, [r1]
 8017422:	f000 fbfb 	bl	8017c1c <rmw_uros_epoch_nanos>
 8017426:	f609 0218 	addw	r2, r9, #2072	; 0x818
 801742a:	2304      	movs	r3, #4
 801742c:	e9c2 0100 	strd	r0, r1, [r2]
 8017430:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017434:	b015      	add	sp, #84	; 0x54
 8017436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801743a:	bf00      	nop
 801743c:	2000a7f8 	.word	0x2000a7f8
 8017440:	20009f68 	.word	0x20009f68

08017444 <get_memory>:
 8017444:	4603      	mov	r3, r0
 8017446:	6840      	ldr	r0, [r0, #4]
 8017448:	b158      	cbz	r0, 8017462 <get_memory+0x1e>
 801744a:	6882      	ldr	r2, [r0, #8]
 801744c:	605a      	str	r2, [r3, #4]
 801744e:	b10a      	cbz	r2, 8017454 <get_memory+0x10>
 8017450:	2100      	movs	r1, #0
 8017452:	6051      	str	r1, [r2, #4]
 8017454:	681a      	ldr	r2, [r3, #0]
 8017456:	6082      	str	r2, [r0, #8]
 8017458:	b102      	cbz	r2, 801745c <get_memory+0x18>
 801745a:	6050      	str	r0, [r2, #4]
 801745c:	2200      	movs	r2, #0
 801745e:	6042      	str	r2, [r0, #4]
 8017460:	6018      	str	r0, [r3, #0]
 8017462:	4770      	bx	lr

08017464 <put_memory>:
 8017464:	684b      	ldr	r3, [r1, #4]
 8017466:	b10b      	cbz	r3, 801746c <put_memory+0x8>
 8017468:	688a      	ldr	r2, [r1, #8]
 801746a:	609a      	str	r2, [r3, #8]
 801746c:	688a      	ldr	r2, [r1, #8]
 801746e:	b102      	cbz	r2, 8017472 <put_memory+0xe>
 8017470:	6053      	str	r3, [r2, #4]
 8017472:	6803      	ldr	r3, [r0, #0]
 8017474:	428b      	cmp	r3, r1
 8017476:	6843      	ldr	r3, [r0, #4]
 8017478:	bf08      	it	eq
 801747a:	6002      	streq	r2, [r0, #0]
 801747c:	608b      	str	r3, [r1, #8]
 801747e:	b103      	cbz	r3, 8017482 <put_memory+0x1e>
 8017480:	6059      	str	r1, [r3, #4]
 8017482:	2300      	movs	r3, #0
 8017484:	604b      	str	r3, [r1, #4]
 8017486:	6041      	str	r1, [r0, #4]
 8017488:	4770      	bx	lr
 801748a:	bf00      	nop

0801748c <rmw_destroy_client>:
 801748c:	b570      	push	{r4, r5, r6, lr}
 801748e:	b128      	cbz	r0, 801749c <rmw_destroy_client+0x10>
 8017490:	4604      	mov	r4, r0
 8017492:	6800      	ldr	r0, [r0, #0]
 8017494:	460d      	mov	r5, r1
 8017496:	f7f9 fcb7 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 801749a:	b910      	cbnz	r0, 80174a2 <rmw_destroy_client+0x16>
 801749c:	2401      	movs	r4, #1
 801749e:	4620      	mov	r0, r4
 80174a0:	bd70      	pop	{r4, r5, r6, pc}
 80174a2:	6863      	ldr	r3, [r4, #4]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d0f9      	beq.n	801749c <rmw_destroy_client+0x10>
 80174a8:	2d00      	cmp	r5, #0
 80174aa:	d0f7      	beq.n	801749c <rmw_destroy_client+0x10>
 80174ac:	6828      	ldr	r0, [r5, #0]
 80174ae:	f7f9 fcab 	bl	8010e08 <is_uxrce_rmw_identifier_valid>
 80174b2:	2800      	cmp	r0, #0
 80174b4:	d0f2      	beq.n	801749c <rmw_destroy_client+0x10>
 80174b6:	686e      	ldr	r6, [r5, #4]
 80174b8:	2e00      	cmp	r6, #0
 80174ba:	d0ef      	beq.n	801749c <rmw_destroy_client+0x10>
 80174bc:	6864      	ldr	r4, [r4, #4]
 80174be:	6932      	ldr	r2, [r6, #16]
 80174c0:	6920      	ldr	r0, [r4, #16]
 80174c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80174c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80174ca:	6819      	ldr	r1, [r3, #0]
 80174cc:	f7fa f962 	bl	8011794 <uxr_buffer_cancel_data>
 80174d0:	4602      	mov	r2, r0
 80174d2:	6920      	ldr	r0, [r4, #16]
 80174d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80174d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80174dc:	f7f9 fc14 	bl	8010d08 <run_xrce_session>
 80174e0:	6920      	ldr	r0, [r4, #16]
 80174e2:	6932      	ldr	r2, [r6, #16]
 80174e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80174e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80174ec:	6819      	ldr	r1, [r3, #0]
 80174ee:	f7f9 fe27 	bl	8011140 <uxr_buffer_delete_entity>
 80174f2:	4602      	mov	r2, r0
 80174f4:	6920      	ldr	r0, [r4, #16]
 80174f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80174fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80174fe:	f7f9 fc03 	bl	8010d08 <run_xrce_session>
 8017502:	2800      	cmp	r0, #0
 8017504:	4628      	mov	r0, r5
 8017506:	bf14      	ite	ne
 8017508:	2400      	movne	r4, #0
 801750a:	2402      	moveq	r4, #2
 801750c:	f7f9 faec 	bl	8010ae8 <rmw_uxrce_fini_client_memory>
 8017510:	e7c5      	b.n	801749e <rmw_destroy_client+0x12>
 8017512:	bf00      	nop

08017514 <rmw_get_implementation_identifier>:
 8017514:	4b01      	ldr	r3, [pc, #4]	; (801751c <rmw_get_implementation_identifier+0x8>)
 8017516:	6818      	ldr	r0, [r3, #0]
 8017518:	4770      	bx	lr
 801751a:	bf00      	nop
 801751c:	0801f584 	.word	0x0801f584

08017520 <create_topic>:
 8017520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017524:	4605      	mov	r5, r0
 8017526:	b084      	sub	sp, #16
 8017528:	482b      	ldr	r0, [pc, #172]	; (80175d8 <create_topic+0xb8>)
 801752a:	460f      	mov	r7, r1
 801752c:	4616      	mov	r6, r2
 801752e:	f7ff ff89 	bl	8017444 <get_memory>
 8017532:	4604      	mov	r4, r0
 8017534:	2800      	cmp	r0, #0
 8017536:	d036      	beq.n	80175a6 <create_topic+0x86>
 8017538:	692a      	ldr	r2, [r5, #16]
 801753a:	68c4      	ldr	r4, [r0, #12]
 801753c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80175e0 <create_topic+0xc0>
 8017540:	61a5      	str	r5, [r4, #24]
 8017542:	f241 5396 	movw	r3, #5526	; 0x1596
 8017546:	6166      	str	r6, [r4, #20]
 8017548:	5ad0      	ldrh	r0, [r2, r3]
 801754a:	1c41      	adds	r1, r0, #1
 801754c:	52d1      	strh	r1, [r2, r3]
 801754e:	2102      	movs	r1, #2
 8017550:	f7fa f8b8 	bl	80116c4 <uxr_object_id>
 8017554:	4641      	mov	r1, r8
 8017556:	6120      	str	r0, [r4, #16]
 8017558:	223c      	movs	r2, #60	; 0x3c
 801755a:	4638      	mov	r0, r7
 801755c:	f7f9 fc3a 	bl	8010dd4 <generate_topic_name>
 8017560:	4607      	mov	r7, r0
 8017562:	b320      	cbz	r0, 80175ae <create_topic+0x8e>
 8017564:	4f1d      	ldr	r7, [pc, #116]	; (80175dc <create_topic+0xbc>)
 8017566:	4630      	mov	r0, r6
 8017568:	4639      	mov	r1, r7
 801756a:	2264      	movs	r2, #100	; 0x64
 801756c:	f7f9 fc02 	bl	8010d74 <generate_type_name>
 8017570:	4606      	mov	r6, r0
 8017572:	b320      	cbz	r0, 80175be <create_topic+0x9e>
 8017574:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8017578:	2106      	movs	r1, #6
 801757a:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801757e:	9701      	str	r7, [sp, #4]
 8017580:	f8cd 8000 	str.w	r8, [sp]
 8017584:	9102      	str	r1, [sp, #8]
 8017586:	6811      	ldr	r1, [r2, #0]
 8017588:	6922      	ldr	r2, [r4, #16]
 801758a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801758e:	f7f9 fe55 	bl	801123c <uxr_buffer_create_topic_bin>
 8017592:	4602      	mov	r2, r0
 8017594:	6928      	ldr	r0, [r5, #16]
 8017596:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801759a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801759e:	f7f9 fbb3 	bl	8010d08 <run_xrce_session>
 80175a2:	4605      	mov	r5, r0
 80175a4:	b198      	cbz	r0, 80175ce <create_topic+0xae>
 80175a6:	4620      	mov	r0, r4
 80175a8:	b004      	add	sp, #16
 80175aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ae:	4620      	mov	r0, r4
 80175b0:	f7f9 fab0 	bl	8010b14 <rmw_uxrce_fini_topic_memory>
 80175b4:	463c      	mov	r4, r7
 80175b6:	4620      	mov	r0, r4
 80175b8:	b004      	add	sp, #16
 80175ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175be:	4620      	mov	r0, r4
 80175c0:	f7f9 faa8 	bl	8010b14 <rmw_uxrce_fini_topic_memory>
 80175c4:	4634      	mov	r4, r6
 80175c6:	4620      	mov	r0, r4
 80175c8:	b004      	add	sp, #16
 80175ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ce:	4620      	mov	r0, r4
 80175d0:	f7f9 faa0 	bl	8010b14 <rmw_uxrce_fini_topic_memory>
 80175d4:	462c      	mov	r4, r5
 80175d6:	e7e6      	b.n	80175a6 <create_topic+0x86>
 80175d8:	2000d100 	.word	0x2000d100
 80175dc:	20009ea4 	.word	0x20009ea4
 80175e0:	20009e68 	.word	0x20009e68

080175e4 <destroy_topic>:
 80175e4:	b538      	push	{r3, r4, r5, lr}
 80175e6:	6985      	ldr	r5, [r0, #24]
 80175e8:	b1d5      	cbz	r5, 8017620 <destroy_topic+0x3c>
 80175ea:	4604      	mov	r4, r0
 80175ec:	6928      	ldr	r0, [r5, #16]
 80175ee:	6922      	ldr	r2, [r4, #16]
 80175f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80175f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80175f8:	6819      	ldr	r1, [r3, #0]
 80175fa:	f7f9 fda1 	bl	8011140 <uxr_buffer_delete_entity>
 80175fe:	4602      	mov	r2, r0
 8017600:	6928      	ldr	r0, [r5, #16]
 8017602:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017606:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801760a:	f7f9 fb7d 	bl	8010d08 <run_xrce_session>
 801760e:	2800      	cmp	r0, #0
 8017610:	4620      	mov	r0, r4
 8017612:	bf14      	ite	ne
 8017614:	2400      	movne	r4, #0
 8017616:	2402      	moveq	r4, #2
 8017618:	f7f9 fa7c 	bl	8010b14 <rmw_uxrce_fini_topic_memory>
 801761c:	4620      	mov	r0, r4
 801761e:	bd38      	pop	{r3, r4, r5, pc}
 8017620:	2401      	movs	r4, #1
 8017622:	4620      	mov	r0, r4
 8017624:	bd38      	pop	{r3, r4, r5, pc}
 8017626:	bf00      	nop

08017628 <rmw_take_request>:
 8017628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801762c:	4605      	mov	r5, r0
 801762e:	6800      	ldr	r0, [r0, #0]
 8017630:	b089      	sub	sp, #36	; 0x24
 8017632:	460c      	mov	r4, r1
 8017634:	4690      	mov	r8, r2
 8017636:	461e      	mov	r6, r3
 8017638:	b128      	cbz	r0, 8017646 <rmw_take_request+0x1e>
 801763a:	4b28      	ldr	r3, [pc, #160]	; (80176dc <rmw_take_request+0xb4>)
 801763c:	6819      	ldr	r1, [r3, #0]
 801763e:	f7e8 fdcf 	bl	80001e0 <strcmp>
 8017642:	2800      	cmp	r0, #0
 8017644:	d146      	bne.n	80176d4 <rmw_take_request+0xac>
 8017646:	b10e      	cbz	r6, 801764c <rmw_take_request+0x24>
 8017648:	2300      	movs	r3, #0
 801764a:	7033      	strb	r3, [r6, #0]
 801764c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017650:	f7f9 fae2 	bl	8010c18 <rmw_uxrce_clean_expired_static_input_buffer>
 8017654:	4648      	mov	r0, r9
 8017656:	f7f9 fab5 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801765a:	4607      	mov	r7, r0
 801765c:	b3b0      	cbz	r0, 80176cc <rmw_take_request+0xa4>
 801765e:	68c5      	ldr	r5, [r0, #12]
 8017660:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8017664:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8017668:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801766c:	7423      	strb	r3, [r4, #16]
 801766e:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8017672:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8017676:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 801767a:	74e2      	strb	r2, [r4, #19]
 801767c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017680:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8017684:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8017688:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 801768c:	61e1      	str	r1, [r4, #28]
 801768e:	6162      	str	r2, [r4, #20]
 8017690:	61a3      	str	r3, [r4, #24]
 8017692:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017696:	689b      	ldr	r3, [r3, #8]
 8017698:	4798      	blx	r3
 801769a:	6844      	ldr	r4, [r0, #4]
 801769c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80176a0:	f105 0110 	add.w	r1, r5, #16
 80176a4:	4668      	mov	r0, sp
 80176a6:	f7f9 fc83 	bl	8010fb0 <ucdr_init_buffer>
 80176aa:	68e3      	ldr	r3, [r4, #12]
 80176ac:	4641      	mov	r1, r8
 80176ae:	4668      	mov	r0, sp
 80176b0:	4798      	blx	r3
 80176b2:	4639      	mov	r1, r7
 80176b4:	4604      	mov	r4, r0
 80176b6:	480a      	ldr	r0, [pc, #40]	; (80176e0 <rmw_take_request+0xb8>)
 80176b8:	f7ff fed4 	bl	8017464 <put_memory>
 80176bc:	b106      	cbz	r6, 80176c0 <rmw_take_request+0x98>
 80176be:	7034      	strb	r4, [r6, #0]
 80176c0:	f084 0001 	eor.w	r0, r4, #1
 80176c4:	b2c0      	uxtb	r0, r0
 80176c6:	b009      	add	sp, #36	; 0x24
 80176c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176cc:	2001      	movs	r0, #1
 80176ce:	b009      	add	sp, #36	; 0x24
 80176d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176d4:	200c      	movs	r0, #12
 80176d6:	b009      	add	sp, #36	; 0x24
 80176d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176dc:	0801f584 	.word	0x0801f584
 80176e0:	20009f68 	.word	0x20009f68

080176e4 <rmw_send_response>:
 80176e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176e6:	4605      	mov	r5, r0
 80176e8:	6800      	ldr	r0, [r0, #0]
 80176ea:	b091      	sub	sp, #68	; 0x44
 80176ec:	460c      	mov	r4, r1
 80176ee:	4617      	mov	r7, r2
 80176f0:	b128      	cbz	r0, 80176fe <rmw_send_response+0x1a>
 80176f2:	4b2a      	ldr	r3, [pc, #168]	; (801779c <rmw_send_response+0xb8>)
 80176f4:	6819      	ldr	r1, [r3, #0]
 80176f6:	f7e8 fd73 	bl	80001e0 <strcmp>
 80176fa:	2800      	cmp	r0, #0
 80176fc:	d143      	bne.n	8017786 <rmw_send_response+0xa2>
 80176fe:	4623      	mov	r3, r4
 8017700:	4626      	mov	r6, r4
 8017702:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8017706:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 801770a:	6859      	ldr	r1, [r3, #4]
 801770c:	686d      	ldr	r5, [r5, #4]
 801770e:	689a      	ldr	r2, [r3, #8]
 8017710:	78b3      	ldrb	r3, [r6, #2]
 8017712:	f894 c000 	ldrb.w	ip, [r4]
 8017716:	6966      	ldr	r6, [r4, #20]
 8017718:	f88d 3016 	strb.w	r3, [sp, #22]
 801771c:	ab02      	add	r3, sp, #8
 801771e:	f8ad e014 	strh.w	lr, [sp, #20]
 8017722:	f88d c017 	strb.w	ip, [sp, #23]
 8017726:	9606      	str	r6, [sp, #24]
 8017728:	c307      	stmia	r3!, {r0, r1, r2}
 801772a:	696b      	ldr	r3, [r5, #20]
 801772c:	6922      	ldr	r2, [r4, #16]
 801772e:	9207      	str	r2, [sp, #28]
 8017730:	68db      	ldr	r3, [r3, #12]
 8017732:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8017734:	4798      	blx	r3
 8017736:	4603      	mov	r3, r0
 8017738:	4638      	mov	r0, r7
 801773a:	685c      	ldr	r4, [r3, #4]
 801773c:	6923      	ldr	r3, [r4, #16]
 801773e:	4798      	blx	r3
 8017740:	6933      	ldr	r3, [r6, #16]
 8017742:	3018      	adds	r0, #24
 8017744:	9000      	str	r0, [sp, #0]
 8017746:	692a      	ldr	r2, [r5, #16]
 8017748:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801774a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801774e:	ab08      	add	r3, sp, #32
 8017750:	f7fc f86c 	bl	801382c <uxr_prepare_output_stream>
 8017754:	b910      	cbnz	r0, 801775c <rmw_send_response+0x78>
 8017756:	2001      	movs	r0, #1
 8017758:	b011      	add	sp, #68	; 0x44
 801775a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801775c:	a902      	add	r1, sp, #8
 801775e:	a808      	add	r0, sp, #32
 8017760:	f7fd f982 	bl	8014a68 <uxr_serialize_SampleIdentity>
 8017764:	68a3      	ldr	r3, [r4, #8]
 8017766:	a908      	add	r1, sp, #32
 8017768:	4638      	mov	r0, r7
 801776a:	4798      	blx	r3
 801776c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8017770:	6930      	ldr	r0, [r6, #16]
 8017772:	2b01      	cmp	r3, #1
 8017774:	d00a      	beq.n	801778c <rmw_send_response+0xa8>
 8017776:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8017778:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801777c:	f7fa fdd0 	bl	8012320 <uxr_run_session_until_confirm_delivery>
 8017780:	2000      	movs	r0, #0
 8017782:	b011      	add	sp, #68	; 0x44
 8017784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017786:	200c      	movs	r0, #12
 8017788:	b011      	add	sp, #68	; 0x44
 801778a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801778c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017790:	f7fa fa0a 	bl	8011ba8 <uxr_flash_output_streams>
 8017794:	2000      	movs	r0, #0
 8017796:	b011      	add	sp, #68	; 0x44
 8017798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801779a:	bf00      	nop
 801779c:	0801f584 	.word	0x0801f584

080177a0 <rmw_take_response>:
 80177a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177a4:	4604      	mov	r4, r0
 80177a6:	6800      	ldr	r0, [r0, #0]
 80177a8:	b089      	sub	sp, #36	; 0x24
 80177aa:	4688      	mov	r8, r1
 80177ac:	4617      	mov	r7, r2
 80177ae:	461d      	mov	r5, r3
 80177b0:	b120      	cbz	r0, 80177bc <rmw_take_response+0x1c>
 80177b2:	4b1f      	ldr	r3, [pc, #124]	; (8017830 <rmw_take_response+0x90>)
 80177b4:	6819      	ldr	r1, [r3, #0]
 80177b6:	f7e8 fd13 	bl	80001e0 <strcmp>
 80177ba:	bb88      	cbnz	r0, 8017820 <rmw_take_response+0x80>
 80177bc:	b10d      	cbz	r5, 80177c2 <rmw_take_response+0x22>
 80177be:	2300      	movs	r3, #0
 80177c0:	702b      	strb	r3, [r5, #0]
 80177c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80177c6:	f7f9 fa27 	bl	8010c18 <rmw_uxrce_clean_expired_static_input_buffer>
 80177ca:	4648      	mov	r0, r9
 80177cc:	f7f9 f9fa 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80177d0:	4606      	mov	r6, r0
 80177d2:	b348      	cbz	r0, 8017828 <rmw_take_response+0x88>
 80177d4:	68c4      	ldr	r4, [r0, #12]
 80177d6:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80177da:	f604 0328 	addw	r3, r4, #2088	; 0x828
 80177de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177e2:	68c9      	ldr	r1, [r1, #12]
 80177e4:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80177e8:	4788      	blx	r1
 80177ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80177ee:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80177f2:	f104 0110 	add.w	r1, r4, #16
 80177f6:	4668      	mov	r0, sp
 80177f8:	f7f9 fbda 	bl	8010fb0 <ucdr_init_buffer>
 80177fc:	4639      	mov	r1, r7
 80177fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017802:	4668      	mov	r0, sp
 8017804:	4798      	blx	r3
 8017806:	4631      	mov	r1, r6
 8017808:	4604      	mov	r4, r0
 801780a:	480a      	ldr	r0, [pc, #40]	; (8017834 <rmw_take_response+0x94>)
 801780c:	f7ff fe2a 	bl	8017464 <put_memory>
 8017810:	b105      	cbz	r5, 8017814 <rmw_take_response+0x74>
 8017812:	702c      	strb	r4, [r5, #0]
 8017814:	f084 0001 	eor.w	r0, r4, #1
 8017818:	b2c0      	uxtb	r0, r0
 801781a:	b009      	add	sp, #36	; 0x24
 801781c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017820:	200c      	movs	r0, #12
 8017822:	b009      	add	sp, #36	; 0x24
 8017824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017828:	2001      	movs	r0, #1
 801782a:	b009      	add	sp, #36	; 0x24
 801782c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017830:	0801f584 	.word	0x0801f584
 8017834:	20009f68 	.word	0x20009f68

08017838 <rmw_take_with_info>:
 8017838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801783a:	4604      	mov	r4, r0
 801783c:	6800      	ldr	r0, [r0, #0]
 801783e:	b089      	sub	sp, #36	; 0x24
 8017840:	460f      	mov	r7, r1
 8017842:	4615      	mov	r5, r2
 8017844:	b128      	cbz	r0, 8017852 <rmw_take_with_info+0x1a>
 8017846:	4b24      	ldr	r3, [pc, #144]	; (80178d8 <rmw_take_with_info+0xa0>)
 8017848:	6819      	ldr	r1, [r3, #0]
 801784a:	f7e8 fcc9 	bl	80001e0 <strcmp>
 801784e:	2800      	cmp	r0, #0
 8017850:	d13e      	bne.n	80178d0 <rmw_take_with_info+0x98>
 8017852:	b305      	cbz	r5, 8017896 <rmw_take_with_info+0x5e>
 8017854:	6864      	ldr	r4, [r4, #4]
 8017856:	2300      	movs	r3, #0
 8017858:	702b      	strb	r3, [r5, #0]
 801785a:	f7f9 f9dd 	bl	8010c18 <rmw_uxrce_clean_expired_static_input_buffer>
 801785e:	4620      	mov	r0, r4
 8017860:	f7f9 f9b0 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017864:	4606      	mov	r6, r0
 8017866:	b1f0      	cbz	r0, 80178a6 <rmw_take_with_info+0x6e>
 8017868:	68c1      	ldr	r1, [r0, #12]
 801786a:	4668      	mov	r0, sp
 801786c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8017870:	3110      	adds	r1, #16
 8017872:	f7f9 fb9d 	bl	8010fb0 <ucdr_init_buffer>
 8017876:	69a3      	ldr	r3, [r4, #24]
 8017878:	4639      	mov	r1, r7
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	4668      	mov	r0, sp
 801787e:	4798      	blx	r3
 8017880:	4631      	mov	r1, r6
 8017882:	4604      	mov	r4, r0
 8017884:	4815      	ldr	r0, [pc, #84]	; (80178dc <rmw_take_with_info+0xa4>)
 8017886:	f7ff fded 	bl	8017464 <put_memory>
 801788a:	702c      	strb	r4, [r5, #0]
 801788c:	f084 0001 	eor.w	r0, r4, #1
 8017890:	b2c0      	uxtb	r0, r0
 8017892:	b009      	add	sp, #36	; 0x24
 8017894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017896:	6864      	ldr	r4, [r4, #4]
 8017898:	f7f9 f9be 	bl	8010c18 <rmw_uxrce_clean_expired_static_input_buffer>
 801789c:	4620      	mov	r0, r4
 801789e:	f7f9 f991 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80178a2:	4605      	mov	r5, r0
 80178a4:	b910      	cbnz	r0, 80178ac <rmw_take_with_info+0x74>
 80178a6:	2001      	movs	r0, #1
 80178a8:	b009      	add	sp, #36	; 0x24
 80178aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178ac:	68e9      	ldr	r1, [r5, #12]
 80178ae:	4668      	mov	r0, sp
 80178b0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80178b4:	3110      	adds	r1, #16
 80178b6:	f7f9 fb7b 	bl	8010fb0 <ucdr_init_buffer>
 80178ba:	69a3      	ldr	r3, [r4, #24]
 80178bc:	4639      	mov	r1, r7
 80178be:	68db      	ldr	r3, [r3, #12]
 80178c0:	4668      	mov	r0, sp
 80178c2:	4798      	blx	r3
 80178c4:	4629      	mov	r1, r5
 80178c6:	4604      	mov	r4, r0
 80178c8:	4804      	ldr	r0, [pc, #16]	; (80178dc <rmw_take_with_info+0xa4>)
 80178ca:	f7ff fdcb 	bl	8017464 <put_memory>
 80178ce:	e7dd      	b.n	801788c <rmw_take_with_info+0x54>
 80178d0:	200c      	movs	r0, #12
 80178d2:	b009      	add	sp, #36	; 0x24
 80178d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178d6:	bf00      	nop
 80178d8:	0801f584 	.word	0x0801f584
 80178dc:	20009f68 	.word	0x20009f68

080178e0 <rmw_wait>:
 80178e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e4:	460f      	mov	r7, r1
 80178e6:	4606      	mov	r6, r0
 80178e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80178ea:	469a      	mov	sl, r3
 80178ec:	4615      	mov	r5, r2
 80178ee:	2a00      	cmp	r2, #0
 80178f0:	f000 8122 	beq.w	8017b38 <rmw_wait+0x258>
 80178f4:	2900      	cmp	r1, #0
 80178f6:	f000 812a 	beq.w	8017b4e <rmw_wait+0x26e>
 80178fa:	e9d1 2300 	ldrd	r2, r3, [r1]
 80178fe:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8017902:	015c      	lsls	r4, r3, #5
 8017904:	ebbb 0b02 	subs.w	fp, fp, r2
 8017908:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 801790c:	eb64 0403 	sbc.w	r4, r4, r3
 8017910:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8017914:	00a4      	lsls	r4, r4, #2
 8017916:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 801791a:	eb10 0b02 	adds.w	fp, r0, r2
 801791e:	eb43 0404 	adc.w	r4, r3, r4
 8017922:	4aad      	ldr	r2, [pc, #692]	; (8017bd8 <rmw_wait+0x2f8>)
 8017924:	2300      	movs	r3, #0
 8017926:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 801792a:	f7e9 fa15 	bl	8000d58 <__aeabi_uldivmod>
 801792e:	00e4      	lsls	r4, r4, #3
 8017930:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8017934:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017938:	eb1b 0800 	adds.w	r8, fp, r0
 801793c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017940:	eb44 0901 	adc.w	r9, r4, r1
 8017944:	2300      	movs	r3, #0
 8017946:	4542      	cmp	r2, r8
 8017948:	eb73 0109 	sbcs.w	r1, r3, r9
 801794c:	f2c0 80f2 	blt.w	8017b34 <rmw_wait+0x254>
 8017950:	f7f9 f962 	bl	8010c18 <rmw_uxrce_clean_expired_static_input_buffer>
 8017954:	4ba1      	ldr	r3, [pc, #644]	; (8017bdc <rmw_wait+0x2fc>)
 8017956:	681c      	ldr	r4, [r3, #0]
 8017958:	b144      	cbz	r4, 801796c <rmw_wait+0x8c>
 801795a:	4623      	mov	r3, r4
 801795c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017960:	2100      	movs	r1, #0
 8017962:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017966:	5411      	strb	r1, [r2, r0]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d1fa      	bne.n	8017962 <rmw_wait+0x82>
 801796c:	b185      	cbz	r5, 8017990 <rmw_wait+0xb0>
 801796e:	6829      	ldr	r1, [r5, #0]
 8017970:	b171      	cbz	r1, 8017990 <rmw_wait+0xb0>
 8017972:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017976:	2300      	movs	r3, #0
 8017978:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 801797c:	2001      	movs	r0, #1
 801797e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017982:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017984:	3301      	adds	r3, #1
 8017986:	6912      	ldr	r2, [r2, #16]
 8017988:	4299      	cmp	r1, r3
 801798a:	f802 000c 	strb.w	r0, [r2, ip]
 801798e:	d1f6      	bne.n	801797e <rmw_wait+0x9e>
 8017990:	f1ba 0f00 	cmp.w	sl, #0
 8017994:	d011      	beq.n	80179ba <rmw_wait+0xda>
 8017996:	f8da 1000 	ldr.w	r1, [sl]
 801799a:	b171      	cbz	r1, 80179ba <rmw_wait+0xda>
 801799c:	f8da e004 	ldr.w	lr, [sl, #4]
 80179a0:	2300      	movs	r3, #0
 80179a2:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80179a6:	2001      	movs	r0, #1
 80179a8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80179ac:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80179ae:	3301      	adds	r3, #1
 80179b0:	6912      	ldr	r2, [r2, #16]
 80179b2:	4299      	cmp	r1, r3
 80179b4:	f802 000c 	strb.w	r0, [r2, ip]
 80179b8:	d1f6      	bne.n	80179a8 <rmw_wait+0xc8>
 80179ba:	b186      	cbz	r6, 80179de <rmw_wait+0xfe>
 80179bc:	6831      	ldr	r1, [r6, #0]
 80179be:	b171      	cbz	r1, 80179de <rmw_wait+0xfe>
 80179c0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80179c4:	2300      	movs	r3, #0
 80179c6:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 80179ca:	2001      	movs	r0, #1
 80179cc:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80179d0:	6a12      	ldr	r2, [r2, #32]
 80179d2:	3301      	adds	r3, #1
 80179d4:	6912      	ldr	r2, [r2, #16]
 80179d6:	4299      	cmp	r1, r3
 80179d8:	f802 000c 	strb.w	r0, [r2, ip]
 80179dc:	d1f6      	bne.n	80179cc <rmw_wait+0xec>
 80179de:	b34c      	cbz	r4, 8017a34 <rmw_wait+0x154>
 80179e0:	4622      	mov	r2, r4
 80179e2:	2300      	movs	r3, #0
 80179e4:	f241 50a4 	movw	r0, #5540	; 0x15a4
 80179e8:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 80179ec:	5c09      	ldrb	r1, [r1, r0]
 80179ee:	440b      	add	r3, r1
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	2a00      	cmp	r2, #0
 80179f4:	d1f8      	bne.n	80179e8 <rmw_wait+0x108>
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	f000 8082 	beq.w	8017b00 <rmw_wait+0x220>
 80179fc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8017a00:	d00d      	beq.n	8017a1e <rmw_wait+0x13e>
 8017a02:	ee07 8a90 	vmov	s15, r8
 8017a06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017a0a:	ee07 3a90 	vmov	s15, r3
 8017a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017a16:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017a1a:	ee17 8a90 	vmov	r8, s15
 8017a1e:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8017a22:	68e0      	ldr	r0, [r4, #12]
 8017a24:	f810 3009 	ldrb.w	r3, [r0, r9]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f040 8093 	bne.w	8017b54 <rmw_wait+0x274>
 8017a2e:	68a4      	ldr	r4, [r4, #8]
 8017a30:	2c00      	cmp	r4, #0
 8017a32:	d1f6      	bne.n	8017a22 <rmw_wait+0x142>
 8017a34:	2d00      	cmp	r5, #0
 8017a36:	f000 80ac 	beq.w	8017b92 <rmw_wait+0x2b2>
 8017a3a:	682b      	ldr	r3, [r5, #0]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	f000 8093 	beq.w	8017b68 <rmw_wait+0x288>
 8017a42:	2400      	movs	r4, #0
 8017a44:	46a0      	mov	r8, r4
 8017a46:	686b      	ldr	r3, [r5, #4]
 8017a48:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017a4c:	f7f9 f8ba 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a50:	2800      	cmp	r0, #0
 8017a52:	d05f      	beq.n	8017b14 <rmw_wait+0x234>
 8017a54:	682b      	ldr	r3, [r5, #0]
 8017a56:	3401      	adds	r4, #1
 8017a58:	42a3      	cmp	r3, r4
 8017a5a:	f04f 0801 	mov.w	r8, #1
 8017a5e:	d8f2      	bhi.n	8017a46 <rmw_wait+0x166>
 8017a60:	f1ba 0f00 	cmp.w	sl, #0
 8017a64:	d012      	beq.n	8017a8c <rmw_wait+0x1ac>
 8017a66:	f8da 3000 	ldr.w	r3, [sl]
 8017a6a:	b17b      	cbz	r3, 8017a8c <rmw_wait+0x1ac>
 8017a6c:	2400      	movs	r4, #0
 8017a6e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017a72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017a76:	f7f9 f8a5 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a7a:	2800      	cmp	r0, #0
 8017a7c:	d052      	beq.n	8017b24 <rmw_wait+0x244>
 8017a7e:	f8da 3000 	ldr.w	r3, [sl]
 8017a82:	3401      	adds	r4, #1
 8017a84:	42a3      	cmp	r3, r4
 8017a86:	f04f 0801 	mov.w	r8, #1
 8017a8a:	d8f0      	bhi.n	8017a6e <rmw_wait+0x18e>
 8017a8c:	b1e6      	cbz	r6, 8017ac8 <rmw_wait+0x1e8>
 8017a8e:	6833      	ldr	r3, [r6, #0]
 8017a90:	b1d3      	cbz	r3, 8017ac8 <rmw_wait+0x1e8>
 8017a92:	2400      	movs	r4, #0
 8017a94:	6873      	ldr	r3, [r6, #4]
 8017a96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017a9a:	f7f9 f893 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a9e:	b160      	cbz	r0, 8017aba <rmw_wait+0x1da>
 8017aa0:	6833      	ldr	r3, [r6, #0]
 8017aa2:	3401      	adds	r4, #1
 8017aa4:	42a3      	cmp	r3, r4
 8017aa6:	d96c      	bls.n	8017b82 <rmw_wait+0x2a2>
 8017aa8:	6873      	ldr	r3, [r6, #4]
 8017aaa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017aae:	f04f 0801 	mov.w	r8, #1
 8017ab2:	f7f9 f887 	bl	8010bc4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ab6:	2800      	cmp	r0, #0
 8017ab8:	d1f2      	bne.n	8017aa0 <rmw_wait+0x1c0>
 8017aba:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017abe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017ac2:	3401      	adds	r4, #1
 8017ac4:	42a3      	cmp	r3, r4
 8017ac6:	d8e5      	bhi.n	8017a94 <rmw_wait+0x1b4>
 8017ac8:	b1a7      	cbz	r7, 8017af4 <rmw_wait+0x214>
 8017aca:	683c      	ldr	r4, [r7, #0]
 8017acc:	b194      	cbz	r4, 8017af4 <rmw_wait+0x214>
 8017ace:	2300      	movs	r3, #0
 8017ad0:	461d      	mov	r5, r3
 8017ad2:	e004      	b.n	8017ade <rmw_wait+0x1fe>
 8017ad4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017ad8:	3301      	adds	r3, #1
 8017ada:	42a3      	cmp	r3, r4
 8017adc:	d00a      	beq.n	8017af4 <rmw_wait+0x214>
 8017ade:	6878      	ldr	r0, [r7, #4]
 8017ae0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017ae4:	7c0a      	ldrb	r2, [r1, #16]
 8017ae6:	2a00      	cmp	r2, #0
 8017ae8:	d0f4      	beq.n	8017ad4 <rmw_wait+0x1f4>
 8017aea:	3301      	adds	r3, #1
 8017aec:	42a3      	cmp	r3, r4
 8017aee:	740d      	strb	r5, [r1, #16]
 8017af0:	4690      	mov	r8, r2
 8017af2:	d1f4      	bne.n	8017ade <rmw_wait+0x1fe>
 8017af4:	f1b8 0f00 	cmp.w	r8, #0
 8017af8:	d040      	beq.n	8017b7c <rmw_wait+0x29c>
 8017afa:	2000      	movs	r0, #0
 8017afc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b00:	68e0      	ldr	r0, [r4, #12]
 8017b02:	2100      	movs	r1, #0
 8017b04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017b08:	f7fa fbd0 	bl	80122ac <uxr_run_session_timeout>
 8017b0c:	68a4      	ldr	r4, [r4, #8]
 8017b0e:	2c00      	cmp	r4, #0
 8017b10:	d1f6      	bne.n	8017b00 <rmw_wait+0x220>
 8017b12:	e78f      	b.n	8017a34 <rmw_wait+0x154>
 8017b14:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017b18:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017b1c:	3401      	adds	r4, #1
 8017b1e:	42a3      	cmp	r3, r4
 8017b20:	d891      	bhi.n	8017a46 <rmw_wait+0x166>
 8017b22:	e79d      	b.n	8017a60 <rmw_wait+0x180>
 8017b24:	e9da 3200 	ldrd	r3, r2, [sl]
 8017b28:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017b2c:	3401      	adds	r4, #1
 8017b2e:	429c      	cmp	r4, r3
 8017b30:	d39d      	bcc.n	8017a6e <rmw_wait+0x18e>
 8017b32:	e7ab      	b.n	8017a8c <rmw_wait+0x1ac>
 8017b34:	4690      	mov	r8, r2
 8017b36:	e70b      	b.n	8017950 <rmw_wait+0x70>
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	f47f aedb 	bne.w	80178f4 <rmw_wait+0x14>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	f47f aed8 	bne.w	80178f4 <rmw_wait+0x14>
 8017b44:	2f00      	cmp	r7, #0
 8017b46:	d0d8      	beq.n	8017afa <rmw_wait+0x21a>
 8017b48:	2900      	cmp	r1, #0
 8017b4a:	f47f aed6 	bne.w	80178fa <rmw_wait+0x1a>
 8017b4e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017b52:	e6fd      	b.n	8017950 <rmw_wait+0x70>
 8017b54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017b58:	4641      	mov	r1, r8
 8017b5a:	f7fa fbc1 	bl	80122e0 <uxr_run_session_until_data>
 8017b5e:	68a4      	ldr	r4, [r4, #8]
 8017b60:	2c00      	cmp	r4, #0
 8017b62:	f47f af5e 	bne.w	8017a22 <rmw_wait+0x142>
 8017b66:	e765      	b.n	8017a34 <rmw_wait+0x154>
 8017b68:	f1ba 0f00 	cmp.w	sl, #0
 8017b6c:	d11e      	bne.n	8017bac <rmw_wait+0x2cc>
 8017b6e:	b35e      	cbz	r6, 8017bc8 <rmw_wait+0x2e8>
 8017b70:	6833      	ldr	r3, [r6, #0]
 8017b72:	46d0      	mov	r8, sl
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d18c      	bne.n	8017a92 <rmw_wait+0x1b2>
 8017b78:	2f00      	cmp	r7, #0
 8017b7a:	d1a6      	bne.n	8017aca <rmw_wait+0x1ea>
 8017b7c:	2002      	movs	r0, #2
 8017b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b82:	2f00      	cmp	r7, #0
 8017b84:	d0b9      	beq.n	8017afa <rmw_wait+0x21a>
 8017b86:	683c      	ldr	r4, [r7, #0]
 8017b88:	f04f 0801 	mov.w	r8, #1
 8017b8c:	2c00      	cmp	r4, #0
 8017b8e:	d19e      	bne.n	8017ace <rmw_wait+0x1ee>
 8017b90:	e7b3      	b.n	8017afa <rmw_wait+0x21a>
 8017b92:	f1ba 0f00 	cmp.w	sl, #0
 8017b96:	d0ea      	beq.n	8017b6e <rmw_wait+0x28e>
 8017b98:	f8da 3000 	ldr.w	r3, [sl]
 8017b9c:	46a8      	mov	r8, r5
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	f47f af64 	bne.w	8017a6c <rmw_wait+0x18c>
 8017ba4:	2e00      	cmp	r6, #0
 8017ba6:	f47f af72 	bne.w	8017a8e <rmw_wait+0x1ae>
 8017baa:	e009      	b.n	8017bc0 <rmw_wait+0x2e0>
 8017bac:	f8da 2000 	ldr.w	r2, [sl]
 8017bb0:	4698      	mov	r8, r3
 8017bb2:	2a00      	cmp	r2, #0
 8017bb4:	f47f af5a 	bne.w	8017a6c <rmw_wait+0x18c>
 8017bb8:	4690      	mov	r8, r2
 8017bba:	2e00      	cmp	r6, #0
 8017bbc:	f47f af67 	bne.w	8017a8e <rmw_wait+0x1ae>
 8017bc0:	46b0      	mov	r8, r6
 8017bc2:	2f00      	cmp	r7, #0
 8017bc4:	d181      	bne.n	8017aca <rmw_wait+0x1ea>
 8017bc6:	e7d9      	b.n	8017b7c <rmw_wait+0x29c>
 8017bc8:	2f00      	cmp	r7, #0
 8017bca:	d0d7      	beq.n	8017b7c <rmw_wait+0x29c>
 8017bcc:	683c      	ldr	r4, [r7, #0]
 8017bce:	46b0      	mov	r8, r6
 8017bd0:	2c00      	cmp	r4, #0
 8017bd2:	f47f af7c 	bne.w	8017ace <rmw_wait+0x1ee>
 8017bd6:	e7d1      	b.n	8017b7c <rmw_wait+0x29c>
 8017bd8:	000f4240 	.word	0x000f4240
 8017bdc:	2000d110 	.word	0x2000d110

08017be0 <rmw_create_wait_set>:
 8017be0:	b508      	push	{r3, lr}
 8017be2:	4803      	ldr	r0, [pc, #12]	; (8017bf0 <rmw_create_wait_set+0x10>)
 8017be4:	f7ff fc2e 	bl	8017444 <get_memory>
 8017be8:	b108      	cbz	r0, 8017bee <rmw_create_wait_set+0xe>
 8017bea:	68c0      	ldr	r0, [r0, #12]
 8017bec:	3010      	adds	r0, #16
 8017bee:	bd08      	pop	{r3, pc}
 8017bf0:	2000e8e8 	.word	0x2000e8e8

08017bf4 <rmw_destroy_wait_set>:
 8017bf4:	b508      	push	{r3, lr}
 8017bf6:	4b08      	ldr	r3, [pc, #32]	; (8017c18 <rmw_destroy_wait_set+0x24>)
 8017bf8:	6819      	ldr	r1, [r3, #0]
 8017bfa:	b911      	cbnz	r1, 8017c02 <rmw_destroy_wait_set+0xe>
 8017bfc:	e00a      	b.n	8017c14 <rmw_destroy_wait_set+0x20>
 8017bfe:	6889      	ldr	r1, [r1, #8]
 8017c00:	b141      	cbz	r1, 8017c14 <rmw_destroy_wait_set+0x20>
 8017c02:	68cb      	ldr	r3, [r1, #12]
 8017c04:	3310      	adds	r3, #16
 8017c06:	4298      	cmp	r0, r3
 8017c08:	d1f9      	bne.n	8017bfe <rmw_destroy_wait_set+0xa>
 8017c0a:	4803      	ldr	r0, [pc, #12]	; (8017c18 <rmw_destroy_wait_set+0x24>)
 8017c0c:	f7ff fc2a 	bl	8017464 <put_memory>
 8017c10:	2000      	movs	r0, #0
 8017c12:	bd08      	pop	{r3, pc}
 8017c14:	2001      	movs	r0, #1
 8017c16:	bd08      	pop	{r3, pc}
 8017c18:	2000e8e8 	.word	0x2000e8e8

08017c1c <rmw_uros_epoch_nanos>:
 8017c1c:	4b05      	ldr	r3, [pc, #20]	; (8017c34 <rmw_uros_epoch_nanos+0x18>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	b123      	cbz	r3, 8017c2c <rmw_uros_epoch_nanos+0x10>
 8017c22:	68d8      	ldr	r0, [r3, #12]
 8017c24:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017c28:	f7f9 bfb4 	b.w	8011b94 <uxr_epoch_nanos>
 8017c2c:	2000      	movs	r0, #0
 8017c2e:	2100      	movs	r1, #0
 8017c30:	4770      	bx	lr
 8017c32:	bf00      	nop
 8017c34:	2000d110 	.word	0x2000d110

08017c38 <ucdr_serialize_endian_array_char>:
 8017c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	461e      	mov	r6, r3
 8017c40:	4690      	mov	r8, r2
 8017c42:	4604      	mov	r4, r0
 8017c44:	f7f9 f962 	bl	8010f0c <ucdr_check_buffer_available_for>
 8017c48:	b9e0      	cbnz	r0, 8017c84 <ucdr_serialize_endian_array_char+0x4c>
 8017c4a:	4637      	mov	r7, r6
 8017c4c:	e009      	b.n	8017c62 <ucdr_serialize_endian_array_char+0x2a>
 8017c4e:	68a0      	ldr	r0, [r4, #8]
 8017c50:	f002 f890 	bl	8019d74 <memcpy>
 8017c54:	68a2      	ldr	r2, [r4, #8]
 8017c56:	6923      	ldr	r3, [r4, #16]
 8017c58:	442a      	add	r2, r5
 8017c5a:	442b      	add	r3, r5
 8017c5c:	1b7f      	subs	r7, r7, r5
 8017c5e:	60a2      	str	r2, [r4, #8]
 8017c60:	6123      	str	r3, [r4, #16]
 8017c62:	2201      	movs	r2, #1
 8017c64:	4639      	mov	r1, r7
 8017c66:	4620      	mov	r0, r4
 8017c68:	f7f9 f9d6 	bl	8011018 <ucdr_check_final_buffer_behavior_array>
 8017c6c:	1bf1      	subs	r1, r6, r7
 8017c6e:	4441      	add	r1, r8
 8017c70:	4605      	mov	r5, r0
 8017c72:	4602      	mov	r2, r0
 8017c74:	2800      	cmp	r0, #0
 8017c76:	d1ea      	bne.n	8017c4e <ucdr_serialize_endian_array_char+0x16>
 8017c78:	2301      	movs	r3, #1
 8017c7a:	7da0      	ldrb	r0, [r4, #22]
 8017c7c:	7563      	strb	r3, [r4, #21]
 8017c7e:	4058      	eors	r0, r3
 8017c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c84:	4632      	mov	r2, r6
 8017c86:	68a0      	ldr	r0, [r4, #8]
 8017c88:	4641      	mov	r1, r8
 8017c8a:	f002 f873 	bl	8019d74 <memcpy>
 8017c8e:	68a2      	ldr	r2, [r4, #8]
 8017c90:	6923      	ldr	r3, [r4, #16]
 8017c92:	4432      	add	r2, r6
 8017c94:	4433      	add	r3, r6
 8017c96:	60a2      	str	r2, [r4, #8]
 8017c98:	6123      	str	r3, [r4, #16]
 8017c9a:	e7ed      	b.n	8017c78 <ucdr_serialize_endian_array_char+0x40>

08017c9c <ucdr_deserialize_endian_array_char>:
 8017c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca0:	4619      	mov	r1, r3
 8017ca2:	461e      	mov	r6, r3
 8017ca4:	4690      	mov	r8, r2
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	f7f9 f930 	bl	8010f0c <ucdr_check_buffer_available_for>
 8017cac:	b9e0      	cbnz	r0, 8017ce8 <ucdr_deserialize_endian_array_char+0x4c>
 8017cae:	4637      	mov	r7, r6
 8017cb0:	e009      	b.n	8017cc6 <ucdr_deserialize_endian_array_char+0x2a>
 8017cb2:	68a1      	ldr	r1, [r4, #8]
 8017cb4:	f002 f85e 	bl	8019d74 <memcpy>
 8017cb8:	68a2      	ldr	r2, [r4, #8]
 8017cba:	6923      	ldr	r3, [r4, #16]
 8017cbc:	442a      	add	r2, r5
 8017cbe:	442b      	add	r3, r5
 8017cc0:	1b7f      	subs	r7, r7, r5
 8017cc2:	60a2      	str	r2, [r4, #8]
 8017cc4:	6123      	str	r3, [r4, #16]
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	4639      	mov	r1, r7
 8017cca:	4620      	mov	r0, r4
 8017ccc:	f7f9 f9a4 	bl	8011018 <ucdr_check_final_buffer_behavior_array>
 8017cd0:	4605      	mov	r5, r0
 8017cd2:	1bf0      	subs	r0, r6, r7
 8017cd4:	4440      	add	r0, r8
 8017cd6:	462a      	mov	r2, r5
 8017cd8:	2d00      	cmp	r5, #0
 8017cda:	d1ea      	bne.n	8017cb2 <ucdr_deserialize_endian_array_char+0x16>
 8017cdc:	2301      	movs	r3, #1
 8017cde:	7da0      	ldrb	r0, [r4, #22]
 8017ce0:	7563      	strb	r3, [r4, #21]
 8017ce2:	4058      	eors	r0, r3
 8017ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ce8:	4632      	mov	r2, r6
 8017cea:	68a1      	ldr	r1, [r4, #8]
 8017cec:	4640      	mov	r0, r8
 8017cee:	f002 f841 	bl	8019d74 <memcpy>
 8017cf2:	68a2      	ldr	r2, [r4, #8]
 8017cf4:	6923      	ldr	r3, [r4, #16]
 8017cf6:	4432      	add	r2, r6
 8017cf8:	4433      	add	r3, r6
 8017cfa:	60a2      	str	r2, [r4, #8]
 8017cfc:	6123      	str	r3, [r4, #16]
 8017cfe:	e7ed      	b.n	8017cdc <ucdr_deserialize_endian_array_char+0x40>

08017d00 <ucdr_serialize_array_uint8_t>:
 8017d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d04:	4688      	mov	r8, r1
 8017d06:	4611      	mov	r1, r2
 8017d08:	4616      	mov	r6, r2
 8017d0a:	4604      	mov	r4, r0
 8017d0c:	f7f9 f8fe 	bl	8010f0c <ucdr_check_buffer_available_for>
 8017d10:	b9e0      	cbnz	r0, 8017d4c <ucdr_serialize_array_uint8_t+0x4c>
 8017d12:	4637      	mov	r7, r6
 8017d14:	e009      	b.n	8017d2a <ucdr_serialize_array_uint8_t+0x2a>
 8017d16:	68a0      	ldr	r0, [r4, #8]
 8017d18:	f002 f82c 	bl	8019d74 <memcpy>
 8017d1c:	68a2      	ldr	r2, [r4, #8]
 8017d1e:	6923      	ldr	r3, [r4, #16]
 8017d20:	442a      	add	r2, r5
 8017d22:	442b      	add	r3, r5
 8017d24:	1b7f      	subs	r7, r7, r5
 8017d26:	60a2      	str	r2, [r4, #8]
 8017d28:	6123      	str	r3, [r4, #16]
 8017d2a:	2201      	movs	r2, #1
 8017d2c:	4639      	mov	r1, r7
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f7f9 f972 	bl	8011018 <ucdr_check_final_buffer_behavior_array>
 8017d34:	1bf1      	subs	r1, r6, r7
 8017d36:	4441      	add	r1, r8
 8017d38:	4605      	mov	r5, r0
 8017d3a:	4602      	mov	r2, r0
 8017d3c:	2800      	cmp	r0, #0
 8017d3e:	d1ea      	bne.n	8017d16 <ucdr_serialize_array_uint8_t+0x16>
 8017d40:	2301      	movs	r3, #1
 8017d42:	7da0      	ldrb	r0, [r4, #22]
 8017d44:	7563      	strb	r3, [r4, #21]
 8017d46:	4058      	eors	r0, r3
 8017d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d4c:	4632      	mov	r2, r6
 8017d4e:	68a0      	ldr	r0, [r4, #8]
 8017d50:	4641      	mov	r1, r8
 8017d52:	f002 f80f 	bl	8019d74 <memcpy>
 8017d56:	68a3      	ldr	r3, [r4, #8]
 8017d58:	6922      	ldr	r2, [r4, #16]
 8017d5a:	4433      	add	r3, r6
 8017d5c:	4432      	add	r2, r6
 8017d5e:	60a3      	str	r3, [r4, #8]
 8017d60:	6122      	str	r2, [r4, #16]
 8017d62:	e7ed      	b.n	8017d40 <ucdr_serialize_array_uint8_t+0x40>

08017d64 <ucdr_serialize_endian_array_uint8_t>:
 8017d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d68:	4619      	mov	r1, r3
 8017d6a:	461e      	mov	r6, r3
 8017d6c:	4690      	mov	r8, r2
 8017d6e:	4604      	mov	r4, r0
 8017d70:	f7f9 f8cc 	bl	8010f0c <ucdr_check_buffer_available_for>
 8017d74:	b9e0      	cbnz	r0, 8017db0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017d76:	4637      	mov	r7, r6
 8017d78:	e009      	b.n	8017d8e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017d7a:	68a0      	ldr	r0, [r4, #8]
 8017d7c:	f001 fffa 	bl	8019d74 <memcpy>
 8017d80:	68a2      	ldr	r2, [r4, #8]
 8017d82:	6923      	ldr	r3, [r4, #16]
 8017d84:	442a      	add	r2, r5
 8017d86:	442b      	add	r3, r5
 8017d88:	1b7f      	subs	r7, r7, r5
 8017d8a:	60a2      	str	r2, [r4, #8]
 8017d8c:	6123      	str	r3, [r4, #16]
 8017d8e:	2201      	movs	r2, #1
 8017d90:	4639      	mov	r1, r7
 8017d92:	4620      	mov	r0, r4
 8017d94:	f7f9 f940 	bl	8011018 <ucdr_check_final_buffer_behavior_array>
 8017d98:	1bf1      	subs	r1, r6, r7
 8017d9a:	4441      	add	r1, r8
 8017d9c:	4605      	mov	r5, r0
 8017d9e:	4602      	mov	r2, r0
 8017da0:	2800      	cmp	r0, #0
 8017da2:	d1ea      	bne.n	8017d7a <ucdr_serialize_endian_array_uint8_t+0x16>
 8017da4:	2301      	movs	r3, #1
 8017da6:	7da0      	ldrb	r0, [r4, #22]
 8017da8:	7563      	strb	r3, [r4, #21]
 8017daa:	4058      	eors	r0, r3
 8017dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017db0:	4632      	mov	r2, r6
 8017db2:	68a0      	ldr	r0, [r4, #8]
 8017db4:	4641      	mov	r1, r8
 8017db6:	f001 ffdd 	bl	8019d74 <memcpy>
 8017dba:	68a2      	ldr	r2, [r4, #8]
 8017dbc:	6923      	ldr	r3, [r4, #16]
 8017dbe:	4432      	add	r2, r6
 8017dc0:	4433      	add	r3, r6
 8017dc2:	60a2      	str	r2, [r4, #8]
 8017dc4:	6123      	str	r3, [r4, #16]
 8017dc6:	e7ed      	b.n	8017da4 <ucdr_serialize_endian_array_uint8_t+0x40>

08017dc8 <ucdr_deserialize_array_uint8_t>:
 8017dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dcc:	4688      	mov	r8, r1
 8017dce:	4611      	mov	r1, r2
 8017dd0:	4616      	mov	r6, r2
 8017dd2:	4604      	mov	r4, r0
 8017dd4:	f7f9 f89a 	bl	8010f0c <ucdr_check_buffer_available_for>
 8017dd8:	b9e0      	cbnz	r0, 8017e14 <ucdr_deserialize_array_uint8_t+0x4c>
 8017dda:	4637      	mov	r7, r6
 8017ddc:	e009      	b.n	8017df2 <ucdr_deserialize_array_uint8_t+0x2a>
 8017dde:	68a1      	ldr	r1, [r4, #8]
 8017de0:	f001 ffc8 	bl	8019d74 <memcpy>
 8017de4:	68a2      	ldr	r2, [r4, #8]
 8017de6:	6923      	ldr	r3, [r4, #16]
 8017de8:	442a      	add	r2, r5
 8017dea:	442b      	add	r3, r5
 8017dec:	1b7f      	subs	r7, r7, r5
 8017dee:	60a2      	str	r2, [r4, #8]
 8017df0:	6123      	str	r3, [r4, #16]
 8017df2:	2201      	movs	r2, #1
 8017df4:	4639      	mov	r1, r7
 8017df6:	4620      	mov	r0, r4
 8017df8:	f7f9 f90e 	bl	8011018 <ucdr_check_final_buffer_behavior_array>
 8017dfc:	4605      	mov	r5, r0
 8017dfe:	1bf0      	subs	r0, r6, r7
 8017e00:	4440      	add	r0, r8
 8017e02:	462a      	mov	r2, r5
 8017e04:	2d00      	cmp	r5, #0
 8017e06:	d1ea      	bne.n	8017dde <ucdr_deserialize_array_uint8_t+0x16>
 8017e08:	2301      	movs	r3, #1
 8017e0a:	7da0      	ldrb	r0, [r4, #22]
 8017e0c:	7563      	strb	r3, [r4, #21]
 8017e0e:	4058      	eors	r0, r3
 8017e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e14:	4632      	mov	r2, r6
 8017e16:	68a1      	ldr	r1, [r4, #8]
 8017e18:	4640      	mov	r0, r8
 8017e1a:	f001 ffab 	bl	8019d74 <memcpy>
 8017e1e:	68a3      	ldr	r3, [r4, #8]
 8017e20:	6922      	ldr	r2, [r4, #16]
 8017e22:	4433      	add	r3, r6
 8017e24:	4432      	add	r2, r6
 8017e26:	60a3      	str	r3, [r4, #8]
 8017e28:	6122      	str	r2, [r4, #16]
 8017e2a:	e7ed      	b.n	8017e08 <ucdr_deserialize_array_uint8_t+0x40>

08017e2c <ucdr_deserialize_endian_array_uint8_t>:
 8017e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e30:	4619      	mov	r1, r3
 8017e32:	461e      	mov	r6, r3
 8017e34:	4690      	mov	r8, r2
 8017e36:	4604      	mov	r4, r0
 8017e38:	f7f9 f868 	bl	8010f0c <ucdr_check_buffer_available_for>
 8017e3c:	b9e0      	cbnz	r0, 8017e78 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8017e3e:	4637      	mov	r7, r6
 8017e40:	e009      	b.n	8017e56 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017e42:	68a1      	ldr	r1, [r4, #8]
 8017e44:	f001 ff96 	bl	8019d74 <memcpy>
 8017e48:	68a2      	ldr	r2, [r4, #8]
 8017e4a:	6923      	ldr	r3, [r4, #16]
 8017e4c:	442a      	add	r2, r5
 8017e4e:	442b      	add	r3, r5
 8017e50:	1b7f      	subs	r7, r7, r5
 8017e52:	60a2      	str	r2, [r4, #8]
 8017e54:	6123      	str	r3, [r4, #16]
 8017e56:	2201      	movs	r2, #1
 8017e58:	4639      	mov	r1, r7
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f7f9 f8dc 	bl	8011018 <ucdr_check_final_buffer_behavior_array>
 8017e60:	4605      	mov	r5, r0
 8017e62:	1bf0      	subs	r0, r6, r7
 8017e64:	4440      	add	r0, r8
 8017e66:	462a      	mov	r2, r5
 8017e68:	2d00      	cmp	r5, #0
 8017e6a:	d1ea      	bne.n	8017e42 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	7da0      	ldrb	r0, [r4, #22]
 8017e70:	7563      	strb	r3, [r4, #21]
 8017e72:	4058      	eors	r0, r3
 8017e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e78:	4632      	mov	r2, r6
 8017e7a:	68a1      	ldr	r1, [r4, #8]
 8017e7c:	4640      	mov	r0, r8
 8017e7e:	f001 ff79 	bl	8019d74 <memcpy>
 8017e82:	68a2      	ldr	r2, [r4, #8]
 8017e84:	6923      	ldr	r3, [r4, #16]
 8017e86:	4432      	add	r2, r6
 8017e88:	4433      	add	r3, r6
 8017e8a:	60a2      	str	r2, [r4, #8]
 8017e8c:	6123      	str	r3, [r4, #16]
 8017e8e:	e7ed      	b.n	8017e6c <ucdr_deserialize_endian_array_uint8_t+0x40>

08017e90 <ucdr_serialize_bool>:
 8017e90:	b538      	push	{r3, r4, r5, lr}
 8017e92:	460d      	mov	r5, r1
 8017e94:	2101      	movs	r1, #1
 8017e96:	4604      	mov	r4, r0
 8017e98:	f7f9 f844 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8017e9c:	b148      	cbz	r0, 8017eb2 <ucdr_serialize_bool+0x22>
 8017e9e:	68a3      	ldr	r3, [r4, #8]
 8017ea0:	701d      	strb	r5, [r3, #0]
 8017ea2:	68a2      	ldr	r2, [r4, #8]
 8017ea4:	6923      	ldr	r3, [r4, #16]
 8017ea6:	3201      	adds	r2, #1
 8017ea8:	3301      	adds	r3, #1
 8017eaa:	2101      	movs	r1, #1
 8017eac:	60a2      	str	r2, [r4, #8]
 8017eae:	6123      	str	r3, [r4, #16]
 8017eb0:	7561      	strb	r1, [r4, #21]
 8017eb2:	7da0      	ldrb	r0, [r4, #22]
 8017eb4:	f080 0001 	eor.w	r0, r0, #1
 8017eb8:	bd38      	pop	{r3, r4, r5, pc}
 8017eba:	bf00      	nop

08017ebc <ucdr_deserialize_bool>:
 8017ebc:	b538      	push	{r3, r4, r5, lr}
 8017ebe:	460d      	mov	r5, r1
 8017ec0:	2101      	movs	r1, #1
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	f7f9 f82e 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8017ec8:	b168      	cbz	r0, 8017ee6 <ucdr_deserialize_bool+0x2a>
 8017eca:	68a2      	ldr	r2, [r4, #8]
 8017ecc:	6923      	ldr	r3, [r4, #16]
 8017ece:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017ed2:	3900      	subs	r1, #0
 8017ed4:	f103 0301 	add.w	r3, r3, #1
 8017ed8:	bf18      	it	ne
 8017eda:	2101      	movne	r1, #1
 8017edc:	2001      	movs	r0, #1
 8017ede:	7029      	strb	r1, [r5, #0]
 8017ee0:	60a2      	str	r2, [r4, #8]
 8017ee2:	6123      	str	r3, [r4, #16]
 8017ee4:	7560      	strb	r0, [r4, #21]
 8017ee6:	7da0      	ldrb	r0, [r4, #22]
 8017ee8:	f080 0001 	eor.w	r0, r0, #1
 8017eec:	bd38      	pop	{r3, r4, r5, pc}
 8017eee:	bf00      	nop

08017ef0 <ucdr_serialize_uint8_t>:
 8017ef0:	b538      	push	{r3, r4, r5, lr}
 8017ef2:	460d      	mov	r5, r1
 8017ef4:	2101      	movs	r1, #1
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	f7f9 f814 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8017efc:	b148      	cbz	r0, 8017f12 <ucdr_serialize_uint8_t+0x22>
 8017efe:	68a3      	ldr	r3, [r4, #8]
 8017f00:	701d      	strb	r5, [r3, #0]
 8017f02:	68a2      	ldr	r2, [r4, #8]
 8017f04:	6923      	ldr	r3, [r4, #16]
 8017f06:	3201      	adds	r2, #1
 8017f08:	3301      	adds	r3, #1
 8017f0a:	2101      	movs	r1, #1
 8017f0c:	60a2      	str	r2, [r4, #8]
 8017f0e:	6123      	str	r3, [r4, #16]
 8017f10:	7561      	strb	r1, [r4, #21]
 8017f12:	7da0      	ldrb	r0, [r4, #22]
 8017f14:	f080 0001 	eor.w	r0, r0, #1
 8017f18:	bd38      	pop	{r3, r4, r5, pc}
 8017f1a:	bf00      	nop

08017f1c <ucdr_deserialize_uint8_t>:
 8017f1c:	b538      	push	{r3, r4, r5, lr}
 8017f1e:	460d      	mov	r5, r1
 8017f20:	2101      	movs	r1, #1
 8017f22:	4604      	mov	r4, r0
 8017f24:	f7f8 fffe 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8017f28:	b150      	cbz	r0, 8017f40 <ucdr_deserialize_uint8_t+0x24>
 8017f2a:	68a3      	ldr	r3, [r4, #8]
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	702b      	strb	r3, [r5, #0]
 8017f30:	68a2      	ldr	r2, [r4, #8]
 8017f32:	6923      	ldr	r3, [r4, #16]
 8017f34:	3201      	adds	r2, #1
 8017f36:	3301      	adds	r3, #1
 8017f38:	2101      	movs	r1, #1
 8017f3a:	60a2      	str	r2, [r4, #8]
 8017f3c:	6123      	str	r3, [r4, #16]
 8017f3e:	7561      	strb	r1, [r4, #21]
 8017f40:	7da0      	ldrb	r0, [r4, #22]
 8017f42:	f080 0001 	eor.w	r0, r0, #1
 8017f46:	bd38      	pop	{r3, r4, r5, pc}

08017f48 <ucdr_serialize_uint16_t>:
 8017f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f4c:	b082      	sub	sp, #8
 8017f4e:	460b      	mov	r3, r1
 8017f50:	2102      	movs	r1, #2
 8017f52:	4604      	mov	r4, r0
 8017f54:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f58:	f7f9 f836 	bl	8010fc8 <ucdr_buffer_alignment>
 8017f5c:	4601      	mov	r1, r0
 8017f5e:	4620      	mov	r0, r4
 8017f60:	7d67      	ldrb	r7, [r4, #21]
 8017f62:	f7f9 f875 	bl	8011050 <ucdr_advance_buffer>
 8017f66:	4620      	mov	r0, r4
 8017f68:	2102      	movs	r1, #2
 8017f6a:	f7f8 ffcf 	bl	8010f0c <ucdr_check_buffer_available_for>
 8017f6e:	bb78      	cbnz	r0, 8017fd0 <ucdr_serialize_uint16_t+0x88>
 8017f70:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017f74:	42b5      	cmp	r5, r6
 8017f76:	d926      	bls.n	8017fc6 <ucdr_serialize_uint16_t+0x7e>
 8017f78:	6922      	ldr	r2, [r4, #16]
 8017f7a:	60a5      	str	r5, [r4, #8]
 8017f7c:	1bad      	subs	r5, r5, r6
 8017f7e:	442a      	add	r2, r5
 8017f80:	f1c5 0802 	rsb	r8, r5, #2
 8017f84:	6122      	str	r2, [r4, #16]
 8017f86:	4641      	mov	r1, r8
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f7f8 ffcb 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8017f8e:	2800      	cmp	r0, #0
 8017f90:	d03b      	beq.n	801800a <ucdr_serialize_uint16_t+0xc2>
 8017f92:	7d23      	ldrb	r3, [r4, #20]
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	d04a      	beq.n	801802e <ucdr_serialize_uint16_t+0xe6>
 8017f98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017f9c:	7033      	strb	r3, [r6, #0]
 8017f9e:	2d00      	cmp	r5, #0
 8017fa0:	d040      	beq.n	8018024 <ucdr_serialize_uint16_t+0xdc>
 8017fa2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017fa6:	7073      	strb	r3, [r6, #1]
 8017fa8:	6923      	ldr	r3, [r4, #16]
 8017faa:	68a2      	ldr	r2, [r4, #8]
 8017fac:	7da0      	ldrb	r0, [r4, #22]
 8017fae:	3302      	adds	r3, #2
 8017fb0:	1b5b      	subs	r3, r3, r5
 8017fb2:	4442      	add	r2, r8
 8017fb4:	2102      	movs	r1, #2
 8017fb6:	f080 0001 	eor.w	r0, r0, #1
 8017fba:	6123      	str	r3, [r4, #16]
 8017fbc:	60a2      	str	r2, [r4, #8]
 8017fbe:	7561      	strb	r1, [r4, #21]
 8017fc0:	b002      	add	sp, #8
 8017fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc6:	2102      	movs	r1, #2
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f7f8 ffab 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8017fce:	b190      	cbz	r0, 8017ff6 <ucdr_serialize_uint16_t+0xae>
 8017fd0:	7d23      	ldrb	r3, [r4, #20]
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	68a3      	ldr	r3, [r4, #8]
 8017fd6:	d014      	beq.n	8018002 <ucdr_serialize_uint16_t+0xba>
 8017fd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017fdc:	701a      	strb	r2, [r3, #0]
 8017fde:	68a3      	ldr	r3, [r4, #8]
 8017fe0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017fe4:	705a      	strb	r2, [r3, #1]
 8017fe6:	68a2      	ldr	r2, [r4, #8]
 8017fe8:	6923      	ldr	r3, [r4, #16]
 8017fea:	3202      	adds	r2, #2
 8017fec:	3302      	adds	r3, #2
 8017fee:	2102      	movs	r1, #2
 8017ff0:	60a2      	str	r2, [r4, #8]
 8017ff2:	6123      	str	r3, [r4, #16]
 8017ff4:	7561      	strb	r1, [r4, #21]
 8017ff6:	7da0      	ldrb	r0, [r4, #22]
 8017ff8:	f080 0001 	eor.w	r0, r0, #1
 8017ffc:	b002      	add	sp, #8
 8017ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018002:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018006:	801a      	strh	r2, [r3, #0]
 8018008:	e7ed      	b.n	8017fe6 <ucdr_serialize_uint16_t+0x9e>
 801800a:	68a2      	ldr	r2, [r4, #8]
 801800c:	6923      	ldr	r3, [r4, #16]
 801800e:	7da0      	ldrb	r0, [r4, #22]
 8018010:	7567      	strb	r7, [r4, #21]
 8018012:	1b52      	subs	r2, r2, r5
 8018014:	1b5b      	subs	r3, r3, r5
 8018016:	f080 0001 	eor.w	r0, r0, #1
 801801a:	60a2      	str	r2, [r4, #8]
 801801c:	6123      	str	r3, [r4, #16]
 801801e:	b002      	add	sp, #8
 8018020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018024:	68a3      	ldr	r3, [r4, #8]
 8018026:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801802a:	701a      	strb	r2, [r3, #0]
 801802c:	e7bc      	b.n	8017fa8 <ucdr_serialize_uint16_t+0x60>
 801802e:	4630      	mov	r0, r6
 8018030:	f10d 0606 	add.w	r6, sp, #6
 8018034:	4631      	mov	r1, r6
 8018036:	462a      	mov	r2, r5
 8018038:	f001 fe9c 	bl	8019d74 <memcpy>
 801803c:	68a0      	ldr	r0, [r4, #8]
 801803e:	4642      	mov	r2, r8
 8018040:	1971      	adds	r1, r6, r5
 8018042:	f001 fe97 	bl	8019d74 <memcpy>
 8018046:	e7af      	b.n	8017fa8 <ucdr_serialize_uint16_t+0x60>

08018048 <ucdr_serialize_endian_uint16_t>:
 8018048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801804c:	b083      	sub	sp, #12
 801804e:	460d      	mov	r5, r1
 8018050:	2102      	movs	r1, #2
 8018052:	4604      	mov	r4, r0
 8018054:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018058:	f7f8 ffb6 	bl	8010fc8 <ucdr_buffer_alignment>
 801805c:	4601      	mov	r1, r0
 801805e:	4620      	mov	r0, r4
 8018060:	f894 8015 	ldrb.w	r8, [r4, #21]
 8018064:	f7f8 fff4 	bl	8011050 <ucdr_advance_buffer>
 8018068:	4620      	mov	r0, r4
 801806a:	2102      	movs	r1, #2
 801806c:	f7f8 ff4e 	bl	8010f0c <ucdr_check_buffer_available_for>
 8018070:	bb70      	cbnz	r0, 80180d0 <ucdr_serialize_endian_uint16_t+0x88>
 8018072:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8018076:	42be      	cmp	r6, r7
 8018078:	d925      	bls.n	80180c6 <ucdr_serialize_endian_uint16_t+0x7e>
 801807a:	6922      	ldr	r2, [r4, #16]
 801807c:	60a6      	str	r6, [r4, #8]
 801807e:	1bf6      	subs	r6, r6, r7
 8018080:	4432      	add	r2, r6
 8018082:	f1c6 0902 	rsb	r9, r6, #2
 8018086:	6122      	str	r2, [r4, #16]
 8018088:	4649      	mov	r1, r9
 801808a:	4620      	mov	r0, r4
 801808c:	f7f8 ff4a 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018090:	2800      	cmp	r0, #0
 8018092:	d039      	beq.n	8018108 <ucdr_serialize_endian_uint16_t+0xc0>
 8018094:	2d01      	cmp	r5, #1
 8018096:	d04a      	beq.n	801812e <ucdr_serialize_endian_uint16_t+0xe6>
 8018098:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801809c:	703b      	strb	r3, [r7, #0]
 801809e:	2e00      	cmp	r6, #0
 80180a0:	d040      	beq.n	8018124 <ucdr_serialize_endian_uint16_t+0xdc>
 80180a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80180a6:	707b      	strb	r3, [r7, #1]
 80180a8:	6923      	ldr	r3, [r4, #16]
 80180aa:	68a2      	ldr	r2, [r4, #8]
 80180ac:	7da0      	ldrb	r0, [r4, #22]
 80180ae:	3302      	adds	r3, #2
 80180b0:	1b9b      	subs	r3, r3, r6
 80180b2:	444a      	add	r2, r9
 80180b4:	2102      	movs	r1, #2
 80180b6:	f080 0001 	eor.w	r0, r0, #1
 80180ba:	6123      	str	r3, [r4, #16]
 80180bc:	60a2      	str	r2, [r4, #8]
 80180be:	7561      	strb	r1, [r4, #21]
 80180c0:	b003      	add	sp, #12
 80180c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180c6:	2102      	movs	r1, #2
 80180c8:	4620      	mov	r0, r4
 80180ca:	f7f8 ff2b 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80180ce:	b188      	cbz	r0, 80180f4 <ucdr_serialize_endian_uint16_t+0xac>
 80180d0:	2d01      	cmp	r5, #1
 80180d2:	68a3      	ldr	r3, [r4, #8]
 80180d4:	d014      	beq.n	8018100 <ucdr_serialize_endian_uint16_t+0xb8>
 80180d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80180da:	701a      	strb	r2, [r3, #0]
 80180dc:	68a3      	ldr	r3, [r4, #8]
 80180de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80180e2:	705a      	strb	r2, [r3, #1]
 80180e4:	68a2      	ldr	r2, [r4, #8]
 80180e6:	6923      	ldr	r3, [r4, #16]
 80180e8:	3202      	adds	r2, #2
 80180ea:	3302      	adds	r3, #2
 80180ec:	2102      	movs	r1, #2
 80180ee:	60a2      	str	r2, [r4, #8]
 80180f0:	6123      	str	r3, [r4, #16]
 80180f2:	7561      	strb	r1, [r4, #21]
 80180f4:	7da0      	ldrb	r0, [r4, #22]
 80180f6:	f080 0001 	eor.w	r0, r0, #1
 80180fa:	b003      	add	sp, #12
 80180fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018100:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018104:	801a      	strh	r2, [r3, #0]
 8018106:	e7ed      	b.n	80180e4 <ucdr_serialize_endian_uint16_t+0x9c>
 8018108:	68a2      	ldr	r2, [r4, #8]
 801810a:	6923      	ldr	r3, [r4, #16]
 801810c:	7da0      	ldrb	r0, [r4, #22]
 801810e:	f884 8015 	strb.w	r8, [r4, #21]
 8018112:	1b92      	subs	r2, r2, r6
 8018114:	1b9b      	subs	r3, r3, r6
 8018116:	f080 0001 	eor.w	r0, r0, #1
 801811a:	60a2      	str	r2, [r4, #8]
 801811c:	6123      	str	r3, [r4, #16]
 801811e:	b003      	add	sp, #12
 8018120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018124:	68a3      	ldr	r3, [r4, #8]
 8018126:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801812a:	701a      	strb	r2, [r3, #0]
 801812c:	e7bc      	b.n	80180a8 <ucdr_serialize_endian_uint16_t+0x60>
 801812e:	f10d 0506 	add.w	r5, sp, #6
 8018132:	4629      	mov	r1, r5
 8018134:	4632      	mov	r2, r6
 8018136:	4638      	mov	r0, r7
 8018138:	f001 fe1c 	bl	8019d74 <memcpy>
 801813c:	68a0      	ldr	r0, [r4, #8]
 801813e:	464a      	mov	r2, r9
 8018140:	19a9      	adds	r1, r5, r6
 8018142:	f001 fe17 	bl	8019d74 <memcpy>
 8018146:	e7af      	b.n	80180a8 <ucdr_serialize_endian_uint16_t+0x60>

08018148 <ucdr_deserialize_uint16_t>:
 8018148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801814c:	460d      	mov	r5, r1
 801814e:	2102      	movs	r1, #2
 8018150:	4604      	mov	r4, r0
 8018152:	f7f8 ff39 	bl	8010fc8 <ucdr_buffer_alignment>
 8018156:	4601      	mov	r1, r0
 8018158:	4620      	mov	r0, r4
 801815a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801815e:	f7f8 ff77 	bl	8011050 <ucdr_advance_buffer>
 8018162:	4620      	mov	r0, r4
 8018164:	2102      	movs	r1, #2
 8018166:	f7f8 fed1 	bl	8010f0c <ucdr_check_buffer_available_for>
 801816a:	bb60      	cbnz	r0, 80181c6 <ucdr_deserialize_uint16_t+0x7e>
 801816c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8018170:	42be      	cmp	r6, r7
 8018172:	d923      	bls.n	80181bc <ucdr_deserialize_uint16_t+0x74>
 8018174:	6922      	ldr	r2, [r4, #16]
 8018176:	60a6      	str	r6, [r4, #8]
 8018178:	1bf6      	subs	r6, r6, r7
 801817a:	4432      	add	r2, r6
 801817c:	f1c6 0902 	rsb	r9, r6, #2
 8018180:	6122      	str	r2, [r4, #16]
 8018182:	4649      	mov	r1, r9
 8018184:	4620      	mov	r0, r4
 8018186:	f7f8 fecd 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 801818a:	2800      	cmp	r0, #0
 801818c:	d034      	beq.n	80181f8 <ucdr_deserialize_uint16_t+0xb0>
 801818e:	7d23      	ldrb	r3, [r4, #20]
 8018190:	2b01      	cmp	r3, #1
 8018192:	d042      	beq.n	801821a <ucdr_deserialize_uint16_t+0xd2>
 8018194:	787b      	ldrb	r3, [r7, #1]
 8018196:	702b      	strb	r3, [r5, #0]
 8018198:	2e00      	cmp	r6, #0
 801819a:	d03a      	beq.n	8018212 <ucdr_deserialize_uint16_t+0xca>
 801819c:	783b      	ldrb	r3, [r7, #0]
 801819e:	706b      	strb	r3, [r5, #1]
 80181a0:	6923      	ldr	r3, [r4, #16]
 80181a2:	68a2      	ldr	r2, [r4, #8]
 80181a4:	7da0      	ldrb	r0, [r4, #22]
 80181a6:	2102      	movs	r1, #2
 80181a8:	3302      	adds	r3, #2
 80181aa:	1b9b      	subs	r3, r3, r6
 80181ac:	444a      	add	r2, r9
 80181ae:	7561      	strb	r1, [r4, #21]
 80181b0:	6123      	str	r3, [r4, #16]
 80181b2:	60a2      	str	r2, [r4, #8]
 80181b4:	f080 0001 	eor.w	r0, r0, #1
 80181b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181bc:	2102      	movs	r1, #2
 80181be:	4620      	mov	r0, r4
 80181c0:	f7f8 feb0 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80181c4:	b180      	cbz	r0, 80181e8 <ucdr_deserialize_uint16_t+0xa0>
 80181c6:	7d23      	ldrb	r3, [r4, #20]
 80181c8:	2b01      	cmp	r3, #1
 80181ca:	68a3      	ldr	r3, [r4, #8]
 80181cc:	d011      	beq.n	80181f2 <ucdr_deserialize_uint16_t+0xaa>
 80181ce:	785b      	ldrb	r3, [r3, #1]
 80181d0:	702b      	strb	r3, [r5, #0]
 80181d2:	68a3      	ldr	r3, [r4, #8]
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	706b      	strb	r3, [r5, #1]
 80181d8:	68a2      	ldr	r2, [r4, #8]
 80181da:	6923      	ldr	r3, [r4, #16]
 80181dc:	3202      	adds	r2, #2
 80181de:	3302      	adds	r3, #2
 80181e0:	2102      	movs	r1, #2
 80181e2:	60a2      	str	r2, [r4, #8]
 80181e4:	6123      	str	r3, [r4, #16]
 80181e6:	7561      	strb	r1, [r4, #21]
 80181e8:	7da0      	ldrb	r0, [r4, #22]
 80181ea:	f080 0001 	eor.w	r0, r0, #1
 80181ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181f2:	881b      	ldrh	r3, [r3, #0]
 80181f4:	802b      	strh	r3, [r5, #0]
 80181f6:	e7ef      	b.n	80181d8 <ucdr_deserialize_uint16_t+0x90>
 80181f8:	68a2      	ldr	r2, [r4, #8]
 80181fa:	6923      	ldr	r3, [r4, #16]
 80181fc:	7da0      	ldrb	r0, [r4, #22]
 80181fe:	f884 8015 	strb.w	r8, [r4, #21]
 8018202:	1b92      	subs	r2, r2, r6
 8018204:	1b9b      	subs	r3, r3, r6
 8018206:	60a2      	str	r2, [r4, #8]
 8018208:	6123      	str	r3, [r4, #16]
 801820a:	f080 0001 	eor.w	r0, r0, #1
 801820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018212:	68a3      	ldr	r3, [r4, #8]
 8018214:	781b      	ldrb	r3, [r3, #0]
 8018216:	706b      	strb	r3, [r5, #1]
 8018218:	e7c2      	b.n	80181a0 <ucdr_deserialize_uint16_t+0x58>
 801821a:	4639      	mov	r1, r7
 801821c:	4632      	mov	r2, r6
 801821e:	4628      	mov	r0, r5
 8018220:	f001 fda8 	bl	8019d74 <memcpy>
 8018224:	68a1      	ldr	r1, [r4, #8]
 8018226:	464a      	mov	r2, r9
 8018228:	19a8      	adds	r0, r5, r6
 801822a:	f001 fda3 	bl	8019d74 <memcpy>
 801822e:	e7b7      	b.n	80181a0 <ucdr_deserialize_uint16_t+0x58>

08018230 <ucdr_deserialize_endian_uint16_t>:
 8018230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018234:	460e      	mov	r6, r1
 8018236:	2102      	movs	r1, #2
 8018238:	4604      	mov	r4, r0
 801823a:	4615      	mov	r5, r2
 801823c:	f7f8 fec4 	bl	8010fc8 <ucdr_buffer_alignment>
 8018240:	4601      	mov	r1, r0
 8018242:	4620      	mov	r0, r4
 8018244:	f894 9015 	ldrb.w	r9, [r4, #21]
 8018248:	f7f8 ff02 	bl	8011050 <ucdr_advance_buffer>
 801824c:	4620      	mov	r0, r4
 801824e:	2102      	movs	r1, #2
 8018250:	f7f8 fe5c 	bl	8010f0c <ucdr_check_buffer_available_for>
 8018254:	bb70      	cbnz	r0, 80182b4 <ucdr_deserialize_endian_uint16_t+0x84>
 8018256:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 801825a:	4547      	cmp	r7, r8
 801825c:	d925      	bls.n	80182aa <ucdr_deserialize_endian_uint16_t+0x7a>
 801825e:	6922      	ldr	r2, [r4, #16]
 8018260:	60a7      	str	r7, [r4, #8]
 8018262:	eba7 0708 	sub.w	r7, r7, r8
 8018266:	443a      	add	r2, r7
 8018268:	f1c7 0a02 	rsb	sl, r7, #2
 801826c:	6122      	str	r2, [r4, #16]
 801826e:	4651      	mov	r1, sl
 8018270:	4620      	mov	r0, r4
 8018272:	f7f8 fe57 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018276:	2800      	cmp	r0, #0
 8018278:	d034      	beq.n	80182e4 <ucdr_deserialize_endian_uint16_t+0xb4>
 801827a:	2e01      	cmp	r6, #1
 801827c:	d043      	beq.n	8018306 <ucdr_deserialize_endian_uint16_t+0xd6>
 801827e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018282:	702b      	strb	r3, [r5, #0]
 8018284:	2f00      	cmp	r7, #0
 8018286:	d03a      	beq.n	80182fe <ucdr_deserialize_endian_uint16_t+0xce>
 8018288:	f898 3000 	ldrb.w	r3, [r8]
 801828c:	706b      	strb	r3, [r5, #1]
 801828e:	6923      	ldr	r3, [r4, #16]
 8018290:	68a2      	ldr	r2, [r4, #8]
 8018292:	7da0      	ldrb	r0, [r4, #22]
 8018294:	2102      	movs	r1, #2
 8018296:	3302      	adds	r3, #2
 8018298:	1bdb      	subs	r3, r3, r7
 801829a:	4452      	add	r2, sl
 801829c:	7561      	strb	r1, [r4, #21]
 801829e:	6123      	str	r3, [r4, #16]
 80182a0:	60a2      	str	r2, [r4, #8]
 80182a2:	f080 0001 	eor.w	r0, r0, #1
 80182a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182aa:	2102      	movs	r1, #2
 80182ac:	4620      	mov	r0, r4
 80182ae:	f7f8 fe39 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80182b2:	b178      	cbz	r0, 80182d4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80182b4:	2e01      	cmp	r6, #1
 80182b6:	68a3      	ldr	r3, [r4, #8]
 80182b8:	d011      	beq.n	80182de <ucdr_deserialize_endian_uint16_t+0xae>
 80182ba:	785b      	ldrb	r3, [r3, #1]
 80182bc:	702b      	strb	r3, [r5, #0]
 80182be:	68a3      	ldr	r3, [r4, #8]
 80182c0:	781b      	ldrb	r3, [r3, #0]
 80182c2:	706b      	strb	r3, [r5, #1]
 80182c4:	68a2      	ldr	r2, [r4, #8]
 80182c6:	6923      	ldr	r3, [r4, #16]
 80182c8:	3202      	adds	r2, #2
 80182ca:	3302      	adds	r3, #2
 80182cc:	2102      	movs	r1, #2
 80182ce:	60a2      	str	r2, [r4, #8]
 80182d0:	6123      	str	r3, [r4, #16]
 80182d2:	7561      	strb	r1, [r4, #21]
 80182d4:	7da0      	ldrb	r0, [r4, #22]
 80182d6:	f080 0001 	eor.w	r0, r0, #1
 80182da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182de:	881b      	ldrh	r3, [r3, #0]
 80182e0:	802b      	strh	r3, [r5, #0]
 80182e2:	e7ef      	b.n	80182c4 <ucdr_deserialize_endian_uint16_t+0x94>
 80182e4:	68a2      	ldr	r2, [r4, #8]
 80182e6:	6923      	ldr	r3, [r4, #16]
 80182e8:	7da0      	ldrb	r0, [r4, #22]
 80182ea:	f884 9015 	strb.w	r9, [r4, #21]
 80182ee:	1bd2      	subs	r2, r2, r7
 80182f0:	1bdb      	subs	r3, r3, r7
 80182f2:	60a2      	str	r2, [r4, #8]
 80182f4:	6123      	str	r3, [r4, #16]
 80182f6:	f080 0001 	eor.w	r0, r0, #1
 80182fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182fe:	68a3      	ldr	r3, [r4, #8]
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	706b      	strb	r3, [r5, #1]
 8018304:	e7c3      	b.n	801828e <ucdr_deserialize_endian_uint16_t+0x5e>
 8018306:	4641      	mov	r1, r8
 8018308:	463a      	mov	r2, r7
 801830a:	4628      	mov	r0, r5
 801830c:	f001 fd32 	bl	8019d74 <memcpy>
 8018310:	68a1      	ldr	r1, [r4, #8]
 8018312:	4652      	mov	r2, sl
 8018314:	19e8      	adds	r0, r5, r7
 8018316:	f001 fd2d 	bl	8019d74 <memcpy>
 801831a:	e7b8      	b.n	801828e <ucdr_deserialize_endian_uint16_t+0x5e>

0801831c <ucdr_serialize_uint32_t>:
 801831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018320:	b082      	sub	sp, #8
 8018322:	4604      	mov	r4, r0
 8018324:	9101      	str	r1, [sp, #4]
 8018326:	2104      	movs	r1, #4
 8018328:	f7f8 fe4e 	bl	8010fc8 <ucdr_buffer_alignment>
 801832c:	4601      	mov	r1, r0
 801832e:	4620      	mov	r0, r4
 8018330:	7d67      	ldrb	r7, [r4, #21]
 8018332:	f7f8 fe8d 	bl	8011050 <ucdr_advance_buffer>
 8018336:	4620      	mov	r0, r4
 8018338:	2104      	movs	r1, #4
 801833a:	f7f8 fde7 	bl	8010f0c <ucdr_check_buffer_available_for>
 801833e:	2800      	cmp	r0, #0
 8018340:	d139      	bne.n	80183b6 <ucdr_serialize_uint32_t+0x9a>
 8018342:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8018346:	42ae      	cmp	r6, r5
 8018348:	d930      	bls.n	80183ac <ucdr_serialize_uint32_t+0x90>
 801834a:	6922      	ldr	r2, [r4, #16]
 801834c:	60a6      	str	r6, [r4, #8]
 801834e:	1b76      	subs	r6, r6, r5
 8018350:	4432      	add	r2, r6
 8018352:	f1c6 0804 	rsb	r8, r6, #4
 8018356:	6122      	str	r2, [r4, #16]
 8018358:	4641      	mov	r1, r8
 801835a:	4620      	mov	r0, r4
 801835c:	f7f8 fde2 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018360:	2800      	cmp	r0, #0
 8018362:	d04c      	beq.n	80183fe <ucdr_serialize_uint32_t+0xe2>
 8018364:	7d23      	ldrb	r3, [r4, #20]
 8018366:	2b01      	cmp	r3, #1
 8018368:	d063      	beq.n	8018432 <ucdr_serialize_uint32_t+0x116>
 801836a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801836e:	702b      	strb	r3, [r5, #0]
 8018370:	2e00      	cmp	r6, #0
 8018372:	d051      	beq.n	8018418 <ucdr_serialize_uint32_t+0xfc>
 8018374:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018378:	706b      	strb	r3, [r5, #1]
 801837a:	2e01      	cmp	r6, #1
 801837c:	d050      	beq.n	8018420 <ucdr_serialize_uint32_t+0x104>
 801837e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018382:	70ab      	strb	r3, [r5, #2]
 8018384:	2e02      	cmp	r6, #2
 8018386:	d04f      	beq.n	8018428 <ucdr_serialize_uint32_t+0x10c>
 8018388:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801838c:	70eb      	strb	r3, [r5, #3]
 801838e:	6923      	ldr	r3, [r4, #16]
 8018390:	68a2      	ldr	r2, [r4, #8]
 8018392:	7da0      	ldrb	r0, [r4, #22]
 8018394:	3304      	adds	r3, #4
 8018396:	1b9b      	subs	r3, r3, r6
 8018398:	4442      	add	r2, r8
 801839a:	2104      	movs	r1, #4
 801839c:	f080 0001 	eor.w	r0, r0, #1
 80183a0:	6123      	str	r3, [r4, #16]
 80183a2:	60a2      	str	r2, [r4, #8]
 80183a4:	7561      	strb	r1, [r4, #21]
 80183a6:	b002      	add	sp, #8
 80183a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ac:	2104      	movs	r1, #4
 80183ae:	4620      	mov	r0, r4
 80183b0:	f7f8 fdb8 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80183b4:	b1d0      	cbz	r0, 80183ec <ucdr_serialize_uint32_t+0xd0>
 80183b6:	7d23      	ldrb	r3, [r4, #20]
 80183b8:	2b01      	cmp	r3, #1
 80183ba:	68a3      	ldr	r3, [r4, #8]
 80183bc:	d01c      	beq.n	80183f8 <ucdr_serialize_uint32_t+0xdc>
 80183be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80183c2:	701a      	strb	r2, [r3, #0]
 80183c4:	68a3      	ldr	r3, [r4, #8]
 80183c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80183ca:	705a      	strb	r2, [r3, #1]
 80183cc:	68a3      	ldr	r3, [r4, #8]
 80183ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80183d2:	709a      	strb	r2, [r3, #2]
 80183d4:	68a3      	ldr	r3, [r4, #8]
 80183d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80183da:	70da      	strb	r2, [r3, #3]
 80183dc:	68a2      	ldr	r2, [r4, #8]
 80183de:	6923      	ldr	r3, [r4, #16]
 80183e0:	3204      	adds	r2, #4
 80183e2:	3304      	adds	r3, #4
 80183e4:	2104      	movs	r1, #4
 80183e6:	60a2      	str	r2, [r4, #8]
 80183e8:	6123      	str	r3, [r4, #16]
 80183ea:	7561      	strb	r1, [r4, #21]
 80183ec:	7da0      	ldrb	r0, [r4, #22]
 80183ee:	f080 0001 	eor.w	r0, r0, #1
 80183f2:	b002      	add	sp, #8
 80183f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f8:	9a01      	ldr	r2, [sp, #4]
 80183fa:	601a      	str	r2, [r3, #0]
 80183fc:	e7ee      	b.n	80183dc <ucdr_serialize_uint32_t+0xc0>
 80183fe:	68a2      	ldr	r2, [r4, #8]
 8018400:	6923      	ldr	r3, [r4, #16]
 8018402:	7da0      	ldrb	r0, [r4, #22]
 8018404:	7567      	strb	r7, [r4, #21]
 8018406:	1b92      	subs	r2, r2, r6
 8018408:	1b9b      	subs	r3, r3, r6
 801840a:	f080 0001 	eor.w	r0, r0, #1
 801840e:	60a2      	str	r2, [r4, #8]
 8018410:	6123      	str	r3, [r4, #16]
 8018412:	b002      	add	sp, #8
 8018414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018418:	68a3      	ldr	r3, [r4, #8]
 801841a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801841e:	701a      	strb	r2, [r3, #0]
 8018420:	68a3      	ldr	r3, [r4, #8]
 8018422:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018426:	701a      	strb	r2, [r3, #0]
 8018428:	68a3      	ldr	r3, [r4, #8]
 801842a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801842e:	701a      	strb	r2, [r3, #0]
 8018430:	e7ad      	b.n	801838e <ucdr_serialize_uint32_t+0x72>
 8018432:	4628      	mov	r0, r5
 8018434:	ad01      	add	r5, sp, #4
 8018436:	4629      	mov	r1, r5
 8018438:	4632      	mov	r2, r6
 801843a:	f001 fc9b 	bl	8019d74 <memcpy>
 801843e:	68a0      	ldr	r0, [r4, #8]
 8018440:	4642      	mov	r2, r8
 8018442:	19a9      	adds	r1, r5, r6
 8018444:	f001 fc96 	bl	8019d74 <memcpy>
 8018448:	e7a1      	b.n	801838e <ucdr_serialize_uint32_t+0x72>
 801844a:	bf00      	nop

0801844c <ucdr_serialize_endian_uint32_t>:
 801844c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018450:	b083      	sub	sp, #12
 8018452:	460d      	mov	r5, r1
 8018454:	2104      	movs	r1, #4
 8018456:	4604      	mov	r4, r0
 8018458:	9201      	str	r2, [sp, #4]
 801845a:	f7f8 fdb5 	bl	8010fc8 <ucdr_buffer_alignment>
 801845e:	4601      	mov	r1, r0
 8018460:	4620      	mov	r0, r4
 8018462:	f894 8015 	ldrb.w	r8, [r4, #21]
 8018466:	f7f8 fdf3 	bl	8011050 <ucdr_advance_buffer>
 801846a:	4620      	mov	r0, r4
 801846c:	2104      	movs	r1, #4
 801846e:	f7f8 fd4d 	bl	8010f0c <ucdr_check_buffer_available_for>
 8018472:	2800      	cmp	r0, #0
 8018474:	d138      	bne.n	80184e8 <ucdr_serialize_endian_uint32_t+0x9c>
 8018476:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801847a:	42b7      	cmp	r7, r6
 801847c:	d92f      	bls.n	80184de <ucdr_serialize_endian_uint32_t+0x92>
 801847e:	6922      	ldr	r2, [r4, #16]
 8018480:	60a7      	str	r7, [r4, #8]
 8018482:	1bbf      	subs	r7, r7, r6
 8018484:	443a      	add	r2, r7
 8018486:	f1c7 0904 	rsb	r9, r7, #4
 801848a:	6122      	str	r2, [r4, #16]
 801848c:	4649      	mov	r1, r9
 801848e:	4620      	mov	r0, r4
 8018490:	f7f8 fd48 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018494:	2800      	cmp	r0, #0
 8018496:	d04a      	beq.n	801852e <ucdr_serialize_endian_uint32_t+0xe2>
 8018498:	2d01      	cmp	r5, #1
 801849a:	d063      	beq.n	8018564 <ucdr_serialize_endian_uint32_t+0x118>
 801849c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80184a0:	7033      	strb	r3, [r6, #0]
 80184a2:	2f00      	cmp	r7, #0
 80184a4:	d051      	beq.n	801854a <ucdr_serialize_endian_uint32_t+0xfe>
 80184a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80184aa:	7073      	strb	r3, [r6, #1]
 80184ac:	2f01      	cmp	r7, #1
 80184ae:	d050      	beq.n	8018552 <ucdr_serialize_endian_uint32_t+0x106>
 80184b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80184b4:	70b3      	strb	r3, [r6, #2]
 80184b6:	2f02      	cmp	r7, #2
 80184b8:	d04f      	beq.n	801855a <ucdr_serialize_endian_uint32_t+0x10e>
 80184ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80184be:	70f3      	strb	r3, [r6, #3]
 80184c0:	6923      	ldr	r3, [r4, #16]
 80184c2:	68a2      	ldr	r2, [r4, #8]
 80184c4:	7da0      	ldrb	r0, [r4, #22]
 80184c6:	3304      	adds	r3, #4
 80184c8:	1bdb      	subs	r3, r3, r7
 80184ca:	444a      	add	r2, r9
 80184cc:	2104      	movs	r1, #4
 80184ce:	f080 0001 	eor.w	r0, r0, #1
 80184d2:	6123      	str	r3, [r4, #16]
 80184d4:	60a2      	str	r2, [r4, #8]
 80184d6:	7561      	strb	r1, [r4, #21]
 80184d8:	b003      	add	sp, #12
 80184da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184de:	2104      	movs	r1, #4
 80184e0:	4620      	mov	r0, r4
 80184e2:	f7f8 fd1f 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80184e6:	b1c8      	cbz	r0, 801851c <ucdr_serialize_endian_uint32_t+0xd0>
 80184e8:	2d01      	cmp	r5, #1
 80184ea:	68a3      	ldr	r3, [r4, #8]
 80184ec:	d01c      	beq.n	8018528 <ucdr_serialize_endian_uint32_t+0xdc>
 80184ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80184f2:	701a      	strb	r2, [r3, #0]
 80184f4:	68a3      	ldr	r3, [r4, #8]
 80184f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80184fa:	705a      	strb	r2, [r3, #1]
 80184fc:	68a3      	ldr	r3, [r4, #8]
 80184fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018502:	709a      	strb	r2, [r3, #2]
 8018504:	68a3      	ldr	r3, [r4, #8]
 8018506:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801850a:	70da      	strb	r2, [r3, #3]
 801850c:	68a2      	ldr	r2, [r4, #8]
 801850e:	6923      	ldr	r3, [r4, #16]
 8018510:	3204      	adds	r2, #4
 8018512:	3304      	adds	r3, #4
 8018514:	2104      	movs	r1, #4
 8018516:	60a2      	str	r2, [r4, #8]
 8018518:	6123      	str	r3, [r4, #16]
 801851a:	7561      	strb	r1, [r4, #21]
 801851c:	7da0      	ldrb	r0, [r4, #22]
 801851e:	f080 0001 	eor.w	r0, r0, #1
 8018522:	b003      	add	sp, #12
 8018524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018528:	9a01      	ldr	r2, [sp, #4]
 801852a:	601a      	str	r2, [r3, #0]
 801852c:	e7ee      	b.n	801850c <ucdr_serialize_endian_uint32_t+0xc0>
 801852e:	68a2      	ldr	r2, [r4, #8]
 8018530:	6923      	ldr	r3, [r4, #16]
 8018532:	7da0      	ldrb	r0, [r4, #22]
 8018534:	f884 8015 	strb.w	r8, [r4, #21]
 8018538:	1bd2      	subs	r2, r2, r7
 801853a:	1bdb      	subs	r3, r3, r7
 801853c:	f080 0001 	eor.w	r0, r0, #1
 8018540:	60a2      	str	r2, [r4, #8]
 8018542:	6123      	str	r3, [r4, #16]
 8018544:	b003      	add	sp, #12
 8018546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801854a:	68a3      	ldr	r3, [r4, #8]
 801854c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018550:	701a      	strb	r2, [r3, #0]
 8018552:	68a3      	ldr	r3, [r4, #8]
 8018554:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018558:	701a      	strb	r2, [r3, #0]
 801855a:	68a3      	ldr	r3, [r4, #8]
 801855c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8018560:	701a      	strb	r2, [r3, #0]
 8018562:	e7ad      	b.n	80184c0 <ucdr_serialize_endian_uint32_t+0x74>
 8018564:	ad01      	add	r5, sp, #4
 8018566:	4629      	mov	r1, r5
 8018568:	463a      	mov	r2, r7
 801856a:	4630      	mov	r0, r6
 801856c:	f001 fc02 	bl	8019d74 <memcpy>
 8018570:	68a0      	ldr	r0, [r4, #8]
 8018572:	464a      	mov	r2, r9
 8018574:	19e9      	adds	r1, r5, r7
 8018576:	f001 fbfd 	bl	8019d74 <memcpy>
 801857a:	e7a1      	b.n	80184c0 <ucdr_serialize_endian_uint32_t+0x74>

0801857c <ucdr_deserialize_uint32_t>:
 801857c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018580:	460d      	mov	r5, r1
 8018582:	2104      	movs	r1, #4
 8018584:	4604      	mov	r4, r0
 8018586:	f7f8 fd1f 	bl	8010fc8 <ucdr_buffer_alignment>
 801858a:	4601      	mov	r1, r0
 801858c:	4620      	mov	r0, r4
 801858e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8018592:	f7f8 fd5d 	bl	8011050 <ucdr_advance_buffer>
 8018596:	4620      	mov	r0, r4
 8018598:	2104      	movs	r1, #4
 801859a:	f7f8 fcb7 	bl	8010f0c <ucdr_check_buffer_available_for>
 801859e:	2800      	cmp	r0, #0
 80185a0:	d138      	bne.n	8018614 <ucdr_deserialize_uint32_t+0x98>
 80185a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80185a6:	42b7      	cmp	r7, r6
 80185a8:	d92f      	bls.n	801860a <ucdr_deserialize_uint32_t+0x8e>
 80185aa:	6922      	ldr	r2, [r4, #16]
 80185ac:	60a7      	str	r7, [r4, #8]
 80185ae:	1bbf      	subs	r7, r7, r6
 80185b0:	443a      	add	r2, r7
 80185b2:	f1c7 0904 	rsb	r9, r7, #4
 80185b6:	6122      	str	r2, [r4, #16]
 80185b8:	4649      	mov	r1, r9
 80185ba:	4620      	mov	r0, r4
 80185bc:	f7f8 fcb2 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80185c0:	2800      	cmp	r0, #0
 80185c2:	d046      	beq.n	8018652 <ucdr_deserialize_uint32_t+0xd6>
 80185c4:	7d23      	ldrb	r3, [r4, #20]
 80185c6:	2b01      	cmp	r3, #1
 80185c8:	d05c      	beq.n	8018684 <ucdr_deserialize_uint32_t+0x108>
 80185ca:	78f3      	ldrb	r3, [r6, #3]
 80185cc:	702b      	strb	r3, [r5, #0]
 80185ce:	2f00      	cmp	r7, #0
 80185d0:	d04c      	beq.n	801866c <ucdr_deserialize_uint32_t+0xf0>
 80185d2:	78b3      	ldrb	r3, [r6, #2]
 80185d4:	706b      	strb	r3, [r5, #1]
 80185d6:	2f01      	cmp	r7, #1
 80185d8:	f105 0302 	add.w	r3, r5, #2
 80185dc:	d04a      	beq.n	8018674 <ucdr_deserialize_uint32_t+0xf8>
 80185de:	7873      	ldrb	r3, [r6, #1]
 80185e0:	70ab      	strb	r3, [r5, #2]
 80185e2:	2f02      	cmp	r7, #2
 80185e4:	f105 0303 	add.w	r3, r5, #3
 80185e8:	d048      	beq.n	801867c <ucdr_deserialize_uint32_t+0x100>
 80185ea:	7833      	ldrb	r3, [r6, #0]
 80185ec:	70eb      	strb	r3, [r5, #3]
 80185ee:	6923      	ldr	r3, [r4, #16]
 80185f0:	68a2      	ldr	r2, [r4, #8]
 80185f2:	7da0      	ldrb	r0, [r4, #22]
 80185f4:	2104      	movs	r1, #4
 80185f6:	3304      	adds	r3, #4
 80185f8:	1bdb      	subs	r3, r3, r7
 80185fa:	444a      	add	r2, r9
 80185fc:	7561      	strb	r1, [r4, #21]
 80185fe:	6123      	str	r3, [r4, #16]
 8018600:	60a2      	str	r2, [r4, #8]
 8018602:	f080 0001 	eor.w	r0, r0, #1
 8018606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801860a:	2104      	movs	r1, #4
 801860c:	4620      	mov	r0, r4
 801860e:	f7f8 fc89 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018612:	b1b0      	cbz	r0, 8018642 <ucdr_deserialize_uint32_t+0xc6>
 8018614:	7d23      	ldrb	r3, [r4, #20]
 8018616:	2b01      	cmp	r3, #1
 8018618:	68a3      	ldr	r3, [r4, #8]
 801861a:	d017      	beq.n	801864c <ucdr_deserialize_uint32_t+0xd0>
 801861c:	78db      	ldrb	r3, [r3, #3]
 801861e:	702b      	strb	r3, [r5, #0]
 8018620:	68a3      	ldr	r3, [r4, #8]
 8018622:	789b      	ldrb	r3, [r3, #2]
 8018624:	706b      	strb	r3, [r5, #1]
 8018626:	68a3      	ldr	r3, [r4, #8]
 8018628:	785b      	ldrb	r3, [r3, #1]
 801862a:	70ab      	strb	r3, [r5, #2]
 801862c:	68a3      	ldr	r3, [r4, #8]
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	70eb      	strb	r3, [r5, #3]
 8018632:	68a2      	ldr	r2, [r4, #8]
 8018634:	6923      	ldr	r3, [r4, #16]
 8018636:	3204      	adds	r2, #4
 8018638:	3304      	adds	r3, #4
 801863a:	2104      	movs	r1, #4
 801863c:	60a2      	str	r2, [r4, #8]
 801863e:	6123      	str	r3, [r4, #16]
 8018640:	7561      	strb	r1, [r4, #21]
 8018642:	7da0      	ldrb	r0, [r4, #22]
 8018644:	f080 0001 	eor.w	r0, r0, #1
 8018648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	602b      	str	r3, [r5, #0]
 8018650:	e7ef      	b.n	8018632 <ucdr_deserialize_uint32_t+0xb6>
 8018652:	68a2      	ldr	r2, [r4, #8]
 8018654:	6923      	ldr	r3, [r4, #16]
 8018656:	7da0      	ldrb	r0, [r4, #22]
 8018658:	f884 8015 	strb.w	r8, [r4, #21]
 801865c:	1bd2      	subs	r2, r2, r7
 801865e:	1bdb      	subs	r3, r3, r7
 8018660:	60a2      	str	r2, [r4, #8]
 8018662:	6123      	str	r3, [r4, #16]
 8018664:	f080 0001 	eor.w	r0, r0, #1
 8018668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801866c:	68a3      	ldr	r3, [r4, #8]
 801866e:	789b      	ldrb	r3, [r3, #2]
 8018670:	706b      	strb	r3, [r5, #1]
 8018672:	1cab      	adds	r3, r5, #2
 8018674:	68a2      	ldr	r2, [r4, #8]
 8018676:	7852      	ldrb	r2, [r2, #1]
 8018678:	f803 2b01 	strb.w	r2, [r3], #1
 801867c:	68a2      	ldr	r2, [r4, #8]
 801867e:	7812      	ldrb	r2, [r2, #0]
 8018680:	701a      	strb	r2, [r3, #0]
 8018682:	e7b4      	b.n	80185ee <ucdr_deserialize_uint32_t+0x72>
 8018684:	4631      	mov	r1, r6
 8018686:	463a      	mov	r2, r7
 8018688:	4628      	mov	r0, r5
 801868a:	f001 fb73 	bl	8019d74 <memcpy>
 801868e:	68a1      	ldr	r1, [r4, #8]
 8018690:	464a      	mov	r2, r9
 8018692:	19e8      	adds	r0, r5, r7
 8018694:	f001 fb6e 	bl	8019d74 <memcpy>
 8018698:	e7a9      	b.n	80185ee <ucdr_deserialize_uint32_t+0x72>
 801869a:	bf00      	nop

0801869c <ucdr_deserialize_endian_uint32_t>:
 801869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186a0:	460e      	mov	r6, r1
 80186a2:	2104      	movs	r1, #4
 80186a4:	4604      	mov	r4, r0
 80186a6:	4615      	mov	r5, r2
 80186a8:	f7f8 fc8e 	bl	8010fc8 <ucdr_buffer_alignment>
 80186ac:	4601      	mov	r1, r0
 80186ae:	4620      	mov	r0, r4
 80186b0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80186b4:	f7f8 fccc 	bl	8011050 <ucdr_advance_buffer>
 80186b8:	4620      	mov	r0, r4
 80186ba:	2104      	movs	r1, #4
 80186bc:	f7f8 fc26 	bl	8010f0c <ucdr_check_buffer_available_for>
 80186c0:	2800      	cmp	r0, #0
 80186c2:	d13c      	bne.n	801873e <ucdr_deserialize_endian_uint32_t+0xa2>
 80186c4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80186c8:	42bb      	cmp	r3, r7
 80186ca:	d933      	bls.n	8018734 <ucdr_deserialize_endian_uint32_t+0x98>
 80186cc:	6922      	ldr	r2, [r4, #16]
 80186ce:	60a3      	str	r3, [r4, #8]
 80186d0:	eba3 0807 	sub.w	r8, r3, r7
 80186d4:	4442      	add	r2, r8
 80186d6:	f1c8 0a04 	rsb	sl, r8, #4
 80186da:	6122      	str	r2, [r4, #16]
 80186dc:	4651      	mov	r1, sl
 80186de:	4620      	mov	r0, r4
 80186e0:	f7f8 fc20 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80186e4:	2800      	cmp	r0, #0
 80186e6:	d048      	beq.n	801877a <ucdr_deserialize_endian_uint32_t+0xde>
 80186e8:	2e01      	cmp	r6, #1
 80186ea:	d061      	beq.n	80187b0 <ucdr_deserialize_endian_uint32_t+0x114>
 80186ec:	78fb      	ldrb	r3, [r7, #3]
 80186ee:	702b      	strb	r3, [r5, #0]
 80186f0:	f1b8 0f00 	cmp.w	r8, #0
 80186f4:	d050      	beq.n	8018798 <ucdr_deserialize_endian_uint32_t+0xfc>
 80186f6:	78bb      	ldrb	r3, [r7, #2]
 80186f8:	706b      	strb	r3, [r5, #1]
 80186fa:	f1b8 0f01 	cmp.w	r8, #1
 80186fe:	f105 0302 	add.w	r3, r5, #2
 8018702:	d04d      	beq.n	80187a0 <ucdr_deserialize_endian_uint32_t+0x104>
 8018704:	787b      	ldrb	r3, [r7, #1]
 8018706:	70ab      	strb	r3, [r5, #2]
 8018708:	f1b8 0f02 	cmp.w	r8, #2
 801870c:	f105 0303 	add.w	r3, r5, #3
 8018710:	d04a      	beq.n	80187a8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8018712:	783b      	ldrb	r3, [r7, #0]
 8018714:	70eb      	strb	r3, [r5, #3]
 8018716:	6923      	ldr	r3, [r4, #16]
 8018718:	68a2      	ldr	r2, [r4, #8]
 801871a:	7da0      	ldrb	r0, [r4, #22]
 801871c:	2104      	movs	r1, #4
 801871e:	3304      	adds	r3, #4
 8018720:	eba3 0308 	sub.w	r3, r3, r8
 8018724:	4452      	add	r2, sl
 8018726:	7561      	strb	r1, [r4, #21]
 8018728:	6123      	str	r3, [r4, #16]
 801872a:	60a2      	str	r2, [r4, #8]
 801872c:	f080 0001 	eor.w	r0, r0, #1
 8018730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018734:	2104      	movs	r1, #4
 8018736:	4620      	mov	r0, r4
 8018738:	f7f8 fbf4 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 801873c:	b1a8      	cbz	r0, 801876a <ucdr_deserialize_endian_uint32_t+0xce>
 801873e:	2e01      	cmp	r6, #1
 8018740:	68a3      	ldr	r3, [r4, #8]
 8018742:	d017      	beq.n	8018774 <ucdr_deserialize_endian_uint32_t+0xd8>
 8018744:	78db      	ldrb	r3, [r3, #3]
 8018746:	702b      	strb	r3, [r5, #0]
 8018748:	68a3      	ldr	r3, [r4, #8]
 801874a:	789b      	ldrb	r3, [r3, #2]
 801874c:	706b      	strb	r3, [r5, #1]
 801874e:	68a3      	ldr	r3, [r4, #8]
 8018750:	785b      	ldrb	r3, [r3, #1]
 8018752:	70ab      	strb	r3, [r5, #2]
 8018754:	68a3      	ldr	r3, [r4, #8]
 8018756:	781b      	ldrb	r3, [r3, #0]
 8018758:	70eb      	strb	r3, [r5, #3]
 801875a:	68a2      	ldr	r2, [r4, #8]
 801875c:	6923      	ldr	r3, [r4, #16]
 801875e:	3204      	adds	r2, #4
 8018760:	3304      	adds	r3, #4
 8018762:	2104      	movs	r1, #4
 8018764:	60a2      	str	r2, [r4, #8]
 8018766:	6123      	str	r3, [r4, #16]
 8018768:	7561      	strb	r1, [r4, #21]
 801876a:	7da0      	ldrb	r0, [r4, #22]
 801876c:	f080 0001 	eor.w	r0, r0, #1
 8018770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	602b      	str	r3, [r5, #0]
 8018778:	e7ef      	b.n	801875a <ucdr_deserialize_endian_uint32_t+0xbe>
 801877a:	68a2      	ldr	r2, [r4, #8]
 801877c:	6923      	ldr	r3, [r4, #16]
 801877e:	7da0      	ldrb	r0, [r4, #22]
 8018780:	f884 9015 	strb.w	r9, [r4, #21]
 8018784:	eba2 0208 	sub.w	r2, r2, r8
 8018788:	eba3 0308 	sub.w	r3, r3, r8
 801878c:	60a2      	str	r2, [r4, #8]
 801878e:	6123      	str	r3, [r4, #16]
 8018790:	f080 0001 	eor.w	r0, r0, #1
 8018794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018798:	68a3      	ldr	r3, [r4, #8]
 801879a:	789b      	ldrb	r3, [r3, #2]
 801879c:	706b      	strb	r3, [r5, #1]
 801879e:	1cab      	adds	r3, r5, #2
 80187a0:	68a2      	ldr	r2, [r4, #8]
 80187a2:	7852      	ldrb	r2, [r2, #1]
 80187a4:	f803 2b01 	strb.w	r2, [r3], #1
 80187a8:	68a2      	ldr	r2, [r4, #8]
 80187aa:	7812      	ldrb	r2, [r2, #0]
 80187ac:	701a      	strb	r2, [r3, #0]
 80187ae:	e7b2      	b.n	8018716 <ucdr_deserialize_endian_uint32_t+0x7a>
 80187b0:	4639      	mov	r1, r7
 80187b2:	4642      	mov	r2, r8
 80187b4:	4628      	mov	r0, r5
 80187b6:	f001 fadd 	bl	8019d74 <memcpy>
 80187ba:	68a1      	ldr	r1, [r4, #8]
 80187bc:	4652      	mov	r2, sl
 80187be:	eb05 0008 	add.w	r0, r5, r8
 80187c2:	f001 fad7 	bl	8019d74 <memcpy>
 80187c6:	e7a6      	b.n	8018716 <ucdr_deserialize_endian_uint32_t+0x7a>

080187c8 <ucdr_serialize_uint64_t>:
 80187c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187cc:	2108      	movs	r1, #8
 80187ce:	b082      	sub	sp, #8
 80187d0:	4604      	mov	r4, r0
 80187d2:	e9cd 2300 	strd	r2, r3, [sp]
 80187d6:	f7f8 fbf7 	bl	8010fc8 <ucdr_buffer_alignment>
 80187da:	4601      	mov	r1, r0
 80187dc:	4620      	mov	r0, r4
 80187de:	7d67      	ldrb	r7, [r4, #21]
 80187e0:	f7f8 fc36 	bl	8011050 <ucdr_advance_buffer>
 80187e4:	4620      	mov	r0, r4
 80187e6:	2108      	movs	r1, #8
 80187e8:	f7f8 fb90 	bl	8010f0c <ucdr_check_buffer_available_for>
 80187ec:	2800      	cmp	r0, #0
 80187ee:	d14e      	bne.n	801888e <ucdr_serialize_uint64_t+0xc6>
 80187f0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80187f4:	42b5      	cmp	r5, r6
 80187f6:	d945      	bls.n	8018884 <ucdr_serialize_uint64_t+0xbc>
 80187f8:	6923      	ldr	r3, [r4, #16]
 80187fa:	60a5      	str	r5, [r4, #8]
 80187fc:	1bad      	subs	r5, r5, r6
 80187fe:	442b      	add	r3, r5
 8018800:	f1c5 0808 	rsb	r8, r5, #8
 8018804:	6123      	str	r3, [r4, #16]
 8018806:	4641      	mov	r1, r8
 8018808:	4620      	mov	r0, r4
 801880a:	f7f8 fb8b 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 801880e:	2800      	cmp	r0, #0
 8018810:	d074      	beq.n	80188fc <ucdr_serialize_uint64_t+0x134>
 8018812:	7d23      	ldrb	r3, [r4, #20]
 8018814:	2b01      	cmp	r3, #1
 8018816:	f000 809b 	beq.w	8018950 <ucdr_serialize_uint64_t+0x188>
 801881a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801881e:	7033      	strb	r3, [r6, #0]
 8018820:	2d00      	cmp	r5, #0
 8018822:	d078      	beq.n	8018916 <ucdr_serialize_uint64_t+0x14e>
 8018824:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018828:	7073      	strb	r3, [r6, #1]
 801882a:	2d01      	cmp	r5, #1
 801882c:	d077      	beq.n	801891e <ucdr_serialize_uint64_t+0x156>
 801882e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018832:	70b3      	strb	r3, [r6, #2]
 8018834:	2d02      	cmp	r5, #2
 8018836:	d076      	beq.n	8018926 <ucdr_serialize_uint64_t+0x15e>
 8018838:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801883c:	70f3      	strb	r3, [r6, #3]
 801883e:	2d03      	cmp	r5, #3
 8018840:	d075      	beq.n	801892e <ucdr_serialize_uint64_t+0x166>
 8018842:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018846:	7133      	strb	r3, [r6, #4]
 8018848:	2d04      	cmp	r5, #4
 801884a:	d074      	beq.n	8018936 <ucdr_serialize_uint64_t+0x16e>
 801884c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8018850:	7173      	strb	r3, [r6, #5]
 8018852:	2d05      	cmp	r5, #5
 8018854:	d073      	beq.n	801893e <ucdr_serialize_uint64_t+0x176>
 8018856:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801885a:	71b3      	strb	r3, [r6, #6]
 801885c:	2d06      	cmp	r5, #6
 801885e:	d072      	beq.n	8018946 <ucdr_serialize_uint64_t+0x17e>
 8018860:	f89d 3000 	ldrb.w	r3, [sp]
 8018864:	71f3      	strb	r3, [r6, #7]
 8018866:	6923      	ldr	r3, [r4, #16]
 8018868:	68a2      	ldr	r2, [r4, #8]
 801886a:	7da0      	ldrb	r0, [r4, #22]
 801886c:	3308      	adds	r3, #8
 801886e:	1b5d      	subs	r5, r3, r5
 8018870:	4442      	add	r2, r8
 8018872:	2308      	movs	r3, #8
 8018874:	f080 0001 	eor.w	r0, r0, #1
 8018878:	6125      	str	r5, [r4, #16]
 801887a:	60a2      	str	r2, [r4, #8]
 801887c:	7563      	strb	r3, [r4, #21]
 801887e:	b002      	add	sp, #8
 8018880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018884:	2108      	movs	r1, #8
 8018886:	4620      	mov	r0, r4
 8018888:	f7f8 fb4c 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 801888c:	b350      	cbz	r0, 80188e4 <ucdr_serialize_uint64_t+0x11c>
 801888e:	7d23      	ldrb	r3, [r4, #20]
 8018890:	2b01      	cmp	r3, #1
 8018892:	d02d      	beq.n	80188f0 <ucdr_serialize_uint64_t+0x128>
 8018894:	68a3      	ldr	r3, [r4, #8]
 8018896:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801889a:	701a      	strb	r2, [r3, #0]
 801889c:	68a3      	ldr	r3, [r4, #8]
 801889e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80188a2:	705a      	strb	r2, [r3, #1]
 80188a4:	68a3      	ldr	r3, [r4, #8]
 80188a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80188aa:	709a      	strb	r2, [r3, #2]
 80188ac:	68a3      	ldr	r3, [r4, #8]
 80188ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80188b2:	70da      	strb	r2, [r3, #3]
 80188b4:	68a3      	ldr	r3, [r4, #8]
 80188b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80188ba:	711a      	strb	r2, [r3, #4]
 80188bc:	68a3      	ldr	r3, [r4, #8]
 80188be:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80188c2:	715a      	strb	r2, [r3, #5]
 80188c4:	68a3      	ldr	r3, [r4, #8]
 80188c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80188ca:	719a      	strb	r2, [r3, #6]
 80188cc:	68a3      	ldr	r3, [r4, #8]
 80188ce:	f89d 2000 	ldrb.w	r2, [sp]
 80188d2:	71da      	strb	r2, [r3, #7]
 80188d4:	68a2      	ldr	r2, [r4, #8]
 80188d6:	6923      	ldr	r3, [r4, #16]
 80188d8:	3208      	adds	r2, #8
 80188da:	3308      	adds	r3, #8
 80188dc:	2108      	movs	r1, #8
 80188de:	60a2      	str	r2, [r4, #8]
 80188e0:	6123      	str	r3, [r4, #16]
 80188e2:	7561      	strb	r1, [r4, #21]
 80188e4:	7da0      	ldrb	r0, [r4, #22]
 80188e6:	f080 0001 	eor.w	r0, r0, #1
 80188ea:	b002      	add	sp, #8
 80188ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188f0:	466b      	mov	r3, sp
 80188f2:	cb03      	ldmia	r3!, {r0, r1}
 80188f4:	68a3      	ldr	r3, [r4, #8]
 80188f6:	6018      	str	r0, [r3, #0]
 80188f8:	6059      	str	r1, [r3, #4]
 80188fa:	e7eb      	b.n	80188d4 <ucdr_serialize_uint64_t+0x10c>
 80188fc:	68a2      	ldr	r2, [r4, #8]
 80188fe:	6923      	ldr	r3, [r4, #16]
 8018900:	7da0      	ldrb	r0, [r4, #22]
 8018902:	7567      	strb	r7, [r4, #21]
 8018904:	1b52      	subs	r2, r2, r5
 8018906:	f080 0001 	eor.w	r0, r0, #1
 801890a:	1b5d      	subs	r5, r3, r5
 801890c:	60a2      	str	r2, [r4, #8]
 801890e:	6125      	str	r5, [r4, #16]
 8018910:	b002      	add	sp, #8
 8018912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018916:	68a3      	ldr	r3, [r4, #8]
 8018918:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801891c:	701a      	strb	r2, [r3, #0]
 801891e:	68a3      	ldr	r3, [r4, #8]
 8018920:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018924:	701a      	strb	r2, [r3, #0]
 8018926:	68a3      	ldr	r3, [r4, #8]
 8018928:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801892c:	701a      	strb	r2, [r3, #0]
 801892e:	68a3      	ldr	r3, [r4, #8]
 8018930:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8018934:	701a      	strb	r2, [r3, #0]
 8018936:	68a3      	ldr	r3, [r4, #8]
 8018938:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801893c:	701a      	strb	r2, [r3, #0]
 801893e:	68a3      	ldr	r3, [r4, #8]
 8018940:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8018944:	701a      	strb	r2, [r3, #0]
 8018946:	68a3      	ldr	r3, [r4, #8]
 8018948:	f89d 2000 	ldrb.w	r2, [sp]
 801894c:	701a      	strb	r2, [r3, #0]
 801894e:	e78a      	b.n	8018866 <ucdr_serialize_uint64_t+0x9e>
 8018950:	4630      	mov	r0, r6
 8018952:	466e      	mov	r6, sp
 8018954:	4631      	mov	r1, r6
 8018956:	462a      	mov	r2, r5
 8018958:	f001 fa0c 	bl	8019d74 <memcpy>
 801895c:	68a0      	ldr	r0, [r4, #8]
 801895e:	4642      	mov	r2, r8
 8018960:	1971      	adds	r1, r6, r5
 8018962:	f001 fa07 	bl	8019d74 <memcpy>
 8018966:	e77e      	b.n	8018866 <ucdr_serialize_uint64_t+0x9e>

08018968 <ucdr_serialize_int16_t>:
 8018968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801896c:	b082      	sub	sp, #8
 801896e:	460b      	mov	r3, r1
 8018970:	2102      	movs	r1, #2
 8018972:	4604      	mov	r4, r0
 8018974:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018978:	f7f8 fb26 	bl	8010fc8 <ucdr_buffer_alignment>
 801897c:	4601      	mov	r1, r0
 801897e:	4620      	mov	r0, r4
 8018980:	7d67      	ldrb	r7, [r4, #21]
 8018982:	f7f8 fb65 	bl	8011050 <ucdr_advance_buffer>
 8018986:	4620      	mov	r0, r4
 8018988:	2102      	movs	r1, #2
 801898a:	f7f8 fabf 	bl	8010f0c <ucdr_check_buffer_available_for>
 801898e:	bb78      	cbnz	r0, 80189f0 <ucdr_serialize_int16_t+0x88>
 8018990:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8018994:	42b5      	cmp	r5, r6
 8018996:	d926      	bls.n	80189e6 <ucdr_serialize_int16_t+0x7e>
 8018998:	6922      	ldr	r2, [r4, #16]
 801899a:	60a5      	str	r5, [r4, #8]
 801899c:	1bad      	subs	r5, r5, r6
 801899e:	442a      	add	r2, r5
 80189a0:	f1c5 0802 	rsb	r8, r5, #2
 80189a4:	6122      	str	r2, [r4, #16]
 80189a6:	4641      	mov	r1, r8
 80189a8:	4620      	mov	r0, r4
 80189aa:	f7f8 fabb 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d03b      	beq.n	8018a2a <ucdr_serialize_int16_t+0xc2>
 80189b2:	7d23      	ldrb	r3, [r4, #20]
 80189b4:	2b01      	cmp	r3, #1
 80189b6:	d04a      	beq.n	8018a4e <ucdr_serialize_int16_t+0xe6>
 80189b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80189bc:	7033      	strb	r3, [r6, #0]
 80189be:	2d00      	cmp	r5, #0
 80189c0:	d040      	beq.n	8018a44 <ucdr_serialize_int16_t+0xdc>
 80189c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80189c6:	7073      	strb	r3, [r6, #1]
 80189c8:	6923      	ldr	r3, [r4, #16]
 80189ca:	68a2      	ldr	r2, [r4, #8]
 80189cc:	7da0      	ldrb	r0, [r4, #22]
 80189ce:	3302      	adds	r3, #2
 80189d0:	1b5b      	subs	r3, r3, r5
 80189d2:	4442      	add	r2, r8
 80189d4:	2102      	movs	r1, #2
 80189d6:	f080 0001 	eor.w	r0, r0, #1
 80189da:	6123      	str	r3, [r4, #16]
 80189dc:	60a2      	str	r2, [r4, #8]
 80189de:	7561      	strb	r1, [r4, #21]
 80189e0:	b002      	add	sp, #8
 80189e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189e6:	2102      	movs	r1, #2
 80189e8:	4620      	mov	r0, r4
 80189ea:	f7f8 fa9b 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 80189ee:	b190      	cbz	r0, 8018a16 <ucdr_serialize_int16_t+0xae>
 80189f0:	7d23      	ldrb	r3, [r4, #20]
 80189f2:	2b01      	cmp	r3, #1
 80189f4:	68a3      	ldr	r3, [r4, #8]
 80189f6:	d014      	beq.n	8018a22 <ucdr_serialize_int16_t+0xba>
 80189f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80189fc:	701a      	strb	r2, [r3, #0]
 80189fe:	68a3      	ldr	r3, [r4, #8]
 8018a00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018a04:	705a      	strb	r2, [r3, #1]
 8018a06:	68a2      	ldr	r2, [r4, #8]
 8018a08:	6923      	ldr	r3, [r4, #16]
 8018a0a:	3202      	adds	r2, #2
 8018a0c:	3302      	adds	r3, #2
 8018a0e:	2102      	movs	r1, #2
 8018a10:	60a2      	str	r2, [r4, #8]
 8018a12:	6123      	str	r3, [r4, #16]
 8018a14:	7561      	strb	r1, [r4, #21]
 8018a16:	7da0      	ldrb	r0, [r4, #22]
 8018a18:	f080 0001 	eor.w	r0, r0, #1
 8018a1c:	b002      	add	sp, #8
 8018a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018a26:	801a      	strh	r2, [r3, #0]
 8018a28:	e7ed      	b.n	8018a06 <ucdr_serialize_int16_t+0x9e>
 8018a2a:	68a2      	ldr	r2, [r4, #8]
 8018a2c:	6923      	ldr	r3, [r4, #16]
 8018a2e:	7da0      	ldrb	r0, [r4, #22]
 8018a30:	7567      	strb	r7, [r4, #21]
 8018a32:	1b52      	subs	r2, r2, r5
 8018a34:	1b5b      	subs	r3, r3, r5
 8018a36:	f080 0001 	eor.w	r0, r0, #1
 8018a3a:	60a2      	str	r2, [r4, #8]
 8018a3c:	6123      	str	r3, [r4, #16]
 8018a3e:	b002      	add	sp, #8
 8018a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a44:	68a3      	ldr	r3, [r4, #8]
 8018a46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018a4a:	701a      	strb	r2, [r3, #0]
 8018a4c:	e7bc      	b.n	80189c8 <ucdr_serialize_int16_t+0x60>
 8018a4e:	4630      	mov	r0, r6
 8018a50:	f10d 0606 	add.w	r6, sp, #6
 8018a54:	4631      	mov	r1, r6
 8018a56:	462a      	mov	r2, r5
 8018a58:	f001 f98c 	bl	8019d74 <memcpy>
 8018a5c:	68a0      	ldr	r0, [r4, #8]
 8018a5e:	4642      	mov	r2, r8
 8018a60:	1971      	adds	r1, r6, r5
 8018a62:	f001 f987 	bl	8019d74 <memcpy>
 8018a66:	e7af      	b.n	80189c8 <ucdr_serialize_int16_t+0x60>

08018a68 <ucdr_deserialize_int16_t>:
 8018a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a6c:	460d      	mov	r5, r1
 8018a6e:	2102      	movs	r1, #2
 8018a70:	4604      	mov	r4, r0
 8018a72:	f7f8 faa9 	bl	8010fc8 <ucdr_buffer_alignment>
 8018a76:	4601      	mov	r1, r0
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8018a7e:	f7f8 fae7 	bl	8011050 <ucdr_advance_buffer>
 8018a82:	4620      	mov	r0, r4
 8018a84:	2102      	movs	r1, #2
 8018a86:	f7f8 fa41 	bl	8010f0c <ucdr_check_buffer_available_for>
 8018a8a:	bb60      	cbnz	r0, 8018ae6 <ucdr_deserialize_int16_t+0x7e>
 8018a8c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8018a90:	42be      	cmp	r6, r7
 8018a92:	d923      	bls.n	8018adc <ucdr_deserialize_int16_t+0x74>
 8018a94:	6922      	ldr	r2, [r4, #16]
 8018a96:	60a6      	str	r6, [r4, #8]
 8018a98:	1bf6      	subs	r6, r6, r7
 8018a9a:	4432      	add	r2, r6
 8018a9c:	f1c6 0902 	rsb	r9, r6, #2
 8018aa0:	6122      	str	r2, [r4, #16]
 8018aa2:	4649      	mov	r1, r9
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	f7f8 fa3d 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	d034      	beq.n	8018b18 <ucdr_deserialize_int16_t+0xb0>
 8018aae:	7d23      	ldrb	r3, [r4, #20]
 8018ab0:	2b01      	cmp	r3, #1
 8018ab2:	d042      	beq.n	8018b3a <ucdr_deserialize_int16_t+0xd2>
 8018ab4:	787b      	ldrb	r3, [r7, #1]
 8018ab6:	702b      	strb	r3, [r5, #0]
 8018ab8:	2e00      	cmp	r6, #0
 8018aba:	d03a      	beq.n	8018b32 <ucdr_deserialize_int16_t+0xca>
 8018abc:	783b      	ldrb	r3, [r7, #0]
 8018abe:	706b      	strb	r3, [r5, #1]
 8018ac0:	6923      	ldr	r3, [r4, #16]
 8018ac2:	68a2      	ldr	r2, [r4, #8]
 8018ac4:	7da0      	ldrb	r0, [r4, #22]
 8018ac6:	2102      	movs	r1, #2
 8018ac8:	3302      	adds	r3, #2
 8018aca:	1b9b      	subs	r3, r3, r6
 8018acc:	444a      	add	r2, r9
 8018ace:	7561      	strb	r1, [r4, #21]
 8018ad0:	6123      	str	r3, [r4, #16]
 8018ad2:	60a2      	str	r2, [r4, #8]
 8018ad4:	f080 0001 	eor.w	r0, r0, #1
 8018ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018adc:	2102      	movs	r1, #2
 8018ade:	4620      	mov	r0, r4
 8018ae0:	f7f8 fa20 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018ae4:	b180      	cbz	r0, 8018b08 <ucdr_deserialize_int16_t+0xa0>
 8018ae6:	7d23      	ldrb	r3, [r4, #20]
 8018ae8:	2b01      	cmp	r3, #1
 8018aea:	68a3      	ldr	r3, [r4, #8]
 8018aec:	d011      	beq.n	8018b12 <ucdr_deserialize_int16_t+0xaa>
 8018aee:	785b      	ldrb	r3, [r3, #1]
 8018af0:	702b      	strb	r3, [r5, #0]
 8018af2:	68a3      	ldr	r3, [r4, #8]
 8018af4:	781b      	ldrb	r3, [r3, #0]
 8018af6:	706b      	strb	r3, [r5, #1]
 8018af8:	68a2      	ldr	r2, [r4, #8]
 8018afa:	6923      	ldr	r3, [r4, #16]
 8018afc:	3202      	adds	r2, #2
 8018afe:	3302      	adds	r3, #2
 8018b00:	2102      	movs	r1, #2
 8018b02:	60a2      	str	r2, [r4, #8]
 8018b04:	6123      	str	r3, [r4, #16]
 8018b06:	7561      	strb	r1, [r4, #21]
 8018b08:	7da0      	ldrb	r0, [r4, #22]
 8018b0a:	f080 0001 	eor.w	r0, r0, #1
 8018b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b12:	881b      	ldrh	r3, [r3, #0]
 8018b14:	802b      	strh	r3, [r5, #0]
 8018b16:	e7ef      	b.n	8018af8 <ucdr_deserialize_int16_t+0x90>
 8018b18:	68a2      	ldr	r2, [r4, #8]
 8018b1a:	6923      	ldr	r3, [r4, #16]
 8018b1c:	7da0      	ldrb	r0, [r4, #22]
 8018b1e:	f884 8015 	strb.w	r8, [r4, #21]
 8018b22:	1b92      	subs	r2, r2, r6
 8018b24:	1b9b      	subs	r3, r3, r6
 8018b26:	60a2      	str	r2, [r4, #8]
 8018b28:	6123      	str	r3, [r4, #16]
 8018b2a:	f080 0001 	eor.w	r0, r0, #1
 8018b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b32:	68a3      	ldr	r3, [r4, #8]
 8018b34:	781b      	ldrb	r3, [r3, #0]
 8018b36:	706b      	strb	r3, [r5, #1]
 8018b38:	e7c2      	b.n	8018ac0 <ucdr_deserialize_int16_t+0x58>
 8018b3a:	4639      	mov	r1, r7
 8018b3c:	4632      	mov	r2, r6
 8018b3e:	4628      	mov	r0, r5
 8018b40:	f001 f918 	bl	8019d74 <memcpy>
 8018b44:	68a1      	ldr	r1, [r4, #8]
 8018b46:	464a      	mov	r2, r9
 8018b48:	19a8      	adds	r0, r5, r6
 8018b4a:	f001 f913 	bl	8019d74 <memcpy>
 8018b4e:	e7b7      	b.n	8018ac0 <ucdr_deserialize_int16_t+0x58>

08018b50 <ucdr_serialize_int32_t>:
 8018b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b54:	b082      	sub	sp, #8
 8018b56:	4604      	mov	r4, r0
 8018b58:	9101      	str	r1, [sp, #4]
 8018b5a:	2104      	movs	r1, #4
 8018b5c:	f7f8 fa34 	bl	8010fc8 <ucdr_buffer_alignment>
 8018b60:	4601      	mov	r1, r0
 8018b62:	4620      	mov	r0, r4
 8018b64:	7d67      	ldrb	r7, [r4, #21]
 8018b66:	f7f8 fa73 	bl	8011050 <ucdr_advance_buffer>
 8018b6a:	4620      	mov	r0, r4
 8018b6c:	2104      	movs	r1, #4
 8018b6e:	f7f8 f9cd 	bl	8010f0c <ucdr_check_buffer_available_for>
 8018b72:	2800      	cmp	r0, #0
 8018b74:	d139      	bne.n	8018bea <ucdr_serialize_int32_t+0x9a>
 8018b76:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8018b7a:	42ae      	cmp	r6, r5
 8018b7c:	d930      	bls.n	8018be0 <ucdr_serialize_int32_t+0x90>
 8018b7e:	6922      	ldr	r2, [r4, #16]
 8018b80:	60a6      	str	r6, [r4, #8]
 8018b82:	1b76      	subs	r6, r6, r5
 8018b84:	4432      	add	r2, r6
 8018b86:	f1c6 0804 	rsb	r8, r6, #4
 8018b8a:	6122      	str	r2, [r4, #16]
 8018b8c:	4641      	mov	r1, r8
 8018b8e:	4620      	mov	r0, r4
 8018b90:	f7f8 f9c8 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d04c      	beq.n	8018c32 <ucdr_serialize_int32_t+0xe2>
 8018b98:	7d23      	ldrb	r3, [r4, #20]
 8018b9a:	2b01      	cmp	r3, #1
 8018b9c:	d063      	beq.n	8018c66 <ucdr_serialize_int32_t+0x116>
 8018b9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018ba2:	702b      	strb	r3, [r5, #0]
 8018ba4:	2e00      	cmp	r6, #0
 8018ba6:	d051      	beq.n	8018c4c <ucdr_serialize_int32_t+0xfc>
 8018ba8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018bac:	706b      	strb	r3, [r5, #1]
 8018bae:	2e01      	cmp	r6, #1
 8018bb0:	d050      	beq.n	8018c54 <ucdr_serialize_int32_t+0x104>
 8018bb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018bb6:	70ab      	strb	r3, [r5, #2]
 8018bb8:	2e02      	cmp	r6, #2
 8018bba:	d04f      	beq.n	8018c5c <ucdr_serialize_int32_t+0x10c>
 8018bbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018bc0:	70eb      	strb	r3, [r5, #3]
 8018bc2:	6923      	ldr	r3, [r4, #16]
 8018bc4:	68a2      	ldr	r2, [r4, #8]
 8018bc6:	7da0      	ldrb	r0, [r4, #22]
 8018bc8:	3304      	adds	r3, #4
 8018bca:	1b9b      	subs	r3, r3, r6
 8018bcc:	4442      	add	r2, r8
 8018bce:	2104      	movs	r1, #4
 8018bd0:	f080 0001 	eor.w	r0, r0, #1
 8018bd4:	6123      	str	r3, [r4, #16]
 8018bd6:	60a2      	str	r2, [r4, #8]
 8018bd8:	7561      	strb	r1, [r4, #21]
 8018bda:	b002      	add	sp, #8
 8018bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018be0:	2104      	movs	r1, #4
 8018be2:	4620      	mov	r0, r4
 8018be4:	f7f8 f99e 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018be8:	b1d0      	cbz	r0, 8018c20 <ucdr_serialize_int32_t+0xd0>
 8018bea:	7d23      	ldrb	r3, [r4, #20]
 8018bec:	2b01      	cmp	r3, #1
 8018bee:	68a3      	ldr	r3, [r4, #8]
 8018bf0:	d01c      	beq.n	8018c2c <ucdr_serialize_int32_t+0xdc>
 8018bf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018bf6:	701a      	strb	r2, [r3, #0]
 8018bf8:	68a3      	ldr	r3, [r4, #8]
 8018bfa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018bfe:	705a      	strb	r2, [r3, #1]
 8018c00:	68a3      	ldr	r3, [r4, #8]
 8018c02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018c06:	709a      	strb	r2, [r3, #2]
 8018c08:	68a3      	ldr	r3, [r4, #8]
 8018c0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8018c0e:	70da      	strb	r2, [r3, #3]
 8018c10:	68a2      	ldr	r2, [r4, #8]
 8018c12:	6923      	ldr	r3, [r4, #16]
 8018c14:	3204      	adds	r2, #4
 8018c16:	3304      	adds	r3, #4
 8018c18:	2104      	movs	r1, #4
 8018c1a:	60a2      	str	r2, [r4, #8]
 8018c1c:	6123      	str	r3, [r4, #16]
 8018c1e:	7561      	strb	r1, [r4, #21]
 8018c20:	7da0      	ldrb	r0, [r4, #22]
 8018c22:	f080 0001 	eor.w	r0, r0, #1
 8018c26:	b002      	add	sp, #8
 8018c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c2c:	9a01      	ldr	r2, [sp, #4]
 8018c2e:	601a      	str	r2, [r3, #0]
 8018c30:	e7ee      	b.n	8018c10 <ucdr_serialize_int32_t+0xc0>
 8018c32:	68a2      	ldr	r2, [r4, #8]
 8018c34:	6923      	ldr	r3, [r4, #16]
 8018c36:	7da0      	ldrb	r0, [r4, #22]
 8018c38:	7567      	strb	r7, [r4, #21]
 8018c3a:	1b92      	subs	r2, r2, r6
 8018c3c:	1b9b      	subs	r3, r3, r6
 8018c3e:	f080 0001 	eor.w	r0, r0, #1
 8018c42:	60a2      	str	r2, [r4, #8]
 8018c44:	6123      	str	r3, [r4, #16]
 8018c46:	b002      	add	sp, #8
 8018c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c4c:	68a3      	ldr	r3, [r4, #8]
 8018c4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018c52:	701a      	strb	r2, [r3, #0]
 8018c54:	68a3      	ldr	r3, [r4, #8]
 8018c56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018c5a:	701a      	strb	r2, [r3, #0]
 8018c5c:	68a3      	ldr	r3, [r4, #8]
 8018c5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8018c62:	701a      	strb	r2, [r3, #0]
 8018c64:	e7ad      	b.n	8018bc2 <ucdr_serialize_int32_t+0x72>
 8018c66:	4628      	mov	r0, r5
 8018c68:	ad01      	add	r5, sp, #4
 8018c6a:	4629      	mov	r1, r5
 8018c6c:	4632      	mov	r2, r6
 8018c6e:	f001 f881 	bl	8019d74 <memcpy>
 8018c72:	68a0      	ldr	r0, [r4, #8]
 8018c74:	4642      	mov	r2, r8
 8018c76:	19a9      	adds	r1, r5, r6
 8018c78:	f001 f87c 	bl	8019d74 <memcpy>
 8018c7c:	e7a1      	b.n	8018bc2 <ucdr_serialize_int32_t+0x72>
 8018c7e:	bf00      	nop

08018c80 <ucdr_deserialize_int32_t>:
 8018c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c84:	460d      	mov	r5, r1
 8018c86:	2104      	movs	r1, #4
 8018c88:	4604      	mov	r4, r0
 8018c8a:	f7f8 f99d 	bl	8010fc8 <ucdr_buffer_alignment>
 8018c8e:	4601      	mov	r1, r0
 8018c90:	4620      	mov	r0, r4
 8018c92:	f894 8015 	ldrb.w	r8, [r4, #21]
 8018c96:	f7f8 f9db 	bl	8011050 <ucdr_advance_buffer>
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	2104      	movs	r1, #4
 8018c9e:	f7f8 f935 	bl	8010f0c <ucdr_check_buffer_available_for>
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	d138      	bne.n	8018d18 <ucdr_deserialize_int32_t+0x98>
 8018ca6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8018caa:	42b7      	cmp	r7, r6
 8018cac:	d92f      	bls.n	8018d0e <ucdr_deserialize_int32_t+0x8e>
 8018cae:	6922      	ldr	r2, [r4, #16]
 8018cb0:	60a7      	str	r7, [r4, #8]
 8018cb2:	1bbf      	subs	r7, r7, r6
 8018cb4:	443a      	add	r2, r7
 8018cb6:	f1c7 0904 	rsb	r9, r7, #4
 8018cba:	6122      	str	r2, [r4, #16]
 8018cbc:	4649      	mov	r1, r9
 8018cbe:	4620      	mov	r0, r4
 8018cc0:	f7f8 f930 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018cc4:	2800      	cmp	r0, #0
 8018cc6:	d046      	beq.n	8018d56 <ucdr_deserialize_int32_t+0xd6>
 8018cc8:	7d23      	ldrb	r3, [r4, #20]
 8018cca:	2b01      	cmp	r3, #1
 8018ccc:	d05c      	beq.n	8018d88 <ucdr_deserialize_int32_t+0x108>
 8018cce:	78f3      	ldrb	r3, [r6, #3]
 8018cd0:	702b      	strb	r3, [r5, #0]
 8018cd2:	2f00      	cmp	r7, #0
 8018cd4:	d04c      	beq.n	8018d70 <ucdr_deserialize_int32_t+0xf0>
 8018cd6:	78b3      	ldrb	r3, [r6, #2]
 8018cd8:	706b      	strb	r3, [r5, #1]
 8018cda:	2f01      	cmp	r7, #1
 8018cdc:	f105 0302 	add.w	r3, r5, #2
 8018ce0:	d04a      	beq.n	8018d78 <ucdr_deserialize_int32_t+0xf8>
 8018ce2:	7873      	ldrb	r3, [r6, #1]
 8018ce4:	70ab      	strb	r3, [r5, #2]
 8018ce6:	2f02      	cmp	r7, #2
 8018ce8:	f105 0303 	add.w	r3, r5, #3
 8018cec:	d048      	beq.n	8018d80 <ucdr_deserialize_int32_t+0x100>
 8018cee:	7833      	ldrb	r3, [r6, #0]
 8018cf0:	70eb      	strb	r3, [r5, #3]
 8018cf2:	6923      	ldr	r3, [r4, #16]
 8018cf4:	68a2      	ldr	r2, [r4, #8]
 8018cf6:	7da0      	ldrb	r0, [r4, #22]
 8018cf8:	2104      	movs	r1, #4
 8018cfa:	3304      	adds	r3, #4
 8018cfc:	1bdb      	subs	r3, r3, r7
 8018cfe:	444a      	add	r2, r9
 8018d00:	7561      	strb	r1, [r4, #21]
 8018d02:	6123      	str	r3, [r4, #16]
 8018d04:	60a2      	str	r2, [r4, #8]
 8018d06:	f080 0001 	eor.w	r0, r0, #1
 8018d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d0e:	2104      	movs	r1, #4
 8018d10:	4620      	mov	r0, r4
 8018d12:	f7f8 f907 	bl	8010f24 <ucdr_check_final_buffer_behavior>
 8018d16:	b1b0      	cbz	r0, 8018d46 <ucdr_deserialize_int32_t+0xc6>
 8018d18:	7d23      	ldrb	r3, [r4, #20]
 8018d1a:	2b01      	cmp	r3, #1
 8018d1c:	68a3      	ldr	r3, [r4, #8]
 8018d1e:	d017      	beq.n	8018d50 <ucdr_deserialize_int32_t+0xd0>
 8018d20:	78db      	ldrb	r3, [r3, #3]
 8018d22:	702b      	strb	r3, [r5, #0]
 8018d24:	68a3      	ldr	r3, [r4, #8]
 8018d26:	789b      	ldrb	r3, [r3, #2]
 8018d28:	706b      	strb	r3, [r5, #1]
 8018d2a:	68a3      	ldr	r3, [r4, #8]
 8018d2c:	785b      	ldrb	r3, [r3, #1]
 8018d2e:	70ab      	strb	r3, [r5, #2]
 8018d30:	68a3      	ldr	r3, [r4, #8]
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	70eb      	strb	r3, [r5, #3]
 8018d36:	68a2      	ldr	r2, [r4, #8]
 8018d38:	6923      	ldr	r3, [r4, #16]
 8018d3a:	3204      	adds	r2, #4
 8018d3c:	3304      	adds	r3, #4
 8018d3e:	2104      	movs	r1, #4
 8018d40:	60a2      	str	r2, [r4, #8]
 8018d42:	6123      	str	r3, [r4, #16]
 8018d44:	7561      	strb	r1, [r4, #21]
 8018d46:	7da0      	ldrb	r0, [r4, #22]
 8018d48:	f080 0001 	eor.w	r0, r0, #1
 8018d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	602b      	str	r3, [r5, #0]
 8018d54:	e7ef      	b.n	8018d36 <ucdr_deserialize_int32_t+0xb6>
 8018d56:	68a2      	ldr	r2, [r4, #8]
 8018d58:	6923      	ldr	r3, [r4, #16]
 8018d5a:	7da0      	ldrb	r0, [r4, #22]
 8018d5c:	f884 8015 	strb.w	r8, [r4, #21]
 8018d60:	1bd2      	subs	r2, r2, r7
 8018d62:	1bdb      	subs	r3, r3, r7
 8018d64:	60a2      	str	r2, [r4, #8]
 8018d66:	6123      	str	r3, [r4, #16]
 8018d68:	f080 0001 	eor.w	r0, r0, #1
 8018d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d70:	68a3      	ldr	r3, [r4, #8]
 8018d72:	789b      	ldrb	r3, [r3, #2]
 8018d74:	706b      	strb	r3, [r5, #1]
 8018d76:	1cab      	adds	r3, r5, #2
 8018d78:	68a2      	ldr	r2, [r4, #8]
 8018d7a:	7852      	ldrb	r2, [r2, #1]
 8018d7c:	f803 2b01 	strb.w	r2, [r3], #1
 8018d80:	68a2      	ldr	r2, [r4, #8]
 8018d82:	7812      	ldrb	r2, [r2, #0]
 8018d84:	701a      	strb	r2, [r3, #0]
 8018d86:	e7b4      	b.n	8018cf2 <ucdr_deserialize_int32_t+0x72>
 8018d88:	4631      	mov	r1, r6
 8018d8a:	463a      	mov	r2, r7
 8018d8c:	4628      	mov	r0, r5
 8018d8e:	f000 fff1 	bl	8019d74 <memcpy>
 8018d92:	68a1      	ldr	r1, [r4, #8]
 8018d94:	464a      	mov	r2, r9
 8018d96:	19e8      	adds	r0, r5, r7
 8018d98:	f000 ffec 	bl	8019d74 <memcpy>
 8018d9c:	e7a9      	b.n	8018cf2 <ucdr_deserialize_int32_t+0x72>
 8018d9e:	bf00      	nop

08018da0 <ucdr_serialize_string>:
 8018da0:	b510      	push	{r4, lr}
 8018da2:	b082      	sub	sp, #8
 8018da4:	4604      	mov	r4, r0
 8018da6:	4608      	mov	r0, r1
 8018da8:	9101      	str	r1, [sp, #4]
 8018daa:	f7e7 fa23 	bl	80001f4 <strlen>
 8018dae:	9901      	ldr	r1, [sp, #4]
 8018db0:	4602      	mov	r2, r0
 8018db2:	3201      	adds	r2, #1
 8018db4:	4620      	mov	r0, r4
 8018db6:	b002      	add	sp, #8
 8018db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dbc:	f7f8 b968 	b.w	8011090 <ucdr_serialize_sequence_char>

08018dc0 <ucdr_deserialize_string>:
 8018dc0:	b500      	push	{lr}
 8018dc2:	b083      	sub	sp, #12
 8018dc4:	ab01      	add	r3, sp, #4
 8018dc6:	f7f8 f975 	bl	80110b4 <ucdr_deserialize_sequence_char>
 8018dca:	b003      	add	sp, #12
 8018dcc:	f85d fb04 	ldr.w	pc, [sp], #4

08018dd0 <uxr_init_input_best_effort_stream>:
 8018dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018dd4:	8003      	strh	r3, [r0, #0]
 8018dd6:	4770      	bx	lr

08018dd8 <uxr_reset_input_best_effort_stream>:
 8018dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ddc:	8003      	strh	r3, [r0, #0]
 8018dde:	4770      	bx	lr

08018de0 <uxr_receive_best_effort_message>:
 8018de0:	b538      	push	{r3, r4, r5, lr}
 8018de2:	4604      	mov	r4, r0
 8018de4:	8800      	ldrh	r0, [r0, #0]
 8018de6:	460d      	mov	r5, r1
 8018de8:	f000 fd20 	bl	801982c <uxr_seq_num_cmp>
 8018dec:	4603      	mov	r3, r0
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018df4:	bfb8      	it	lt
 8018df6:	8025      	strhlt	r5, [r4, #0]
 8018df8:	bd38      	pop	{r3, r4, r5, pc}
 8018dfa:	bf00      	nop

08018dfc <on_full_input_buffer>:
 8018dfc:	b570      	push	{r4, r5, r6, lr}
 8018dfe:	6802      	ldr	r2, [r0, #0]
 8018e00:	460d      	mov	r5, r1
 8018e02:	6809      	ldr	r1, [r1, #0]
 8018e04:	686c      	ldr	r4, [r5, #4]
 8018e06:	1a53      	subs	r3, r2, r1
 8018e08:	4606      	mov	r6, r0
 8018e0a:	8928      	ldrh	r0, [r5, #8]
 8018e0c:	fbb4 f4f0 	udiv	r4, r4, r0
 8018e10:	fbb3 f3f4 	udiv	r3, r3, r4
 8018e14:	3301      	adds	r3, #1
 8018e16:	b29b      	uxth	r3, r3
 8018e18:	fbb3 f2f0 	udiv	r2, r3, r0
 8018e1c:	fb00 3312 	mls	r3, r0, r2, r3
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	fb04 f403 	mul.w	r4, r4, r3
 8018e26:	1d23      	adds	r3, r4, #4
 8018e28:	440b      	add	r3, r1
 8018e2a:	7d28      	ldrb	r0, [r5, #20]
 8018e2c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018e30:	b110      	cbz	r0, 8018e38 <on_full_input_buffer+0x3c>
 8018e32:	2000      	movs	r0, #0
 8018e34:	f843 0c04 	str.w	r0, [r3, #-4]
 8018e38:	2a03      	cmp	r2, #3
 8018e3a:	d801      	bhi.n	8018e40 <on_full_input_buffer+0x44>
 8018e3c:	2001      	movs	r0, #1
 8018e3e:	bd70      	pop	{r4, r5, r6, pc}
 8018e40:	3408      	adds	r4, #8
 8018e42:	6933      	ldr	r3, [r6, #16]
 8018e44:	4421      	add	r1, r4
 8018e46:	4630      	mov	r0, r6
 8018e48:	3a04      	subs	r2, #4
 8018e4a:	f7f8 f8a9 	bl	8010fa0 <ucdr_init_buffer_origin>
 8018e4e:	4630      	mov	r0, r6
 8018e50:	4902      	ldr	r1, [pc, #8]	; (8018e5c <on_full_input_buffer+0x60>)
 8018e52:	462a      	mov	r2, r5
 8018e54:	f7f8 f882 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 8018e58:	2000      	movs	r0, #0
 8018e5a:	bd70      	pop	{r4, r5, r6, pc}
 8018e5c:	08018dfd 	.word	0x08018dfd

08018e60 <uxr_init_input_reliable_stream>:
 8018e60:	b470      	push	{r4, r5, r6}
 8018e62:	9c03      	ldr	r4, [sp, #12]
 8018e64:	6001      	str	r1, [r0, #0]
 8018e66:	2600      	movs	r6, #0
 8018e68:	8103      	strh	r3, [r0, #8]
 8018e6a:	6042      	str	r2, [r0, #4]
 8018e6c:	6104      	str	r4, [r0, #16]
 8018e6e:	7506      	strb	r6, [r0, #20]
 8018e70:	b1ab      	cbz	r3, 8018e9e <uxr_init_input_reliable_stream+0x3e>
 8018e72:	600e      	str	r6, [r1, #0]
 8018e74:	8901      	ldrh	r1, [r0, #8]
 8018e76:	2901      	cmp	r1, #1
 8018e78:	d911      	bls.n	8018e9e <uxr_init_input_reliable_stream+0x3e>
 8018e7a:	2201      	movs	r2, #1
 8018e7c:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018e80:	fbb2 f3f1 	udiv	r3, r2, r1
 8018e84:	fb01 2313 	mls	r3, r1, r3, r2
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	fbb4 f1f1 	udiv	r1, r4, r1
 8018e8e:	fb03 f301 	mul.w	r3, r3, r1
 8018e92:	3201      	adds	r2, #1
 8018e94:	50ee      	str	r6, [r5, r3]
 8018e96:	8901      	ldrh	r1, [r0, #8]
 8018e98:	b292      	uxth	r2, r2
 8018e9a:	4291      	cmp	r1, r2
 8018e9c:	d8ee      	bhi.n	8018e7c <uxr_init_input_reliable_stream+0x1c>
 8018e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ea2:	bc70      	pop	{r4, r5, r6}
 8018ea4:	60c3      	str	r3, [r0, #12]
 8018ea6:	4770      	bx	lr

08018ea8 <uxr_reset_input_reliable_stream>:
 8018ea8:	8902      	ldrh	r2, [r0, #8]
 8018eaa:	b1ca      	cbz	r2, 8018ee0 <uxr_reset_input_reliable_stream+0x38>
 8018eac:	b470      	push	{r4, r5, r6}
 8018eae:	2400      	movs	r4, #0
 8018eb0:	4621      	mov	r1, r4
 8018eb2:	4626      	mov	r6, r4
 8018eb4:	fbb1 f3f2 	udiv	r3, r1, r2
 8018eb8:	fb02 1313 	mls	r3, r2, r3, r1
 8018ebc:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	fbb1 f2f2 	udiv	r2, r1, r2
 8018ec6:	fb03 f302 	mul.w	r3, r3, r2
 8018eca:	3401      	adds	r4, #1
 8018ecc:	50ee      	str	r6, [r5, r3]
 8018ece:	8902      	ldrh	r2, [r0, #8]
 8018ed0:	b2a1      	uxth	r1, r4
 8018ed2:	428a      	cmp	r2, r1
 8018ed4:	d8ee      	bhi.n	8018eb4 <uxr_reset_input_reliable_stream+0xc>
 8018ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018eda:	bc70      	pop	{r4, r5, r6}
 8018edc:	60c3      	str	r3, [r0, #12]
 8018ede:	4770      	bx	lr
 8018ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ee4:	60c3      	str	r3, [r0, #12]
 8018ee6:	4770      	bx	lr

08018ee8 <uxr_receive_reliable_message>:
 8018ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018eec:	4604      	mov	r4, r0
 8018eee:	460d      	mov	r5, r1
 8018ef0:	8901      	ldrh	r1, [r0, #8]
 8018ef2:	8980      	ldrh	r0, [r0, #12]
 8018ef4:	4690      	mov	r8, r2
 8018ef6:	461f      	mov	r7, r3
 8018ef8:	f000 fc90 	bl	801981c <uxr_seq_num_add>
 8018efc:	4629      	mov	r1, r5
 8018efe:	4606      	mov	r6, r0
 8018f00:	89a0      	ldrh	r0, [r4, #12]
 8018f02:	f000 fc93 	bl	801982c <uxr_seq_num_cmp>
 8018f06:	2800      	cmp	r0, #0
 8018f08:	db0a      	blt.n	8018f20 <uxr_receive_reliable_message+0x38>
 8018f0a:	2600      	movs	r6, #0
 8018f0c:	89e0      	ldrh	r0, [r4, #14]
 8018f0e:	4629      	mov	r1, r5
 8018f10:	f000 fc8c 	bl	801982c <uxr_seq_num_cmp>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	bfb8      	it	lt
 8018f18:	81e5      	strhlt	r5, [r4, #14]
 8018f1a:	4630      	mov	r0, r6
 8018f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f20:	4630      	mov	r0, r6
 8018f22:	4629      	mov	r1, r5
 8018f24:	f000 fc82 	bl	801982c <uxr_seq_num_cmp>
 8018f28:	2800      	cmp	r0, #0
 8018f2a:	dbee      	blt.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018f2c:	6923      	ldr	r3, [r4, #16]
 8018f2e:	4640      	mov	r0, r8
 8018f30:	4798      	blx	r3
 8018f32:	2101      	movs	r1, #1
 8018f34:	4681      	mov	r9, r0
 8018f36:	89a0      	ldrh	r0, [r4, #12]
 8018f38:	f000 fc70 	bl	801981c <uxr_seq_num_add>
 8018f3c:	f1b9 0f00 	cmp.w	r9, #0
 8018f40:	d101      	bne.n	8018f46 <uxr_receive_reliable_message+0x5e>
 8018f42:	4285      	cmp	r5, r0
 8018f44:	d049      	beq.n	8018fda <uxr_receive_reliable_message+0xf2>
 8018f46:	8921      	ldrh	r1, [r4, #8]
 8018f48:	fbb5 f3f1 	udiv	r3, r5, r1
 8018f4c:	fb01 5313 	mls	r3, r1, r3, r5
 8018f50:	b29b      	uxth	r3, r3
 8018f52:	6862      	ldr	r2, [r4, #4]
 8018f54:	6820      	ldr	r0, [r4, #0]
 8018f56:	fbb2 f2f1 	udiv	r2, r2, r1
 8018f5a:	fb03 f302 	mul.w	r3, r3, r2
 8018f5e:	3304      	adds	r3, #4
 8018f60:	4418      	add	r0, r3
 8018f62:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d1cf      	bne.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018f6a:	4641      	mov	r1, r8
 8018f6c:	463a      	mov	r2, r7
 8018f6e:	f000 ff01 	bl	8019d74 <memcpy>
 8018f72:	8921      	ldrh	r1, [r4, #8]
 8018f74:	fbb5 f3f1 	udiv	r3, r5, r1
 8018f78:	fb01 5313 	mls	r3, r1, r3, r5
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	6862      	ldr	r2, [r4, #4]
 8018f80:	fbb2 f2f1 	udiv	r2, r2, r1
 8018f84:	6821      	ldr	r1, [r4, #0]
 8018f86:	fb03 f302 	mul.w	r3, r3, r2
 8018f8a:	2201      	movs	r2, #1
 8018f8c:	50cf      	str	r7, [r1, r3]
 8018f8e:	9b08      	ldr	r3, [sp, #32]
 8018f90:	701a      	strb	r2, [r3, #0]
 8018f92:	f1b9 0f00 	cmp.w	r9, #0
 8018f96:	d0b8      	beq.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018f98:	89a6      	ldrh	r6, [r4, #12]
 8018f9a:	e001      	b.n	8018fa0 <uxr_receive_reliable_message+0xb8>
 8018f9c:	2801      	cmp	r0, #1
 8018f9e:	d1b4      	bne.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018fa0:	4630      	mov	r0, r6
 8018fa2:	2101      	movs	r1, #1
 8018fa4:	f000 fc3a 	bl	801981c <uxr_seq_num_add>
 8018fa8:	8921      	ldrh	r1, [r4, #8]
 8018faa:	fbb0 f3f1 	udiv	r3, r0, r1
 8018fae:	fb01 0313 	mls	r3, r1, r3, r0
 8018fb2:	b29b      	uxth	r3, r3
 8018fb4:	6862      	ldr	r2, [r4, #4]
 8018fb6:	fbb2 f2f1 	udiv	r2, r2, r1
 8018fba:	4606      	mov	r6, r0
 8018fbc:	fb03 f302 	mul.w	r3, r3, r2
 8018fc0:	6820      	ldr	r0, [r4, #0]
 8018fc2:	3304      	adds	r3, #4
 8018fc4:	4418      	add	r0, r3
 8018fc6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d09d      	beq.n	8018f0a <uxr_receive_reliable_message+0x22>
 8018fce:	6923      	ldr	r3, [r4, #16]
 8018fd0:	4798      	blx	r3
 8018fd2:	2802      	cmp	r0, #2
 8018fd4:	d1e2      	bne.n	8018f9c <uxr_receive_reliable_message+0xb4>
 8018fd6:	2601      	movs	r6, #1
 8018fd8:	e798      	b.n	8018f0c <uxr_receive_reliable_message+0x24>
 8018fda:	9b08      	ldr	r3, [sp, #32]
 8018fdc:	81a5      	strh	r5, [r4, #12]
 8018fde:	2601      	movs	r6, #1
 8018fe0:	f883 9000 	strb.w	r9, [r3]
 8018fe4:	e792      	b.n	8018f0c <uxr_receive_reliable_message+0x24>
 8018fe6:	bf00      	nop

08018fe8 <uxr_next_input_reliable_buffer_available>:
 8018fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fec:	4604      	mov	r4, r0
 8018fee:	460e      	mov	r6, r1
 8018ff0:	8980      	ldrh	r0, [r0, #12]
 8018ff2:	2101      	movs	r1, #1
 8018ff4:	4617      	mov	r7, r2
 8018ff6:	f000 fc11 	bl	801981c <uxr_seq_num_add>
 8018ffa:	8921      	ldrh	r1, [r4, #8]
 8018ffc:	fbb0 f3f1 	udiv	r3, r0, r1
 8019000:	fb01 0313 	mls	r3, r1, r3, r0
 8019004:	b29b      	uxth	r3, r3
 8019006:	6862      	ldr	r2, [r4, #4]
 8019008:	fbb2 f2f1 	udiv	r2, r2, r1
 801900c:	fb03 f302 	mul.w	r3, r3, r2
 8019010:	6822      	ldr	r2, [r4, #0]
 8019012:	3304      	adds	r3, #4
 8019014:	eb02 0803 	add.w	r8, r2, r3
 8019018:	f858 9c04 	ldr.w	r9, [r8, #-4]
 801901c:	f1b9 0f00 	cmp.w	r9, #0
 8019020:	d025      	beq.n	801906e <uxr_next_input_reliable_buffer_available+0x86>
 8019022:	6923      	ldr	r3, [r4, #16]
 8019024:	4605      	mov	r5, r0
 8019026:	4640      	mov	r0, r8
 8019028:	4798      	blx	r3
 801902a:	4682      	mov	sl, r0
 801902c:	b310      	cbz	r0, 8019074 <uxr_next_input_reliable_buffer_available+0x8c>
 801902e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019032:	e005      	b.n	8019040 <uxr_next_input_reliable_buffer_available+0x58>
 8019034:	6923      	ldr	r3, [r4, #16]
 8019036:	4798      	blx	r3
 8019038:	2802      	cmp	r0, #2
 801903a:	d032      	beq.n	80190a2 <uxr_next_input_reliable_buffer_available+0xba>
 801903c:	2801      	cmp	r0, #1
 801903e:	d116      	bne.n	801906e <uxr_next_input_reliable_buffer_available+0x86>
 8019040:	4650      	mov	r0, sl
 8019042:	2101      	movs	r1, #1
 8019044:	f000 fbea 	bl	801981c <uxr_seq_num_add>
 8019048:	8921      	ldrh	r1, [r4, #8]
 801904a:	fbb0 f3f1 	udiv	r3, r0, r1
 801904e:	fb01 0313 	mls	r3, r1, r3, r0
 8019052:	b29b      	uxth	r3, r3
 8019054:	6862      	ldr	r2, [r4, #4]
 8019056:	fbb2 f2f1 	udiv	r2, r2, r1
 801905a:	4682      	mov	sl, r0
 801905c:	fb03 f302 	mul.w	r3, r3, r2
 8019060:	6820      	ldr	r0, [r4, #0]
 8019062:	3304      	adds	r3, #4
 8019064:	4418      	add	r0, r3
 8019066:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d1e2      	bne.n	8019034 <uxr_next_input_reliable_buffer_available+0x4c>
 801906e:	2000      	movs	r0, #0
 8019070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019074:	464a      	mov	r2, r9
 8019076:	4641      	mov	r1, r8
 8019078:	4630      	mov	r0, r6
 801907a:	f7f7 ff99 	bl	8010fb0 <ucdr_init_buffer>
 801907e:	8921      	ldrh	r1, [r4, #8]
 8019080:	fbb5 f3f1 	udiv	r3, r5, r1
 8019084:	fb01 5313 	mls	r3, r1, r3, r5
 8019088:	b29b      	uxth	r3, r3
 801908a:	6862      	ldr	r2, [r4, #4]
 801908c:	fbb2 f2f1 	udiv	r2, r2, r1
 8019090:	6821      	ldr	r1, [r4, #0]
 8019092:	fb03 f302 	mul.w	r3, r3, r2
 8019096:	2001      	movs	r0, #1
 8019098:	f841 a003 	str.w	sl, [r1, r3]
 801909c:	81a5      	strh	r5, [r4, #12]
 801909e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190a2:	8922      	ldrh	r2, [r4, #8]
 80190a4:	fbb5 f0f2 	udiv	r0, r5, r2
 80190a8:	fb02 5510 	mls	r5, r2, r0, r5
 80190ac:	b2ad      	uxth	r5, r5
 80190ae:	6863      	ldr	r3, [r4, #4]
 80190b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80190b4:	fb05 f503 	mul.w	r5, r5, r3
 80190b8:	6823      	ldr	r3, [r4, #0]
 80190ba:	2000      	movs	r0, #0
 80190bc:	5158      	str	r0, [r3, r5]
 80190be:	eba9 0207 	sub.w	r2, r9, r7
 80190c2:	eb08 0107 	add.w	r1, r8, r7
 80190c6:	4630      	mov	r0, r6
 80190c8:	f7f7 ff72 	bl	8010fb0 <ucdr_init_buffer>
 80190cc:	4630      	mov	r0, r6
 80190ce:	4904      	ldr	r1, [pc, #16]	; (80190e0 <uxr_next_input_reliable_buffer_available+0xf8>)
 80190d0:	4622      	mov	r2, r4
 80190d2:	f7f7 ff43 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 80190d6:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80190da:	2001      	movs	r0, #1
 80190dc:	e7c8      	b.n	8019070 <uxr_next_input_reliable_buffer_available+0x88>
 80190de:	bf00      	nop
 80190e0:	08018dfd 	.word	0x08018dfd

080190e4 <uxr_process_heartbeat>:
 80190e4:	b538      	push	{r3, r4, r5, lr}
 80190e6:	4611      	mov	r1, r2
 80190e8:	4604      	mov	r4, r0
 80190ea:	89c0      	ldrh	r0, [r0, #14]
 80190ec:	4615      	mov	r5, r2
 80190ee:	f000 fb9d 	bl	801982c <uxr_seq_num_cmp>
 80190f2:	2800      	cmp	r0, #0
 80190f4:	bfb8      	it	lt
 80190f6:	81e5      	strhlt	r5, [r4, #14]
 80190f8:	bd38      	pop	{r3, r4, r5, pc}
 80190fa:	bf00      	nop

080190fc <uxr_compute_acknack>:
 80190fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019100:	8903      	ldrh	r3, [r0, #8]
 8019102:	8986      	ldrh	r6, [r0, #12]
 8019104:	4604      	mov	r4, r0
 8019106:	460d      	mov	r5, r1
 8019108:	b1d3      	cbz	r3, 8019140 <uxr_compute_acknack+0x44>
 801910a:	4630      	mov	r0, r6
 801910c:	2701      	movs	r7, #1
 801910e:	e003      	b.n	8019118 <uxr_compute_acknack+0x1c>
 8019110:	4567      	cmp	r7, ip
 8019112:	d215      	bcs.n	8019140 <uxr_compute_acknack+0x44>
 8019114:	89a0      	ldrh	r0, [r4, #12]
 8019116:	3701      	adds	r7, #1
 8019118:	b2b9      	uxth	r1, r7
 801911a:	f000 fb7f 	bl	801981c <uxr_seq_num_add>
 801911e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019122:	fbb0 f2fc 	udiv	r2, r0, ip
 8019126:	e9d4 1300 	ldrd	r1, r3, [r4]
 801912a:	fb0c 0212 	mls	r2, ip, r2, r0
 801912e:	b292      	uxth	r2, r2
 8019130:	fbb3 f3fc 	udiv	r3, r3, ip
 8019134:	fb02 1303 	mla	r3, r2, r3, r1
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d1e8      	bne.n	8019110 <uxr_compute_acknack+0x14>
 801913e:	4606      	mov	r6, r0
 8019140:	802e      	strh	r6, [r5, #0]
 8019142:	4630      	mov	r0, r6
 8019144:	2101      	movs	r1, #1
 8019146:	89e6      	ldrh	r6, [r4, #14]
 8019148:	f000 fb6c 	bl	8019824 <uxr_seq_num_sub>
 801914c:	4601      	mov	r1, r0
 801914e:	4630      	mov	r0, r6
 8019150:	f000 fb68 	bl	8019824 <uxr_seq_num_sub>
 8019154:	4606      	mov	r6, r0
 8019156:	b318      	cbz	r0, 80191a0 <uxr_compute_acknack+0xa4>
 8019158:	f04f 0900 	mov.w	r9, #0
 801915c:	464f      	mov	r7, r9
 801915e:	f04f 0801 	mov.w	r8, #1
 8019162:	fa1f f189 	uxth.w	r1, r9
 8019166:	8828      	ldrh	r0, [r5, #0]
 8019168:	f000 fb58 	bl	801981c <uxr_seq_num_add>
 801916c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019170:	6822      	ldr	r2, [r4, #0]
 8019172:	fbb0 f1fc 	udiv	r1, r0, ip
 8019176:	fb01 011c 	mls	r1, r1, ip, r0
 801917a:	b289      	uxth	r1, r1
 801917c:	6863      	ldr	r3, [r4, #4]
 801917e:	fbb3 f3fc 	udiv	r3, r3, ip
 8019182:	fb01 2303 	mla	r3, r1, r3, r2
 8019186:	fa08 f209 	lsl.w	r2, r8, r9
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	f109 0901 	add.w	r9, r9, #1
 8019190:	b90b      	cbnz	r3, 8019196 <uxr_compute_acknack+0x9a>
 8019192:	4317      	orrs	r7, r2
 8019194:	b2bf      	uxth	r7, r7
 8019196:	454e      	cmp	r6, r9
 8019198:	d1e3      	bne.n	8019162 <uxr_compute_acknack+0x66>
 801919a:	4638      	mov	r0, r7
 801919c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191a0:	4607      	mov	r7, r0
 80191a2:	4638      	mov	r0, r7
 80191a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080191a8 <uxr_init_output_best_effort_stream>:
 80191a8:	b410      	push	{r4}
 80191aa:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80191ae:	81c4      	strh	r4, [r0, #14]
 80191b0:	e9c0 1300 	strd	r1, r3, [r0]
 80191b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191b8:	7303      	strb	r3, [r0, #12]
 80191ba:	6082      	str	r2, [r0, #8]
 80191bc:	4770      	bx	lr
 80191be:	bf00      	nop

080191c0 <uxr_reset_output_best_effort_stream>:
 80191c0:	7b02      	ldrb	r2, [r0, #12]
 80191c2:	6042      	str	r2, [r0, #4]
 80191c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80191c8:	81c3      	strh	r3, [r0, #14]
 80191ca:	4770      	bx	lr

080191cc <uxr_prepare_best_effort_buffer_to_write>:
 80191cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191ce:	4604      	mov	r4, r0
 80191d0:	b083      	sub	sp, #12
 80191d2:	6840      	ldr	r0, [r0, #4]
 80191d4:	460d      	mov	r5, r1
 80191d6:	4616      	mov	r6, r2
 80191d8:	f7fa fa66 	bl	80136a8 <uxr_submessage_padding>
 80191dc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80191e0:	4410      	add	r0, r2
 80191e2:	1942      	adds	r2, r0, r5
 80191e4:	4293      	cmp	r3, r2
 80191e6:	bf2c      	ite	cs
 80191e8:	2701      	movcs	r7, #1
 80191ea:	2700      	movcc	r7, #0
 80191ec:	d202      	bcs.n	80191f4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80191ee:	4638      	mov	r0, r7
 80191f0:	b003      	add	sp, #12
 80191f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191f4:	9000      	str	r0, [sp, #0]
 80191f6:	6821      	ldr	r1, [r4, #0]
 80191f8:	4630      	mov	r0, r6
 80191fa:	2300      	movs	r3, #0
 80191fc:	f7f7 fec6 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 8019200:	6861      	ldr	r1, [r4, #4]
 8019202:	4638      	mov	r0, r7
 8019204:	4429      	add	r1, r5
 8019206:	6061      	str	r1, [r4, #4]
 8019208:	b003      	add	sp, #12
 801920a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801920c <uxr_prepare_best_effort_buffer_to_send>:
 801920c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019210:	6845      	ldr	r5, [r0, #4]
 8019212:	4604      	mov	r4, r0
 8019214:	7b00      	ldrb	r0, [r0, #12]
 8019216:	4285      	cmp	r5, r0
 8019218:	bf8c      	ite	hi
 801921a:	2701      	movhi	r7, #1
 801921c:	2700      	movls	r7, #0
 801921e:	d802      	bhi.n	8019226 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8019220:	4638      	mov	r0, r7
 8019222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019226:	4688      	mov	r8, r1
 8019228:	89e0      	ldrh	r0, [r4, #14]
 801922a:	2101      	movs	r1, #1
 801922c:	4615      	mov	r5, r2
 801922e:	461e      	mov	r6, r3
 8019230:	f000 faf4 	bl	801981c <uxr_seq_num_add>
 8019234:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019238:	81e0      	strh	r0, [r4, #14]
 801923a:	8030      	strh	r0, [r6, #0]
 801923c:	f8c8 2000 	str.w	r2, [r8]
 8019240:	602b      	str	r3, [r5, #0]
 8019242:	7b23      	ldrb	r3, [r4, #12]
 8019244:	6063      	str	r3, [r4, #4]
 8019246:	4638      	mov	r0, r7
 8019248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801924c <on_full_output_buffer>:
 801924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801924e:	6802      	ldr	r2, [r0, #0]
 8019250:	460d      	mov	r5, r1
 8019252:	6809      	ldr	r1, [r1, #0]
 8019254:	892f      	ldrh	r7, [r5, #8]
 8019256:	686c      	ldr	r4, [r5, #4]
 8019258:	fbb4 f4f7 	udiv	r4, r4, r7
 801925c:	1a53      	subs	r3, r2, r1
 801925e:	fbb3 f3f4 	udiv	r3, r3, r4
 8019262:	3301      	adds	r3, #1
 8019264:	b29b      	uxth	r3, r3
 8019266:	fbb3 f2f7 	udiv	r2, r3, r7
 801926a:	fb07 3312 	mls	r3, r7, r2, r3
 801926e:	b29b      	uxth	r3, r3
 8019270:	fb04 f403 	mul.w	r4, r4, r3
 8019274:	7b2f      	ldrb	r7, [r5, #12]
 8019276:	590a      	ldr	r2, [r1, r4]
 8019278:	6903      	ldr	r3, [r0, #16]
 801927a:	443c      	add	r4, r7
 801927c:	3408      	adds	r4, #8
 801927e:	1bd2      	subs	r2, r2, r7
 8019280:	4606      	mov	r6, r0
 8019282:	4421      	add	r1, r4
 8019284:	3a04      	subs	r2, #4
 8019286:	f7f7 fe8b 	bl	8010fa0 <ucdr_init_buffer_origin>
 801928a:	4630      	mov	r0, r6
 801928c:	4902      	ldr	r1, [pc, #8]	; (8019298 <on_full_output_buffer+0x4c>)
 801928e:	462a      	mov	r2, r5
 8019290:	f7f7 fe64 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 8019294:	2000      	movs	r0, #0
 8019296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019298:	0801924d 	.word	0x0801924d

0801929c <uxr_init_output_reliable_stream>:
 801929c:	b430      	push	{r4, r5}
 801929e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80192a2:	6001      	str	r1, [r0, #0]
 80192a4:	8103      	strh	r3, [r0, #8]
 80192a6:	6042      	str	r2, [r0, #4]
 80192a8:	7304      	strb	r4, [r0, #12]
 80192aa:	b1b3      	cbz	r3, 80192da <uxr_init_output_reliable_stream+0x3e>
 80192ac:	600c      	str	r4, [r1, #0]
 80192ae:	8901      	ldrh	r1, [r0, #8]
 80192b0:	2901      	cmp	r1, #1
 80192b2:	d912      	bls.n	80192da <uxr_init_output_reliable_stream+0x3e>
 80192b4:	2201      	movs	r2, #1
 80192b6:	e9d0 5400 	ldrd	r5, r4, [r0]
 80192ba:	fbb2 f3f1 	udiv	r3, r2, r1
 80192be:	fb01 2313 	mls	r3, r1, r3, r2
 80192c2:	b29b      	uxth	r3, r3
 80192c4:	fbb4 f1f1 	udiv	r1, r4, r1
 80192c8:	fb03 f301 	mul.w	r3, r3, r1
 80192cc:	7b01      	ldrb	r1, [r0, #12]
 80192ce:	50e9      	str	r1, [r5, r3]
 80192d0:	3201      	adds	r2, #1
 80192d2:	8901      	ldrh	r1, [r0, #8]
 80192d4:	b292      	uxth	r2, r2
 80192d6:	4291      	cmp	r1, r2
 80192d8:	d8ed      	bhi.n	80192b6 <uxr_init_output_reliable_stream+0x1a>
 80192da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80192de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80192e2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80192e6:	4b05      	ldr	r3, [pc, #20]	; (80192fc <uxr_init_output_reliable_stream+0x60>)
 80192e8:	f8c0 300e 	str.w	r3, [r0, #14]
 80192ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80192f0:	2300      	movs	r3, #0
 80192f2:	bc30      	pop	{r4, r5}
 80192f4:	8242      	strh	r2, [r0, #18]
 80192f6:	8403      	strh	r3, [r0, #32]
 80192f8:	4770      	bx	lr
 80192fa:	bf00      	nop
 80192fc:	ffff0000 	.word	0xffff0000

08019300 <uxr_reset_output_reliable_stream>:
 8019300:	8902      	ldrh	r2, [r0, #8]
 8019302:	b430      	push	{r4, r5}
 8019304:	b19a      	cbz	r2, 801932e <uxr_reset_output_reliable_stream+0x2e>
 8019306:	2400      	movs	r4, #0
 8019308:	4621      	mov	r1, r4
 801930a:	fbb1 f3f2 	udiv	r3, r1, r2
 801930e:	fb02 1313 	mls	r3, r2, r3, r1
 8019312:	e9d0 5100 	ldrd	r5, r1, [r0]
 8019316:	b29b      	uxth	r3, r3
 8019318:	fbb1 f2f2 	udiv	r2, r1, r2
 801931c:	fb03 f302 	mul.w	r3, r3, r2
 8019320:	7b02      	ldrb	r2, [r0, #12]
 8019322:	50ea      	str	r2, [r5, r3]
 8019324:	3401      	adds	r4, #1
 8019326:	8902      	ldrh	r2, [r0, #8]
 8019328:	b2a1      	uxth	r1, r4
 801932a:	428a      	cmp	r2, r1
 801932c:	d8ed      	bhi.n	801930a <uxr_reset_output_reliable_stream+0xa>
 801932e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019332:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019336:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801933a:	4b05      	ldr	r3, [pc, #20]	; (8019350 <uxr_reset_output_reliable_stream+0x50>)
 801933c:	f8c0 300e 	str.w	r3, [r0, #14]
 8019340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019344:	2300      	movs	r3, #0
 8019346:	bc30      	pop	{r4, r5}
 8019348:	8242      	strh	r2, [r0, #18]
 801934a:	8403      	strh	r3, [r0, #32]
 801934c:	4770      	bx	lr
 801934e:	bf00      	nop
 8019350:	ffff0000 	.word	0xffff0000

08019354 <uxr_prepare_reliable_buffer_to_write>:
 8019354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019358:	89c5      	ldrh	r5, [r0, #14]
 801935a:	4604      	mov	r4, r0
 801935c:	8900      	ldrh	r0, [r0, #8]
 801935e:	fbb5 f3f0 	udiv	r3, r5, r0
 8019362:	4688      	mov	r8, r1
 8019364:	e9d4 1600 	ldrd	r1, r6, [r4]
 8019368:	fb00 5313 	mls	r3, r0, r3, r5
 801936c:	b29b      	uxth	r3, r3
 801936e:	fbb6 f0f0 	udiv	r0, r6, r0
 8019372:	fb00 f303 	mul.w	r3, r0, r3
 8019376:	3304      	adds	r3, #4
 8019378:	18cb      	adds	r3, r1, r3
 801937a:	b091      	sub	sp, #68	; 0x44
 801937c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8019380:	9004      	str	r0, [sp, #16]
 8019382:	2104      	movs	r1, #4
 8019384:	4630      	mov	r0, r6
 8019386:	9305      	str	r3, [sp, #20]
 8019388:	9206      	str	r2, [sp, #24]
 801938a:	f7f7 fe15 	bl	8010fb8 <ucdr_alignment>
 801938e:	1833      	adds	r3, r6, r0
 8019390:	9804      	ldr	r0, [sp, #16]
 8019392:	9303      	str	r3, [sp, #12]
 8019394:	eb03 0708 	add.w	r7, r3, r8
 8019398:	1f06      	subs	r6, r0, #4
 801939a:	42b7      	cmp	r7, r6
 801939c:	f240 80dc 	bls.w	8019558 <uxr_prepare_reliable_buffer_to_write+0x204>
 80193a0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80193a4:	eb0e 0308 	add.w	r3, lr, r8
 80193a8:	42b3      	cmp	r3, r6
 80193aa:	f240 80c2 	bls.w	8019532 <uxr_prepare_reliable_buffer_to_write+0x1de>
 80193ae:	9b03      	ldr	r3, [sp, #12]
 80193b0:	3304      	adds	r3, #4
 80193b2:	42b3      	cmp	r3, r6
 80193b4:	f080 8112 	bcs.w	80195dc <uxr_prepare_reliable_buffer_to_write+0x288>
 80193b8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80193bc:	f1bc 0f00 	cmp.w	ip, #0
 80193c0:	f000 8127 	beq.w	8019612 <uxr_prepare_reliable_buffer_to_write+0x2be>
 80193c4:	e9d4 7300 	ldrd	r7, r3, [r4]
 80193c8:	2100      	movs	r1, #0
 80193ca:	4608      	mov	r0, r1
 80193cc:	460a      	mov	r2, r1
 80193ce:	fbb3 f9fc 	udiv	r9, r3, ip
 80193d2:	fbb2 f3fc 	udiv	r3, r2, ip
 80193d6:	fb0c 2313 	mls	r3, ip, r3, r2
 80193da:	b29b      	uxth	r3, r3
 80193dc:	fb09 7303 	mla	r3, r9, r3, r7
 80193e0:	3101      	adds	r1, #1
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	459e      	cmp	lr, r3
 80193e6:	bf08      	it	eq
 80193e8:	3001      	addeq	r0, #1
 80193ea:	b28a      	uxth	r2, r1
 80193ec:	bf08      	it	eq
 80193ee:	b280      	uxtheq	r0, r0
 80193f0:	4562      	cmp	r2, ip
 80193f2:	d3ee      	bcc.n	80193d2 <uxr_prepare_reliable_buffer_to_write+0x7e>
 80193f4:	9b03      	ldr	r3, [sp, #12]
 80193f6:	1f37      	subs	r7, r6, #4
 80193f8:	b2bf      	uxth	r7, r7
 80193fa:	eba7 0903 	sub.w	r9, r7, r3
 80193fe:	fa1f f989 	uxth.w	r9, r9
 8019402:	eba7 070e 	sub.w	r7, r7, lr
 8019406:	b2bf      	uxth	r7, r7
 8019408:	eba8 0809 	sub.w	r8, r8, r9
 801940c:	fbb8 faf7 	udiv	sl, r8, r7
 8019410:	fb07 831a 	mls	r3, r7, sl, r8
 8019414:	9707      	str	r7, [sp, #28]
 8019416:	2b00      	cmp	r3, #0
 8019418:	f040 80bf 	bne.w	801959a <uxr_prepare_reliable_buffer_to_write+0x246>
 801941c:	fa1f fa8a 	uxth.w	sl, sl
 8019420:	4582      	cmp	sl, r0
 8019422:	f200 8095 	bhi.w	8019550 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8019426:	f10d 0b20 	add.w	fp, sp, #32
 801942a:	f1ba 0f00 	cmp.w	sl, #0
 801942e:	d03a      	beq.n	80194a6 <uxr_prepare_reliable_buffer_to_write+0x152>
 8019430:	f04f 0800 	mov.w	r8, #0
 8019434:	f10d 0b20 	add.w	fp, sp, #32
 8019438:	e000      	b.n	801943c <uxr_prepare_reliable_buffer_to_write+0xe8>
 801943a:	46b9      	mov	r9, r7
 801943c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8019440:	fbb5 f1fc 	udiv	r1, r5, ip
 8019444:	fb0c 5111 	mls	r1, ip, r1, r5
 8019448:	b289      	uxth	r1, r1
 801944a:	fbb2 f2fc 	udiv	r2, r2, ip
 801944e:	fb01 f102 	mul.w	r1, r1, r2
 8019452:	3104      	adds	r1, #4
 8019454:	4419      	add	r1, r3
 8019456:	4632      	mov	r2, r6
 8019458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801945c:	9300      	str	r3, [sp, #0]
 801945e:	4658      	mov	r0, fp
 8019460:	2300      	movs	r3, #0
 8019462:	f7f7 fd93 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 8019466:	464a      	mov	r2, r9
 8019468:	2300      	movs	r3, #0
 801946a:	210d      	movs	r1, #13
 801946c:	4658      	mov	r0, fp
 801946e:	f7fa f8db 	bl	8013628 <uxr_buffer_submessage_header>
 8019472:	8920      	ldrh	r0, [r4, #8]
 8019474:	fbb5 f3f0 	udiv	r3, r5, r0
 8019478:	e9d4 2100 	ldrd	r2, r1, [r4]
 801947c:	fb00 5313 	mls	r3, r0, r3, r5
 8019480:	b29b      	uxth	r3, r3
 8019482:	fbb1 f1f0 	udiv	r1, r1, r0
 8019486:	fb03 f301 	mul.w	r3, r3, r1
 801948a:	4628      	mov	r0, r5
 801948c:	50d6      	str	r6, [r2, r3]
 801948e:	2101      	movs	r1, #1
 8019490:	f000 f9c4 	bl	801981c <uxr_seq_num_add>
 8019494:	f108 0801 	add.w	r8, r8, #1
 8019498:	fa1f f388 	uxth.w	r3, r8
 801949c:	459a      	cmp	sl, r3
 801949e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80194a2:	4605      	mov	r5, r0
 80194a4:	d8c9      	bhi.n	801943a <uxr_prepare_reliable_buffer_to_write+0xe6>
 80194a6:	fbb5 f1fc 	udiv	r1, r5, ip
 80194aa:	fb0c 5111 	mls	r1, ip, r1, r5
 80194ae:	b289      	uxth	r1, r1
 80194b0:	6863      	ldr	r3, [r4, #4]
 80194b2:	fbb3 fcfc 	udiv	ip, r3, ip
 80194b6:	6823      	ldr	r3, [r4, #0]
 80194b8:	fb01 f10c 	mul.w	r1, r1, ip
 80194bc:	3104      	adds	r1, #4
 80194be:	4419      	add	r1, r3
 80194c0:	4632      	mov	r2, r6
 80194c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194c6:	9300      	str	r3, [sp, #0]
 80194c8:	4658      	mov	r0, fp
 80194ca:	2300      	movs	r3, #0
 80194cc:	f7f7 fd5e 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 80194d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80194d4:	4658      	mov	r0, fp
 80194d6:	fa1f f288 	uxth.w	r2, r8
 80194da:	2302      	movs	r3, #2
 80194dc:	210d      	movs	r1, #13
 80194de:	f7fa f8a3 	bl	8013628 <uxr_buffer_submessage_header>
 80194e2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80194e6:	8921      	ldrh	r1, [r4, #8]
 80194e8:	9f03      	ldr	r7, [sp, #12]
 80194ea:	9307      	str	r3, [sp, #28]
 80194ec:	9b05      	ldr	r3, [sp, #20]
 80194ee:	7b26      	ldrb	r6, [r4, #12]
 80194f0:	fbb5 f0f1 	udiv	r0, r5, r1
 80194f4:	fbb2 f2f1 	udiv	r2, r2, r1
 80194f8:	fb01 5010 	mls	r0, r1, r0, r5
 80194fc:	1d39      	adds	r1, r7, #4
 80194fe:	440b      	add	r3, r1
 8019500:	b280      	uxth	r0, r0
 8019502:	fb00 f002 	mul.w	r0, r0, r2
 8019506:	4619      	mov	r1, r3
 8019508:	3604      	adds	r6, #4
 801950a:	9b07      	ldr	r3, [sp, #28]
 801950c:	9a04      	ldr	r2, [sp, #16]
 801950e:	4446      	add	r6, r8
 8019510:	501e      	str	r6, [r3, r0]
 8019512:	9e06      	ldr	r6, [sp, #24]
 8019514:	3a08      	subs	r2, #8
 8019516:	1bd2      	subs	r2, r2, r7
 8019518:	4630      	mov	r0, r6
 801951a:	f7f7 fd49 	bl	8010fb0 <ucdr_init_buffer>
 801951e:	4630      	mov	r0, r6
 8019520:	493d      	ldr	r1, [pc, #244]	; (8019618 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8019522:	4622      	mov	r2, r4
 8019524:	f7f7 fd1a 	bl	8010f5c <ucdr_set_on_full_buffer_callback>
 8019528:	2001      	movs	r0, #1
 801952a:	81e5      	strh	r5, [r4, #14]
 801952c:	b011      	add	sp, #68	; 0x44
 801952e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019532:	2101      	movs	r1, #1
 8019534:	89e0      	ldrh	r0, [r4, #14]
 8019536:	f000 f971 	bl	801981c <uxr_seq_num_add>
 801953a:	8921      	ldrh	r1, [r4, #8]
 801953c:	4605      	mov	r5, r0
 801953e:	8a60      	ldrh	r0, [r4, #18]
 8019540:	f000 f96c 	bl	801981c <uxr_seq_num_add>
 8019544:	4601      	mov	r1, r0
 8019546:	4628      	mov	r0, r5
 8019548:	f000 f970 	bl	801982c <uxr_seq_num_cmp>
 801954c:	2800      	cmp	r0, #0
 801954e:	dd2a      	ble.n	80195a6 <uxr_prepare_reliable_buffer_to_write+0x252>
 8019550:	2000      	movs	r0, #0
 8019552:	b011      	add	sp, #68	; 0x44
 8019554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019558:	8921      	ldrh	r1, [r4, #8]
 801955a:	8a60      	ldrh	r0, [r4, #18]
 801955c:	f000 f95e 	bl	801981c <uxr_seq_num_add>
 8019560:	4601      	mov	r1, r0
 8019562:	4628      	mov	r0, r5
 8019564:	f000 f962 	bl	801982c <uxr_seq_num_cmp>
 8019568:	2800      	cmp	r0, #0
 801956a:	dcf1      	bgt.n	8019550 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 801956c:	8921      	ldrh	r1, [r4, #8]
 801956e:	fbb5 f3f1 	udiv	r3, r5, r1
 8019572:	e9d4 4200 	ldrd	r4, r2, [r4]
 8019576:	fb01 5313 	mls	r3, r1, r3, r5
 801957a:	b29b      	uxth	r3, r3
 801957c:	fbb2 f2f1 	udiv	r2, r2, r1
 8019580:	fb03 f302 	mul.w	r3, r3, r2
 8019584:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8019588:	50e7      	str	r7, [r4, r3]
 801958a:	9b03      	ldr	r3, [sp, #12]
 801958c:	9300      	str	r3, [sp, #0]
 801958e:	463a      	mov	r2, r7
 8019590:	2300      	movs	r3, #0
 8019592:	f7f7 fcfb 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 8019596:	2001      	movs	r0, #1
 8019598:	e7db      	b.n	8019552 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801959a:	f10a 0a01 	add.w	sl, sl, #1
 801959e:	fa1f fa8a 	uxth.w	sl, sl
 80195a2:	9307      	str	r3, [sp, #28]
 80195a4:	e73c      	b.n	8019420 <uxr_prepare_reliable_buffer_to_write+0xcc>
 80195a6:	8920      	ldrh	r0, [r4, #8]
 80195a8:	fbb5 f3f0 	udiv	r3, r5, r0
 80195ac:	fb00 5313 	mls	r3, r0, r3, r5
 80195b0:	b29b      	uxth	r3, r3
 80195b2:	6862      	ldr	r2, [r4, #4]
 80195b4:	6821      	ldr	r1, [r4, #0]
 80195b6:	fbb2 f0f0 	udiv	r0, r2, r0
 80195ba:	fb03 f300 	mul.w	r3, r3, r0
 80195be:	7b22      	ldrb	r2, [r4, #12]
 80195c0:	9806      	ldr	r0, [sp, #24]
 80195c2:	3304      	adds	r3, #4
 80195c4:	4419      	add	r1, r3
 80195c6:	4442      	add	r2, r8
 80195c8:	f841 2c04 	str.w	r2, [r1, #-4]
 80195cc:	7b23      	ldrb	r3, [r4, #12]
 80195ce:	9300      	str	r3, [sp, #0]
 80195d0:	2300      	movs	r3, #0
 80195d2:	f7f7 fcdb 	bl	8010f8c <ucdr_init_buffer_origin_offset>
 80195d6:	81e5      	strh	r5, [r4, #14]
 80195d8:	2001      	movs	r0, #1
 80195da:	e7ba      	b.n	8019552 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80195dc:	4628      	mov	r0, r5
 80195de:	2101      	movs	r1, #1
 80195e0:	f000 f91c 	bl	801981c <uxr_seq_num_add>
 80195e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80195e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80195ec:	fbb3 f1fc 	udiv	r1, r3, ip
 80195f0:	fbb0 f3fc 	udiv	r3, r0, ip
 80195f4:	fb0c 0313 	mls	r3, ip, r3, r0
 80195f8:	b29b      	uxth	r3, r3
 80195fa:	fb03 f301 	mul.w	r3, r3, r1
 80195fe:	3304      	adds	r3, #4
 8019600:	18d3      	adds	r3, r2, r3
 8019602:	9305      	str	r3, [sp, #20]
 8019604:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019608:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801960c:	9303      	str	r3, [sp, #12]
 801960e:	4605      	mov	r5, r0
 8019610:	e6d4      	b.n	80193bc <uxr_prepare_reliable_buffer_to_write+0x68>
 8019612:	4660      	mov	r0, ip
 8019614:	e6ee      	b.n	80193f4 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8019616:	bf00      	nop
 8019618:	0801924d 	.word	0x0801924d

0801961c <uxr_prepare_next_reliable_buffer_to_send>:
 801961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019620:	4605      	mov	r5, r0
 8019622:	4688      	mov	r8, r1
 8019624:	8a00      	ldrh	r0, [r0, #16]
 8019626:	2101      	movs	r1, #1
 8019628:	4617      	mov	r7, r2
 801962a:	461e      	mov	r6, r3
 801962c:	f000 f8f6 	bl	801981c <uxr_seq_num_add>
 8019630:	8030      	strh	r0, [r6, #0]
 8019632:	892a      	ldrh	r2, [r5, #8]
 8019634:	fbb0 f3f2 	udiv	r3, r0, r2
 8019638:	fb02 0413 	mls	r4, r2, r3, r0
 801963c:	b2a4      	uxth	r4, r4
 801963e:	686b      	ldr	r3, [r5, #4]
 8019640:	fbb3 f2f2 	udiv	r2, r3, r2
 8019644:	682b      	ldr	r3, [r5, #0]
 8019646:	89e9      	ldrh	r1, [r5, #14]
 8019648:	fb04 f402 	mul.w	r4, r4, r2
 801964c:	3404      	adds	r4, #4
 801964e:	4423      	add	r3, r4
 8019650:	f8c8 3000 	str.w	r3, [r8]
 8019654:	682b      	ldr	r3, [r5, #0]
 8019656:	441c      	add	r4, r3
 8019658:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801965c:	603b      	str	r3, [r7, #0]
 801965e:	f000 f8e5 	bl	801982c <uxr_seq_num_cmp>
 8019662:	2800      	cmp	r0, #0
 8019664:	dd02      	ble.n	801966c <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8019666:	2000      	movs	r0, #0
 8019668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801966c:	683a      	ldr	r2, [r7, #0]
 801966e:	7b2b      	ldrb	r3, [r5, #12]
 8019670:	429a      	cmp	r2, r3
 8019672:	d9f8      	bls.n	8019666 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019674:	8a69      	ldrh	r1, [r5, #18]
 8019676:	8a28      	ldrh	r0, [r5, #16]
 8019678:	f000 f8d4 	bl	8019824 <uxr_seq_num_sub>
 801967c:	892b      	ldrh	r3, [r5, #8]
 801967e:	4283      	cmp	r3, r0
 8019680:	d0f1      	beq.n	8019666 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019682:	8830      	ldrh	r0, [r6, #0]
 8019684:	89eb      	ldrh	r3, [r5, #14]
 8019686:	8228      	strh	r0, [r5, #16]
 8019688:	4298      	cmp	r0, r3
 801968a:	d002      	beq.n	8019692 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 801968c:	2001      	movs	r0, #1
 801968e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019692:	2101      	movs	r1, #1
 8019694:	f000 f8c2 	bl	801981c <uxr_seq_num_add>
 8019698:	81e8      	strh	r0, [r5, #14]
 801969a:	2001      	movs	r0, #1
 801969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080196a0 <uxr_update_output_stream_heartbeat_timestamp>:
 80196a0:	b5d0      	push	{r4, r6, r7, lr}
 80196a2:	8a01      	ldrh	r1, [r0, #16]
 80196a4:	4604      	mov	r4, r0
 80196a6:	8a40      	ldrh	r0, [r0, #18]
 80196a8:	4616      	mov	r6, r2
 80196aa:	461f      	mov	r7, r3
 80196ac:	f000 f8be 	bl	801982c <uxr_seq_num_cmp>
 80196b0:	2800      	cmp	r0, #0
 80196b2:	db07      	blt.n	80196c4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80196b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80196b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80196bc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80196c0:	2000      	movs	r0, #0
 80196c2:	bdd0      	pop	{r4, r6, r7, pc}
 80196c4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80196c8:	b948      	cbnz	r0, 80196de <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80196ca:	2301      	movs	r3, #1
 80196cc:	f884 3020 	strb.w	r3, [r4, #32]
 80196d0:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 80196d4:	f147 0200 	adc.w	r2, r7, #0
 80196d8:	e9c4 3206 	strd	r3, r2, [r4, #24]
 80196dc:	bdd0      	pop	{r4, r6, r7, pc}
 80196de:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80196e2:	4296      	cmp	r6, r2
 80196e4:	eb77 0303 	sbcs.w	r3, r7, r3
 80196e8:	bfa5      	ittet	ge
 80196ea:	3001      	addge	r0, #1
 80196ec:	f884 0020 	strbge.w	r0, [r4, #32]
 80196f0:	2000      	movlt	r0, #0
 80196f2:	2001      	movge	r0, #1
 80196f4:	e7ec      	b.n	80196d0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80196f6:	bf00      	nop

080196f8 <uxr_begin_output_nack_buffer_it>:
 80196f8:	8a40      	ldrh	r0, [r0, #18]
 80196fa:	4770      	bx	lr

080196fc <uxr_next_reliable_nack_buffer_to_send>:
 80196fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019700:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8019704:	f1b9 0f00 	cmp.w	r9, #0
 8019708:	d011      	beq.n	801972e <uxr_next_reliable_nack_buffer_to_send+0x32>
 801970a:	4605      	mov	r5, r0
 801970c:	8818      	ldrh	r0, [r3, #0]
 801970e:	460f      	mov	r7, r1
 8019710:	4690      	mov	r8, r2
 8019712:	461e      	mov	r6, r3
 8019714:	2101      	movs	r1, #1
 8019716:	f000 f881 	bl	801981c <uxr_seq_num_add>
 801971a:	8030      	strh	r0, [r6, #0]
 801971c:	8a29      	ldrh	r1, [r5, #16]
 801971e:	f000 f885 	bl	801982c <uxr_seq_num_cmp>
 8019722:	2800      	cmp	r0, #0
 8019724:	dd06      	ble.n	8019734 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8019726:	f04f 0900 	mov.w	r9, #0
 801972a:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 801972e:	4648      	mov	r0, r9
 8019730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019734:	892a      	ldrh	r2, [r5, #8]
 8019736:	8830      	ldrh	r0, [r6, #0]
 8019738:	fbb0 f4f2 	udiv	r4, r0, r2
 801973c:	fb02 0414 	mls	r4, r2, r4, r0
 8019740:	b2a4      	uxth	r4, r4
 8019742:	686b      	ldr	r3, [r5, #4]
 8019744:	fbb3 f2f2 	udiv	r2, r3, r2
 8019748:	682b      	ldr	r3, [r5, #0]
 801974a:	fb04 f402 	mul.w	r4, r4, r2
 801974e:	3404      	adds	r4, #4
 8019750:	4423      	add	r3, r4
 8019752:	603b      	str	r3, [r7, #0]
 8019754:	682b      	ldr	r3, [r5, #0]
 8019756:	441c      	add	r4, r3
 8019758:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801975c:	f8c8 3000 	str.w	r3, [r8]
 8019760:	7b2a      	ldrb	r2, [r5, #12]
 8019762:	429a      	cmp	r2, r3
 8019764:	d0d6      	beq.n	8019714 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8019766:	4648      	mov	r0, r9
 8019768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801976c <uxr_process_acknack>:
 801976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801976e:	4604      	mov	r4, r0
 8019770:	460e      	mov	r6, r1
 8019772:	4610      	mov	r0, r2
 8019774:	2101      	movs	r1, #1
 8019776:	f000 f855 	bl	8019824 <uxr_seq_num_sub>
 801977a:	8a61      	ldrh	r1, [r4, #18]
 801977c:	f000 f852 	bl	8019824 <uxr_seq_num_sub>
 8019780:	b1c0      	cbz	r0, 80197b4 <uxr_process_acknack+0x48>
 8019782:	4605      	mov	r5, r0
 8019784:	2700      	movs	r7, #0
 8019786:	2101      	movs	r1, #1
 8019788:	8a60      	ldrh	r0, [r4, #18]
 801978a:	f000 f847 	bl	801981c <uxr_seq_num_add>
 801978e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019792:	fbb0 f3fc 	udiv	r3, r0, ip
 8019796:	e9d4 2100 	ldrd	r2, r1, [r4]
 801979a:	fb0c 0313 	mls	r3, ip, r3, r0
 801979e:	b29b      	uxth	r3, r3
 80197a0:	fbb1 f1fc 	udiv	r1, r1, ip
 80197a4:	3701      	adds	r7, #1
 80197a6:	fb03 f301 	mul.w	r3, r3, r1
 80197aa:	42bd      	cmp	r5, r7
 80197ac:	7b21      	ldrb	r1, [r4, #12]
 80197ae:	8260      	strh	r0, [r4, #18]
 80197b0:	50d1      	str	r1, [r2, r3]
 80197b2:	d1e8      	bne.n	8019786 <uxr_process_acknack+0x1a>
 80197b4:	3e00      	subs	r6, #0
 80197b6:	f04f 0300 	mov.w	r3, #0
 80197ba:	bf18      	it	ne
 80197bc:	2601      	movne	r6, #1
 80197be:	f884 3020 	strb.w	r3, [r4, #32]
 80197c2:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80197c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080197c8 <uxr_is_output_up_to_date>:
 80197c8:	8a01      	ldrh	r1, [r0, #16]
 80197ca:	8a40      	ldrh	r0, [r0, #18]
 80197cc:	b508      	push	{r3, lr}
 80197ce:	f000 f82d 	bl	801982c <uxr_seq_num_cmp>
 80197d2:	fab0 f080 	clz	r0, r0
 80197d6:	0940      	lsrs	r0, r0, #5
 80197d8:	bd08      	pop	{r3, pc}
 80197da:	bf00      	nop

080197dc <get_available_free_slots>:
 80197dc:	8901      	ldrh	r1, [r0, #8]
 80197de:	b1d9      	cbz	r1, 8019818 <get_available_free_slots+0x3c>
 80197e0:	b4f0      	push	{r4, r5, r6, r7}
 80197e2:	2400      	movs	r4, #0
 80197e4:	6845      	ldr	r5, [r0, #4]
 80197e6:	6807      	ldr	r7, [r0, #0]
 80197e8:	7b06      	ldrb	r6, [r0, #12]
 80197ea:	fbb5 f5f1 	udiv	r5, r5, r1
 80197ee:	4620      	mov	r0, r4
 80197f0:	4622      	mov	r2, r4
 80197f2:	fbb2 f3f1 	udiv	r3, r2, r1
 80197f6:	fb01 2313 	mls	r3, r1, r3, r2
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	fb05 7303 	mla	r3, r5, r3, r7
 8019800:	3401      	adds	r4, #1
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	429e      	cmp	r6, r3
 8019806:	bf08      	it	eq
 8019808:	3001      	addeq	r0, #1
 801980a:	b2a2      	uxth	r2, r4
 801980c:	bf08      	it	eq
 801980e:	b280      	uxtheq	r0, r0
 8019810:	428a      	cmp	r2, r1
 8019812:	d3ee      	bcc.n	80197f2 <get_available_free_slots+0x16>
 8019814:	bcf0      	pop	{r4, r5, r6, r7}
 8019816:	4770      	bx	lr
 8019818:	4608      	mov	r0, r1
 801981a:	4770      	bx	lr

0801981c <uxr_seq_num_add>:
 801981c:	4408      	add	r0, r1
 801981e:	b280      	uxth	r0, r0
 8019820:	4770      	bx	lr
 8019822:	bf00      	nop

08019824 <uxr_seq_num_sub>:
 8019824:	1a40      	subs	r0, r0, r1
 8019826:	b280      	uxth	r0, r0
 8019828:	4770      	bx	lr
 801982a:	bf00      	nop

0801982c <uxr_seq_num_cmp>:
 801982c:	4288      	cmp	r0, r1
 801982e:	d011      	beq.n	8019854 <uxr_seq_num_cmp+0x28>
 8019830:	d309      	bcc.n	8019846 <uxr_seq_num_cmp+0x1a>
 8019832:	4288      	cmp	r0, r1
 8019834:	d910      	bls.n	8019858 <uxr_seq_num_cmp+0x2c>
 8019836:	1a40      	subs	r0, r0, r1
 8019838:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801983c:	bfd4      	ite	le
 801983e:	2001      	movle	r0, #1
 8019840:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8019844:	4770      	bx	lr
 8019846:	1a0b      	subs	r3, r1, r0
 8019848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801984c:	daf1      	bge.n	8019832 <uxr_seq_num_cmp+0x6>
 801984e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019852:	4770      	bx	lr
 8019854:	2000      	movs	r0, #0
 8019856:	4770      	bx	lr
 8019858:	2001      	movs	r0, #1
 801985a:	4770      	bx	lr

0801985c <rcl_get_default_domain_id>:
 801985c:	b530      	push	{r4, r5, lr}
 801985e:	b083      	sub	sp, #12
 8019860:	2300      	movs	r3, #0
 8019862:	9300      	str	r3, [sp, #0]
 8019864:	b1d0      	cbz	r0, 801989c <rcl_get_default_domain_id+0x40>
 8019866:	4604      	mov	r4, r0
 8019868:	4669      	mov	r1, sp
 801986a:	4815      	ldr	r0, [pc, #84]	; (80198c0 <rcl_get_default_domain_id+0x64>)
 801986c:	f7fd faf0 	bl	8016e50 <rcutils_get_env>
 8019870:	4602      	mov	r2, r0
 8019872:	b110      	cbz	r0, 801987a <rcl_get_default_domain_id+0x1e>
 8019874:	2001      	movs	r0, #1
 8019876:	b003      	add	sp, #12
 8019878:	bd30      	pop	{r4, r5, pc}
 801987a:	9b00      	ldr	r3, [sp, #0]
 801987c:	b18b      	cbz	r3, 80198a2 <rcl_get_default_domain_id+0x46>
 801987e:	7818      	ldrb	r0, [r3, #0]
 8019880:	2800      	cmp	r0, #0
 8019882:	d0f8      	beq.n	8019876 <rcl_get_default_domain_id+0x1a>
 8019884:	4618      	mov	r0, r3
 8019886:	a901      	add	r1, sp, #4
 8019888:	9201      	str	r2, [sp, #4]
 801988a:	f002 fbf3 	bl	801c074 <strtoul>
 801988e:	4605      	mov	r5, r0
 8019890:	b150      	cbz	r0, 80198a8 <rcl_get_default_domain_id+0x4c>
 8019892:	1c43      	adds	r3, r0, #1
 8019894:	d00d      	beq.n	80198b2 <rcl_get_default_domain_id+0x56>
 8019896:	6025      	str	r5, [r4, #0]
 8019898:	2000      	movs	r0, #0
 801989a:	e7ec      	b.n	8019876 <rcl_get_default_domain_id+0x1a>
 801989c:	200b      	movs	r0, #11
 801989e:	b003      	add	sp, #12
 80198a0:	bd30      	pop	{r4, r5, pc}
 80198a2:	4618      	mov	r0, r3
 80198a4:	b003      	add	sp, #12
 80198a6:	bd30      	pop	{r4, r5, pc}
 80198a8:	9b01      	ldr	r3, [sp, #4]
 80198aa:	781b      	ldrb	r3, [r3, #0]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d0f2      	beq.n	8019896 <rcl_get_default_domain_id+0x3a>
 80198b0:	e7e0      	b.n	8019874 <rcl_get_default_domain_id+0x18>
 80198b2:	f000 f8e3 	bl	8019a7c <__errno>
 80198b6:	6803      	ldr	r3, [r0, #0]
 80198b8:	2b22      	cmp	r3, #34	; 0x22
 80198ba:	d1ec      	bne.n	8019896 <rcl_get_default_domain_id+0x3a>
 80198bc:	e7da      	b.n	8019874 <rcl_get_default_domain_id+0x18>
 80198be:	bf00      	nop
 80198c0:	0801f588 	.word	0x0801f588

080198c4 <rcl_get_zero_initialized_guard_condition>:
 80198c4:	4a03      	ldr	r2, [pc, #12]	; (80198d4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80198c6:	4603      	mov	r3, r0
 80198c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80198cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80198d0:	4618      	mov	r0, r3
 80198d2:	4770      	bx	lr
 80198d4:	0801f598 	.word	0x0801f598

080198d8 <rcl_guard_condition_init_from_rmw>:
 80198d8:	b082      	sub	sp, #8
 80198da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198de:	b086      	sub	sp, #24
 80198e0:	ac0c      	add	r4, sp, #48	; 0x30
 80198e2:	4684      	mov	ip, r0
 80198e4:	f844 3f04 	str.w	r3, [r4, #4]!
 80198e8:	460f      	mov	r7, r1
 80198ea:	4690      	mov	r8, r2
 80198ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198ee:	ad01      	add	r5, sp, #4
 80198f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80198f2:	6823      	ldr	r3, [r4, #0]
 80198f4:	602b      	str	r3, [r5, #0]
 80198f6:	a801      	add	r0, sp, #4
 80198f8:	4664      	mov	r4, ip
 80198fa:	f7f5 fe77 	bl	800f5ec <rcutils_allocator_is_valid>
 80198fe:	b328      	cbz	r0, 801994c <rcl_guard_condition_init_from_rmw+0x74>
 8019900:	b324      	cbz	r4, 801994c <rcl_guard_condition_init_from_rmw+0x74>
 8019902:	6866      	ldr	r6, [r4, #4]
 8019904:	b9e6      	cbnz	r6, 8019940 <rcl_guard_condition_init_from_rmw+0x68>
 8019906:	f1b8 0f00 	cmp.w	r8, #0
 801990a:	d01f      	beq.n	801994c <rcl_guard_condition_init_from_rmw+0x74>
 801990c:	4640      	mov	r0, r8
 801990e:	f7fb f95b 	bl	8014bc8 <rcl_context_is_valid>
 8019912:	b308      	cbz	r0, 8019958 <rcl_guard_condition_init_from_rmw+0x80>
 8019914:	9b01      	ldr	r3, [sp, #4]
 8019916:	9905      	ldr	r1, [sp, #20]
 8019918:	201c      	movs	r0, #28
 801991a:	4798      	blx	r3
 801991c:	4605      	mov	r5, r0
 801991e:	6060      	str	r0, [r4, #4]
 8019920:	b340      	cbz	r0, 8019974 <rcl_guard_condition_init_from_rmw+0x9c>
 8019922:	b1df      	cbz	r7, 801995c <rcl_guard_condition_init_from_rmw+0x84>
 8019924:	6007      	str	r7, [r0, #0]
 8019926:	7106      	strb	r6, [r0, #4]
 8019928:	ac01      	add	r4, sp, #4
 801992a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801992c:	3508      	adds	r5, #8
 801992e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019930:	6823      	ldr	r3, [r4, #0]
 8019932:	602b      	str	r3, [r5, #0]
 8019934:	2000      	movs	r0, #0
 8019936:	b006      	add	sp, #24
 8019938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801993c:	b002      	add	sp, #8
 801993e:	4770      	bx	lr
 8019940:	2064      	movs	r0, #100	; 0x64
 8019942:	b006      	add	sp, #24
 8019944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019948:	b002      	add	sp, #8
 801994a:	4770      	bx	lr
 801994c:	200b      	movs	r0, #11
 801994e:	b006      	add	sp, #24
 8019950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019954:	b002      	add	sp, #8
 8019956:	4770      	bx	lr
 8019958:	2065      	movs	r0, #101	; 0x65
 801995a:	e7f2      	b.n	8019942 <rcl_guard_condition_init_from_rmw+0x6a>
 801995c:	f8d8 0000 	ldr.w	r0, [r8]
 8019960:	3028      	adds	r0, #40	; 0x28
 8019962:	f000 f857 	bl	8019a14 <rmw_create_guard_condition>
 8019966:	6028      	str	r0, [r5, #0]
 8019968:	6865      	ldr	r5, [r4, #4]
 801996a:	682e      	ldr	r6, [r5, #0]
 801996c:	b126      	cbz	r6, 8019978 <rcl_guard_condition_init_from_rmw+0xa0>
 801996e:	2301      	movs	r3, #1
 8019970:	712b      	strb	r3, [r5, #4]
 8019972:	e7d9      	b.n	8019928 <rcl_guard_condition_init_from_rmw+0x50>
 8019974:	200a      	movs	r0, #10
 8019976:	e7e4      	b.n	8019942 <rcl_guard_condition_init_from_rmw+0x6a>
 8019978:	4628      	mov	r0, r5
 801997a:	9b02      	ldr	r3, [sp, #8]
 801997c:	9905      	ldr	r1, [sp, #20]
 801997e:	4798      	blx	r3
 8019980:	6066      	str	r6, [r4, #4]
 8019982:	2001      	movs	r0, #1
 8019984:	e7dd      	b.n	8019942 <rcl_guard_condition_init_from_rmw+0x6a>
 8019986:	bf00      	nop

08019988 <rcl_guard_condition_fini>:
 8019988:	b570      	push	{r4, r5, r6, lr}
 801998a:	b082      	sub	sp, #8
 801998c:	b1f0      	cbz	r0, 80199cc <rcl_guard_condition_fini+0x44>
 801998e:	4604      	mov	r4, r0
 8019990:	6840      	ldr	r0, [r0, #4]
 8019992:	b158      	cbz	r0, 80199ac <rcl_guard_condition_fini+0x24>
 8019994:	6803      	ldr	r3, [r0, #0]
 8019996:	68c6      	ldr	r6, [r0, #12]
 8019998:	6981      	ldr	r1, [r0, #24]
 801999a:	b15b      	cbz	r3, 80199b4 <rcl_guard_condition_fini+0x2c>
 801999c:	7905      	ldrb	r5, [r0, #4]
 801999e:	b95d      	cbnz	r5, 80199b8 <rcl_guard_condition_fini+0x30>
 80199a0:	47b0      	blx	r6
 80199a2:	2300      	movs	r3, #0
 80199a4:	4628      	mov	r0, r5
 80199a6:	6063      	str	r3, [r4, #4]
 80199a8:	b002      	add	sp, #8
 80199aa:	bd70      	pop	{r4, r5, r6, pc}
 80199ac:	4605      	mov	r5, r0
 80199ae:	4628      	mov	r0, r5
 80199b0:	b002      	add	sp, #8
 80199b2:	bd70      	pop	{r4, r5, r6, pc}
 80199b4:	461d      	mov	r5, r3
 80199b6:	e7f3      	b.n	80199a0 <rcl_guard_condition_fini+0x18>
 80199b8:	4618      	mov	r0, r3
 80199ba:	9101      	str	r1, [sp, #4]
 80199bc:	f000 f83e 	bl	8019a3c <rmw_destroy_guard_condition>
 80199c0:	1e05      	subs	r5, r0, #0
 80199c2:	9901      	ldr	r1, [sp, #4]
 80199c4:	6860      	ldr	r0, [r4, #4]
 80199c6:	bf18      	it	ne
 80199c8:	2501      	movne	r5, #1
 80199ca:	e7e9      	b.n	80199a0 <rcl_guard_condition_fini+0x18>
 80199cc:	250b      	movs	r5, #11
 80199ce:	4628      	mov	r0, r5
 80199d0:	b002      	add	sp, #8
 80199d2:	bd70      	pop	{r4, r5, r6, pc}

080199d4 <rcl_guard_condition_get_default_options>:
 80199d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199d6:	b087      	sub	sp, #28
 80199d8:	4607      	mov	r7, r0
 80199da:	466c      	mov	r4, sp
 80199dc:	4668      	mov	r0, sp
 80199de:	f7f5 fdf7 	bl	800f5d0 <rcutils_get_default_allocator>
 80199e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80199e4:	4d07      	ldr	r5, [pc, #28]	; (8019a04 <rcl_guard_condition_get_default_options+0x30>)
 80199e6:	f8d4 c000 	ldr.w	ip, [r4]
 80199ea:	462e      	mov	r6, r5
 80199ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80199ee:	462c      	mov	r4, r5
 80199f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80199f2:	463c      	mov	r4, r7
 80199f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199f6:	4638      	mov	r0, r7
 80199f8:	f8c6 c000 	str.w	ip, [r6]
 80199fc:	f8c4 c000 	str.w	ip, [r4]
 8019a00:	b007      	add	sp, #28
 8019a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a04:	20009f08 	.word	0x20009f08

08019a08 <rcl_guard_condition_get_rmw_handle>:
 8019a08:	b110      	cbz	r0, 8019a10 <rcl_guard_condition_get_rmw_handle+0x8>
 8019a0a:	6840      	ldr	r0, [r0, #4]
 8019a0c:	b100      	cbz	r0, 8019a10 <rcl_guard_condition_get_rmw_handle+0x8>
 8019a0e:	6800      	ldr	r0, [r0, #0]
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop

08019a14 <rmw_create_guard_condition>:
 8019a14:	b538      	push	{r3, r4, r5, lr}
 8019a16:	4605      	mov	r5, r0
 8019a18:	4807      	ldr	r0, [pc, #28]	; (8019a38 <rmw_create_guard_condition+0x24>)
 8019a1a:	f7fd fd13 	bl	8017444 <get_memory>
 8019a1e:	b148      	cbz	r0, 8019a34 <rmw_create_guard_condition+0x20>
 8019a20:	68c4      	ldr	r4, [r0, #12]
 8019a22:	2300      	movs	r3, #0
 8019a24:	61e5      	str	r5, [r4, #28]
 8019a26:	7423      	strb	r3, [r4, #16]
 8019a28:	f7fd fd74 	bl	8017514 <rmw_get_implementation_identifier>
 8019a2c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019a30:	f104 0014 	add.w	r0, r4, #20
 8019a34:	bd38      	pop	{r3, r4, r5, pc}
 8019a36:	bf00      	nop
 8019a38:	2000d0f0 	.word	0x2000d0f0

08019a3c <rmw_destroy_guard_condition>:
 8019a3c:	b508      	push	{r3, lr}
 8019a3e:	4b08      	ldr	r3, [pc, #32]	; (8019a60 <rmw_destroy_guard_condition+0x24>)
 8019a40:	6819      	ldr	r1, [r3, #0]
 8019a42:	b911      	cbnz	r1, 8019a4a <rmw_destroy_guard_condition+0xe>
 8019a44:	e00a      	b.n	8019a5c <rmw_destroy_guard_condition+0x20>
 8019a46:	6889      	ldr	r1, [r1, #8]
 8019a48:	b141      	cbz	r1, 8019a5c <rmw_destroy_guard_condition+0x20>
 8019a4a:	68cb      	ldr	r3, [r1, #12]
 8019a4c:	3314      	adds	r3, #20
 8019a4e:	4298      	cmp	r0, r3
 8019a50:	d1f9      	bne.n	8019a46 <rmw_destroy_guard_condition+0xa>
 8019a52:	4803      	ldr	r0, [pc, #12]	; (8019a60 <rmw_destroy_guard_condition+0x24>)
 8019a54:	f7fd fd06 	bl	8017464 <put_memory>
 8019a58:	2000      	movs	r0, #0
 8019a5a:	bd08      	pop	{r3, pc}
 8019a5c:	2001      	movs	r0, #1
 8019a5e:	bd08      	pop	{r3, pc}
 8019a60:	2000d0f0 	.word	0x2000d0f0

08019a64 <atof>:
 8019a64:	2100      	movs	r1, #0
 8019a66:	f002 b9a7 	b.w	801bdb8 <strtod>
	...

08019a6c <calloc>:
 8019a6c:	4b02      	ldr	r3, [pc, #8]	; (8019a78 <calloc+0xc>)
 8019a6e:	460a      	mov	r2, r1
 8019a70:	4601      	mov	r1, r0
 8019a72:	6818      	ldr	r0, [r3, #0]
 8019a74:	f000 b9ae 	b.w	8019dd4 <_calloc_r>
 8019a78:	20000088 	.word	0x20000088

08019a7c <__errno>:
 8019a7c:	4b01      	ldr	r3, [pc, #4]	; (8019a84 <__errno+0x8>)
 8019a7e:	6818      	ldr	r0, [r3, #0]
 8019a80:	4770      	bx	lr
 8019a82:	bf00      	nop
 8019a84:	20000088 	.word	0x20000088

08019a88 <std>:
 8019a88:	2300      	movs	r3, #0
 8019a8a:	b510      	push	{r4, lr}
 8019a8c:	4604      	mov	r4, r0
 8019a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8019a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a96:	6083      	str	r3, [r0, #8]
 8019a98:	8181      	strh	r1, [r0, #12]
 8019a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8019a9c:	81c2      	strh	r2, [r0, #14]
 8019a9e:	6183      	str	r3, [r0, #24]
 8019aa0:	4619      	mov	r1, r3
 8019aa2:	2208      	movs	r2, #8
 8019aa4:	305c      	adds	r0, #92	; 0x5c
 8019aa6:	f000 f98d 	bl	8019dc4 <memset>
 8019aaa:	4b05      	ldr	r3, [pc, #20]	; (8019ac0 <std+0x38>)
 8019aac:	6263      	str	r3, [r4, #36]	; 0x24
 8019aae:	4b05      	ldr	r3, [pc, #20]	; (8019ac4 <std+0x3c>)
 8019ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8019ab2:	4b05      	ldr	r3, [pc, #20]	; (8019ac8 <std+0x40>)
 8019ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ab6:	4b05      	ldr	r3, [pc, #20]	; (8019acc <std+0x44>)
 8019ab8:	6224      	str	r4, [r4, #32]
 8019aba:	6323      	str	r3, [r4, #48]	; 0x30
 8019abc:	bd10      	pop	{r4, pc}
 8019abe:	bf00      	nop
 8019ac0:	0801b061 	.word	0x0801b061
 8019ac4:	0801b083 	.word	0x0801b083
 8019ac8:	0801b0bb 	.word	0x0801b0bb
 8019acc:	0801b0df 	.word	0x0801b0df

08019ad0 <_cleanup_r>:
 8019ad0:	4901      	ldr	r1, [pc, #4]	; (8019ad8 <_cleanup_r+0x8>)
 8019ad2:	f000 b8af 	b.w	8019c34 <_fwalk_reent>
 8019ad6:	bf00      	nop
 8019ad8:	0801d119 	.word	0x0801d119

08019adc <__sfmoreglue>:
 8019adc:	b570      	push	{r4, r5, r6, lr}
 8019ade:	2268      	movs	r2, #104	; 0x68
 8019ae0:	1e4d      	subs	r5, r1, #1
 8019ae2:	4355      	muls	r5, r2
 8019ae4:	460e      	mov	r6, r1
 8019ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019aea:	f000 f9f5 	bl	8019ed8 <_malloc_r>
 8019aee:	4604      	mov	r4, r0
 8019af0:	b140      	cbz	r0, 8019b04 <__sfmoreglue+0x28>
 8019af2:	2100      	movs	r1, #0
 8019af4:	e9c0 1600 	strd	r1, r6, [r0]
 8019af8:	300c      	adds	r0, #12
 8019afa:	60a0      	str	r0, [r4, #8]
 8019afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b00:	f000 f960 	bl	8019dc4 <memset>
 8019b04:	4620      	mov	r0, r4
 8019b06:	bd70      	pop	{r4, r5, r6, pc}

08019b08 <__sfp_lock_acquire>:
 8019b08:	4801      	ldr	r0, [pc, #4]	; (8019b10 <__sfp_lock_acquire+0x8>)
 8019b0a:	f000 b920 	b.w	8019d4e <__retarget_lock_acquire_recursive>
 8019b0e:	bf00      	nop
 8019b10:	20009f1e 	.word	0x20009f1e

08019b14 <__sfp_lock_release>:
 8019b14:	4801      	ldr	r0, [pc, #4]	; (8019b1c <__sfp_lock_release+0x8>)
 8019b16:	f000 b91b 	b.w	8019d50 <__retarget_lock_release_recursive>
 8019b1a:	bf00      	nop
 8019b1c:	20009f1e 	.word	0x20009f1e

08019b20 <__sinit_lock_acquire>:
 8019b20:	4801      	ldr	r0, [pc, #4]	; (8019b28 <__sinit_lock_acquire+0x8>)
 8019b22:	f000 b914 	b.w	8019d4e <__retarget_lock_acquire_recursive>
 8019b26:	bf00      	nop
 8019b28:	20009f1f 	.word	0x20009f1f

08019b2c <__sinit_lock_release>:
 8019b2c:	4801      	ldr	r0, [pc, #4]	; (8019b34 <__sinit_lock_release+0x8>)
 8019b2e:	f000 b90f 	b.w	8019d50 <__retarget_lock_release_recursive>
 8019b32:	bf00      	nop
 8019b34:	20009f1f 	.word	0x20009f1f

08019b38 <__sinit>:
 8019b38:	b510      	push	{r4, lr}
 8019b3a:	4604      	mov	r4, r0
 8019b3c:	f7ff fff0 	bl	8019b20 <__sinit_lock_acquire>
 8019b40:	69a3      	ldr	r3, [r4, #24]
 8019b42:	b11b      	cbz	r3, 8019b4c <__sinit+0x14>
 8019b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b48:	f7ff bff0 	b.w	8019b2c <__sinit_lock_release>
 8019b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019b50:	6523      	str	r3, [r4, #80]	; 0x50
 8019b52:	4b13      	ldr	r3, [pc, #76]	; (8019ba0 <__sinit+0x68>)
 8019b54:	4a13      	ldr	r2, [pc, #76]	; (8019ba4 <__sinit+0x6c>)
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8019b5a:	42a3      	cmp	r3, r4
 8019b5c:	bf04      	itt	eq
 8019b5e:	2301      	moveq	r3, #1
 8019b60:	61a3      	streq	r3, [r4, #24]
 8019b62:	4620      	mov	r0, r4
 8019b64:	f000 f820 	bl	8019ba8 <__sfp>
 8019b68:	6060      	str	r0, [r4, #4]
 8019b6a:	4620      	mov	r0, r4
 8019b6c:	f000 f81c 	bl	8019ba8 <__sfp>
 8019b70:	60a0      	str	r0, [r4, #8]
 8019b72:	4620      	mov	r0, r4
 8019b74:	f000 f818 	bl	8019ba8 <__sfp>
 8019b78:	2200      	movs	r2, #0
 8019b7a:	60e0      	str	r0, [r4, #12]
 8019b7c:	2104      	movs	r1, #4
 8019b7e:	6860      	ldr	r0, [r4, #4]
 8019b80:	f7ff ff82 	bl	8019a88 <std>
 8019b84:	68a0      	ldr	r0, [r4, #8]
 8019b86:	2201      	movs	r2, #1
 8019b88:	2109      	movs	r1, #9
 8019b8a:	f7ff ff7d 	bl	8019a88 <std>
 8019b8e:	68e0      	ldr	r0, [r4, #12]
 8019b90:	2202      	movs	r2, #2
 8019b92:	2112      	movs	r1, #18
 8019b94:	f7ff ff78 	bl	8019a88 <std>
 8019b98:	2301      	movs	r3, #1
 8019b9a:	61a3      	str	r3, [r4, #24]
 8019b9c:	e7d2      	b.n	8019b44 <__sinit+0xc>
 8019b9e:	bf00      	nop
 8019ba0:	0801f704 	.word	0x0801f704
 8019ba4:	08019ad1 	.word	0x08019ad1

08019ba8 <__sfp>:
 8019ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019baa:	4607      	mov	r7, r0
 8019bac:	f7ff ffac 	bl	8019b08 <__sfp_lock_acquire>
 8019bb0:	4b1e      	ldr	r3, [pc, #120]	; (8019c2c <__sfp+0x84>)
 8019bb2:	681e      	ldr	r6, [r3, #0]
 8019bb4:	69b3      	ldr	r3, [r6, #24]
 8019bb6:	b913      	cbnz	r3, 8019bbe <__sfp+0x16>
 8019bb8:	4630      	mov	r0, r6
 8019bba:	f7ff ffbd 	bl	8019b38 <__sinit>
 8019bbe:	3648      	adds	r6, #72	; 0x48
 8019bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019bc4:	3b01      	subs	r3, #1
 8019bc6:	d503      	bpl.n	8019bd0 <__sfp+0x28>
 8019bc8:	6833      	ldr	r3, [r6, #0]
 8019bca:	b30b      	cbz	r3, 8019c10 <__sfp+0x68>
 8019bcc:	6836      	ldr	r6, [r6, #0]
 8019bce:	e7f7      	b.n	8019bc0 <__sfp+0x18>
 8019bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019bd4:	b9d5      	cbnz	r5, 8019c0c <__sfp+0x64>
 8019bd6:	4b16      	ldr	r3, [pc, #88]	; (8019c30 <__sfp+0x88>)
 8019bd8:	60e3      	str	r3, [r4, #12]
 8019bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019bde:	6665      	str	r5, [r4, #100]	; 0x64
 8019be0:	f000 f8b4 	bl	8019d4c <__retarget_lock_init_recursive>
 8019be4:	f7ff ff96 	bl	8019b14 <__sfp_lock_release>
 8019be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019bf0:	6025      	str	r5, [r4, #0]
 8019bf2:	61a5      	str	r5, [r4, #24]
 8019bf4:	2208      	movs	r2, #8
 8019bf6:	4629      	mov	r1, r5
 8019bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019bfc:	f000 f8e2 	bl	8019dc4 <memset>
 8019c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019c08:	4620      	mov	r0, r4
 8019c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c0c:	3468      	adds	r4, #104	; 0x68
 8019c0e:	e7d9      	b.n	8019bc4 <__sfp+0x1c>
 8019c10:	2104      	movs	r1, #4
 8019c12:	4638      	mov	r0, r7
 8019c14:	f7ff ff62 	bl	8019adc <__sfmoreglue>
 8019c18:	4604      	mov	r4, r0
 8019c1a:	6030      	str	r0, [r6, #0]
 8019c1c:	2800      	cmp	r0, #0
 8019c1e:	d1d5      	bne.n	8019bcc <__sfp+0x24>
 8019c20:	f7ff ff78 	bl	8019b14 <__sfp_lock_release>
 8019c24:	230c      	movs	r3, #12
 8019c26:	603b      	str	r3, [r7, #0]
 8019c28:	e7ee      	b.n	8019c08 <__sfp+0x60>
 8019c2a:	bf00      	nop
 8019c2c:	0801f704 	.word	0x0801f704
 8019c30:	ffff0001 	.word	0xffff0001

08019c34 <_fwalk_reent>:
 8019c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c38:	4606      	mov	r6, r0
 8019c3a:	4688      	mov	r8, r1
 8019c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019c40:	2700      	movs	r7, #0
 8019c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019c46:	f1b9 0901 	subs.w	r9, r9, #1
 8019c4a:	d505      	bpl.n	8019c58 <_fwalk_reent+0x24>
 8019c4c:	6824      	ldr	r4, [r4, #0]
 8019c4e:	2c00      	cmp	r4, #0
 8019c50:	d1f7      	bne.n	8019c42 <_fwalk_reent+0xe>
 8019c52:	4638      	mov	r0, r7
 8019c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c58:	89ab      	ldrh	r3, [r5, #12]
 8019c5a:	2b01      	cmp	r3, #1
 8019c5c:	d907      	bls.n	8019c6e <_fwalk_reent+0x3a>
 8019c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c62:	3301      	adds	r3, #1
 8019c64:	d003      	beq.n	8019c6e <_fwalk_reent+0x3a>
 8019c66:	4629      	mov	r1, r5
 8019c68:	4630      	mov	r0, r6
 8019c6a:	47c0      	blx	r8
 8019c6c:	4307      	orrs	r7, r0
 8019c6e:	3568      	adds	r5, #104	; 0x68
 8019c70:	e7e9      	b.n	8019c46 <_fwalk_reent+0x12>
	...

08019c74 <getenv>:
 8019c74:	b507      	push	{r0, r1, r2, lr}
 8019c76:	4b04      	ldr	r3, [pc, #16]	; (8019c88 <getenv+0x14>)
 8019c78:	4601      	mov	r1, r0
 8019c7a:	aa01      	add	r2, sp, #4
 8019c7c:	6818      	ldr	r0, [r3, #0]
 8019c7e:	f000 f805 	bl	8019c8c <_findenv_r>
 8019c82:	b003      	add	sp, #12
 8019c84:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c88:	20000088 	.word	0x20000088

08019c8c <_findenv_r>:
 8019c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c90:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019d00 <_findenv_r+0x74>
 8019c94:	4607      	mov	r7, r0
 8019c96:	4689      	mov	r9, r1
 8019c98:	4616      	mov	r6, r2
 8019c9a:	f003 f9ab 	bl	801cff4 <__env_lock>
 8019c9e:	f8da 4000 	ldr.w	r4, [sl]
 8019ca2:	b134      	cbz	r4, 8019cb2 <_findenv_r+0x26>
 8019ca4:	464b      	mov	r3, r9
 8019ca6:	4698      	mov	r8, r3
 8019ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019cac:	b13a      	cbz	r2, 8019cbe <_findenv_r+0x32>
 8019cae:	2a3d      	cmp	r2, #61	; 0x3d
 8019cb0:	d1f9      	bne.n	8019ca6 <_findenv_r+0x1a>
 8019cb2:	4638      	mov	r0, r7
 8019cb4:	f003 f9a4 	bl	801d000 <__env_unlock>
 8019cb8:	2000      	movs	r0, #0
 8019cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cbe:	eba8 0809 	sub.w	r8, r8, r9
 8019cc2:	46a3      	mov	fp, r4
 8019cc4:	f854 0b04 	ldr.w	r0, [r4], #4
 8019cc8:	2800      	cmp	r0, #0
 8019cca:	d0f2      	beq.n	8019cb2 <_findenv_r+0x26>
 8019ccc:	4642      	mov	r2, r8
 8019cce:	4649      	mov	r1, r9
 8019cd0:	f001 fa1e 	bl	801b110 <strncmp>
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	d1f4      	bne.n	8019cc2 <_findenv_r+0x36>
 8019cd8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019cdc:	eb03 0508 	add.w	r5, r3, r8
 8019ce0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019ce4:	2b3d      	cmp	r3, #61	; 0x3d
 8019ce6:	d1ec      	bne.n	8019cc2 <_findenv_r+0x36>
 8019ce8:	f8da 3000 	ldr.w	r3, [sl]
 8019cec:	ebab 0303 	sub.w	r3, fp, r3
 8019cf0:	109b      	asrs	r3, r3, #2
 8019cf2:	4638      	mov	r0, r7
 8019cf4:	6033      	str	r3, [r6, #0]
 8019cf6:	f003 f983 	bl	801d000 <__env_unlock>
 8019cfa:	1c68      	adds	r0, r5, #1
 8019cfc:	e7dd      	b.n	8019cba <_findenv_r+0x2e>
 8019cfe:	bf00      	nop
 8019d00:	20000008 	.word	0x20000008

08019d04 <__libc_init_array>:
 8019d04:	b570      	push	{r4, r5, r6, lr}
 8019d06:	4d0d      	ldr	r5, [pc, #52]	; (8019d3c <__libc_init_array+0x38>)
 8019d08:	4c0d      	ldr	r4, [pc, #52]	; (8019d40 <__libc_init_array+0x3c>)
 8019d0a:	1b64      	subs	r4, r4, r5
 8019d0c:	10a4      	asrs	r4, r4, #2
 8019d0e:	2600      	movs	r6, #0
 8019d10:	42a6      	cmp	r6, r4
 8019d12:	d109      	bne.n	8019d28 <__libc_init_array+0x24>
 8019d14:	4d0b      	ldr	r5, [pc, #44]	; (8019d44 <__libc_init_array+0x40>)
 8019d16:	4c0c      	ldr	r4, [pc, #48]	; (8019d48 <__libc_init_array+0x44>)
 8019d18:	f004 fe98 	bl	801ea4c <_init>
 8019d1c:	1b64      	subs	r4, r4, r5
 8019d1e:	10a4      	asrs	r4, r4, #2
 8019d20:	2600      	movs	r6, #0
 8019d22:	42a6      	cmp	r6, r4
 8019d24:	d105      	bne.n	8019d32 <__libc_init_array+0x2e>
 8019d26:	bd70      	pop	{r4, r5, r6, pc}
 8019d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d2c:	4798      	blx	r3
 8019d2e:	3601      	adds	r6, #1
 8019d30:	e7ee      	b.n	8019d10 <__libc_init_array+0xc>
 8019d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8019d36:	4798      	blx	r3
 8019d38:	3601      	adds	r6, #1
 8019d3a:	e7f2      	b.n	8019d22 <__libc_init_array+0x1e>
 8019d3c:	0801fb08 	.word	0x0801fb08
 8019d40:	0801fb08 	.word	0x0801fb08
 8019d44:	0801fb08 	.word	0x0801fb08
 8019d48:	0801fb0c 	.word	0x0801fb0c

08019d4c <__retarget_lock_init_recursive>:
 8019d4c:	4770      	bx	lr

08019d4e <__retarget_lock_acquire_recursive>:
 8019d4e:	4770      	bx	lr

08019d50 <__retarget_lock_release_recursive>:
 8019d50:	4770      	bx	lr
	...

08019d54 <malloc>:
 8019d54:	4b02      	ldr	r3, [pc, #8]	; (8019d60 <malloc+0xc>)
 8019d56:	4601      	mov	r1, r0
 8019d58:	6818      	ldr	r0, [r3, #0]
 8019d5a:	f000 b8bd 	b.w	8019ed8 <_malloc_r>
 8019d5e:	bf00      	nop
 8019d60:	20000088 	.word	0x20000088

08019d64 <free>:
 8019d64:	4b02      	ldr	r3, [pc, #8]	; (8019d70 <free+0xc>)
 8019d66:	4601      	mov	r1, r0
 8019d68:	6818      	ldr	r0, [r3, #0]
 8019d6a:	f000 b849 	b.w	8019e00 <_free_r>
 8019d6e:	bf00      	nop
 8019d70:	20000088 	.word	0x20000088

08019d74 <memcpy>:
 8019d74:	440a      	add	r2, r1
 8019d76:	4291      	cmp	r1, r2
 8019d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019d7c:	d100      	bne.n	8019d80 <memcpy+0xc>
 8019d7e:	4770      	bx	lr
 8019d80:	b510      	push	{r4, lr}
 8019d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d8a:	4291      	cmp	r1, r2
 8019d8c:	d1f9      	bne.n	8019d82 <memcpy+0xe>
 8019d8e:	bd10      	pop	{r4, pc}

08019d90 <memmove>:
 8019d90:	4288      	cmp	r0, r1
 8019d92:	b510      	push	{r4, lr}
 8019d94:	eb01 0402 	add.w	r4, r1, r2
 8019d98:	d902      	bls.n	8019da0 <memmove+0x10>
 8019d9a:	4284      	cmp	r4, r0
 8019d9c:	4623      	mov	r3, r4
 8019d9e:	d807      	bhi.n	8019db0 <memmove+0x20>
 8019da0:	1e43      	subs	r3, r0, #1
 8019da2:	42a1      	cmp	r1, r4
 8019da4:	d008      	beq.n	8019db8 <memmove+0x28>
 8019da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019dae:	e7f8      	b.n	8019da2 <memmove+0x12>
 8019db0:	4402      	add	r2, r0
 8019db2:	4601      	mov	r1, r0
 8019db4:	428a      	cmp	r2, r1
 8019db6:	d100      	bne.n	8019dba <memmove+0x2a>
 8019db8:	bd10      	pop	{r4, pc}
 8019dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019dc2:	e7f7      	b.n	8019db4 <memmove+0x24>

08019dc4 <memset>:
 8019dc4:	4402      	add	r2, r0
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	4293      	cmp	r3, r2
 8019dca:	d100      	bne.n	8019dce <memset+0xa>
 8019dcc:	4770      	bx	lr
 8019dce:	f803 1b01 	strb.w	r1, [r3], #1
 8019dd2:	e7f9      	b.n	8019dc8 <memset+0x4>

08019dd4 <_calloc_r>:
 8019dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019dd6:	fba1 2402 	umull	r2, r4, r1, r2
 8019dda:	b94c      	cbnz	r4, 8019df0 <_calloc_r+0x1c>
 8019ddc:	4611      	mov	r1, r2
 8019dde:	9201      	str	r2, [sp, #4]
 8019de0:	f000 f87a 	bl	8019ed8 <_malloc_r>
 8019de4:	9a01      	ldr	r2, [sp, #4]
 8019de6:	4605      	mov	r5, r0
 8019de8:	b930      	cbnz	r0, 8019df8 <_calloc_r+0x24>
 8019dea:	4628      	mov	r0, r5
 8019dec:	b003      	add	sp, #12
 8019dee:	bd30      	pop	{r4, r5, pc}
 8019df0:	220c      	movs	r2, #12
 8019df2:	6002      	str	r2, [r0, #0]
 8019df4:	2500      	movs	r5, #0
 8019df6:	e7f8      	b.n	8019dea <_calloc_r+0x16>
 8019df8:	4621      	mov	r1, r4
 8019dfa:	f7ff ffe3 	bl	8019dc4 <memset>
 8019dfe:	e7f4      	b.n	8019dea <_calloc_r+0x16>

08019e00 <_free_r>:
 8019e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e02:	2900      	cmp	r1, #0
 8019e04:	d044      	beq.n	8019e90 <_free_r+0x90>
 8019e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e0a:	9001      	str	r0, [sp, #4]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8019e12:	bfb8      	it	lt
 8019e14:	18e4      	addlt	r4, r4, r3
 8019e16:	f003 fdcb 	bl	801d9b0 <__malloc_lock>
 8019e1a:	4a1e      	ldr	r2, [pc, #120]	; (8019e94 <_free_r+0x94>)
 8019e1c:	9801      	ldr	r0, [sp, #4]
 8019e1e:	6813      	ldr	r3, [r2, #0]
 8019e20:	b933      	cbnz	r3, 8019e30 <_free_r+0x30>
 8019e22:	6063      	str	r3, [r4, #4]
 8019e24:	6014      	str	r4, [r2, #0]
 8019e26:	b003      	add	sp, #12
 8019e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e2c:	f003 bdc6 	b.w	801d9bc <__malloc_unlock>
 8019e30:	42a3      	cmp	r3, r4
 8019e32:	d908      	bls.n	8019e46 <_free_r+0x46>
 8019e34:	6825      	ldr	r5, [r4, #0]
 8019e36:	1961      	adds	r1, r4, r5
 8019e38:	428b      	cmp	r3, r1
 8019e3a:	bf01      	itttt	eq
 8019e3c:	6819      	ldreq	r1, [r3, #0]
 8019e3e:	685b      	ldreq	r3, [r3, #4]
 8019e40:	1949      	addeq	r1, r1, r5
 8019e42:	6021      	streq	r1, [r4, #0]
 8019e44:	e7ed      	b.n	8019e22 <_free_r+0x22>
 8019e46:	461a      	mov	r2, r3
 8019e48:	685b      	ldr	r3, [r3, #4]
 8019e4a:	b10b      	cbz	r3, 8019e50 <_free_r+0x50>
 8019e4c:	42a3      	cmp	r3, r4
 8019e4e:	d9fa      	bls.n	8019e46 <_free_r+0x46>
 8019e50:	6811      	ldr	r1, [r2, #0]
 8019e52:	1855      	adds	r5, r2, r1
 8019e54:	42a5      	cmp	r5, r4
 8019e56:	d10b      	bne.n	8019e70 <_free_r+0x70>
 8019e58:	6824      	ldr	r4, [r4, #0]
 8019e5a:	4421      	add	r1, r4
 8019e5c:	1854      	adds	r4, r2, r1
 8019e5e:	42a3      	cmp	r3, r4
 8019e60:	6011      	str	r1, [r2, #0]
 8019e62:	d1e0      	bne.n	8019e26 <_free_r+0x26>
 8019e64:	681c      	ldr	r4, [r3, #0]
 8019e66:	685b      	ldr	r3, [r3, #4]
 8019e68:	6053      	str	r3, [r2, #4]
 8019e6a:	4421      	add	r1, r4
 8019e6c:	6011      	str	r1, [r2, #0]
 8019e6e:	e7da      	b.n	8019e26 <_free_r+0x26>
 8019e70:	d902      	bls.n	8019e78 <_free_r+0x78>
 8019e72:	230c      	movs	r3, #12
 8019e74:	6003      	str	r3, [r0, #0]
 8019e76:	e7d6      	b.n	8019e26 <_free_r+0x26>
 8019e78:	6825      	ldr	r5, [r4, #0]
 8019e7a:	1961      	adds	r1, r4, r5
 8019e7c:	428b      	cmp	r3, r1
 8019e7e:	bf04      	itt	eq
 8019e80:	6819      	ldreq	r1, [r3, #0]
 8019e82:	685b      	ldreq	r3, [r3, #4]
 8019e84:	6063      	str	r3, [r4, #4]
 8019e86:	bf04      	itt	eq
 8019e88:	1949      	addeq	r1, r1, r5
 8019e8a:	6021      	streq	r1, [r4, #0]
 8019e8c:	6054      	str	r4, [r2, #4]
 8019e8e:	e7ca      	b.n	8019e26 <_free_r+0x26>
 8019e90:	b003      	add	sp, #12
 8019e92:	bd30      	pop	{r4, r5, pc}
 8019e94:	20009f20 	.word	0x20009f20

08019e98 <sbrk_aligned>:
 8019e98:	b570      	push	{r4, r5, r6, lr}
 8019e9a:	4e0e      	ldr	r6, [pc, #56]	; (8019ed4 <sbrk_aligned+0x3c>)
 8019e9c:	460c      	mov	r4, r1
 8019e9e:	6831      	ldr	r1, [r6, #0]
 8019ea0:	4605      	mov	r5, r0
 8019ea2:	b911      	cbnz	r1, 8019eaa <sbrk_aligned+0x12>
 8019ea4:	f001 f872 	bl	801af8c <_sbrk_r>
 8019ea8:	6030      	str	r0, [r6, #0]
 8019eaa:	4621      	mov	r1, r4
 8019eac:	4628      	mov	r0, r5
 8019eae:	f001 f86d 	bl	801af8c <_sbrk_r>
 8019eb2:	1c43      	adds	r3, r0, #1
 8019eb4:	d00a      	beq.n	8019ecc <sbrk_aligned+0x34>
 8019eb6:	1cc4      	adds	r4, r0, #3
 8019eb8:	f024 0403 	bic.w	r4, r4, #3
 8019ebc:	42a0      	cmp	r0, r4
 8019ebe:	d007      	beq.n	8019ed0 <sbrk_aligned+0x38>
 8019ec0:	1a21      	subs	r1, r4, r0
 8019ec2:	4628      	mov	r0, r5
 8019ec4:	f001 f862 	bl	801af8c <_sbrk_r>
 8019ec8:	3001      	adds	r0, #1
 8019eca:	d101      	bne.n	8019ed0 <sbrk_aligned+0x38>
 8019ecc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019ed0:	4620      	mov	r0, r4
 8019ed2:	bd70      	pop	{r4, r5, r6, pc}
 8019ed4:	20009f24 	.word	0x20009f24

08019ed8 <_malloc_r>:
 8019ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019edc:	1ccd      	adds	r5, r1, #3
 8019ede:	f025 0503 	bic.w	r5, r5, #3
 8019ee2:	3508      	adds	r5, #8
 8019ee4:	2d0c      	cmp	r5, #12
 8019ee6:	bf38      	it	cc
 8019ee8:	250c      	movcc	r5, #12
 8019eea:	2d00      	cmp	r5, #0
 8019eec:	4607      	mov	r7, r0
 8019eee:	db01      	blt.n	8019ef4 <_malloc_r+0x1c>
 8019ef0:	42a9      	cmp	r1, r5
 8019ef2:	d905      	bls.n	8019f00 <_malloc_r+0x28>
 8019ef4:	230c      	movs	r3, #12
 8019ef6:	603b      	str	r3, [r7, #0]
 8019ef8:	2600      	movs	r6, #0
 8019efa:	4630      	mov	r0, r6
 8019efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f00:	4e2e      	ldr	r6, [pc, #184]	; (8019fbc <_malloc_r+0xe4>)
 8019f02:	f003 fd55 	bl	801d9b0 <__malloc_lock>
 8019f06:	6833      	ldr	r3, [r6, #0]
 8019f08:	461c      	mov	r4, r3
 8019f0a:	bb34      	cbnz	r4, 8019f5a <_malloc_r+0x82>
 8019f0c:	4629      	mov	r1, r5
 8019f0e:	4638      	mov	r0, r7
 8019f10:	f7ff ffc2 	bl	8019e98 <sbrk_aligned>
 8019f14:	1c43      	adds	r3, r0, #1
 8019f16:	4604      	mov	r4, r0
 8019f18:	d14d      	bne.n	8019fb6 <_malloc_r+0xde>
 8019f1a:	6834      	ldr	r4, [r6, #0]
 8019f1c:	4626      	mov	r6, r4
 8019f1e:	2e00      	cmp	r6, #0
 8019f20:	d140      	bne.n	8019fa4 <_malloc_r+0xcc>
 8019f22:	6823      	ldr	r3, [r4, #0]
 8019f24:	4631      	mov	r1, r6
 8019f26:	4638      	mov	r0, r7
 8019f28:	eb04 0803 	add.w	r8, r4, r3
 8019f2c:	f001 f82e 	bl	801af8c <_sbrk_r>
 8019f30:	4580      	cmp	r8, r0
 8019f32:	d13a      	bne.n	8019faa <_malloc_r+0xd2>
 8019f34:	6821      	ldr	r1, [r4, #0]
 8019f36:	3503      	adds	r5, #3
 8019f38:	1a6d      	subs	r5, r5, r1
 8019f3a:	f025 0503 	bic.w	r5, r5, #3
 8019f3e:	3508      	adds	r5, #8
 8019f40:	2d0c      	cmp	r5, #12
 8019f42:	bf38      	it	cc
 8019f44:	250c      	movcc	r5, #12
 8019f46:	4629      	mov	r1, r5
 8019f48:	4638      	mov	r0, r7
 8019f4a:	f7ff ffa5 	bl	8019e98 <sbrk_aligned>
 8019f4e:	3001      	adds	r0, #1
 8019f50:	d02b      	beq.n	8019faa <_malloc_r+0xd2>
 8019f52:	6823      	ldr	r3, [r4, #0]
 8019f54:	442b      	add	r3, r5
 8019f56:	6023      	str	r3, [r4, #0]
 8019f58:	e00e      	b.n	8019f78 <_malloc_r+0xa0>
 8019f5a:	6822      	ldr	r2, [r4, #0]
 8019f5c:	1b52      	subs	r2, r2, r5
 8019f5e:	d41e      	bmi.n	8019f9e <_malloc_r+0xc6>
 8019f60:	2a0b      	cmp	r2, #11
 8019f62:	d916      	bls.n	8019f92 <_malloc_r+0xba>
 8019f64:	1961      	adds	r1, r4, r5
 8019f66:	42a3      	cmp	r3, r4
 8019f68:	6025      	str	r5, [r4, #0]
 8019f6a:	bf18      	it	ne
 8019f6c:	6059      	strne	r1, [r3, #4]
 8019f6e:	6863      	ldr	r3, [r4, #4]
 8019f70:	bf08      	it	eq
 8019f72:	6031      	streq	r1, [r6, #0]
 8019f74:	5162      	str	r2, [r4, r5]
 8019f76:	604b      	str	r3, [r1, #4]
 8019f78:	4638      	mov	r0, r7
 8019f7a:	f104 060b 	add.w	r6, r4, #11
 8019f7e:	f003 fd1d 	bl	801d9bc <__malloc_unlock>
 8019f82:	f026 0607 	bic.w	r6, r6, #7
 8019f86:	1d23      	adds	r3, r4, #4
 8019f88:	1af2      	subs	r2, r6, r3
 8019f8a:	d0b6      	beq.n	8019efa <_malloc_r+0x22>
 8019f8c:	1b9b      	subs	r3, r3, r6
 8019f8e:	50a3      	str	r3, [r4, r2]
 8019f90:	e7b3      	b.n	8019efa <_malloc_r+0x22>
 8019f92:	6862      	ldr	r2, [r4, #4]
 8019f94:	42a3      	cmp	r3, r4
 8019f96:	bf0c      	ite	eq
 8019f98:	6032      	streq	r2, [r6, #0]
 8019f9a:	605a      	strne	r2, [r3, #4]
 8019f9c:	e7ec      	b.n	8019f78 <_malloc_r+0xa0>
 8019f9e:	4623      	mov	r3, r4
 8019fa0:	6864      	ldr	r4, [r4, #4]
 8019fa2:	e7b2      	b.n	8019f0a <_malloc_r+0x32>
 8019fa4:	4634      	mov	r4, r6
 8019fa6:	6876      	ldr	r6, [r6, #4]
 8019fa8:	e7b9      	b.n	8019f1e <_malloc_r+0x46>
 8019faa:	230c      	movs	r3, #12
 8019fac:	603b      	str	r3, [r7, #0]
 8019fae:	4638      	mov	r0, r7
 8019fb0:	f003 fd04 	bl	801d9bc <__malloc_unlock>
 8019fb4:	e7a1      	b.n	8019efa <_malloc_r+0x22>
 8019fb6:	6025      	str	r5, [r4, #0]
 8019fb8:	e7de      	b.n	8019f78 <_malloc_r+0xa0>
 8019fba:	bf00      	nop
 8019fbc:	20009f20 	.word	0x20009f20

08019fc0 <__cvt>:
 8019fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019fc4:	ec55 4b10 	vmov	r4, r5, d0
 8019fc8:	2d00      	cmp	r5, #0
 8019fca:	460e      	mov	r6, r1
 8019fcc:	4619      	mov	r1, r3
 8019fce:	462b      	mov	r3, r5
 8019fd0:	bfbb      	ittet	lt
 8019fd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019fd6:	461d      	movlt	r5, r3
 8019fd8:	2300      	movge	r3, #0
 8019fda:	232d      	movlt	r3, #45	; 0x2d
 8019fdc:	700b      	strb	r3, [r1, #0]
 8019fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019fe0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019fe4:	4691      	mov	r9, r2
 8019fe6:	f023 0820 	bic.w	r8, r3, #32
 8019fea:	bfbc      	itt	lt
 8019fec:	4622      	movlt	r2, r4
 8019fee:	4614      	movlt	r4, r2
 8019ff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019ff4:	d005      	beq.n	801a002 <__cvt+0x42>
 8019ff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019ffa:	d100      	bne.n	8019ffe <__cvt+0x3e>
 8019ffc:	3601      	adds	r6, #1
 8019ffe:	2102      	movs	r1, #2
 801a000:	e000      	b.n	801a004 <__cvt+0x44>
 801a002:	2103      	movs	r1, #3
 801a004:	ab03      	add	r3, sp, #12
 801a006:	9301      	str	r3, [sp, #4]
 801a008:	ab02      	add	r3, sp, #8
 801a00a:	9300      	str	r3, [sp, #0]
 801a00c:	ec45 4b10 	vmov	d0, r4, r5
 801a010:	4653      	mov	r3, sl
 801a012:	4632      	mov	r2, r6
 801a014:	f002 fa00 	bl	801c418 <_dtoa_r>
 801a018:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a01c:	4607      	mov	r7, r0
 801a01e:	d102      	bne.n	801a026 <__cvt+0x66>
 801a020:	f019 0f01 	tst.w	r9, #1
 801a024:	d022      	beq.n	801a06c <__cvt+0xac>
 801a026:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a02a:	eb07 0906 	add.w	r9, r7, r6
 801a02e:	d110      	bne.n	801a052 <__cvt+0x92>
 801a030:	783b      	ldrb	r3, [r7, #0]
 801a032:	2b30      	cmp	r3, #48	; 0x30
 801a034:	d10a      	bne.n	801a04c <__cvt+0x8c>
 801a036:	2200      	movs	r2, #0
 801a038:	2300      	movs	r3, #0
 801a03a:	4620      	mov	r0, r4
 801a03c:	4629      	mov	r1, r5
 801a03e:	f7e6 fd5b 	bl	8000af8 <__aeabi_dcmpeq>
 801a042:	b918      	cbnz	r0, 801a04c <__cvt+0x8c>
 801a044:	f1c6 0601 	rsb	r6, r6, #1
 801a048:	f8ca 6000 	str.w	r6, [sl]
 801a04c:	f8da 3000 	ldr.w	r3, [sl]
 801a050:	4499      	add	r9, r3
 801a052:	2200      	movs	r2, #0
 801a054:	2300      	movs	r3, #0
 801a056:	4620      	mov	r0, r4
 801a058:	4629      	mov	r1, r5
 801a05a:	f7e6 fd4d 	bl	8000af8 <__aeabi_dcmpeq>
 801a05e:	b108      	cbz	r0, 801a064 <__cvt+0xa4>
 801a060:	f8cd 900c 	str.w	r9, [sp, #12]
 801a064:	2230      	movs	r2, #48	; 0x30
 801a066:	9b03      	ldr	r3, [sp, #12]
 801a068:	454b      	cmp	r3, r9
 801a06a:	d307      	bcc.n	801a07c <__cvt+0xbc>
 801a06c:	9b03      	ldr	r3, [sp, #12]
 801a06e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a070:	1bdb      	subs	r3, r3, r7
 801a072:	4638      	mov	r0, r7
 801a074:	6013      	str	r3, [r2, #0]
 801a076:	b004      	add	sp, #16
 801a078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a07c:	1c59      	adds	r1, r3, #1
 801a07e:	9103      	str	r1, [sp, #12]
 801a080:	701a      	strb	r2, [r3, #0]
 801a082:	e7f0      	b.n	801a066 <__cvt+0xa6>

0801a084 <__exponent>:
 801a084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a086:	4603      	mov	r3, r0
 801a088:	2900      	cmp	r1, #0
 801a08a:	bfb8      	it	lt
 801a08c:	4249      	neglt	r1, r1
 801a08e:	f803 2b02 	strb.w	r2, [r3], #2
 801a092:	bfb4      	ite	lt
 801a094:	222d      	movlt	r2, #45	; 0x2d
 801a096:	222b      	movge	r2, #43	; 0x2b
 801a098:	2909      	cmp	r1, #9
 801a09a:	7042      	strb	r2, [r0, #1]
 801a09c:	dd2a      	ble.n	801a0f4 <__exponent+0x70>
 801a09e:	f10d 0407 	add.w	r4, sp, #7
 801a0a2:	46a4      	mov	ip, r4
 801a0a4:	270a      	movs	r7, #10
 801a0a6:	46a6      	mov	lr, r4
 801a0a8:	460a      	mov	r2, r1
 801a0aa:	fb91 f6f7 	sdiv	r6, r1, r7
 801a0ae:	fb07 1516 	mls	r5, r7, r6, r1
 801a0b2:	3530      	adds	r5, #48	; 0x30
 801a0b4:	2a63      	cmp	r2, #99	; 0x63
 801a0b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801a0ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a0be:	4631      	mov	r1, r6
 801a0c0:	dcf1      	bgt.n	801a0a6 <__exponent+0x22>
 801a0c2:	3130      	adds	r1, #48	; 0x30
 801a0c4:	f1ae 0502 	sub.w	r5, lr, #2
 801a0c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a0cc:	1c44      	adds	r4, r0, #1
 801a0ce:	4629      	mov	r1, r5
 801a0d0:	4561      	cmp	r1, ip
 801a0d2:	d30a      	bcc.n	801a0ea <__exponent+0x66>
 801a0d4:	f10d 0209 	add.w	r2, sp, #9
 801a0d8:	eba2 020e 	sub.w	r2, r2, lr
 801a0dc:	4565      	cmp	r5, ip
 801a0de:	bf88      	it	hi
 801a0e0:	2200      	movhi	r2, #0
 801a0e2:	4413      	add	r3, r2
 801a0e4:	1a18      	subs	r0, r3, r0
 801a0e6:	b003      	add	sp, #12
 801a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a0f2:	e7ed      	b.n	801a0d0 <__exponent+0x4c>
 801a0f4:	2330      	movs	r3, #48	; 0x30
 801a0f6:	3130      	adds	r1, #48	; 0x30
 801a0f8:	7083      	strb	r3, [r0, #2]
 801a0fa:	70c1      	strb	r1, [r0, #3]
 801a0fc:	1d03      	adds	r3, r0, #4
 801a0fe:	e7f1      	b.n	801a0e4 <__exponent+0x60>

0801a100 <_printf_float>:
 801a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a104:	ed2d 8b02 	vpush	{d8}
 801a108:	b08d      	sub	sp, #52	; 0x34
 801a10a:	460c      	mov	r4, r1
 801a10c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a110:	4616      	mov	r6, r2
 801a112:	461f      	mov	r7, r3
 801a114:	4605      	mov	r5, r0
 801a116:	f003 fbbd 	bl	801d894 <_localeconv_r>
 801a11a:	f8d0 a000 	ldr.w	sl, [r0]
 801a11e:	4650      	mov	r0, sl
 801a120:	f7e6 f868 	bl	80001f4 <strlen>
 801a124:	2300      	movs	r3, #0
 801a126:	930a      	str	r3, [sp, #40]	; 0x28
 801a128:	6823      	ldr	r3, [r4, #0]
 801a12a:	9305      	str	r3, [sp, #20]
 801a12c:	f8d8 3000 	ldr.w	r3, [r8]
 801a130:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a134:	3307      	adds	r3, #7
 801a136:	f023 0307 	bic.w	r3, r3, #7
 801a13a:	f103 0208 	add.w	r2, r3, #8
 801a13e:	f8c8 2000 	str.w	r2, [r8]
 801a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a146:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a14a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a14e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a152:	9307      	str	r3, [sp, #28]
 801a154:	f8cd 8018 	str.w	r8, [sp, #24]
 801a158:	ee08 0a10 	vmov	s16, r0
 801a15c:	4b9f      	ldr	r3, [pc, #636]	; (801a3dc <_printf_float+0x2dc>)
 801a15e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a166:	f7e6 fcf9 	bl	8000b5c <__aeabi_dcmpun>
 801a16a:	bb88      	cbnz	r0, 801a1d0 <_printf_float+0xd0>
 801a16c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a170:	4b9a      	ldr	r3, [pc, #616]	; (801a3dc <_printf_float+0x2dc>)
 801a172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a176:	f7e6 fcd3 	bl	8000b20 <__aeabi_dcmple>
 801a17a:	bb48      	cbnz	r0, 801a1d0 <_printf_float+0xd0>
 801a17c:	2200      	movs	r2, #0
 801a17e:	2300      	movs	r3, #0
 801a180:	4640      	mov	r0, r8
 801a182:	4649      	mov	r1, r9
 801a184:	f7e6 fcc2 	bl	8000b0c <__aeabi_dcmplt>
 801a188:	b110      	cbz	r0, 801a190 <_printf_float+0x90>
 801a18a:	232d      	movs	r3, #45	; 0x2d
 801a18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a190:	4b93      	ldr	r3, [pc, #588]	; (801a3e0 <_printf_float+0x2e0>)
 801a192:	4894      	ldr	r0, [pc, #592]	; (801a3e4 <_printf_float+0x2e4>)
 801a194:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a198:	bf94      	ite	ls
 801a19a:	4698      	movls	r8, r3
 801a19c:	4680      	movhi	r8, r0
 801a19e:	2303      	movs	r3, #3
 801a1a0:	6123      	str	r3, [r4, #16]
 801a1a2:	9b05      	ldr	r3, [sp, #20]
 801a1a4:	f023 0204 	bic.w	r2, r3, #4
 801a1a8:	6022      	str	r2, [r4, #0]
 801a1aa:	f04f 0900 	mov.w	r9, #0
 801a1ae:	9700      	str	r7, [sp, #0]
 801a1b0:	4633      	mov	r3, r6
 801a1b2:	aa0b      	add	r2, sp, #44	; 0x2c
 801a1b4:	4621      	mov	r1, r4
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	f000 f9d8 	bl	801a56c <_printf_common>
 801a1bc:	3001      	adds	r0, #1
 801a1be:	f040 8090 	bne.w	801a2e2 <_printf_float+0x1e2>
 801a1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1c6:	b00d      	add	sp, #52	; 0x34
 801a1c8:	ecbd 8b02 	vpop	{d8}
 801a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1d0:	4642      	mov	r2, r8
 801a1d2:	464b      	mov	r3, r9
 801a1d4:	4640      	mov	r0, r8
 801a1d6:	4649      	mov	r1, r9
 801a1d8:	f7e6 fcc0 	bl	8000b5c <__aeabi_dcmpun>
 801a1dc:	b140      	cbz	r0, 801a1f0 <_printf_float+0xf0>
 801a1de:	464b      	mov	r3, r9
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	bfbc      	itt	lt
 801a1e4:	232d      	movlt	r3, #45	; 0x2d
 801a1e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a1ea:	487f      	ldr	r0, [pc, #508]	; (801a3e8 <_printf_float+0x2e8>)
 801a1ec:	4b7f      	ldr	r3, [pc, #508]	; (801a3ec <_printf_float+0x2ec>)
 801a1ee:	e7d1      	b.n	801a194 <_printf_float+0x94>
 801a1f0:	6863      	ldr	r3, [r4, #4]
 801a1f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a1f6:	9206      	str	r2, [sp, #24]
 801a1f8:	1c5a      	adds	r2, r3, #1
 801a1fa:	d13f      	bne.n	801a27c <_printf_float+0x17c>
 801a1fc:	2306      	movs	r3, #6
 801a1fe:	6063      	str	r3, [r4, #4]
 801a200:	9b05      	ldr	r3, [sp, #20]
 801a202:	6861      	ldr	r1, [r4, #4]
 801a204:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a208:	2300      	movs	r3, #0
 801a20a:	9303      	str	r3, [sp, #12]
 801a20c:	ab0a      	add	r3, sp, #40	; 0x28
 801a20e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a212:	ab09      	add	r3, sp, #36	; 0x24
 801a214:	ec49 8b10 	vmov	d0, r8, r9
 801a218:	9300      	str	r3, [sp, #0]
 801a21a:	6022      	str	r2, [r4, #0]
 801a21c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a220:	4628      	mov	r0, r5
 801a222:	f7ff fecd 	bl	8019fc0 <__cvt>
 801a226:	9b06      	ldr	r3, [sp, #24]
 801a228:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a22a:	2b47      	cmp	r3, #71	; 0x47
 801a22c:	4680      	mov	r8, r0
 801a22e:	d108      	bne.n	801a242 <_printf_float+0x142>
 801a230:	1cc8      	adds	r0, r1, #3
 801a232:	db02      	blt.n	801a23a <_printf_float+0x13a>
 801a234:	6863      	ldr	r3, [r4, #4]
 801a236:	4299      	cmp	r1, r3
 801a238:	dd41      	ble.n	801a2be <_printf_float+0x1be>
 801a23a:	f1ab 0b02 	sub.w	fp, fp, #2
 801a23e:	fa5f fb8b 	uxtb.w	fp, fp
 801a242:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a246:	d820      	bhi.n	801a28a <_printf_float+0x18a>
 801a248:	3901      	subs	r1, #1
 801a24a:	465a      	mov	r2, fp
 801a24c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a250:	9109      	str	r1, [sp, #36]	; 0x24
 801a252:	f7ff ff17 	bl	801a084 <__exponent>
 801a256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a258:	1813      	adds	r3, r2, r0
 801a25a:	2a01      	cmp	r2, #1
 801a25c:	4681      	mov	r9, r0
 801a25e:	6123      	str	r3, [r4, #16]
 801a260:	dc02      	bgt.n	801a268 <_printf_float+0x168>
 801a262:	6822      	ldr	r2, [r4, #0]
 801a264:	07d2      	lsls	r2, r2, #31
 801a266:	d501      	bpl.n	801a26c <_printf_float+0x16c>
 801a268:	3301      	adds	r3, #1
 801a26a:	6123      	str	r3, [r4, #16]
 801a26c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a270:	2b00      	cmp	r3, #0
 801a272:	d09c      	beq.n	801a1ae <_printf_float+0xae>
 801a274:	232d      	movs	r3, #45	; 0x2d
 801a276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a27a:	e798      	b.n	801a1ae <_printf_float+0xae>
 801a27c:	9a06      	ldr	r2, [sp, #24]
 801a27e:	2a47      	cmp	r2, #71	; 0x47
 801a280:	d1be      	bne.n	801a200 <_printf_float+0x100>
 801a282:	2b00      	cmp	r3, #0
 801a284:	d1bc      	bne.n	801a200 <_printf_float+0x100>
 801a286:	2301      	movs	r3, #1
 801a288:	e7b9      	b.n	801a1fe <_printf_float+0xfe>
 801a28a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a28e:	d118      	bne.n	801a2c2 <_printf_float+0x1c2>
 801a290:	2900      	cmp	r1, #0
 801a292:	6863      	ldr	r3, [r4, #4]
 801a294:	dd0b      	ble.n	801a2ae <_printf_float+0x1ae>
 801a296:	6121      	str	r1, [r4, #16]
 801a298:	b913      	cbnz	r3, 801a2a0 <_printf_float+0x1a0>
 801a29a:	6822      	ldr	r2, [r4, #0]
 801a29c:	07d0      	lsls	r0, r2, #31
 801a29e:	d502      	bpl.n	801a2a6 <_printf_float+0x1a6>
 801a2a0:	3301      	adds	r3, #1
 801a2a2:	440b      	add	r3, r1
 801a2a4:	6123      	str	r3, [r4, #16]
 801a2a6:	65a1      	str	r1, [r4, #88]	; 0x58
 801a2a8:	f04f 0900 	mov.w	r9, #0
 801a2ac:	e7de      	b.n	801a26c <_printf_float+0x16c>
 801a2ae:	b913      	cbnz	r3, 801a2b6 <_printf_float+0x1b6>
 801a2b0:	6822      	ldr	r2, [r4, #0]
 801a2b2:	07d2      	lsls	r2, r2, #31
 801a2b4:	d501      	bpl.n	801a2ba <_printf_float+0x1ba>
 801a2b6:	3302      	adds	r3, #2
 801a2b8:	e7f4      	b.n	801a2a4 <_printf_float+0x1a4>
 801a2ba:	2301      	movs	r3, #1
 801a2bc:	e7f2      	b.n	801a2a4 <_printf_float+0x1a4>
 801a2be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2c4:	4299      	cmp	r1, r3
 801a2c6:	db05      	blt.n	801a2d4 <_printf_float+0x1d4>
 801a2c8:	6823      	ldr	r3, [r4, #0]
 801a2ca:	6121      	str	r1, [r4, #16]
 801a2cc:	07d8      	lsls	r0, r3, #31
 801a2ce:	d5ea      	bpl.n	801a2a6 <_printf_float+0x1a6>
 801a2d0:	1c4b      	adds	r3, r1, #1
 801a2d2:	e7e7      	b.n	801a2a4 <_printf_float+0x1a4>
 801a2d4:	2900      	cmp	r1, #0
 801a2d6:	bfd4      	ite	le
 801a2d8:	f1c1 0202 	rsble	r2, r1, #2
 801a2dc:	2201      	movgt	r2, #1
 801a2de:	4413      	add	r3, r2
 801a2e0:	e7e0      	b.n	801a2a4 <_printf_float+0x1a4>
 801a2e2:	6823      	ldr	r3, [r4, #0]
 801a2e4:	055a      	lsls	r2, r3, #21
 801a2e6:	d407      	bmi.n	801a2f8 <_printf_float+0x1f8>
 801a2e8:	6923      	ldr	r3, [r4, #16]
 801a2ea:	4642      	mov	r2, r8
 801a2ec:	4631      	mov	r1, r6
 801a2ee:	4628      	mov	r0, r5
 801a2f0:	47b8      	blx	r7
 801a2f2:	3001      	adds	r0, #1
 801a2f4:	d12c      	bne.n	801a350 <_printf_float+0x250>
 801a2f6:	e764      	b.n	801a1c2 <_printf_float+0xc2>
 801a2f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a2fc:	f240 80e0 	bls.w	801a4c0 <_printf_float+0x3c0>
 801a300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a304:	2200      	movs	r2, #0
 801a306:	2300      	movs	r3, #0
 801a308:	f7e6 fbf6 	bl	8000af8 <__aeabi_dcmpeq>
 801a30c:	2800      	cmp	r0, #0
 801a30e:	d034      	beq.n	801a37a <_printf_float+0x27a>
 801a310:	4a37      	ldr	r2, [pc, #220]	; (801a3f0 <_printf_float+0x2f0>)
 801a312:	2301      	movs	r3, #1
 801a314:	4631      	mov	r1, r6
 801a316:	4628      	mov	r0, r5
 801a318:	47b8      	blx	r7
 801a31a:	3001      	adds	r0, #1
 801a31c:	f43f af51 	beq.w	801a1c2 <_printf_float+0xc2>
 801a320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a324:	429a      	cmp	r2, r3
 801a326:	db02      	blt.n	801a32e <_printf_float+0x22e>
 801a328:	6823      	ldr	r3, [r4, #0]
 801a32a:	07d8      	lsls	r0, r3, #31
 801a32c:	d510      	bpl.n	801a350 <_printf_float+0x250>
 801a32e:	ee18 3a10 	vmov	r3, s16
 801a332:	4652      	mov	r2, sl
 801a334:	4631      	mov	r1, r6
 801a336:	4628      	mov	r0, r5
 801a338:	47b8      	blx	r7
 801a33a:	3001      	adds	r0, #1
 801a33c:	f43f af41 	beq.w	801a1c2 <_printf_float+0xc2>
 801a340:	f04f 0800 	mov.w	r8, #0
 801a344:	f104 091a 	add.w	r9, r4, #26
 801a348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a34a:	3b01      	subs	r3, #1
 801a34c:	4543      	cmp	r3, r8
 801a34e:	dc09      	bgt.n	801a364 <_printf_float+0x264>
 801a350:	6823      	ldr	r3, [r4, #0]
 801a352:	079b      	lsls	r3, r3, #30
 801a354:	f100 8105 	bmi.w	801a562 <_printf_float+0x462>
 801a358:	68e0      	ldr	r0, [r4, #12]
 801a35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a35c:	4298      	cmp	r0, r3
 801a35e:	bfb8      	it	lt
 801a360:	4618      	movlt	r0, r3
 801a362:	e730      	b.n	801a1c6 <_printf_float+0xc6>
 801a364:	2301      	movs	r3, #1
 801a366:	464a      	mov	r2, r9
 801a368:	4631      	mov	r1, r6
 801a36a:	4628      	mov	r0, r5
 801a36c:	47b8      	blx	r7
 801a36e:	3001      	adds	r0, #1
 801a370:	f43f af27 	beq.w	801a1c2 <_printf_float+0xc2>
 801a374:	f108 0801 	add.w	r8, r8, #1
 801a378:	e7e6      	b.n	801a348 <_printf_float+0x248>
 801a37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	dc39      	bgt.n	801a3f4 <_printf_float+0x2f4>
 801a380:	4a1b      	ldr	r2, [pc, #108]	; (801a3f0 <_printf_float+0x2f0>)
 801a382:	2301      	movs	r3, #1
 801a384:	4631      	mov	r1, r6
 801a386:	4628      	mov	r0, r5
 801a388:	47b8      	blx	r7
 801a38a:	3001      	adds	r0, #1
 801a38c:	f43f af19 	beq.w	801a1c2 <_printf_float+0xc2>
 801a390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a394:	4313      	orrs	r3, r2
 801a396:	d102      	bne.n	801a39e <_printf_float+0x29e>
 801a398:	6823      	ldr	r3, [r4, #0]
 801a39a:	07d9      	lsls	r1, r3, #31
 801a39c:	d5d8      	bpl.n	801a350 <_printf_float+0x250>
 801a39e:	ee18 3a10 	vmov	r3, s16
 801a3a2:	4652      	mov	r2, sl
 801a3a4:	4631      	mov	r1, r6
 801a3a6:	4628      	mov	r0, r5
 801a3a8:	47b8      	blx	r7
 801a3aa:	3001      	adds	r0, #1
 801a3ac:	f43f af09 	beq.w	801a1c2 <_printf_float+0xc2>
 801a3b0:	f04f 0900 	mov.w	r9, #0
 801a3b4:	f104 0a1a 	add.w	sl, r4, #26
 801a3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3ba:	425b      	negs	r3, r3
 801a3bc:	454b      	cmp	r3, r9
 801a3be:	dc01      	bgt.n	801a3c4 <_printf_float+0x2c4>
 801a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3c2:	e792      	b.n	801a2ea <_printf_float+0x1ea>
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	4652      	mov	r2, sl
 801a3c8:	4631      	mov	r1, r6
 801a3ca:	4628      	mov	r0, r5
 801a3cc:	47b8      	blx	r7
 801a3ce:	3001      	adds	r0, #1
 801a3d0:	f43f aef7 	beq.w	801a1c2 <_printf_float+0xc2>
 801a3d4:	f109 0901 	add.w	r9, r9, #1
 801a3d8:	e7ee      	b.n	801a3b8 <_printf_float+0x2b8>
 801a3da:	bf00      	nop
 801a3dc:	7fefffff 	.word	0x7fefffff
 801a3e0:	0801f708 	.word	0x0801f708
 801a3e4:	0801f70c 	.word	0x0801f70c
 801a3e8:	0801f714 	.word	0x0801f714
 801a3ec:	0801f710 	.word	0x0801f710
 801a3f0:	0801f718 	.word	0x0801f718
 801a3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a3f8:	429a      	cmp	r2, r3
 801a3fa:	bfa8      	it	ge
 801a3fc:	461a      	movge	r2, r3
 801a3fe:	2a00      	cmp	r2, #0
 801a400:	4691      	mov	r9, r2
 801a402:	dc37      	bgt.n	801a474 <_printf_float+0x374>
 801a404:	f04f 0b00 	mov.w	fp, #0
 801a408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a40c:	f104 021a 	add.w	r2, r4, #26
 801a410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a412:	9305      	str	r3, [sp, #20]
 801a414:	eba3 0309 	sub.w	r3, r3, r9
 801a418:	455b      	cmp	r3, fp
 801a41a:	dc33      	bgt.n	801a484 <_printf_float+0x384>
 801a41c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a420:	429a      	cmp	r2, r3
 801a422:	db3b      	blt.n	801a49c <_printf_float+0x39c>
 801a424:	6823      	ldr	r3, [r4, #0]
 801a426:	07da      	lsls	r2, r3, #31
 801a428:	d438      	bmi.n	801a49c <_printf_float+0x39c>
 801a42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a42c:	9a05      	ldr	r2, [sp, #20]
 801a42e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a430:	1a9a      	subs	r2, r3, r2
 801a432:	eba3 0901 	sub.w	r9, r3, r1
 801a436:	4591      	cmp	r9, r2
 801a438:	bfa8      	it	ge
 801a43a:	4691      	movge	r9, r2
 801a43c:	f1b9 0f00 	cmp.w	r9, #0
 801a440:	dc35      	bgt.n	801a4ae <_printf_float+0x3ae>
 801a442:	f04f 0800 	mov.w	r8, #0
 801a446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a44a:	f104 0a1a 	add.w	sl, r4, #26
 801a44e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a452:	1a9b      	subs	r3, r3, r2
 801a454:	eba3 0309 	sub.w	r3, r3, r9
 801a458:	4543      	cmp	r3, r8
 801a45a:	f77f af79 	ble.w	801a350 <_printf_float+0x250>
 801a45e:	2301      	movs	r3, #1
 801a460:	4652      	mov	r2, sl
 801a462:	4631      	mov	r1, r6
 801a464:	4628      	mov	r0, r5
 801a466:	47b8      	blx	r7
 801a468:	3001      	adds	r0, #1
 801a46a:	f43f aeaa 	beq.w	801a1c2 <_printf_float+0xc2>
 801a46e:	f108 0801 	add.w	r8, r8, #1
 801a472:	e7ec      	b.n	801a44e <_printf_float+0x34e>
 801a474:	4613      	mov	r3, r2
 801a476:	4631      	mov	r1, r6
 801a478:	4642      	mov	r2, r8
 801a47a:	4628      	mov	r0, r5
 801a47c:	47b8      	blx	r7
 801a47e:	3001      	adds	r0, #1
 801a480:	d1c0      	bne.n	801a404 <_printf_float+0x304>
 801a482:	e69e      	b.n	801a1c2 <_printf_float+0xc2>
 801a484:	2301      	movs	r3, #1
 801a486:	4631      	mov	r1, r6
 801a488:	4628      	mov	r0, r5
 801a48a:	9205      	str	r2, [sp, #20]
 801a48c:	47b8      	blx	r7
 801a48e:	3001      	adds	r0, #1
 801a490:	f43f ae97 	beq.w	801a1c2 <_printf_float+0xc2>
 801a494:	9a05      	ldr	r2, [sp, #20]
 801a496:	f10b 0b01 	add.w	fp, fp, #1
 801a49a:	e7b9      	b.n	801a410 <_printf_float+0x310>
 801a49c:	ee18 3a10 	vmov	r3, s16
 801a4a0:	4652      	mov	r2, sl
 801a4a2:	4631      	mov	r1, r6
 801a4a4:	4628      	mov	r0, r5
 801a4a6:	47b8      	blx	r7
 801a4a8:	3001      	adds	r0, #1
 801a4aa:	d1be      	bne.n	801a42a <_printf_float+0x32a>
 801a4ac:	e689      	b.n	801a1c2 <_printf_float+0xc2>
 801a4ae:	9a05      	ldr	r2, [sp, #20]
 801a4b0:	464b      	mov	r3, r9
 801a4b2:	4442      	add	r2, r8
 801a4b4:	4631      	mov	r1, r6
 801a4b6:	4628      	mov	r0, r5
 801a4b8:	47b8      	blx	r7
 801a4ba:	3001      	adds	r0, #1
 801a4bc:	d1c1      	bne.n	801a442 <_printf_float+0x342>
 801a4be:	e680      	b.n	801a1c2 <_printf_float+0xc2>
 801a4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a4c2:	2a01      	cmp	r2, #1
 801a4c4:	dc01      	bgt.n	801a4ca <_printf_float+0x3ca>
 801a4c6:	07db      	lsls	r3, r3, #31
 801a4c8:	d538      	bpl.n	801a53c <_printf_float+0x43c>
 801a4ca:	2301      	movs	r3, #1
 801a4cc:	4642      	mov	r2, r8
 801a4ce:	4631      	mov	r1, r6
 801a4d0:	4628      	mov	r0, r5
 801a4d2:	47b8      	blx	r7
 801a4d4:	3001      	adds	r0, #1
 801a4d6:	f43f ae74 	beq.w	801a1c2 <_printf_float+0xc2>
 801a4da:	ee18 3a10 	vmov	r3, s16
 801a4de:	4652      	mov	r2, sl
 801a4e0:	4631      	mov	r1, r6
 801a4e2:	4628      	mov	r0, r5
 801a4e4:	47b8      	blx	r7
 801a4e6:	3001      	adds	r0, #1
 801a4e8:	f43f ae6b 	beq.w	801a1c2 <_printf_float+0xc2>
 801a4ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	f7e6 fb00 	bl	8000af8 <__aeabi_dcmpeq>
 801a4f8:	b9d8      	cbnz	r0, 801a532 <_printf_float+0x432>
 801a4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4fc:	f108 0201 	add.w	r2, r8, #1
 801a500:	3b01      	subs	r3, #1
 801a502:	4631      	mov	r1, r6
 801a504:	4628      	mov	r0, r5
 801a506:	47b8      	blx	r7
 801a508:	3001      	adds	r0, #1
 801a50a:	d10e      	bne.n	801a52a <_printf_float+0x42a>
 801a50c:	e659      	b.n	801a1c2 <_printf_float+0xc2>
 801a50e:	2301      	movs	r3, #1
 801a510:	4652      	mov	r2, sl
 801a512:	4631      	mov	r1, r6
 801a514:	4628      	mov	r0, r5
 801a516:	47b8      	blx	r7
 801a518:	3001      	adds	r0, #1
 801a51a:	f43f ae52 	beq.w	801a1c2 <_printf_float+0xc2>
 801a51e:	f108 0801 	add.w	r8, r8, #1
 801a522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a524:	3b01      	subs	r3, #1
 801a526:	4543      	cmp	r3, r8
 801a528:	dcf1      	bgt.n	801a50e <_printf_float+0x40e>
 801a52a:	464b      	mov	r3, r9
 801a52c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a530:	e6dc      	b.n	801a2ec <_printf_float+0x1ec>
 801a532:	f04f 0800 	mov.w	r8, #0
 801a536:	f104 0a1a 	add.w	sl, r4, #26
 801a53a:	e7f2      	b.n	801a522 <_printf_float+0x422>
 801a53c:	2301      	movs	r3, #1
 801a53e:	4642      	mov	r2, r8
 801a540:	e7df      	b.n	801a502 <_printf_float+0x402>
 801a542:	2301      	movs	r3, #1
 801a544:	464a      	mov	r2, r9
 801a546:	4631      	mov	r1, r6
 801a548:	4628      	mov	r0, r5
 801a54a:	47b8      	blx	r7
 801a54c:	3001      	adds	r0, #1
 801a54e:	f43f ae38 	beq.w	801a1c2 <_printf_float+0xc2>
 801a552:	f108 0801 	add.w	r8, r8, #1
 801a556:	68e3      	ldr	r3, [r4, #12]
 801a558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a55a:	1a5b      	subs	r3, r3, r1
 801a55c:	4543      	cmp	r3, r8
 801a55e:	dcf0      	bgt.n	801a542 <_printf_float+0x442>
 801a560:	e6fa      	b.n	801a358 <_printf_float+0x258>
 801a562:	f04f 0800 	mov.w	r8, #0
 801a566:	f104 0919 	add.w	r9, r4, #25
 801a56a:	e7f4      	b.n	801a556 <_printf_float+0x456>

0801a56c <_printf_common>:
 801a56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a570:	4616      	mov	r6, r2
 801a572:	4699      	mov	r9, r3
 801a574:	688a      	ldr	r2, [r1, #8]
 801a576:	690b      	ldr	r3, [r1, #16]
 801a578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a57c:	4293      	cmp	r3, r2
 801a57e:	bfb8      	it	lt
 801a580:	4613      	movlt	r3, r2
 801a582:	6033      	str	r3, [r6, #0]
 801a584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a588:	4607      	mov	r7, r0
 801a58a:	460c      	mov	r4, r1
 801a58c:	b10a      	cbz	r2, 801a592 <_printf_common+0x26>
 801a58e:	3301      	adds	r3, #1
 801a590:	6033      	str	r3, [r6, #0]
 801a592:	6823      	ldr	r3, [r4, #0]
 801a594:	0699      	lsls	r1, r3, #26
 801a596:	bf42      	ittt	mi
 801a598:	6833      	ldrmi	r3, [r6, #0]
 801a59a:	3302      	addmi	r3, #2
 801a59c:	6033      	strmi	r3, [r6, #0]
 801a59e:	6825      	ldr	r5, [r4, #0]
 801a5a0:	f015 0506 	ands.w	r5, r5, #6
 801a5a4:	d106      	bne.n	801a5b4 <_printf_common+0x48>
 801a5a6:	f104 0a19 	add.w	sl, r4, #25
 801a5aa:	68e3      	ldr	r3, [r4, #12]
 801a5ac:	6832      	ldr	r2, [r6, #0]
 801a5ae:	1a9b      	subs	r3, r3, r2
 801a5b0:	42ab      	cmp	r3, r5
 801a5b2:	dc26      	bgt.n	801a602 <_printf_common+0x96>
 801a5b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a5b8:	1e13      	subs	r3, r2, #0
 801a5ba:	6822      	ldr	r2, [r4, #0]
 801a5bc:	bf18      	it	ne
 801a5be:	2301      	movne	r3, #1
 801a5c0:	0692      	lsls	r2, r2, #26
 801a5c2:	d42b      	bmi.n	801a61c <_printf_common+0xb0>
 801a5c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a5c8:	4649      	mov	r1, r9
 801a5ca:	4638      	mov	r0, r7
 801a5cc:	47c0      	blx	r8
 801a5ce:	3001      	adds	r0, #1
 801a5d0:	d01e      	beq.n	801a610 <_printf_common+0xa4>
 801a5d2:	6823      	ldr	r3, [r4, #0]
 801a5d4:	68e5      	ldr	r5, [r4, #12]
 801a5d6:	6832      	ldr	r2, [r6, #0]
 801a5d8:	f003 0306 	and.w	r3, r3, #6
 801a5dc:	2b04      	cmp	r3, #4
 801a5de:	bf08      	it	eq
 801a5e0:	1aad      	subeq	r5, r5, r2
 801a5e2:	68a3      	ldr	r3, [r4, #8]
 801a5e4:	6922      	ldr	r2, [r4, #16]
 801a5e6:	bf0c      	ite	eq
 801a5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a5ec:	2500      	movne	r5, #0
 801a5ee:	4293      	cmp	r3, r2
 801a5f0:	bfc4      	itt	gt
 801a5f2:	1a9b      	subgt	r3, r3, r2
 801a5f4:	18ed      	addgt	r5, r5, r3
 801a5f6:	2600      	movs	r6, #0
 801a5f8:	341a      	adds	r4, #26
 801a5fa:	42b5      	cmp	r5, r6
 801a5fc:	d11a      	bne.n	801a634 <_printf_common+0xc8>
 801a5fe:	2000      	movs	r0, #0
 801a600:	e008      	b.n	801a614 <_printf_common+0xa8>
 801a602:	2301      	movs	r3, #1
 801a604:	4652      	mov	r2, sl
 801a606:	4649      	mov	r1, r9
 801a608:	4638      	mov	r0, r7
 801a60a:	47c0      	blx	r8
 801a60c:	3001      	adds	r0, #1
 801a60e:	d103      	bne.n	801a618 <_printf_common+0xac>
 801a610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a618:	3501      	adds	r5, #1
 801a61a:	e7c6      	b.n	801a5aa <_printf_common+0x3e>
 801a61c:	18e1      	adds	r1, r4, r3
 801a61e:	1c5a      	adds	r2, r3, #1
 801a620:	2030      	movs	r0, #48	; 0x30
 801a622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a626:	4422      	add	r2, r4
 801a628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a62c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a630:	3302      	adds	r3, #2
 801a632:	e7c7      	b.n	801a5c4 <_printf_common+0x58>
 801a634:	2301      	movs	r3, #1
 801a636:	4622      	mov	r2, r4
 801a638:	4649      	mov	r1, r9
 801a63a:	4638      	mov	r0, r7
 801a63c:	47c0      	blx	r8
 801a63e:	3001      	adds	r0, #1
 801a640:	d0e6      	beq.n	801a610 <_printf_common+0xa4>
 801a642:	3601      	adds	r6, #1
 801a644:	e7d9      	b.n	801a5fa <_printf_common+0x8e>
	...

0801a648 <_printf_i>:
 801a648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a64c:	7e0f      	ldrb	r7, [r1, #24]
 801a64e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a650:	2f78      	cmp	r7, #120	; 0x78
 801a652:	4691      	mov	r9, r2
 801a654:	4680      	mov	r8, r0
 801a656:	460c      	mov	r4, r1
 801a658:	469a      	mov	sl, r3
 801a65a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a65e:	d807      	bhi.n	801a670 <_printf_i+0x28>
 801a660:	2f62      	cmp	r7, #98	; 0x62
 801a662:	d80a      	bhi.n	801a67a <_printf_i+0x32>
 801a664:	2f00      	cmp	r7, #0
 801a666:	f000 80d8 	beq.w	801a81a <_printf_i+0x1d2>
 801a66a:	2f58      	cmp	r7, #88	; 0x58
 801a66c:	f000 80a3 	beq.w	801a7b6 <_printf_i+0x16e>
 801a670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a678:	e03a      	b.n	801a6f0 <_printf_i+0xa8>
 801a67a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a67e:	2b15      	cmp	r3, #21
 801a680:	d8f6      	bhi.n	801a670 <_printf_i+0x28>
 801a682:	a101      	add	r1, pc, #4	; (adr r1, 801a688 <_printf_i+0x40>)
 801a684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a688:	0801a6e1 	.word	0x0801a6e1
 801a68c:	0801a6f5 	.word	0x0801a6f5
 801a690:	0801a671 	.word	0x0801a671
 801a694:	0801a671 	.word	0x0801a671
 801a698:	0801a671 	.word	0x0801a671
 801a69c:	0801a671 	.word	0x0801a671
 801a6a0:	0801a6f5 	.word	0x0801a6f5
 801a6a4:	0801a671 	.word	0x0801a671
 801a6a8:	0801a671 	.word	0x0801a671
 801a6ac:	0801a671 	.word	0x0801a671
 801a6b0:	0801a671 	.word	0x0801a671
 801a6b4:	0801a801 	.word	0x0801a801
 801a6b8:	0801a725 	.word	0x0801a725
 801a6bc:	0801a7e3 	.word	0x0801a7e3
 801a6c0:	0801a671 	.word	0x0801a671
 801a6c4:	0801a671 	.word	0x0801a671
 801a6c8:	0801a823 	.word	0x0801a823
 801a6cc:	0801a671 	.word	0x0801a671
 801a6d0:	0801a725 	.word	0x0801a725
 801a6d4:	0801a671 	.word	0x0801a671
 801a6d8:	0801a671 	.word	0x0801a671
 801a6dc:	0801a7eb 	.word	0x0801a7eb
 801a6e0:	682b      	ldr	r3, [r5, #0]
 801a6e2:	1d1a      	adds	r2, r3, #4
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	602a      	str	r2, [r5, #0]
 801a6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a6ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a6f0:	2301      	movs	r3, #1
 801a6f2:	e0a3      	b.n	801a83c <_printf_i+0x1f4>
 801a6f4:	6820      	ldr	r0, [r4, #0]
 801a6f6:	6829      	ldr	r1, [r5, #0]
 801a6f8:	0606      	lsls	r6, r0, #24
 801a6fa:	f101 0304 	add.w	r3, r1, #4
 801a6fe:	d50a      	bpl.n	801a716 <_printf_i+0xce>
 801a700:	680e      	ldr	r6, [r1, #0]
 801a702:	602b      	str	r3, [r5, #0]
 801a704:	2e00      	cmp	r6, #0
 801a706:	da03      	bge.n	801a710 <_printf_i+0xc8>
 801a708:	232d      	movs	r3, #45	; 0x2d
 801a70a:	4276      	negs	r6, r6
 801a70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a710:	485e      	ldr	r0, [pc, #376]	; (801a88c <_printf_i+0x244>)
 801a712:	230a      	movs	r3, #10
 801a714:	e019      	b.n	801a74a <_printf_i+0x102>
 801a716:	680e      	ldr	r6, [r1, #0]
 801a718:	602b      	str	r3, [r5, #0]
 801a71a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a71e:	bf18      	it	ne
 801a720:	b236      	sxthne	r6, r6
 801a722:	e7ef      	b.n	801a704 <_printf_i+0xbc>
 801a724:	682b      	ldr	r3, [r5, #0]
 801a726:	6820      	ldr	r0, [r4, #0]
 801a728:	1d19      	adds	r1, r3, #4
 801a72a:	6029      	str	r1, [r5, #0]
 801a72c:	0601      	lsls	r1, r0, #24
 801a72e:	d501      	bpl.n	801a734 <_printf_i+0xec>
 801a730:	681e      	ldr	r6, [r3, #0]
 801a732:	e002      	b.n	801a73a <_printf_i+0xf2>
 801a734:	0646      	lsls	r6, r0, #25
 801a736:	d5fb      	bpl.n	801a730 <_printf_i+0xe8>
 801a738:	881e      	ldrh	r6, [r3, #0]
 801a73a:	4854      	ldr	r0, [pc, #336]	; (801a88c <_printf_i+0x244>)
 801a73c:	2f6f      	cmp	r7, #111	; 0x6f
 801a73e:	bf0c      	ite	eq
 801a740:	2308      	moveq	r3, #8
 801a742:	230a      	movne	r3, #10
 801a744:	2100      	movs	r1, #0
 801a746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a74a:	6865      	ldr	r5, [r4, #4]
 801a74c:	60a5      	str	r5, [r4, #8]
 801a74e:	2d00      	cmp	r5, #0
 801a750:	bfa2      	ittt	ge
 801a752:	6821      	ldrge	r1, [r4, #0]
 801a754:	f021 0104 	bicge.w	r1, r1, #4
 801a758:	6021      	strge	r1, [r4, #0]
 801a75a:	b90e      	cbnz	r6, 801a760 <_printf_i+0x118>
 801a75c:	2d00      	cmp	r5, #0
 801a75e:	d04d      	beq.n	801a7fc <_printf_i+0x1b4>
 801a760:	4615      	mov	r5, r2
 801a762:	fbb6 f1f3 	udiv	r1, r6, r3
 801a766:	fb03 6711 	mls	r7, r3, r1, r6
 801a76a:	5dc7      	ldrb	r7, [r0, r7]
 801a76c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a770:	4637      	mov	r7, r6
 801a772:	42bb      	cmp	r3, r7
 801a774:	460e      	mov	r6, r1
 801a776:	d9f4      	bls.n	801a762 <_printf_i+0x11a>
 801a778:	2b08      	cmp	r3, #8
 801a77a:	d10b      	bne.n	801a794 <_printf_i+0x14c>
 801a77c:	6823      	ldr	r3, [r4, #0]
 801a77e:	07de      	lsls	r6, r3, #31
 801a780:	d508      	bpl.n	801a794 <_printf_i+0x14c>
 801a782:	6923      	ldr	r3, [r4, #16]
 801a784:	6861      	ldr	r1, [r4, #4]
 801a786:	4299      	cmp	r1, r3
 801a788:	bfde      	ittt	le
 801a78a:	2330      	movle	r3, #48	; 0x30
 801a78c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a790:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a794:	1b52      	subs	r2, r2, r5
 801a796:	6122      	str	r2, [r4, #16]
 801a798:	f8cd a000 	str.w	sl, [sp]
 801a79c:	464b      	mov	r3, r9
 801a79e:	aa03      	add	r2, sp, #12
 801a7a0:	4621      	mov	r1, r4
 801a7a2:	4640      	mov	r0, r8
 801a7a4:	f7ff fee2 	bl	801a56c <_printf_common>
 801a7a8:	3001      	adds	r0, #1
 801a7aa:	d14c      	bne.n	801a846 <_printf_i+0x1fe>
 801a7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7b0:	b004      	add	sp, #16
 801a7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7b6:	4835      	ldr	r0, [pc, #212]	; (801a88c <_printf_i+0x244>)
 801a7b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a7bc:	6829      	ldr	r1, [r5, #0]
 801a7be:	6823      	ldr	r3, [r4, #0]
 801a7c0:	f851 6b04 	ldr.w	r6, [r1], #4
 801a7c4:	6029      	str	r1, [r5, #0]
 801a7c6:	061d      	lsls	r5, r3, #24
 801a7c8:	d514      	bpl.n	801a7f4 <_printf_i+0x1ac>
 801a7ca:	07df      	lsls	r7, r3, #31
 801a7cc:	bf44      	itt	mi
 801a7ce:	f043 0320 	orrmi.w	r3, r3, #32
 801a7d2:	6023      	strmi	r3, [r4, #0]
 801a7d4:	b91e      	cbnz	r6, 801a7de <_printf_i+0x196>
 801a7d6:	6823      	ldr	r3, [r4, #0]
 801a7d8:	f023 0320 	bic.w	r3, r3, #32
 801a7dc:	6023      	str	r3, [r4, #0]
 801a7de:	2310      	movs	r3, #16
 801a7e0:	e7b0      	b.n	801a744 <_printf_i+0xfc>
 801a7e2:	6823      	ldr	r3, [r4, #0]
 801a7e4:	f043 0320 	orr.w	r3, r3, #32
 801a7e8:	6023      	str	r3, [r4, #0]
 801a7ea:	2378      	movs	r3, #120	; 0x78
 801a7ec:	4828      	ldr	r0, [pc, #160]	; (801a890 <_printf_i+0x248>)
 801a7ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a7f2:	e7e3      	b.n	801a7bc <_printf_i+0x174>
 801a7f4:	0659      	lsls	r1, r3, #25
 801a7f6:	bf48      	it	mi
 801a7f8:	b2b6      	uxthmi	r6, r6
 801a7fa:	e7e6      	b.n	801a7ca <_printf_i+0x182>
 801a7fc:	4615      	mov	r5, r2
 801a7fe:	e7bb      	b.n	801a778 <_printf_i+0x130>
 801a800:	682b      	ldr	r3, [r5, #0]
 801a802:	6826      	ldr	r6, [r4, #0]
 801a804:	6961      	ldr	r1, [r4, #20]
 801a806:	1d18      	adds	r0, r3, #4
 801a808:	6028      	str	r0, [r5, #0]
 801a80a:	0635      	lsls	r5, r6, #24
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	d501      	bpl.n	801a814 <_printf_i+0x1cc>
 801a810:	6019      	str	r1, [r3, #0]
 801a812:	e002      	b.n	801a81a <_printf_i+0x1d2>
 801a814:	0670      	lsls	r0, r6, #25
 801a816:	d5fb      	bpl.n	801a810 <_printf_i+0x1c8>
 801a818:	8019      	strh	r1, [r3, #0]
 801a81a:	2300      	movs	r3, #0
 801a81c:	6123      	str	r3, [r4, #16]
 801a81e:	4615      	mov	r5, r2
 801a820:	e7ba      	b.n	801a798 <_printf_i+0x150>
 801a822:	682b      	ldr	r3, [r5, #0]
 801a824:	1d1a      	adds	r2, r3, #4
 801a826:	602a      	str	r2, [r5, #0]
 801a828:	681d      	ldr	r5, [r3, #0]
 801a82a:	6862      	ldr	r2, [r4, #4]
 801a82c:	2100      	movs	r1, #0
 801a82e:	4628      	mov	r0, r5
 801a830:	f7e5 fcee 	bl	8000210 <memchr>
 801a834:	b108      	cbz	r0, 801a83a <_printf_i+0x1f2>
 801a836:	1b40      	subs	r0, r0, r5
 801a838:	6060      	str	r0, [r4, #4]
 801a83a:	6863      	ldr	r3, [r4, #4]
 801a83c:	6123      	str	r3, [r4, #16]
 801a83e:	2300      	movs	r3, #0
 801a840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a844:	e7a8      	b.n	801a798 <_printf_i+0x150>
 801a846:	6923      	ldr	r3, [r4, #16]
 801a848:	462a      	mov	r2, r5
 801a84a:	4649      	mov	r1, r9
 801a84c:	4640      	mov	r0, r8
 801a84e:	47d0      	blx	sl
 801a850:	3001      	adds	r0, #1
 801a852:	d0ab      	beq.n	801a7ac <_printf_i+0x164>
 801a854:	6823      	ldr	r3, [r4, #0]
 801a856:	079b      	lsls	r3, r3, #30
 801a858:	d413      	bmi.n	801a882 <_printf_i+0x23a>
 801a85a:	68e0      	ldr	r0, [r4, #12]
 801a85c:	9b03      	ldr	r3, [sp, #12]
 801a85e:	4298      	cmp	r0, r3
 801a860:	bfb8      	it	lt
 801a862:	4618      	movlt	r0, r3
 801a864:	e7a4      	b.n	801a7b0 <_printf_i+0x168>
 801a866:	2301      	movs	r3, #1
 801a868:	4632      	mov	r2, r6
 801a86a:	4649      	mov	r1, r9
 801a86c:	4640      	mov	r0, r8
 801a86e:	47d0      	blx	sl
 801a870:	3001      	adds	r0, #1
 801a872:	d09b      	beq.n	801a7ac <_printf_i+0x164>
 801a874:	3501      	adds	r5, #1
 801a876:	68e3      	ldr	r3, [r4, #12]
 801a878:	9903      	ldr	r1, [sp, #12]
 801a87a:	1a5b      	subs	r3, r3, r1
 801a87c:	42ab      	cmp	r3, r5
 801a87e:	dcf2      	bgt.n	801a866 <_printf_i+0x21e>
 801a880:	e7eb      	b.n	801a85a <_printf_i+0x212>
 801a882:	2500      	movs	r5, #0
 801a884:	f104 0619 	add.w	r6, r4, #25
 801a888:	e7f5      	b.n	801a876 <_printf_i+0x22e>
 801a88a:	bf00      	nop
 801a88c:	0801f71a 	.word	0x0801f71a
 801a890:	0801f72b 	.word	0x0801f72b

0801a894 <_scanf_float>:
 801a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a898:	b087      	sub	sp, #28
 801a89a:	4617      	mov	r7, r2
 801a89c:	9303      	str	r3, [sp, #12]
 801a89e:	688b      	ldr	r3, [r1, #8]
 801a8a0:	1e5a      	subs	r2, r3, #1
 801a8a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a8a6:	bf83      	ittte	hi
 801a8a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a8ac:	195b      	addhi	r3, r3, r5
 801a8ae:	9302      	strhi	r3, [sp, #8]
 801a8b0:	2300      	movls	r3, #0
 801a8b2:	bf86      	itte	hi
 801a8b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a8b8:	608b      	strhi	r3, [r1, #8]
 801a8ba:	9302      	strls	r3, [sp, #8]
 801a8bc:	680b      	ldr	r3, [r1, #0]
 801a8be:	468b      	mov	fp, r1
 801a8c0:	2500      	movs	r5, #0
 801a8c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a8c6:	f84b 3b1c 	str.w	r3, [fp], #28
 801a8ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a8ce:	4680      	mov	r8, r0
 801a8d0:	460c      	mov	r4, r1
 801a8d2:	465e      	mov	r6, fp
 801a8d4:	46aa      	mov	sl, r5
 801a8d6:	46a9      	mov	r9, r5
 801a8d8:	9501      	str	r5, [sp, #4]
 801a8da:	68a2      	ldr	r2, [r4, #8]
 801a8dc:	b152      	cbz	r2, 801a8f4 <_scanf_float+0x60>
 801a8de:	683b      	ldr	r3, [r7, #0]
 801a8e0:	781b      	ldrb	r3, [r3, #0]
 801a8e2:	2b4e      	cmp	r3, #78	; 0x4e
 801a8e4:	d864      	bhi.n	801a9b0 <_scanf_float+0x11c>
 801a8e6:	2b40      	cmp	r3, #64	; 0x40
 801a8e8:	d83c      	bhi.n	801a964 <_scanf_float+0xd0>
 801a8ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a8ee:	b2c8      	uxtb	r0, r1
 801a8f0:	280e      	cmp	r0, #14
 801a8f2:	d93a      	bls.n	801a96a <_scanf_float+0xd6>
 801a8f4:	f1b9 0f00 	cmp.w	r9, #0
 801a8f8:	d003      	beq.n	801a902 <_scanf_float+0x6e>
 801a8fa:	6823      	ldr	r3, [r4, #0]
 801a8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a900:	6023      	str	r3, [r4, #0]
 801a902:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a906:	f1ba 0f01 	cmp.w	sl, #1
 801a90a:	f200 8113 	bhi.w	801ab34 <_scanf_float+0x2a0>
 801a90e:	455e      	cmp	r6, fp
 801a910:	f200 8105 	bhi.w	801ab1e <_scanf_float+0x28a>
 801a914:	2501      	movs	r5, #1
 801a916:	4628      	mov	r0, r5
 801a918:	b007      	add	sp, #28
 801a91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a91e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a922:	2a0d      	cmp	r2, #13
 801a924:	d8e6      	bhi.n	801a8f4 <_scanf_float+0x60>
 801a926:	a101      	add	r1, pc, #4	; (adr r1, 801a92c <_scanf_float+0x98>)
 801a928:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a92c:	0801aa6b 	.word	0x0801aa6b
 801a930:	0801a8f5 	.word	0x0801a8f5
 801a934:	0801a8f5 	.word	0x0801a8f5
 801a938:	0801a8f5 	.word	0x0801a8f5
 801a93c:	0801aacb 	.word	0x0801aacb
 801a940:	0801aaa3 	.word	0x0801aaa3
 801a944:	0801a8f5 	.word	0x0801a8f5
 801a948:	0801a8f5 	.word	0x0801a8f5
 801a94c:	0801aa79 	.word	0x0801aa79
 801a950:	0801a8f5 	.word	0x0801a8f5
 801a954:	0801a8f5 	.word	0x0801a8f5
 801a958:	0801a8f5 	.word	0x0801a8f5
 801a95c:	0801a8f5 	.word	0x0801a8f5
 801a960:	0801aa31 	.word	0x0801aa31
 801a964:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a968:	e7db      	b.n	801a922 <_scanf_float+0x8e>
 801a96a:	290e      	cmp	r1, #14
 801a96c:	d8c2      	bhi.n	801a8f4 <_scanf_float+0x60>
 801a96e:	a001      	add	r0, pc, #4	; (adr r0, 801a974 <_scanf_float+0xe0>)
 801a970:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a974:	0801aa23 	.word	0x0801aa23
 801a978:	0801a8f5 	.word	0x0801a8f5
 801a97c:	0801aa23 	.word	0x0801aa23
 801a980:	0801aab7 	.word	0x0801aab7
 801a984:	0801a8f5 	.word	0x0801a8f5
 801a988:	0801a9d1 	.word	0x0801a9d1
 801a98c:	0801aa0d 	.word	0x0801aa0d
 801a990:	0801aa0d 	.word	0x0801aa0d
 801a994:	0801aa0d 	.word	0x0801aa0d
 801a998:	0801aa0d 	.word	0x0801aa0d
 801a99c:	0801aa0d 	.word	0x0801aa0d
 801a9a0:	0801aa0d 	.word	0x0801aa0d
 801a9a4:	0801aa0d 	.word	0x0801aa0d
 801a9a8:	0801aa0d 	.word	0x0801aa0d
 801a9ac:	0801aa0d 	.word	0x0801aa0d
 801a9b0:	2b6e      	cmp	r3, #110	; 0x6e
 801a9b2:	d809      	bhi.n	801a9c8 <_scanf_float+0x134>
 801a9b4:	2b60      	cmp	r3, #96	; 0x60
 801a9b6:	d8b2      	bhi.n	801a91e <_scanf_float+0x8a>
 801a9b8:	2b54      	cmp	r3, #84	; 0x54
 801a9ba:	d077      	beq.n	801aaac <_scanf_float+0x218>
 801a9bc:	2b59      	cmp	r3, #89	; 0x59
 801a9be:	d199      	bne.n	801a8f4 <_scanf_float+0x60>
 801a9c0:	2d07      	cmp	r5, #7
 801a9c2:	d197      	bne.n	801a8f4 <_scanf_float+0x60>
 801a9c4:	2508      	movs	r5, #8
 801a9c6:	e029      	b.n	801aa1c <_scanf_float+0x188>
 801a9c8:	2b74      	cmp	r3, #116	; 0x74
 801a9ca:	d06f      	beq.n	801aaac <_scanf_float+0x218>
 801a9cc:	2b79      	cmp	r3, #121	; 0x79
 801a9ce:	e7f6      	b.n	801a9be <_scanf_float+0x12a>
 801a9d0:	6821      	ldr	r1, [r4, #0]
 801a9d2:	05c8      	lsls	r0, r1, #23
 801a9d4:	d51a      	bpl.n	801aa0c <_scanf_float+0x178>
 801a9d6:	9b02      	ldr	r3, [sp, #8]
 801a9d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a9dc:	6021      	str	r1, [r4, #0]
 801a9de:	f109 0901 	add.w	r9, r9, #1
 801a9e2:	b11b      	cbz	r3, 801a9ec <_scanf_float+0x158>
 801a9e4:	3b01      	subs	r3, #1
 801a9e6:	3201      	adds	r2, #1
 801a9e8:	9302      	str	r3, [sp, #8]
 801a9ea:	60a2      	str	r2, [r4, #8]
 801a9ec:	68a3      	ldr	r3, [r4, #8]
 801a9ee:	3b01      	subs	r3, #1
 801a9f0:	60a3      	str	r3, [r4, #8]
 801a9f2:	6923      	ldr	r3, [r4, #16]
 801a9f4:	3301      	adds	r3, #1
 801a9f6:	6123      	str	r3, [r4, #16]
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	3b01      	subs	r3, #1
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	607b      	str	r3, [r7, #4]
 801aa00:	f340 8084 	ble.w	801ab0c <_scanf_float+0x278>
 801aa04:	683b      	ldr	r3, [r7, #0]
 801aa06:	3301      	adds	r3, #1
 801aa08:	603b      	str	r3, [r7, #0]
 801aa0a:	e766      	b.n	801a8da <_scanf_float+0x46>
 801aa0c:	eb1a 0f05 	cmn.w	sl, r5
 801aa10:	f47f af70 	bne.w	801a8f4 <_scanf_float+0x60>
 801aa14:	6822      	ldr	r2, [r4, #0]
 801aa16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801aa1a:	6022      	str	r2, [r4, #0]
 801aa1c:	f806 3b01 	strb.w	r3, [r6], #1
 801aa20:	e7e4      	b.n	801a9ec <_scanf_float+0x158>
 801aa22:	6822      	ldr	r2, [r4, #0]
 801aa24:	0610      	lsls	r0, r2, #24
 801aa26:	f57f af65 	bpl.w	801a8f4 <_scanf_float+0x60>
 801aa2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801aa2e:	e7f4      	b.n	801aa1a <_scanf_float+0x186>
 801aa30:	f1ba 0f00 	cmp.w	sl, #0
 801aa34:	d10e      	bne.n	801aa54 <_scanf_float+0x1c0>
 801aa36:	f1b9 0f00 	cmp.w	r9, #0
 801aa3a:	d10e      	bne.n	801aa5a <_scanf_float+0x1c6>
 801aa3c:	6822      	ldr	r2, [r4, #0]
 801aa3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aa42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aa46:	d108      	bne.n	801aa5a <_scanf_float+0x1c6>
 801aa48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aa4c:	6022      	str	r2, [r4, #0]
 801aa4e:	f04f 0a01 	mov.w	sl, #1
 801aa52:	e7e3      	b.n	801aa1c <_scanf_float+0x188>
 801aa54:	f1ba 0f02 	cmp.w	sl, #2
 801aa58:	d055      	beq.n	801ab06 <_scanf_float+0x272>
 801aa5a:	2d01      	cmp	r5, #1
 801aa5c:	d002      	beq.n	801aa64 <_scanf_float+0x1d0>
 801aa5e:	2d04      	cmp	r5, #4
 801aa60:	f47f af48 	bne.w	801a8f4 <_scanf_float+0x60>
 801aa64:	3501      	adds	r5, #1
 801aa66:	b2ed      	uxtb	r5, r5
 801aa68:	e7d8      	b.n	801aa1c <_scanf_float+0x188>
 801aa6a:	f1ba 0f01 	cmp.w	sl, #1
 801aa6e:	f47f af41 	bne.w	801a8f4 <_scanf_float+0x60>
 801aa72:	f04f 0a02 	mov.w	sl, #2
 801aa76:	e7d1      	b.n	801aa1c <_scanf_float+0x188>
 801aa78:	b97d      	cbnz	r5, 801aa9a <_scanf_float+0x206>
 801aa7a:	f1b9 0f00 	cmp.w	r9, #0
 801aa7e:	f47f af3c 	bne.w	801a8fa <_scanf_float+0x66>
 801aa82:	6822      	ldr	r2, [r4, #0]
 801aa84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aa88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aa8c:	f47f af39 	bne.w	801a902 <_scanf_float+0x6e>
 801aa90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aa94:	6022      	str	r2, [r4, #0]
 801aa96:	2501      	movs	r5, #1
 801aa98:	e7c0      	b.n	801aa1c <_scanf_float+0x188>
 801aa9a:	2d03      	cmp	r5, #3
 801aa9c:	d0e2      	beq.n	801aa64 <_scanf_float+0x1d0>
 801aa9e:	2d05      	cmp	r5, #5
 801aaa0:	e7de      	b.n	801aa60 <_scanf_float+0x1cc>
 801aaa2:	2d02      	cmp	r5, #2
 801aaa4:	f47f af26 	bne.w	801a8f4 <_scanf_float+0x60>
 801aaa8:	2503      	movs	r5, #3
 801aaaa:	e7b7      	b.n	801aa1c <_scanf_float+0x188>
 801aaac:	2d06      	cmp	r5, #6
 801aaae:	f47f af21 	bne.w	801a8f4 <_scanf_float+0x60>
 801aab2:	2507      	movs	r5, #7
 801aab4:	e7b2      	b.n	801aa1c <_scanf_float+0x188>
 801aab6:	6822      	ldr	r2, [r4, #0]
 801aab8:	0591      	lsls	r1, r2, #22
 801aaba:	f57f af1b 	bpl.w	801a8f4 <_scanf_float+0x60>
 801aabe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801aac2:	6022      	str	r2, [r4, #0]
 801aac4:	f8cd 9004 	str.w	r9, [sp, #4]
 801aac8:	e7a8      	b.n	801aa1c <_scanf_float+0x188>
 801aaca:	6822      	ldr	r2, [r4, #0]
 801aacc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801aad0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801aad4:	d006      	beq.n	801aae4 <_scanf_float+0x250>
 801aad6:	0550      	lsls	r0, r2, #21
 801aad8:	f57f af0c 	bpl.w	801a8f4 <_scanf_float+0x60>
 801aadc:	f1b9 0f00 	cmp.w	r9, #0
 801aae0:	f43f af0f 	beq.w	801a902 <_scanf_float+0x6e>
 801aae4:	0591      	lsls	r1, r2, #22
 801aae6:	bf58      	it	pl
 801aae8:	9901      	ldrpl	r1, [sp, #4]
 801aaea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aaee:	bf58      	it	pl
 801aaf0:	eba9 0101 	subpl.w	r1, r9, r1
 801aaf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801aaf8:	bf58      	it	pl
 801aafa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aafe:	6022      	str	r2, [r4, #0]
 801ab00:	f04f 0900 	mov.w	r9, #0
 801ab04:	e78a      	b.n	801aa1c <_scanf_float+0x188>
 801ab06:	f04f 0a03 	mov.w	sl, #3
 801ab0a:	e787      	b.n	801aa1c <_scanf_float+0x188>
 801ab0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ab10:	4639      	mov	r1, r7
 801ab12:	4640      	mov	r0, r8
 801ab14:	4798      	blx	r3
 801ab16:	2800      	cmp	r0, #0
 801ab18:	f43f aedf 	beq.w	801a8da <_scanf_float+0x46>
 801ab1c:	e6ea      	b.n	801a8f4 <_scanf_float+0x60>
 801ab1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab26:	463a      	mov	r2, r7
 801ab28:	4640      	mov	r0, r8
 801ab2a:	4798      	blx	r3
 801ab2c:	6923      	ldr	r3, [r4, #16]
 801ab2e:	3b01      	subs	r3, #1
 801ab30:	6123      	str	r3, [r4, #16]
 801ab32:	e6ec      	b.n	801a90e <_scanf_float+0x7a>
 801ab34:	1e6b      	subs	r3, r5, #1
 801ab36:	2b06      	cmp	r3, #6
 801ab38:	d825      	bhi.n	801ab86 <_scanf_float+0x2f2>
 801ab3a:	2d02      	cmp	r5, #2
 801ab3c:	d836      	bhi.n	801abac <_scanf_float+0x318>
 801ab3e:	455e      	cmp	r6, fp
 801ab40:	f67f aee8 	bls.w	801a914 <_scanf_float+0x80>
 801ab44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab4c:	463a      	mov	r2, r7
 801ab4e:	4640      	mov	r0, r8
 801ab50:	4798      	blx	r3
 801ab52:	6923      	ldr	r3, [r4, #16]
 801ab54:	3b01      	subs	r3, #1
 801ab56:	6123      	str	r3, [r4, #16]
 801ab58:	e7f1      	b.n	801ab3e <_scanf_float+0x2aa>
 801ab5a:	9802      	ldr	r0, [sp, #8]
 801ab5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801ab64:	9002      	str	r0, [sp, #8]
 801ab66:	463a      	mov	r2, r7
 801ab68:	4640      	mov	r0, r8
 801ab6a:	4798      	blx	r3
 801ab6c:	6923      	ldr	r3, [r4, #16]
 801ab6e:	3b01      	subs	r3, #1
 801ab70:	6123      	str	r3, [r4, #16]
 801ab72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ab76:	fa5f fa8a 	uxtb.w	sl, sl
 801ab7a:	f1ba 0f02 	cmp.w	sl, #2
 801ab7e:	d1ec      	bne.n	801ab5a <_scanf_float+0x2c6>
 801ab80:	3d03      	subs	r5, #3
 801ab82:	b2ed      	uxtb	r5, r5
 801ab84:	1b76      	subs	r6, r6, r5
 801ab86:	6823      	ldr	r3, [r4, #0]
 801ab88:	05da      	lsls	r2, r3, #23
 801ab8a:	d52f      	bpl.n	801abec <_scanf_float+0x358>
 801ab8c:	055b      	lsls	r3, r3, #21
 801ab8e:	d510      	bpl.n	801abb2 <_scanf_float+0x31e>
 801ab90:	455e      	cmp	r6, fp
 801ab92:	f67f aebf 	bls.w	801a914 <_scanf_float+0x80>
 801ab96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab9e:	463a      	mov	r2, r7
 801aba0:	4640      	mov	r0, r8
 801aba2:	4798      	blx	r3
 801aba4:	6923      	ldr	r3, [r4, #16]
 801aba6:	3b01      	subs	r3, #1
 801aba8:	6123      	str	r3, [r4, #16]
 801abaa:	e7f1      	b.n	801ab90 <_scanf_float+0x2fc>
 801abac:	46aa      	mov	sl, r5
 801abae:	9602      	str	r6, [sp, #8]
 801abb0:	e7df      	b.n	801ab72 <_scanf_float+0x2de>
 801abb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801abb6:	6923      	ldr	r3, [r4, #16]
 801abb8:	2965      	cmp	r1, #101	; 0x65
 801abba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801abbe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801abc2:	6123      	str	r3, [r4, #16]
 801abc4:	d00c      	beq.n	801abe0 <_scanf_float+0x34c>
 801abc6:	2945      	cmp	r1, #69	; 0x45
 801abc8:	d00a      	beq.n	801abe0 <_scanf_float+0x34c>
 801abca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801abce:	463a      	mov	r2, r7
 801abd0:	4640      	mov	r0, r8
 801abd2:	4798      	blx	r3
 801abd4:	6923      	ldr	r3, [r4, #16]
 801abd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801abda:	3b01      	subs	r3, #1
 801abdc:	1eb5      	subs	r5, r6, #2
 801abde:	6123      	str	r3, [r4, #16]
 801abe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801abe4:	463a      	mov	r2, r7
 801abe6:	4640      	mov	r0, r8
 801abe8:	4798      	blx	r3
 801abea:	462e      	mov	r6, r5
 801abec:	6825      	ldr	r5, [r4, #0]
 801abee:	f015 0510 	ands.w	r5, r5, #16
 801abf2:	d159      	bne.n	801aca8 <_scanf_float+0x414>
 801abf4:	7035      	strb	r5, [r6, #0]
 801abf6:	6823      	ldr	r3, [r4, #0]
 801abf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801abfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac00:	d11b      	bne.n	801ac3a <_scanf_float+0x3a6>
 801ac02:	9b01      	ldr	r3, [sp, #4]
 801ac04:	454b      	cmp	r3, r9
 801ac06:	eba3 0209 	sub.w	r2, r3, r9
 801ac0a:	d123      	bne.n	801ac54 <_scanf_float+0x3c0>
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	4659      	mov	r1, fp
 801ac10:	4640      	mov	r0, r8
 801ac12:	f001 f8cb 	bl	801bdac <_strtod_r>
 801ac16:	6822      	ldr	r2, [r4, #0]
 801ac18:	9b03      	ldr	r3, [sp, #12]
 801ac1a:	f012 0f02 	tst.w	r2, #2
 801ac1e:	ec57 6b10 	vmov	r6, r7, d0
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	d021      	beq.n	801ac6a <_scanf_float+0x3d6>
 801ac26:	9903      	ldr	r1, [sp, #12]
 801ac28:	1d1a      	adds	r2, r3, #4
 801ac2a:	600a      	str	r2, [r1, #0]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	e9c3 6700 	strd	r6, r7, [r3]
 801ac32:	68e3      	ldr	r3, [r4, #12]
 801ac34:	3301      	adds	r3, #1
 801ac36:	60e3      	str	r3, [r4, #12]
 801ac38:	e66d      	b.n	801a916 <_scanf_float+0x82>
 801ac3a:	9b04      	ldr	r3, [sp, #16]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d0e5      	beq.n	801ac0c <_scanf_float+0x378>
 801ac40:	9905      	ldr	r1, [sp, #20]
 801ac42:	230a      	movs	r3, #10
 801ac44:	462a      	mov	r2, r5
 801ac46:	3101      	adds	r1, #1
 801ac48:	4640      	mov	r0, r8
 801ac4a:	f001 f99f 	bl	801bf8c <_strtol_r>
 801ac4e:	9b04      	ldr	r3, [sp, #16]
 801ac50:	9e05      	ldr	r6, [sp, #20]
 801ac52:	1ac2      	subs	r2, r0, r3
 801ac54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ac58:	429e      	cmp	r6, r3
 801ac5a:	bf28      	it	cs
 801ac5c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ac60:	4912      	ldr	r1, [pc, #72]	; (801acac <_scanf_float+0x418>)
 801ac62:	4630      	mov	r0, r6
 801ac64:	f000 f9dc 	bl	801b020 <siprintf>
 801ac68:	e7d0      	b.n	801ac0c <_scanf_float+0x378>
 801ac6a:	9903      	ldr	r1, [sp, #12]
 801ac6c:	f012 0f04 	tst.w	r2, #4
 801ac70:	f103 0204 	add.w	r2, r3, #4
 801ac74:	600a      	str	r2, [r1, #0]
 801ac76:	d1d9      	bne.n	801ac2c <_scanf_float+0x398>
 801ac78:	f8d3 8000 	ldr.w	r8, [r3]
 801ac7c:	ee10 2a10 	vmov	r2, s0
 801ac80:	ee10 0a10 	vmov	r0, s0
 801ac84:	463b      	mov	r3, r7
 801ac86:	4639      	mov	r1, r7
 801ac88:	f7e5 ff68 	bl	8000b5c <__aeabi_dcmpun>
 801ac8c:	b128      	cbz	r0, 801ac9a <_scanf_float+0x406>
 801ac8e:	4808      	ldr	r0, [pc, #32]	; (801acb0 <_scanf_float+0x41c>)
 801ac90:	f000 f98c 	bl	801afac <nanf>
 801ac94:	ed88 0a00 	vstr	s0, [r8]
 801ac98:	e7cb      	b.n	801ac32 <_scanf_float+0x39e>
 801ac9a:	4630      	mov	r0, r6
 801ac9c:	4639      	mov	r1, r7
 801ac9e:	f7e5 ffbb 	bl	8000c18 <__aeabi_d2f>
 801aca2:	f8c8 0000 	str.w	r0, [r8]
 801aca6:	e7c4      	b.n	801ac32 <_scanf_float+0x39e>
 801aca8:	2500      	movs	r5, #0
 801acaa:	e634      	b.n	801a916 <_scanf_float+0x82>
 801acac:	0801f73c 	.word	0x0801f73c
 801acb0:	0801f8a0 	.word	0x0801f8a0

0801acb4 <iprintf>:
 801acb4:	b40f      	push	{r0, r1, r2, r3}
 801acb6:	4b0a      	ldr	r3, [pc, #40]	; (801ace0 <iprintf+0x2c>)
 801acb8:	b513      	push	{r0, r1, r4, lr}
 801acba:	681c      	ldr	r4, [r3, #0]
 801acbc:	b124      	cbz	r4, 801acc8 <iprintf+0x14>
 801acbe:	69a3      	ldr	r3, [r4, #24]
 801acc0:	b913      	cbnz	r3, 801acc8 <iprintf+0x14>
 801acc2:	4620      	mov	r0, r4
 801acc4:	f7fe ff38 	bl	8019b38 <__sinit>
 801acc8:	ab05      	add	r3, sp, #20
 801acca:	9a04      	ldr	r2, [sp, #16]
 801accc:	68a1      	ldr	r1, [r4, #8]
 801acce:	9301      	str	r3, [sp, #4]
 801acd0:	4620      	mov	r0, r4
 801acd2:	f003 fcef 	bl	801e6b4 <_vfiprintf_r>
 801acd6:	b002      	add	sp, #8
 801acd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acdc:	b004      	add	sp, #16
 801acde:	4770      	bx	lr
 801ace0:	20000088 	.word	0x20000088

0801ace4 <_puts_r>:
 801ace4:	b570      	push	{r4, r5, r6, lr}
 801ace6:	460e      	mov	r6, r1
 801ace8:	4605      	mov	r5, r0
 801acea:	b118      	cbz	r0, 801acf4 <_puts_r+0x10>
 801acec:	6983      	ldr	r3, [r0, #24]
 801acee:	b90b      	cbnz	r3, 801acf4 <_puts_r+0x10>
 801acf0:	f7fe ff22 	bl	8019b38 <__sinit>
 801acf4:	69ab      	ldr	r3, [r5, #24]
 801acf6:	68ac      	ldr	r4, [r5, #8]
 801acf8:	b913      	cbnz	r3, 801ad00 <_puts_r+0x1c>
 801acfa:	4628      	mov	r0, r5
 801acfc:	f7fe ff1c 	bl	8019b38 <__sinit>
 801ad00:	4b2c      	ldr	r3, [pc, #176]	; (801adb4 <_puts_r+0xd0>)
 801ad02:	429c      	cmp	r4, r3
 801ad04:	d120      	bne.n	801ad48 <_puts_r+0x64>
 801ad06:	686c      	ldr	r4, [r5, #4]
 801ad08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad0a:	07db      	lsls	r3, r3, #31
 801ad0c:	d405      	bmi.n	801ad1a <_puts_r+0x36>
 801ad0e:	89a3      	ldrh	r3, [r4, #12]
 801ad10:	0598      	lsls	r0, r3, #22
 801ad12:	d402      	bmi.n	801ad1a <_puts_r+0x36>
 801ad14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad16:	f7ff f81a 	bl	8019d4e <__retarget_lock_acquire_recursive>
 801ad1a:	89a3      	ldrh	r3, [r4, #12]
 801ad1c:	0719      	lsls	r1, r3, #28
 801ad1e:	d51d      	bpl.n	801ad5c <_puts_r+0x78>
 801ad20:	6923      	ldr	r3, [r4, #16]
 801ad22:	b1db      	cbz	r3, 801ad5c <_puts_r+0x78>
 801ad24:	3e01      	subs	r6, #1
 801ad26:	68a3      	ldr	r3, [r4, #8]
 801ad28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ad2c:	3b01      	subs	r3, #1
 801ad2e:	60a3      	str	r3, [r4, #8]
 801ad30:	bb39      	cbnz	r1, 801ad82 <_puts_r+0x9e>
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	da38      	bge.n	801ada8 <_puts_r+0xc4>
 801ad36:	4622      	mov	r2, r4
 801ad38:	210a      	movs	r1, #10
 801ad3a:	4628      	mov	r0, r5
 801ad3c:	f001 f9de 	bl	801c0fc <__swbuf_r>
 801ad40:	3001      	adds	r0, #1
 801ad42:	d011      	beq.n	801ad68 <_puts_r+0x84>
 801ad44:	250a      	movs	r5, #10
 801ad46:	e011      	b.n	801ad6c <_puts_r+0x88>
 801ad48:	4b1b      	ldr	r3, [pc, #108]	; (801adb8 <_puts_r+0xd4>)
 801ad4a:	429c      	cmp	r4, r3
 801ad4c:	d101      	bne.n	801ad52 <_puts_r+0x6e>
 801ad4e:	68ac      	ldr	r4, [r5, #8]
 801ad50:	e7da      	b.n	801ad08 <_puts_r+0x24>
 801ad52:	4b1a      	ldr	r3, [pc, #104]	; (801adbc <_puts_r+0xd8>)
 801ad54:	429c      	cmp	r4, r3
 801ad56:	bf08      	it	eq
 801ad58:	68ec      	ldreq	r4, [r5, #12]
 801ad5a:	e7d5      	b.n	801ad08 <_puts_r+0x24>
 801ad5c:	4621      	mov	r1, r4
 801ad5e:	4628      	mov	r0, r5
 801ad60:	f001 fa30 	bl	801c1c4 <__swsetup_r>
 801ad64:	2800      	cmp	r0, #0
 801ad66:	d0dd      	beq.n	801ad24 <_puts_r+0x40>
 801ad68:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ad6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad6e:	07da      	lsls	r2, r3, #31
 801ad70:	d405      	bmi.n	801ad7e <_puts_r+0x9a>
 801ad72:	89a3      	ldrh	r3, [r4, #12]
 801ad74:	059b      	lsls	r3, r3, #22
 801ad76:	d402      	bmi.n	801ad7e <_puts_r+0x9a>
 801ad78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad7a:	f7fe ffe9 	bl	8019d50 <__retarget_lock_release_recursive>
 801ad7e:	4628      	mov	r0, r5
 801ad80:	bd70      	pop	{r4, r5, r6, pc}
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	da04      	bge.n	801ad90 <_puts_r+0xac>
 801ad86:	69a2      	ldr	r2, [r4, #24]
 801ad88:	429a      	cmp	r2, r3
 801ad8a:	dc06      	bgt.n	801ad9a <_puts_r+0xb6>
 801ad8c:	290a      	cmp	r1, #10
 801ad8e:	d004      	beq.n	801ad9a <_puts_r+0xb6>
 801ad90:	6823      	ldr	r3, [r4, #0]
 801ad92:	1c5a      	adds	r2, r3, #1
 801ad94:	6022      	str	r2, [r4, #0]
 801ad96:	7019      	strb	r1, [r3, #0]
 801ad98:	e7c5      	b.n	801ad26 <_puts_r+0x42>
 801ad9a:	4622      	mov	r2, r4
 801ad9c:	4628      	mov	r0, r5
 801ad9e:	f001 f9ad 	bl	801c0fc <__swbuf_r>
 801ada2:	3001      	adds	r0, #1
 801ada4:	d1bf      	bne.n	801ad26 <_puts_r+0x42>
 801ada6:	e7df      	b.n	801ad68 <_puts_r+0x84>
 801ada8:	6823      	ldr	r3, [r4, #0]
 801adaa:	250a      	movs	r5, #10
 801adac:	1c5a      	adds	r2, r3, #1
 801adae:	6022      	str	r2, [r4, #0]
 801adb0:	701d      	strb	r5, [r3, #0]
 801adb2:	e7db      	b.n	801ad6c <_puts_r+0x88>
 801adb4:	0801f6c4 	.word	0x0801f6c4
 801adb8:	0801f6e4 	.word	0x0801f6e4
 801adbc:	0801f6a4 	.word	0x0801f6a4

0801adc0 <puts>:
 801adc0:	4b02      	ldr	r3, [pc, #8]	; (801adcc <puts+0xc>)
 801adc2:	4601      	mov	r1, r0
 801adc4:	6818      	ldr	r0, [r3, #0]
 801adc6:	f7ff bf8d 	b.w	801ace4 <_puts_r>
 801adca:	bf00      	nop
 801adcc:	20000088 	.word	0x20000088

0801add0 <srand>:
 801add0:	b538      	push	{r3, r4, r5, lr}
 801add2:	4b10      	ldr	r3, [pc, #64]	; (801ae14 <srand+0x44>)
 801add4:	681d      	ldr	r5, [r3, #0]
 801add6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801add8:	4604      	mov	r4, r0
 801adda:	b9b3      	cbnz	r3, 801ae0a <srand+0x3a>
 801addc:	2018      	movs	r0, #24
 801adde:	f7fe ffb9 	bl	8019d54 <malloc>
 801ade2:	4602      	mov	r2, r0
 801ade4:	63a8      	str	r0, [r5, #56]	; 0x38
 801ade6:	b920      	cbnz	r0, 801adf2 <srand+0x22>
 801ade8:	4b0b      	ldr	r3, [pc, #44]	; (801ae18 <srand+0x48>)
 801adea:	480c      	ldr	r0, [pc, #48]	; (801ae1c <srand+0x4c>)
 801adec:	2142      	movs	r1, #66	; 0x42
 801adee:	f001 fa57 	bl	801c2a0 <__assert_func>
 801adf2:	490b      	ldr	r1, [pc, #44]	; (801ae20 <srand+0x50>)
 801adf4:	4b0b      	ldr	r3, [pc, #44]	; (801ae24 <srand+0x54>)
 801adf6:	e9c0 1300 	strd	r1, r3, [r0]
 801adfa:	4b0b      	ldr	r3, [pc, #44]	; (801ae28 <srand+0x58>)
 801adfc:	6083      	str	r3, [r0, #8]
 801adfe:	230b      	movs	r3, #11
 801ae00:	8183      	strh	r3, [r0, #12]
 801ae02:	2100      	movs	r1, #0
 801ae04:	2001      	movs	r0, #1
 801ae06:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ae0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801ae0c:	2200      	movs	r2, #0
 801ae0e:	611c      	str	r4, [r3, #16]
 801ae10:	615a      	str	r2, [r3, #20]
 801ae12:	bd38      	pop	{r3, r4, r5, pc}
 801ae14:	20000088 	.word	0x20000088
 801ae18:	0801f741 	.word	0x0801f741
 801ae1c:	0801f758 	.word	0x0801f758
 801ae20:	abcd330e 	.word	0xabcd330e
 801ae24:	e66d1234 	.word	0xe66d1234
 801ae28:	0005deec 	.word	0x0005deec

0801ae2c <rand>:
 801ae2c:	4b16      	ldr	r3, [pc, #88]	; (801ae88 <rand+0x5c>)
 801ae2e:	b510      	push	{r4, lr}
 801ae30:	681c      	ldr	r4, [r3, #0]
 801ae32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ae34:	b9b3      	cbnz	r3, 801ae64 <rand+0x38>
 801ae36:	2018      	movs	r0, #24
 801ae38:	f7fe ff8c 	bl	8019d54 <malloc>
 801ae3c:	63a0      	str	r0, [r4, #56]	; 0x38
 801ae3e:	b928      	cbnz	r0, 801ae4c <rand+0x20>
 801ae40:	4602      	mov	r2, r0
 801ae42:	4b12      	ldr	r3, [pc, #72]	; (801ae8c <rand+0x60>)
 801ae44:	4812      	ldr	r0, [pc, #72]	; (801ae90 <rand+0x64>)
 801ae46:	214e      	movs	r1, #78	; 0x4e
 801ae48:	f001 fa2a 	bl	801c2a0 <__assert_func>
 801ae4c:	4a11      	ldr	r2, [pc, #68]	; (801ae94 <rand+0x68>)
 801ae4e:	4b12      	ldr	r3, [pc, #72]	; (801ae98 <rand+0x6c>)
 801ae50:	e9c0 2300 	strd	r2, r3, [r0]
 801ae54:	4b11      	ldr	r3, [pc, #68]	; (801ae9c <rand+0x70>)
 801ae56:	6083      	str	r3, [r0, #8]
 801ae58:	230b      	movs	r3, #11
 801ae5a:	8183      	strh	r3, [r0, #12]
 801ae5c:	2201      	movs	r2, #1
 801ae5e:	2300      	movs	r3, #0
 801ae60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ae64:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801ae66:	4a0e      	ldr	r2, [pc, #56]	; (801aea0 <rand+0x74>)
 801ae68:	6920      	ldr	r0, [r4, #16]
 801ae6a:	6963      	ldr	r3, [r4, #20]
 801ae6c:	490d      	ldr	r1, [pc, #52]	; (801aea4 <rand+0x78>)
 801ae6e:	4342      	muls	r2, r0
 801ae70:	fb01 2203 	mla	r2, r1, r3, r2
 801ae74:	fba0 0101 	umull	r0, r1, r0, r1
 801ae78:	1c43      	adds	r3, r0, #1
 801ae7a:	eb42 0001 	adc.w	r0, r2, r1
 801ae7e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801ae82:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ae86:	bd10      	pop	{r4, pc}
 801ae88:	20000088 	.word	0x20000088
 801ae8c:	0801f741 	.word	0x0801f741
 801ae90:	0801f758 	.word	0x0801f758
 801ae94:	abcd330e 	.word	0xabcd330e
 801ae98:	e66d1234 	.word	0xe66d1234
 801ae9c:	0005deec 	.word	0x0005deec
 801aea0:	5851f42d 	.word	0x5851f42d
 801aea4:	4c957f2d 	.word	0x4c957f2d

0801aea8 <realloc>:
 801aea8:	4b02      	ldr	r3, [pc, #8]	; (801aeb4 <realloc+0xc>)
 801aeaa:	460a      	mov	r2, r1
 801aeac:	4601      	mov	r1, r0
 801aeae:	6818      	ldr	r0, [r3, #0]
 801aeb0:	f003 ba4b 	b.w	801e34a <_realloc_r>
 801aeb4:	20000088 	.word	0x20000088

0801aeb8 <cleanup_glue>:
 801aeb8:	b538      	push	{r3, r4, r5, lr}
 801aeba:	460c      	mov	r4, r1
 801aebc:	6809      	ldr	r1, [r1, #0]
 801aebe:	4605      	mov	r5, r0
 801aec0:	b109      	cbz	r1, 801aec6 <cleanup_glue+0xe>
 801aec2:	f7ff fff9 	bl	801aeb8 <cleanup_glue>
 801aec6:	4621      	mov	r1, r4
 801aec8:	4628      	mov	r0, r5
 801aeca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aece:	f7fe bf97 	b.w	8019e00 <_free_r>
	...

0801aed4 <_reclaim_reent>:
 801aed4:	4b2c      	ldr	r3, [pc, #176]	; (801af88 <_reclaim_reent+0xb4>)
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	4283      	cmp	r3, r0
 801aeda:	b570      	push	{r4, r5, r6, lr}
 801aedc:	4604      	mov	r4, r0
 801aede:	d051      	beq.n	801af84 <_reclaim_reent+0xb0>
 801aee0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801aee2:	b143      	cbz	r3, 801aef6 <_reclaim_reent+0x22>
 801aee4:	68db      	ldr	r3, [r3, #12]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d14a      	bne.n	801af80 <_reclaim_reent+0xac>
 801aeea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aeec:	6819      	ldr	r1, [r3, #0]
 801aeee:	b111      	cbz	r1, 801aef6 <_reclaim_reent+0x22>
 801aef0:	4620      	mov	r0, r4
 801aef2:	f7fe ff85 	bl	8019e00 <_free_r>
 801aef6:	6961      	ldr	r1, [r4, #20]
 801aef8:	b111      	cbz	r1, 801af00 <_reclaim_reent+0x2c>
 801aefa:	4620      	mov	r0, r4
 801aefc:	f7fe ff80 	bl	8019e00 <_free_r>
 801af00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801af02:	b111      	cbz	r1, 801af0a <_reclaim_reent+0x36>
 801af04:	4620      	mov	r0, r4
 801af06:	f7fe ff7b 	bl	8019e00 <_free_r>
 801af0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801af0c:	b111      	cbz	r1, 801af14 <_reclaim_reent+0x40>
 801af0e:	4620      	mov	r0, r4
 801af10:	f7fe ff76 	bl	8019e00 <_free_r>
 801af14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801af16:	b111      	cbz	r1, 801af1e <_reclaim_reent+0x4a>
 801af18:	4620      	mov	r0, r4
 801af1a:	f7fe ff71 	bl	8019e00 <_free_r>
 801af1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801af20:	b111      	cbz	r1, 801af28 <_reclaim_reent+0x54>
 801af22:	4620      	mov	r0, r4
 801af24:	f7fe ff6c 	bl	8019e00 <_free_r>
 801af28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801af2a:	b111      	cbz	r1, 801af32 <_reclaim_reent+0x5e>
 801af2c:	4620      	mov	r0, r4
 801af2e:	f7fe ff67 	bl	8019e00 <_free_r>
 801af32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801af34:	b111      	cbz	r1, 801af3c <_reclaim_reent+0x68>
 801af36:	4620      	mov	r0, r4
 801af38:	f7fe ff62 	bl	8019e00 <_free_r>
 801af3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af3e:	b111      	cbz	r1, 801af46 <_reclaim_reent+0x72>
 801af40:	4620      	mov	r0, r4
 801af42:	f7fe ff5d 	bl	8019e00 <_free_r>
 801af46:	69a3      	ldr	r3, [r4, #24]
 801af48:	b1e3      	cbz	r3, 801af84 <_reclaim_reent+0xb0>
 801af4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801af4c:	4620      	mov	r0, r4
 801af4e:	4798      	blx	r3
 801af50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801af52:	b1b9      	cbz	r1, 801af84 <_reclaim_reent+0xb0>
 801af54:	4620      	mov	r0, r4
 801af56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af5a:	f7ff bfad 	b.w	801aeb8 <cleanup_glue>
 801af5e:	5949      	ldr	r1, [r1, r5]
 801af60:	b941      	cbnz	r1, 801af74 <_reclaim_reent+0xa0>
 801af62:	3504      	adds	r5, #4
 801af64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801af66:	2d80      	cmp	r5, #128	; 0x80
 801af68:	68d9      	ldr	r1, [r3, #12]
 801af6a:	d1f8      	bne.n	801af5e <_reclaim_reent+0x8a>
 801af6c:	4620      	mov	r0, r4
 801af6e:	f7fe ff47 	bl	8019e00 <_free_r>
 801af72:	e7ba      	b.n	801aeea <_reclaim_reent+0x16>
 801af74:	680e      	ldr	r6, [r1, #0]
 801af76:	4620      	mov	r0, r4
 801af78:	f7fe ff42 	bl	8019e00 <_free_r>
 801af7c:	4631      	mov	r1, r6
 801af7e:	e7ef      	b.n	801af60 <_reclaim_reent+0x8c>
 801af80:	2500      	movs	r5, #0
 801af82:	e7ef      	b.n	801af64 <_reclaim_reent+0x90>
 801af84:	bd70      	pop	{r4, r5, r6, pc}
 801af86:	bf00      	nop
 801af88:	20000088 	.word	0x20000088

0801af8c <_sbrk_r>:
 801af8c:	b538      	push	{r3, r4, r5, lr}
 801af8e:	4d06      	ldr	r5, [pc, #24]	; (801afa8 <_sbrk_r+0x1c>)
 801af90:	2300      	movs	r3, #0
 801af92:	4604      	mov	r4, r0
 801af94:	4608      	mov	r0, r1
 801af96:	602b      	str	r3, [r5, #0]
 801af98:	f7e9 fc3e 	bl	8004818 <_sbrk>
 801af9c:	1c43      	adds	r3, r0, #1
 801af9e:	d102      	bne.n	801afa6 <_sbrk_r+0x1a>
 801afa0:	682b      	ldr	r3, [r5, #0]
 801afa2:	b103      	cbz	r3, 801afa6 <_sbrk_r+0x1a>
 801afa4:	6023      	str	r3, [r4, #0]
 801afa6:	bd38      	pop	{r3, r4, r5, pc}
 801afa8:	20009f28 	.word	0x20009f28

0801afac <nanf>:
 801afac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801afb4 <nanf+0x8>
 801afb0:	4770      	bx	lr
 801afb2:	bf00      	nop
 801afb4:	7fc00000 	.word	0x7fc00000

0801afb8 <sniprintf>:
 801afb8:	b40c      	push	{r2, r3}
 801afba:	b530      	push	{r4, r5, lr}
 801afbc:	4b17      	ldr	r3, [pc, #92]	; (801b01c <sniprintf+0x64>)
 801afbe:	1e0c      	subs	r4, r1, #0
 801afc0:	681d      	ldr	r5, [r3, #0]
 801afc2:	b09d      	sub	sp, #116	; 0x74
 801afc4:	da08      	bge.n	801afd8 <sniprintf+0x20>
 801afc6:	238b      	movs	r3, #139	; 0x8b
 801afc8:	602b      	str	r3, [r5, #0]
 801afca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afce:	b01d      	add	sp, #116	; 0x74
 801afd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801afd4:	b002      	add	sp, #8
 801afd6:	4770      	bx	lr
 801afd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801afdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801afe0:	bf14      	ite	ne
 801afe2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801afe6:	4623      	moveq	r3, r4
 801afe8:	9304      	str	r3, [sp, #16]
 801afea:	9307      	str	r3, [sp, #28]
 801afec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aff0:	9002      	str	r0, [sp, #8]
 801aff2:	9006      	str	r0, [sp, #24]
 801aff4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aff8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801affa:	ab21      	add	r3, sp, #132	; 0x84
 801affc:	a902      	add	r1, sp, #8
 801affe:	4628      	mov	r0, r5
 801b000:	9301      	str	r3, [sp, #4]
 801b002:	f003 fa2d 	bl	801e460 <_svfiprintf_r>
 801b006:	1c43      	adds	r3, r0, #1
 801b008:	bfbc      	itt	lt
 801b00a:	238b      	movlt	r3, #139	; 0x8b
 801b00c:	602b      	strlt	r3, [r5, #0]
 801b00e:	2c00      	cmp	r4, #0
 801b010:	d0dd      	beq.n	801afce <sniprintf+0x16>
 801b012:	9b02      	ldr	r3, [sp, #8]
 801b014:	2200      	movs	r2, #0
 801b016:	701a      	strb	r2, [r3, #0]
 801b018:	e7d9      	b.n	801afce <sniprintf+0x16>
 801b01a:	bf00      	nop
 801b01c:	20000088 	.word	0x20000088

0801b020 <siprintf>:
 801b020:	b40e      	push	{r1, r2, r3}
 801b022:	b500      	push	{lr}
 801b024:	b09c      	sub	sp, #112	; 0x70
 801b026:	ab1d      	add	r3, sp, #116	; 0x74
 801b028:	9002      	str	r0, [sp, #8]
 801b02a:	9006      	str	r0, [sp, #24]
 801b02c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b030:	4809      	ldr	r0, [pc, #36]	; (801b058 <siprintf+0x38>)
 801b032:	9107      	str	r1, [sp, #28]
 801b034:	9104      	str	r1, [sp, #16]
 801b036:	4909      	ldr	r1, [pc, #36]	; (801b05c <siprintf+0x3c>)
 801b038:	f853 2b04 	ldr.w	r2, [r3], #4
 801b03c:	9105      	str	r1, [sp, #20]
 801b03e:	6800      	ldr	r0, [r0, #0]
 801b040:	9301      	str	r3, [sp, #4]
 801b042:	a902      	add	r1, sp, #8
 801b044:	f003 fa0c 	bl	801e460 <_svfiprintf_r>
 801b048:	9b02      	ldr	r3, [sp, #8]
 801b04a:	2200      	movs	r2, #0
 801b04c:	701a      	strb	r2, [r3, #0]
 801b04e:	b01c      	add	sp, #112	; 0x70
 801b050:	f85d eb04 	ldr.w	lr, [sp], #4
 801b054:	b003      	add	sp, #12
 801b056:	4770      	bx	lr
 801b058:	20000088 	.word	0x20000088
 801b05c:	ffff0208 	.word	0xffff0208

0801b060 <__sread>:
 801b060:	b510      	push	{r4, lr}
 801b062:	460c      	mov	r4, r1
 801b064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b068:	f003 fc54 	bl	801e914 <_read_r>
 801b06c:	2800      	cmp	r0, #0
 801b06e:	bfab      	itete	ge
 801b070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b072:	89a3      	ldrhlt	r3, [r4, #12]
 801b074:	181b      	addge	r3, r3, r0
 801b076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b07a:	bfac      	ite	ge
 801b07c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b07e:	81a3      	strhlt	r3, [r4, #12]
 801b080:	bd10      	pop	{r4, pc}

0801b082 <__swrite>:
 801b082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b086:	461f      	mov	r7, r3
 801b088:	898b      	ldrh	r3, [r1, #12]
 801b08a:	05db      	lsls	r3, r3, #23
 801b08c:	4605      	mov	r5, r0
 801b08e:	460c      	mov	r4, r1
 801b090:	4616      	mov	r6, r2
 801b092:	d505      	bpl.n	801b0a0 <__swrite+0x1e>
 801b094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b098:	2302      	movs	r3, #2
 801b09a:	2200      	movs	r2, #0
 801b09c:	f002 fbfe 	bl	801d89c <_lseek_r>
 801b0a0:	89a3      	ldrh	r3, [r4, #12]
 801b0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b0aa:	81a3      	strh	r3, [r4, #12]
 801b0ac:	4632      	mov	r2, r6
 801b0ae:	463b      	mov	r3, r7
 801b0b0:	4628      	mov	r0, r5
 801b0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0b6:	f001 b873 	b.w	801c1a0 <_write_r>

0801b0ba <__sseek>:
 801b0ba:	b510      	push	{r4, lr}
 801b0bc:	460c      	mov	r4, r1
 801b0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0c2:	f002 fbeb 	bl	801d89c <_lseek_r>
 801b0c6:	1c43      	adds	r3, r0, #1
 801b0c8:	89a3      	ldrh	r3, [r4, #12]
 801b0ca:	bf15      	itete	ne
 801b0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 801b0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b0d6:	81a3      	strheq	r3, [r4, #12]
 801b0d8:	bf18      	it	ne
 801b0da:	81a3      	strhne	r3, [r4, #12]
 801b0dc:	bd10      	pop	{r4, pc}

0801b0de <__sclose>:
 801b0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0e2:	f001 b8fb 	b.w	801c2dc <_close_r>

0801b0e6 <strchr>:
 801b0e6:	b2c9      	uxtb	r1, r1
 801b0e8:	4603      	mov	r3, r0
 801b0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0ee:	b11a      	cbz	r2, 801b0f8 <strchr+0x12>
 801b0f0:	428a      	cmp	r2, r1
 801b0f2:	d1f9      	bne.n	801b0e8 <strchr+0x2>
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	4770      	bx	lr
 801b0f8:	2900      	cmp	r1, #0
 801b0fa:	bf18      	it	ne
 801b0fc:	2300      	movne	r3, #0
 801b0fe:	e7f9      	b.n	801b0f4 <strchr+0xe>

0801b100 <strcpy>:
 801b100:	4603      	mov	r3, r0
 801b102:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b106:	f803 2b01 	strb.w	r2, [r3], #1
 801b10a:	2a00      	cmp	r2, #0
 801b10c:	d1f9      	bne.n	801b102 <strcpy+0x2>
 801b10e:	4770      	bx	lr

0801b110 <strncmp>:
 801b110:	b510      	push	{r4, lr}
 801b112:	b17a      	cbz	r2, 801b134 <strncmp+0x24>
 801b114:	4603      	mov	r3, r0
 801b116:	3901      	subs	r1, #1
 801b118:	1884      	adds	r4, r0, r2
 801b11a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b11e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b122:	4290      	cmp	r0, r2
 801b124:	d101      	bne.n	801b12a <strncmp+0x1a>
 801b126:	42a3      	cmp	r3, r4
 801b128:	d101      	bne.n	801b12e <strncmp+0x1e>
 801b12a:	1a80      	subs	r0, r0, r2
 801b12c:	bd10      	pop	{r4, pc}
 801b12e:	2800      	cmp	r0, #0
 801b130:	d1f3      	bne.n	801b11a <strncmp+0xa>
 801b132:	e7fa      	b.n	801b12a <strncmp+0x1a>
 801b134:	4610      	mov	r0, r2
 801b136:	e7f9      	b.n	801b12c <strncmp+0x1c>

0801b138 <strstr>:
 801b138:	780a      	ldrb	r2, [r1, #0]
 801b13a:	b570      	push	{r4, r5, r6, lr}
 801b13c:	b96a      	cbnz	r2, 801b15a <strstr+0x22>
 801b13e:	bd70      	pop	{r4, r5, r6, pc}
 801b140:	429a      	cmp	r2, r3
 801b142:	d109      	bne.n	801b158 <strstr+0x20>
 801b144:	460c      	mov	r4, r1
 801b146:	4605      	mov	r5, r0
 801b148:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d0f6      	beq.n	801b13e <strstr+0x6>
 801b150:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b154:	429e      	cmp	r6, r3
 801b156:	d0f7      	beq.n	801b148 <strstr+0x10>
 801b158:	3001      	adds	r0, #1
 801b15a:	7803      	ldrb	r3, [r0, #0]
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d1ef      	bne.n	801b140 <strstr+0x8>
 801b160:	4618      	mov	r0, r3
 801b162:	e7ec      	b.n	801b13e <strstr+0x6>

0801b164 <sulp>:
 801b164:	b570      	push	{r4, r5, r6, lr}
 801b166:	4604      	mov	r4, r0
 801b168:	460d      	mov	r5, r1
 801b16a:	ec45 4b10 	vmov	d0, r4, r5
 801b16e:	4616      	mov	r6, r2
 801b170:	f002 ff9c 	bl	801e0ac <__ulp>
 801b174:	ec51 0b10 	vmov	r0, r1, d0
 801b178:	b17e      	cbz	r6, 801b19a <sulp+0x36>
 801b17a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b17e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b182:	2b00      	cmp	r3, #0
 801b184:	dd09      	ble.n	801b19a <sulp+0x36>
 801b186:	051b      	lsls	r3, r3, #20
 801b188:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b18c:	2400      	movs	r4, #0
 801b18e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b192:	4622      	mov	r2, r4
 801b194:	462b      	mov	r3, r5
 801b196:	f7e5 fa47 	bl	8000628 <__aeabi_dmul>
 801b19a:	bd70      	pop	{r4, r5, r6, pc}
 801b19c:	0000      	movs	r0, r0
	...

0801b1a0 <_strtod_l>:
 801b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a4:	ed2d 8b02 	vpush	{d8}
 801b1a8:	b09d      	sub	sp, #116	; 0x74
 801b1aa:	461f      	mov	r7, r3
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	9318      	str	r3, [sp, #96]	; 0x60
 801b1b0:	4ba2      	ldr	r3, [pc, #648]	; (801b43c <_strtod_l+0x29c>)
 801b1b2:	9213      	str	r2, [sp, #76]	; 0x4c
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	9305      	str	r3, [sp, #20]
 801b1b8:	4604      	mov	r4, r0
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	4688      	mov	r8, r1
 801b1be:	f7e5 f819 	bl	80001f4 <strlen>
 801b1c2:	f04f 0a00 	mov.w	sl, #0
 801b1c6:	4605      	mov	r5, r0
 801b1c8:	f04f 0b00 	mov.w	fp, #0
 801b1cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b1d2:	781a      	ldrb	r2, [r3, #0]
 801b1d4:	2a2b      	cmp	r2, #43	; 0x2b
 801b1d6:	d04e      	beq.n	801b276 <_strtod_l+0xd6>
 801b1d8:	d83b      	bhi.n	801b252 <_strtod_l+0xb2>
 801b1da:	2a0d      	cmp	r2, #13
 801b1dc:	d834      	bhi.n	801b248 <_strtod_l+0xa8>
 801b1de:	2a08      	cmp	r2, #8
 801b1e0:	d834      	bhi.n	801b24c <_strtod_l+0xac>
 801b1e2:	2a00      	cmp	r2, #0
 801b1e4:	d03e      	beq.n	801b264 <_strtod_l+0xc4>
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	930a      	str	r3, [sp, #40]	; 0x28
 801b1ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801b1ec:	7833      	ldrb	r3, [r6, #0]
 801b1ee:	2b30      	cmp	r3, #48	; 0x30
 801b1f0:	f040 80b0 	bne.w	801b354 <_strtod_l+0x1b4>
 801b1f4:	7873      	ldrb	r3, [r6, #1]
 801b1f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b1fa:	2b58      	cmp	r3, #88	; 0x58
 801b1fc:	d168      	bne.n	801b2d0 <_strtod_l+0x130>
 801b1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b200:	9301      	str	r3, [sp, #4]
 801b202:	ab18      	add	r3, sp, #96	; 0x60
 801b204:	9702      	str	r7, [sp, #8]
 801b206:	9300      	str	r3, [sp, #0]
 801b208:	4a8d      	ldr	r2, [pc, #564]	; (801b440 <_strtod_l+0x2a0>)
 801b20a:	ab19      	add	r3, sp, #100	; 0x64
 801b20c:	a917      	add	r1, sp, #92	; 0x5c
 801b20e:	4620      	mov	r0, r4
 801b210:	f002 f838 	bl	801d284 <__gethex>
 801b214:	f010 0707 	ands.w	r7, r0, #7
 801b218:	4605      	mov	r5, r0
 801b21a:	d005      	beq.n	801b228 <_strtod_l+0x88>
 801b21c:	2f06      	cmp	r7, #6
 801b21e:	d12c      	bne.n	801b27a <_strtod_l+0xda>
 801b220:	3601      	adds	r6, #1
 801b222:	2300      	movs	r3, #0
 801b224:	9617      	str	r6, [sp, #92]	; 0x5c
 801b226:	930a      	str	r3, [sp, #40]	; 0x28
 801b228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	f040 8590 	bne.w	801bd50 <_strtod_l+0xbb0>
 801b230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b232:	b1eb      	cbz	r3, 801b270 <_strtod_l+0xd0>
 801b234:	4652      	mov	r2, sl
 801b236:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b23a:	ec43 2b10 	vmov	d0, r2, r3
 801b23e:	b01d      	add	sp, #116	; 0x74
 801b240:	ecbd 8b02 	vpop	{d8}
 801b244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b248:	2a20      	cmp	r2, #32
 801b24a:	d1cc      	bne.n	801b1e6 <_strtod_l+0x46>
 801b24c:	3301      	adds	r3, #1
 801b24e:	9317      	str	r3, [sp, #92]	; 0x5c
 801b250:	e7be      	b.n	801b1d0 <_strtod_l+0x30>
 801b252:	2a2d      	cmp	r2, #45	; 0x2d
 801b254:	d1c7      	bne.n	801b1e6 <_strtod_l+0x46>
 801b256:	2201      	movs	r2, #1
 801b258:	920a      	str	r2, [sp, #40]	; 0x28
 801b25a:	1c5a      	adds	r2, r3, #1
 801b25c:	9217      	str	r2, [sp, #92]	; 0x5c
 801b25e:	785b      	ldrb	r3, [r3, #1]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d1c2      	bne.n	801b1ea <_strtod_l+0x4a>
 801b264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b266:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	f040 856e 	bne.w	801bd4c <_strtod_l+0xbac>
 801b270:	4652      	mov	r2, sl
 801b272:	465b      	mov	r3, fp
 801b274:	e7e1      	b.n	801b23a <_strtod_l+0x9a>
 801b276:	2200      	movs	r2, #0
 801b278:	e7ee      	b.n	801b258 <_strtod_l+0xb8>
 801b27a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b27c:	b13a      	cbz	r2, 801b28e <_strtod_l+0xee>
 801b27e:	2135      	movs	r1, #53	; 0x35
 801b280:	a81a      	add	r0, sp, #104	; 0x68
 801b282:	f003 f81e 	bl	801e2c2 <__copybits>
 801b286:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b288:	4620      	mov	r0, r4
 801b28a:	f002 fbdd 	bl	801da48 <_Bfree>
 801b28e:	3f01      	subs	r7, #1
 801b290:	2f04      	cmp	r7, #4
 801b292:	d806      	bhi.n	801b2a2 <_strtod_l+0x102>
 801b294:	e8df f007 	tbb	[pc, r7]
 801b298:	1714030a 	.word	0x1714030a
 801b29c:	0a          	.byte	0x0a
 801b29d:	00          	.byte	0x00
 801b29e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801b2a2:	0728      	lsls	r0, r5, #28
 801b2a4:	d5c0      	bpl.n	801b228 <_strtod_l+0x88>
 801b2a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b2aa:	e7bd      	b.n	801b228 <_strtod_l+0x88>
 801b2ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801b2b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b2b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b2b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b2ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b2be:	e7f0      	b.n	801b2a2 <_strtod_l+0x102>
 801b2c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 801b444 <_strtod_l+0x2a4>
 801b2c4:	e7ed      	b.n	801b2a2 <_strtod_l+0x102>
 801b2c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b2ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b2ce:	e7e8      	b.n	801b2a2 <_strtod_l+0x102>
 801b2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2d2:	1c5a      	adds	r2, r3, #1
 801b2d4:	9217      	str	r2, [sp, #92]	; 0x5c
 801b2d6:	785b      	ldrb	r3, [r3, #1]
 801b2d8:	2b30      	cmp	r3, #48	; 0x30
 801b2da:	d0f9      	beq.n	801b2d0 <_strtod_l+0x130>
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d0a3      	beq.n	801b228 <_strtod_l+0x88>
 801b2e0:	2301      	movs	r3, #1
 801b2e2:	f04f 0900 	mov.w	r9, #0
 801b2e6:	9304      	str	r3, [sp, #16]
 801b2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2ea:	9308      	str	r3, [sp, #32]
 801b2ec:	f8cd 901c 	str.w	r9, [sp, #28]
 801b2f0:	464f      	mov	r7, r9
 801b2f2:	220a      	movs	r2, #10
 801b2f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b2f6:	7806      	ldrb	r6, [r0, #0]
 801b2f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b2fc:	b2d9      	uxtb	r1, r3
 801b2fe:	2909      	cmp	r1, #9
 801b300:	d92a      	bls.n	801b358 <_strtod_l+0x1b8>
 801b302:	9905      	ldr	r1, [sp, #20]
 801b304:	462a      	mov	r2, r5
 801b306:	f7ff ff03 	bl	801b110 <strncmp>
 801b30a:	b398      	cbz	r0, 801b374 <_strtod_l+0x1d4>
 801b30c:	2000      	movs	r0, #0
 801b30e:	4632      	mov	r2, r6
 801b310:	463d      	mov	r5, r7
 801b312:	9005      	str	r0, [sp, #20]
 801b314:	4603      	mov	r3, r0
 801b316:	2a65      	cmp	r2, #101	; 0x65
 801b318:	d001      	beq.n	801b31e <_strtod_l+0x17e>
 801b31a:	2a45      	cmp	r2, #69	; 0x45
 801b31c:	d118      	bne.n	801b350 <_strtod_l+0x1b0>
 801b31e:	b91d      	cbnz	r5, 801b328 <_strtod_l+0x188>
 801b320:	9a04      	ldr	r2, [sp, #16]
 801b322:	4302      	orrs	r2, r0
 801b324:	d09e      	beq.n	801b264 <_strtod_l+0xc4>
 801b326:	2500      	movs	r5, #0
 801b328:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801b32c:	f108 0201 	add.w	r2, r8, #1
 801b330:	9217      	str	r2, [sp, #92]	; 0x5c
 801b332:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b336:	2a2b      	cmp	r2, #43	; 0x2b
 801b338:	d075      	beq.n	801b426 <_strtod_l+0x286>
 801b33a:	2a2d      	cmp	r2, #45	; 0x2d
 801b33c:	d07b      	beq.n	801b436 <_strtod_l+0x296>
 801b33e:	f04f 0c00 	mov.w	ip, #0
 801b342:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801b346:	2909      	cmp	r1, #9
 801b348:	f240 8082 	bls.w	801b450 <_strtod_l+0x2b0>
 801b34c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b350:	2600      	movs	r6, #0
 801b352:	e09d      	b.n	801b490 <_strtod_l+0x2f0>
 801b354:	2300      	movs	r3, #0
 801b356:	e7c4      	b.n	801b2e2 <_strtod_l+0x142>
 801b358:	2f08      	cmp	r7, #8
 801b35a:	bfd8      	it	le
 801b35c:	9907      	ldrle	r1, [sp, #28]
 801b35e:	f100 0001 	add.w	r0, r0, #1
 801b362:	bfda      	itte	le
 801b364:	fb02 3301 	mlale	r3, r2, r1, r3
 801b368:	9307      	strle	r3, [sp, #28]
 801b36a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b36e:	3701      	adds	r7, #1
 801b370:	9017      	str	r0, [sp, #92]	; 0x5c
 801b372:	e7bf      	b.n	801b2f4 <_strtod_l+0x154>
 801b374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b376:	195a      	adds	r2, r3, r5
 801b378:	9217      	str	r2, [sp, #92]	; 0x5c
 801b37a:	5d5a      	ldrb	r2, [r3, r5]
 801b37c:	2f00      	cmp	r7, #0
 801b37e:	d037      	beq.n	801b3f0 <_strtod_l+0x250>
 801b380:	9005      	str	r0, [sp, #20]
 801b382:	463d      	mov	r5, r7
 801b384:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801b388:	2b09      	cmp	r3, #9
 801b38a:	d912      	bls.n	801b3b2 <_strtod_l+0x212>
 801b38c:	2301      	movs	r3, #1
 801b38e:	e7c2      	b.n	801b316 <_strtod_l+0x176>
 801b390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b392:	1c5a      	adds	r2, r3, #1
 801b394:	9217      	str	r2, [sp, #92]	; 0x5c
 801b396:	785a      	ldrb	r2, [r3, #1]
 801b398:	3001      	adds	r0, #1
 801b39a:	2a30      	cmp	r2, #48	; 0x30
 801b39c:	d0f8      	beq.n	801b390 <_strtod_l+0x1f0>
 801b39e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801b3a2:	2b08      	cmp	r3, #8
 801b3a4:	f200 84d9 	bhi.w	801bd5a <_strtod_l+0xbba>
 801b3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3aa:	9005      	str	r0, [sp, #20]
 801b3ac:	2000      	movs	r0, #0
 801b3ae:	9308      	str	r3, [sp, #32]
 801b3b0:	4605      	mov	r5, r0
 801b3b2:	3a30      	subs	r2, #48	; 0x30
 801b3b4:	f100 0301 	add.w	r3, r0, #1
 801b3b8:	d014      	beq.n	801b3e4 <_strtod_l+0x244>
 801b3ba:	9905      	ldr	r1, [sp, #20]
 801b3bc:	4419      	add	r1, r3
 801b3be:	9105      	str	r1, [sp, #20]
 801b3c0:	462b      	mov	r3, r5
 801b3c2:	eb00 0e05 	add.w	lr, r0, r5
 801b3c6:	210a      	movs	r1, #10
 801b3c8:	4573      	cmp	r3, lr
 801b3ca:	d113      	bne.n	801b3f4 <_strtod_l+0x254>
 801b3cc:	182b      	adds	r3, r5, r0
 801b3ce:	2b08      	cmp	r3, #8
 801b3d0:	f105 0501 	add.w	r5, r5, #1
 801b3d4:	4405      	add	r5, r0
 801b3d6:	dc1c      	bgt.n	801b412 <_strtod_l+0x272>
 801b3d8:	9907      	ldr	r1, [sp, #28]
 801b3da:	230a      	movs	r3, #10
 801b3dc:	fb03 2301 	mla	r3, r3, r1, r2
 801b3e0:	9307      	str	r3, [sp, #28]
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b3e6:	1c51      	adds	r1, r2, #1
 801b3e8:	9117      	str	r1, [sp, #92]	; 0x5c
 801b3ea:	7852      	ldrb	r2, [r2, #1]
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	e7c9      	b.n	801b384 <_strtod_l+0x1e4>
 801b3f0:	4638      	mov	r0, r7
 801b3f2:	e7d2      	b.n	801b39a <_strtod_l+0x1fa>
 801b3f4:	2b08      	cmp	r3, #8
 801b3f6:	dc04      	bgt.n	801b402 <_strtod_l+0x262>
 801b3f8:	9e07      	ldr	r6, [sp, #28]
 801b3fa:	434e      	muls	r6, r1
 801b3fc:	9607      	str	r6, [sp, #28]
 801b3fe:	3301      	adds	r3, #1
 801b400:	e7e2      	b.n	801b3c8 <_strtod_l+0x228>
 801b402:	f103 0c01 	add.w	ip, r3, #1
 801b406:	f1bc 0f10 	cmp.w	ip, #16
 801b40a:	bfd8      	it	le
 801b40c:	fb01 f909 	mulle.w	r9, r1, r9
 801b410:	e7f5      	b.n	801b3fe <_strtod_l+0x25e>
 801b412:	2d10      	cmp	r5, #16
 801b414:	bfdc      	itt	le
 801b416:	230a      	movle	r3, #10
 801b418:	fb03 2909 	mlale	r9, r3, r9, r2
 801b41c:	e7e1      	b.n	801b3e2 <_strtod_l+0x242>
 801b41e:	2300      	movs	r3, #0
 801b420:	9305      	str	r3, [sp, #20]
 801b422:	2301      	movs	r3, #1
 801b424:	e77c      	b.n	801b320 <_strtod_l+0x180>
 801b426:	f04f 0c00 	mov.w	ip, #0
 801b42a:	f108 0202 	add.w	r2, r8, #2
 801b42e:	9217      	str	r2, [sp, #92]	; 0x5c
 801b430:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b434:	e785      	b.n	801b342 <_strtod_l+0x1a2>
 801b436:	f04f 0c01 	mov.w	ip, #1
 801b43a:	e7f6      	b.n	801b42a <_strtod_l+0x28a>
 801b43c:	0801f980 	.word	0x0801f980
 801b440:	0801f7b4 	.word	0x0801f7b4
 801b444:	7ff00000 	.word	0x7ff00000
 801b448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b44a:	1c51      	adds	r1, r2, #1
 801b44c:	9117      	str	r1, [sp, #92]	; 0x5c
 801b44e:	7852      	ldrb	r2, [r2, #1]
 801b450:	2a30      	cmp	r2, #48	; 0x30
 801b452:	d0f9      	beq.n	801b448 <_strtod_l+0x2a8>
 801b454:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801b458:	2908      	cmp	r1, #8
 801b45a:	f63f af79 	bhi.w	801b350 <_strtod_l+0x1b0>
 801b45e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801b462:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b464:	9206      	str	r2, [sp, #24]
 801b466:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b468:	1c51      	adds	r1, r2, #1
 801b46a:	9117      	str	r1, [sp, #92]	; 0x5c
 801b46c:	7852      	ldrb	r2, [r2, #1]
 801b46e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801b472:	2e09      	cmp	r6, #9
 801b474:	d937      	bls.n	801b4e6 <_strtod_l+0x346>
 801b476:	9e06      	ldr	r6, [sp, #24]
 801b478:	1b89      	subs	r1, r1, r6
 801b47a:	2908      	cmp	r1, #8
 801b47c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b480:	dc02      	bgt.n	801b488 <_strtod_l+0x2e8>
 801b482:	4576      	cmp	r6, lr
 801b484:	bfa8      	it	ge
 801b486:	4676      	movge	r6, lr
 801b488:	f1bc 0f00 	cmp.w	ip, #0
 801b48c:	d000      	beq.n	801b490 <_strtod_l+0x2f0>
 801b48e:	4276      	negs	r6, r6
 801b490:	2d00      	cmp	r5, #0
 801b492:	d14d      	bne.n	801b530 <_strtod_l+0x390>
 801b494:	9904      	ldr	r1, [sp, #16]
 801b496:	4301      	orrs	r1, r0
 801b498:	f47f aec6 	bne.w	801b228 <_strtod_l+0x88>
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	f47f aee1 	bne.w	801b264 <_strtod_l+0xc4>
 801b4a2:	2a69      	cmp	r2, #105	; 0x69
 801b4a4:	d027      	beq.n	801b4f6 <_strtod_l+0x356>
 801b4a6:	dc24      	bgt.n	801b4f2 <_strtod_l+0x352>
 801b4a8:	2a49      	cmp	r2, #73	; 0x49
 801b4aa:	d024      	beq.n	801b4f6 <_strtod_l+0x356>
 801b4ac:	2a4e      	cmp	r2, #78	; 0x4e
 801b4ae:	f47f aed9 	bne.w	801b264 <_strtod_l+0xc4>
 801b4b2:	499f      	ldr	r1, [pc, #636]	; (801b730 <_strtod_l+0x590>)
 801b4b4:	a817      	add	r0, sp, #92	; 0x5c
 801b4b6:	f002 f93d 	bl	801d734 <__match>
 801b4ba:	2800      	cmp	r0, #0
 801b4bc:	f43f aed2 	beq.w	801b264 <_strtod_l+0xc4>
 801b4c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4c2:	781b      	ldrb	r3, [r3, #0]
 801b4c4:	2b28      	cmp	r3, #40	; 0x28
 801b4c6:	d12d      	bne.n	801b524 <_strtod_l+0x384>
 801b4c8:	499a      	ldr	r1, [pc, #616]	; (801b734 <_strtod_l+0x594>)
 801b4ca:	aa1a      	add	r2, sp, #104	; 0x68
 801b4cc:	a817      	add	r0, sp, #92	; 0x5c
 801b4ce:	f002 f945 	bl	801d75c <__hexnan>
 801b4d2:	2805      	cmp	r0, #5
 801b4d4:	d126      	bne.n	801b524 <_strtod_l+0x384>
 801b4d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b4d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801b4dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b4e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b4e4:	e6a0      	b.n	801b228 <_strtod_l+0x88>
 801b4e6:	210a      	movs	r1, #10
 801b4e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801b4ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b4f0:	e7b9      	b.n	801b466 <_strtod_l+0x2c6>
 801b4f2:	2a6e      	cmp	r2, #110	; 0x6e
 801b4f4:	e7db      	b.n	801b4ae <_strtod_l+0x30e>
 801b4f6:	4990      	ldr	r1, [pc, #576]	; (801b738 <_strtod_l+0x598>)
 801b4f8:	a817      	add	r0, sp, #92	; 0x5c
 801b4fa:	f002 f91b 	bl	801d734 <__match>
 801b4fe:	2800      	cmp	r0, #0
 801b500:	f43f aeb0 	beq.w	801b264 <_strtod_l+0xc4>
 801b504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b506:	498d      	ldr	r1, [pc, #564]	; (801b73c <_strtod_l+0x59c>)
 801b508:	3b01      	subs	r3, #1
 801b50a:	a817      	add	r0, sp, #92	; 0x5c
 801b50c:	9317      	str	r3, [sp, #92]	; 0x5c
 801b50e:	f002 f911 	bl	801d734 <__match>
 801b512:	b910      	cbnz	r0, 801b51a <_strtod_l+0x37a>
 801b514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b516:	3301      	adds	r3, #1
 801b518:	9317      	str	r3, [sp, #92]	; 0x5c
 801b51a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801b74c <_strtod_l+0x5ac>
 801b51e:	f04f 0a00 	mov.w	sl, #0
 801b522:	e681      	b.n	801b228 <_strtod_l+0x88>
 801b524:	4886      	ldr	r0, [pc, #536]	; (801b740 <_strtod_l+0x5a0>)
 801b526:	f003 fa07 	bl	801e938 <nan>
 801b52a:	ec5b ab10 	vmov	sl, fp, d0
 801b52e:	e67b      	b.n	801b228 <_strtod_l+0x88>
 801b530:	9b05      	ldr	r3, [sp, #20]
 801b532:	9807      	ldr	r0, [sp, #28]
 801b534:	1af3      	subs	r3, r6, r3
 801b536:	2f00      	cmp	r7, #0
 801b538:	bf08      	it	eq
 801b53a:	462f      	moveq	r7, r5
 801b53c:	2d10      	cmp	r5, #16
 801b53e:	9306      	str	r3, [sp, #24]
 801b540:	46a8      	mov	r8, r5
 801b542:	bfa8      	it	ge
 801b544:	f04f 0810 	movge.w	r8, #16
 801b548:	f7e4 fff4 	bl	8000534 <__aeabi_ui2d>
 801b54c:	2d09      	cmp	r5, #9
 801b54e:	4682      	mov	sl, r0
 801b550:	468b      	mov	fp, r1
 801b552:	dd13      	ble.n	801b57c <_strtod_l+0x3dc>
 801b554:	4b7b      	ldr	r3, [pc, #492]	; (801b744 <_strtod_l+0x5a4>)
 801b556:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b55a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b55e:	f7e5 f863 	bl	8000628 <__aeabi_dmul>
 801b562:	4682      	mov	sl, r0
 801b564:	4648      	mov	r0, r9
 801b566:	468b      	mov	fp, r1
 801b568:	f7e4 ffe4 	bl	8000534 <__aeabi_ui2d>
 801b56c:	4602      	mov	r2, r0
 801b56e:	460b      	mov	r3, r1
 801b570:	4650      	mov	r0, sl
 801b572:	4659      	mov	r1, fp
 801b574:	f7e4 fea2 	bl	80002bc <__adddf3>
 801b578:	4682      	mov	sl, r0
 801b57a:	468b      	mov	fp, r1
 801b57c:	2d0f      	cmp	r5, #15
 801b57e:	dc38      	bgt.n	801b5f2 <_strtod_l+0x452>
 801b580:	9b06      	ldr	r3, [sp, #24]
 801b582:	2b00      	cmp	r3, #0
 801b584:	f43f ae50 	beq.w	801b228 <_strtod_l+0x88>
 801b588:	dd24      	ble.n	801b5d4 <_strtod_l+0x434>
 801b58a:	2b16      	cmp	r3, #22
 801b58c:	dc0b      	bgt.n	801b5a6 <_strtod_l+0x406>
 801b58e:	496d      	ldr	r1, [pc, #436]	; (801b744 <_strtod_l+0x5a4>)
 801b590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b594:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b598:	4652      	mov	r2, sl
 801b59a:	465b      	mov	r3, fp
 801b59c:	f7e5 f844 	bl	8000628 <__aeabi_dmul>
 801b5a0:	4682      	mov	sl, r0
 801b5a2:	468b      	mov	fp, r1
 801b5a4:	e640      	b.n	801b228 <_strtod_l+0x88>
 801b5a6:	9a06      	ldr	r2, [sp, #24]
 801b5a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b5ac:	4293      	cmp	r3, r2
 801b5ae:	db20      	blt.n	801b5f2 <_strtod_l+0x452>
 801b5b0:	4c64      	ldr	r4, [pc, #400]	; (801b744 <_strtod_l+0x5a4>)
 801b5b2:	f1c5 050f 	rsb	r5, r5, #15
 801b5b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b5ba:	4652      	mov	r2, sl
 801b5bc:	465b      	mov	r3, fp
 801b5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5c2:	f7e5 f831 	bl	8000628 <__aeabi_dmul>
 801b5c6:	9b06      	ldr	r3, [sp, #24]
 801b5c8:	1b5d      	subs	r5, r3, r5
 801b5ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b5ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b5d2:	e7e3      	b.n	801b59c <_strtod_l+0x3fc>
 801b5d4:	9b06      	ldr	r3, [sp, #24]
 801b5d6:	3316      	adds	r3, #22
 801b5d8:	db0b      	blt.n	801b5f2 <_strtod_l+0x452>
 801b5da:	9b05      	ldr	r3, [sp, #20]
 801b5dc:	1b9e      	subs	r6, r3, r6
 801b5de:	4b59      	ldr	r3, [pc, #356]	; (801b744 <_strtod_l+0x5a4>)
 801b5e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801b5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b5e8:	4650      	mov	r0, sl
 801b5ea:	4659      	mov	r1, fp
 801b5ec:	f7e5 f946 	bl	800087c <__aeabi_ddiv>
 801b5f0:	e7d6      	b.n	801b5a0 <_strtod_l+0x400>
 801b5f2:	9b06      	ldr	r3, [sp, #24]
 801b5f4:	eba5 0808 	sub.w	r8, r5, r8
 801b5f8:	4498      	add	r8, r3
 801b5fa:	f1b8 0f00 	cmp.w	r8, #0
 801b5fe:	dd74      	ble.n	801b6ea <_strtod_l+0x54a>
 801b600:	f018 030f 	ands.w	r3, r8, #15
 801b604:	d00a      	beq.n	801b61c <_strtod_l+0x47c>
 801b606:	494f      	ldr	r1, [pc, #316]	; (801b744 <_strtod_l+0x5a4>)
 801b608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b60c:	4652      	mov	r2, sl
 801b60e:	465b      	mov	r3, fp
 801b610:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b614:	f7e5 f808 	bl	8000628 <__aeabi_dmul>
 801b618:	4682      	mov	sl, r0
 801b61a:	468b      	mov	fp, r1
 801b61c:	f038 080f 	bics.w	r8, r8, #15
 801b620:	d04f      	beq.n	801b6c2 <_strtod_l+0x522>
 801b622:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b626:	dd22      	ble.n	801b66e <_strtod_l+0x4ce>
 801b628:	2500      	movs	r5, #0
 801b62a:	462e      	mov	r6, r5
 801b62c:	9507      	str	r5, [sp, #28]
 801b62e:	9505      	str	r5, [sp, #20]
 801b630:	2322      	movs	r3, #34	; 0x22
 801b632:	f8df b118 	ldr.w	fp, [pc, #280]	; 801b74c <_strtod_l+0x5ac>
 801b636:	6023      	str	r3, [r4, #0]
 801b638:	f04f 0a00 	mov.w	sl, #0
 801b63c:	9b07      	ldr	r3, [sp, #28]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	f43f adf2 	beq.w	801b228 <_strtod_l+0x88>
 801b644:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b646:	4620      	mov	r0, r4
 801b648:	f002 f9fe 	bl	801da48 <_Bfree>
 801b64c:	9905      	ldr	r1, [sp, #20]
 801b64e:	4620      	mov	r0, r4
 801b650:	f002 f9fa 	bl	801da48 <_Bfree>
 801b654:	4631      	mov	r1, r6
 801b656:	4620      	mov	r0, r4
 801b658:	f002 f9f6 	bl	801da48 <_Bfree>
 801b65c:	9907      	ldr	r1, [sp, #28]
 801b65e:	4620      	mov	r0, r4
 801b660:	f002 f9f2 	bl	801da48 <_Bfree>
 801b664:	4629      	mov	r1, r5
 801b666:	4620      	mov	r0, r4
 801b668:	f002 f9ee 	bl	801da48 <_Bfree>
 801b66c:	e5dc      	b.n	801b228 <_strtod_l+0x88>
 801b66e:	4b36      	ldr	r3, [pc, #216]	; (801b748 <_strtod_l+0x5a8>)
 801b670:	9304      	str	r3, [sp, #16]
 801b672:	2300      	movs	r3, #0
 801b674:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b678:	4650      	mov	r0, sl
 801b67a:	4659      	mov	r1, fp
 801b67c:	4699      	mov	r9, r3
 801b67e:	f1b8 0f01 	cmp.w	r8, #1
 801b682:	dc21      	bgt.n	801b6c8 <_strtod_l+0x528>
 801b684:	b10b      	cbz	r3, 801b68a <_strtod_l+0x4ea>
 801b686:	4682      	mov	sl, r0
 801b688:	468b      	mov	fp, r1
 801b68a:	4b2f      	ldr	r3, [pc, #188]	; (801b748 <_strtod_l+0x5a8>)
 801b68c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b690:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b694:	4652      	mov	r2, sl
 801b696:	465b      	mov	r3, fp
 801b698:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b69c:	f7e4 ffc4 	bl	8000628 <__aeabi_dmul>
 801b6a0:	4b2a      	ldr	r3, [pc, #168]	; (801b74c <_strtod_l+0x5ac>)
 801b6a2:	460a      	mov	r2, r1
 801b6a4:	400b      	ands	r3, r1
 801b6a6:	492a      	ldr	r1, [pc, #168]	; (801b750 <_strtod_l+0x5b0>)
 801b6a8:	428b      	cmp	r3, r1
 801b6aa:	4682      	mov	sl, r0
 801b6ac:	d8bc      	bhi.n	801b628 <_strtod_l+0x488>
 801b6ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b6b2:	428b      	cmp	r3, r1
 801b6b4:	bf86      	itte	hi
 801b6b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801b754 <_strtod_l+0x5b4>
 801b6ba:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801b6be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	9304      	str	r3, [sp, #16]
 801b6c6:	e084      	b.n	801b7d2 <_strtod_l+0x632>
 801b6c8:	f018 0f01 	tst.w	r8, #1
 801b6cc:	d005      	beq.n	801b6da <_strtod_l+0x53a>
 801b6ce:	9b04      	ldr	r3, [sp, #16]
 801b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d4:	f7e4 ffa8 	bl	8000628 <__aeabi_dmul>
 801b6d8:	2301      	movs	r3, #1
 801b6da:	9a04      	ldr	r2, [sp, #16]
 801b6dc:	3208      	adds	r2, #8
 801b6de:	f109 0901 	add.w	r9, r9, #1
 801b6e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b6e6:	9204      	str	r2, [sp, #16]
 801b6e8:	e7c9      	b.n	801b67e <_strtod_l+0x4de>
 801b6ea:	d0ea      	beq.n	801b6c2 <_strtod_l+0x522>
 801b6ec:	f1c8 0800 	rsb	r8, r8, #0
 801b6f0:	f018 020f 	ands.w	r2, r8, #15
 801b6f4:	d00a      	beq.n	801b70c <_strtod_l+0x56c>
 801b6f6:	4b13      	ldr	r3, [pc, #76]	; (801b744 <_strtod_l+0x5a4>)
 801b6f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b6fc:	4650      	mov	r0, sl
 801b6fe:	4659      	mov	r1, fp
 801b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b704:	f7e5 f8ba 	bl	800087c <__aeabi_ddiv>
 801b708:	4682      	mov	sl, r0
 801b70a:	468b      	mov	fp, r1
 801b70c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b710:	d0d7      	beq.n	801b6c2 <_strtod_l+0x522>
 801b712:	f1b8 0f1f 	cmp.w	r8, #31
 801b716:	dd1f      	ble.n	801b758 <_strtod_l+0x5b8>
 801b718:	2500      	movs	r5, #0
 801b71a:	462e      	mov	r6, r5
 801b71c:	9507      	str	r5, [sp, #28]
 801b71e:	9505      	str	r5, [sp, #20]
 801b720:	2322      	movs	r3, #34	; 0x22
 801b722:	f04f 0a00 	mov.w	sl, #0
 801b726:	f04f 0b00 	mov.w	fp, #0
 801b72a:	6023      	str	r3, [r4, #0]
 801b72c:	e786      	b.n	801b63c <_strtod_l+0x49c>
 801b72e:	bf00      	nop
 801b730:	0801f715 	.word	0x0801f715
 801b734:	0801f7c8 	.word	0x0801f7c8
 801b738:	0801f70d 	.word	0x0801f70d
 801b73c:	0801f8a4 	.word	0x0801f8a4
 801b740:	0801f8a0 	.word	0x0801f8a0
 801b744:	0801fa18 	.word	0x0801fa18
 801b748:	0801f9f0 	.word	0x0801f9f0
 801b74c:	7ff00000 	.word	0x7ff00000
 801b750:	7ca00000 	.word	0x7ca00000
 801b754:	7fefffff 	.word	0x7fefffff
 801b758:	f018 0310 	ands.w	r3, r8, #16
 801b75c:	bf18      	it	ne
 801b75e:	236a      	movne	r3, #106	; 0x6a
 801b760:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801bb10 <_strtod_l+0x970>
 801b764:	9304      	str	r3, [sp, #16]
 801b766:	4650      	mov	r0, sl
 801b768:	4659      	mov	r1, fp
 801b76a:	2300      	movs	r3, #0
 801b76c:	f018 0f01 	tst.w	r8, #1
 801b770:	d004      	beq.n	801b77c <_strtod_l+0x5dc>
 801b772:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b776:	f7e4 ff57 	bl	8000628 <__aeabi_dmul>
 801b77a:	2301      	movs	r3, #1
 801b77c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b780:	f109 0908 	add.w	r9, r9, #8
 801b784:	d1f2      	bne.n	801b76c <_strtod_l+0x5cc>
 801b786:	b10b      	cbz	r3, 801b78c <_strtod_l+0x5ec>
 801b788:	4682      	mov	sl, r0
 801b78a:	468b      	mov	fp, r1
 801b78c:	9b04      	ldr	r3, [sp, #16]
 801b78e:	b1c3      	cbz	r3, 801b7c2 <_strtod_l+0x622>
 801b790:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b794:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b798:	2b00      	cmp	r3, #0
 801b79a:	4659      	mov	r1, fp
 801b79c:	dd11      	ble.n	801b7c2 <_strtod_l+0x622>
 801b79e:	2b1f      	cmp	r3, #31
 801b7a0:	f340 8124 	ble.w	801b9ec <_strtod_l+0x84c>
 801b7a4:	2b34      	cmp	r3, #52	; 0x34
 801b7a6:	bfde      	ittt	le
 801b7a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b7ac:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801b7b0:	fa03 f202 	lslle.w	r2, r3, r2
 801b7b4:	f04f 0a00 	mov.w	sl, #0
 801b7b8:	bfcc      	ite	gt
 801b7ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b7be:	ea02 0b01 	andle.w	fp, r2, r1
 801b7c2:	2200      	movs	r2, #0
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	4650      	mov	r0, sl
 801b7c8:	4659      	mov	r1, fp
 801b7ca:	f7e5 f995 	bl	8000af8 <__aeabi_dcmpeq>
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	d1a2      	bne.n	801b718 <_strtod_l+0x578>
 801b7d2:	9b07      	ldr	r3, [sp, #28]
 801b7d4:	9300      	str	r3, [sp, #0]
 801b7d6:	9908      	ldr	r1, [sp, #32]
 801b7d8:	462b      	mov	r3, r5
 801b7da:	463a      	mov	r2, r7
 801b7dc:	4620      	mov	r0, r4
 801b7de:	f002 f99b 	bl	801db18 <__s2b>
 801b7e2:	9007      	str	r0, [sp, #28]
 801b7e4:	2800      	cmp	r0, #0
 801b7e6:	f43f af1f 	beq.w	801b628 <_strtod_l+0x488>
 801b7ea:	9b05      	ldr	r3, [sp, #20]
 801b7ec:	1b9e      	subs	r6, r3, r6
 801b7ee:	9b06      	ldr	r3, [sp, #24]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	bfb4      	ite	lt
 801b7f4:	4633      	movlt	r3, r6
 801b7f6:	2300      	movge	r3, #0
 801b7f8:	930c      	str	r3, [sp, #48]	; 0x30
 801b7fa:	9b06      	ldr	r3, [sp, #24]
 801b7fc:	2500      	movs	r5, #0
 801b7fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b802:	9312      	str	r3, [sp, #72]	; 0x48
 801b804:	462e      	mov	r6, r5
 801b806:	9b07      	ldr	r3, [sp, #28]
 801b808:	4620      	mov	r0, r4
 801b80a:	6859      	ldr	r1, [r3, #4]
 801b80c:	f002 f8dc 	bl	801d9c8 <_Balloc>
 801b810:	9005      	str	r0, [sp, #20]
 801b812:	2800      	cmp	r0, #0
 801b814:	f43f af0c 	beq.w	801b630 <_strtod_l+0x490>
 801b818:	9b07      	ldr	r3, [sp, #28]
 801b81a:	691a      	ldr	r2, [r3, #16]
 801b81c:	3202      	adds	r2, #2
 801b81e:	f103 010c 	add.w	r1, r3, #12
 801b822:	0092      	lsls	r2, r2, #2
 801b824:	300c      	adds	r0, #12
 801b826:	f7fe faa5 	bl	8019d74 <memcpy>
 801b82a:	ec4b ab10 	vmov	d0, sl, fp
 801b82e:	aa1a      	add	r2, sp, #104	; 0x68
 801b830:	a919      	add	r1, sp, #100	; 0x64
 801b832:	4620      	mov	r0, r4
 801b834:	f002 fcb6 	bl	801e1a4 <__d2b>
 801b838:	ec4b ab18 	vmov	d8, sl, fp
 801b83c:	9018      	str	r0, [sp, #96]	; 0x60
 801b83e:	2800      	cmp	r0, #0
 801b840:	f43f aef6 	beq.w	801b630 <_strtod_l+0x490>
 801b844:	2101      	movs	r1, #1
 801b846:	4620      	mov	r0, r4
 801b848:	f002 fa00 	bl	801dc4c <__i2b>
 801b84c:	4606      	mov	r6, r0
 801b84e:	2800      	cmp	r0, #0
 801b850:	f43f aeee 	beq.w	801b630 <_strtod_l+0x490>
 801b854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b856:	9904      	ldr	r1, [sp, #16]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	bfab      	itete	ge
 801b85c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801b85e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801b860:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b862:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801b866:	bfac      	ite	ge
 801b868:	eb03 0902 	addge.w	r9, r3, r2
 801b86c:	1ad7      	sublt	r7, r2, r3
 801b86e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b870:	eba3 0801 	sub.w	r8, r3, r1
 801b874:	4490      	add	r8, r2
 801b876:	4ba1      	ldr	r3, [pc, #644]	; (801bafc <_strtod_l+0x95c>)
 801b878:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b87c:	4598      	cmp	r8, r3
 801b87e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b882:	f280 80c7 	bge.w	801ba14 <_strtod_l+0x874>
 801b886:	eba3 0308 	sub.w	r3, r3, r8
 801b88a:	2b1f      	cmp	r3, #31
 801b88c:	eba2 0203 	sub.w	r2, r2, r3
 801b890:	f04f 0101 	mov.w	r1, #1
 801b894:	f300 80b1 	bgt.w	801b9fa <_strtod_l+0x85a>
 801b898:	fa01 f303 	lsl.w	r3, r1, r3
 801b89c:	930d      	str	r3, [sp, #52]	; 0x34
 801b89e:	2300      	movs	r3, #0
 801b8a0:	9308      	str	r3, [sp, #32]
 801b8a2:	eb09 0802 	add.w	r8, r9, r2
 801b8a6:	9b04      	ldr	r3, [sp, #16]
 801b8a8:	45c1      	cmp	r9, r8
 801b8aa:	4417      	add	r7, r2
 801b8ac:	441f      	add	r7, r3
 801b8ae:	464b      	mov	r3, r9
 801b8b0:	bfa8      	it	ge
 801b8b2:	4643      	movge	r3, r8
 801b8b4:	42bb      	cmp	r3, r7
 801b8b6:	bfa8      	it	ge
 801b8b8:	463b      	movge	r3, r7
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	bfc2      	ittt	gt
 801b8be:	eba8 0803 	subgt.w	r8, r8, r3
 801b8c2:	1aff      	subgt	r7, r7, r3
 801b8c4:	eba9 0903 	subgt.w	r9, r9, r3
 801b8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	dd17      	ble.n	801b8fe <_strtod_l+0x75e>
 801b8ce:	4631      	mov	r1, r6
 801b8d0:	461a      	mov	r2, r3
 801b8d2:	4620      	mov	r0, r4
 801b8d4:	f002 fa7a 	bl	801ddcc <__pow5mult>
 801b8d8:	4606      	mov	r6, r0
 801b8da:	2800      	cmp	r0, #0
 801b8dc:	f43f aea8 	beq.w	801b630 <_strtod_l+0x490>
 801b8e0:	4601      	mov	r1, r0
 801b8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	f002 f9c7 	bl	801dc78 <__multiply>
 801b8ea:	900b      	str	r0, [sp, #44]	; 0x2c
 801b8ec:	2800      	cmp	r0, #0
 801b8ee:	f43f ae9f 	beq.w	801b630 <_strtod_l+0x490>
 801b8f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b8f4:	4620      	mov	r0, r4
 801b8f6:	f002 f8a7 	bl	801da48 <_Bfree>
 801b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8fc:	9318      	str	r3, [sp, #96]	; 0x60
 801b8fe:	f1b8 0f00 	cmp.w	r8, #0
 801b902:	f300 808c 	bgt.w	801ba1e <_strtod_l+0x87e>
 801b906:	9b06      	ldr	r3, [sp, #24]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	dd08      	ble.n	801b91e <_strtod_l+0x77e>
 801b90c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b90e:	9905      	ldr	r1, [sp, #20]
 801b910:	4620      	mov	r0, r4
 801b912:	f002 fa5b 	bl	801ddcc <__pow5mult>
 801b916:	9005      	str	r0, [sp, #20]
 801b918:	2800      	cmp	r0, #0
 801b91a:	f43f ae89 	beq.w	801b630 <_strtod_l+0x490>
 801b91e:	2f00      	cmp	r7, #0
 801b920:	dd08      	ble.n	801b934 <_strtod_l+0x794>
 801b922:	9905      	ldr	r1, [sp, #20]
 801b924:	463a      	mov	r2, r7
 801b926:	4620      	mov	r0, r4
 801b928:	f002 faaa 	bl	801de80 <__lshift>
 801b92c:	9005      	str	r0, [sp, #20]
 801b92e:	2800      	cmp	r0, #0
 801b930:	f43f ae7e 	beq.w	801b630 <_strtod_l+0x490>
 801b934:	f1b9 0f00 	cmp.w	r9, #0
 801b938:	dd08      	ble.n	801b94c <_strtod_l+0x7ac>
 801b93a:	4631      	mov	r1, r6
 801b93c:	464a      	mov	r2, r9
 801b93e:	4620      	mov	r0, r4
 801b940:	f002 fa9e 	bl	801de80 <__lshift>
 801b944:	4606      	mov	r6, r0
 801b946:	2800      	cmp	r0, #0
 801b948:	f43f ae72 	beq.w	801b630 <_strtod_l+0x490>
 801b94c:	9a05      	ldr	r2, [sp, #20]
 801b94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b950:	4620      	mov	r0, r4
 801b952:	f002 fb21 	bl	801df98 <__mdiff>
 801b956:	4605      	mov	r5, r0
 801b958:	2800      	cmp	r0, #0
 801b95a:	f43f ae69 	beq.w	801b630 <_strtod_l+0x490>
 801b95e:	68c3      	ldr	r3, [r0, #12]
 801b960:	930b      	str	r3, [sp, #44]	; 0x2c
 801b962:	2300      	movs	r3, #0
 801b964:	60c3      	str	r3, [r0, #12]
 801b966:	4631      	mov	r1, r6
 801b968:	f002 fafa 	bl	801df60 <__mcmp>
 801b96c:	2800      	cmp	r0, #0
 801b96e:	da60      	bge.n	801ba32 <_strtod_l+0x892>
 801b970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b972:	ea53 030a 	orrs.w	r3, r3, sl
 801b976:	f040 8082 	bne.w	801ba7e <_strtod_l+0x8de>
 801b97a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d17d      	bne.n	801ba7e <_strtod_l+0x8de>
 801b982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b986:	0d1b      	lsrs	r3, r3, #20
 801b988:	051b      	lsls	r3, r3, #20
 801b98a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b98e:	d976      	bls.n	801ba7e <_strtod_l+0x8de>
 801b990:	696b      	ldr	r3, [r5, #20]
 801b992:	b913      	cbnz	r3, 801b99a <_strtod_l+0x7fa>
 801b994:	692b      	ldr	r3, [r5, #16]
 801b996:	2b01      	cmp	r3, #1
 801b998:	dd71      	ble.n	801ba7e <_strtod_l+0x8de>
 801b99a:	4629      	mov	r1, r5
 801b99c:	2201      	movs	r2, #1
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f002 fa6e 	bl	801de80 <__lshift>
 801b9a4:	4631      	mov	r1, r6
 801b9a6:	4605      	mov	r5, r0
 801b9a8:	f002 fada 	bl	801df60 <__mcmp>
 801b9ac:	2800      	cmp	r0, #0
 801b9ae:	dd66      	ble.n	801ba7e <_strtod_l+0x8de>
 801b9b0:	9904      	ldr	r1, [sp, #16]
 801b9b2:	4a53      	ldr	r2, [pc, #332]	; (801bb00 <_strtod_l+0x960>)
 801b9b4:	465b      	mov	r3, fp
 801b9b6:	2900      	cmp	r1, #0
 801b9b8:	f000 8081 	beq.w	801babe <_strtod_l+0x91e>
 801b9bc:	ea02 010b 	and.w	r1, r2, fp
 801b9c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b9c4:	dc7b      	bgt.n	801babe <_strtod_l+0x91e>
 801b9c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b9ca:	f77f aea9 	ble.w	801b720 <_strtod_l+0x580>
 801b9ce:	4b4d      	ldr	r3, [pc, #308]	; (801bb04 <_strtod_l+0x964>)
 801b9d0:	4650      	mov	r0, sl
 801b9d2:	4659      	mov	r1, fp
 801b9d4:	2200      	movs	r2, #0
 801b9d6:	f7e4 fe27 	bl	8000628 <__aeabi_dmul>
 801b9da:	460b      	mov	r3, r1
 801b9dc:	4303      	orrs	r3, r0
 801b9de:	bf08      	it	eq
 801b9e0:	2322      	moveq	r3, #34	; 0x22
 801b9e2:	4682      	mov	sl, r0
 801b9e4:	468b      	mov	fp, r1
 801b9e6:	bf08      	it	eq
 801b9e8:	6023      	streq	r3, [r4, #0]
 801b9ea:	e62b      	b.n	801b644 <_strtod_l+0x4a4>
 801b9ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 801b9f4:	ea03 0a0a 	and.w	sl, r3, sl
 801b9f8:	e6e3      	b.n	801b7c2 <_strtod_l+0x622>
 801b9fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b9fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ba02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ba06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ba0a:	fa01 f308 	lsl.w	r3, r1, r8
 801ba0e:	9308      	str	r3, [sp, #32]
 801ba10:	910d      	str	r1, [sp, #52]	; 0x34
 801ba12:	e746      	b.n	801b8a2 <_strtod_l+0x702>
 801ba14:	2300      	movs	r3, #0
 801ba16:	9308      	str	r3, [sp, #32]
 801ba18:	2301      	movs	r3, #1
 801ba1a:	930d      	str	r3, [sp, #52]	; 0x34
 801ba1c:	e741      	b.n	801b8a2 <_strtod_l+0x702>
 801ba1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ba20:	4642      	mov	r2, r8
 801ba22:	4620      	mov	r0, r4
 801ba24:	f002 fa2c 	bl	801de80 <__lshift>
 801ba28:	9018      	str	r0, [sp, #96]	; 0x60
 801ba2a:	2800      	cmp	r0, #0
 801ba2c:	f47f af6b 	bne.w	801b906 <_strtod_l+0x766>
 801ba30:	e5fe      	b.n	801b630 <_strtod_l+0x490>
 801ba32:	465f      	mov	r7, fp
 801ba34:	d16e      	bne.n	801bb14 <_strtod_l+0x974>
 801ba36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ba38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ba3c:	b342      	cbz	r2, 801ba90 <_strtod_l+0x8f0>
 801ba3e:	4a32      	ldr	r2, [pc, #200]	; (801bb08 <_strtod_l+0x968>)
 801ba40:	4293      	cmp	r3, r2
 801ba42:	d128      	bne.n	801ba96 <_strtod_l+0x8f6>
 801ba44:	9b04      	ldr	r3, [sp, #16]
 801ba46:	4651      	mov	r1, sl
 801ba48:	b1eb      	cbz	r3, 801ba86 <_strtod_l+0x8e6>
 801ba4a:	4b2d      	ldr	r3, [pc, #180]	; (801bb00 <_strtod_l+0x960>)
 801ba4c:	403b      	ands	r3, r7
 801ba4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ba52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ba56:	d819      	bhi.n	801ba8c <_strtod_l+0x8ec>
 801ba58:	0d1b      	lsrs	r3, r3, #20
 801ba5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ba5e:	fa02 f303 	lsl.w	r3, r2, r3
 801ba62:	4299      	cmp	r1, r3
 801ba64:	d117      	bne.n	801ba96 <_strtod_l+0x8f6>
 801ba66:	4b29      	ldr	r3, [pc, #164]	; (801bb0c <_strtod_l+0x96c>)
 801ba68:	429f      	cmp	r7, r3
 801ba6a:	d102      	bne.n	801ba72 <_strtod_l+0x8d2>
 801ba6c:	3101      	adds	r1, #1
 801ba6e:	f43f addf 	beq.w	801b630 <_strtod_l+0x490>
 801ba72:	4b23      	ldr	r3, [pc, #140]	; (801bb00 <_strtod_l+0x960>)
 801ba74:	403b      	ands	r3, r7
 801ba76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ba7a:	f04f 0a00 	mov.w	sl, #0
 801ba7e:	9b04      	ldr	r3, [sp, #16]
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d1a4      	bne.n	801b9ce <_strtod_l+0x82e>
 801ba84:	e5de      	b.n	801b644 <_strtod_l+0x4a4>
 801ba86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ba8a:	e7ea      	b.n	801ba62 <_strtod_l+0x8c2>
 801ba8c:	4613      	mov	r3, r2
 801ba8e:	e7e8      	b.n	801ba62 <_strtod_l+0x8c2>
 801ba90:	ea53 030a 	orrs.w	r3, r3, sl
 801ba94:	d08c      	beq.n	801b9b0 <_strtod_l+0x810>
 801ba96:	9b08      	ldr	r3, [sp, #32]
 801ba98:	b1db      	cbz	r3, 801bad2 <_strtod_l+0x932>
 801ba9a:	423b      	tst	r3, r7
 801ba9c:	d0ef      	beq.n	801ba7e <_strtod_l+0x8de>
 801ba9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801baa0:	9a04      	ldr	r2, [sp, #16]
 801baa2:	4650      	mov	r0, sl
 801baa4:	4659      	mov	r1, fp
 801baa6:	b1c3      	cbz	r3, 801bada <_strtod_l+0x93a>
 801baa8:	f7ff fb5c 	bl	801b164 <sulp>
 801baac:	4602      	mov	r2, r0
 801baae:	460b      	mov	r3, r1
 801bab0:	ec51 0b18 	vmov	r0, r1, d8
 801bab4:	f7e4 fc02 	bl	80002bc <__adddf3>
 801bab8:	4682      	mov	sl, r0
 801baba:	468b      	mov	fp, r1
 801babc:	e7df      	b.n	801ba7e <_strtod_l+0x8de>
 801babe:	4013      	ands	r3, r2
 801bac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bac4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bac8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801bacc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801bad0:	e7d5      	b.n	801ba7e <_strtod_l+0x8de>
 801bad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bad4:	ea13 0f0a 	tst.w	r3, sl
 801bad8:	e7e0      	b.n	801ba9c <_strtod_l+0x8fc>
 801bada:	f7ff fb43 	bl	801b164 <sulp>
 801bade:	4602      	mov	r2, r0
 801bae0:	460b      	mov	r3, r1
 801bae2:	ec51 0b18 	vmov	r0, r1, d8
 801bae6:	f7e4 fbe7 	bl	80002b8 <__aeabi_dsub>
 801baea:	2200      	movs	r2, #0
 801baec:	2300      	movs	r3, #0
 801baee:	4682      	mov	sl, r0
 801baf0:	468b      	mov	fp, r1
 801baf2:	f7e5 f801 	bl	8000af8 <__aeabi_dcmpeq>
 801baf6:	2800      	cmp	r0, #0
 801baf8:	d0c1      	beq.n	801ba7e <_strtod_l+0x8de>
 801bafa:	e611      	b.n	801b720 <_strtod_l+0x580>
 801bafc:	fffffc02 	.word	0xfffffc02
 801bb00:	7ff00000 	.word	0x7ff00000
 801bb04:	39500000 	.word	0x39500000
 801bb08:	000fffff 	.word	0x000fffff
 801bb0c:	7fefffff 	.word	0x7fefffff
 801bb10:	0801f7e0 	.word	0x0801f7e0
 801bb14:	4631      	mov	r1, r6
 801bb16:	4628      	mov	r0, r5
 801bb18:	f002 fba0 	bl	801e25c <__ratio>
 801bb1c:	ec59 8b10 	vmov	r8, r9, d0
 801bb20:	ee10 0a10 	vmov	r0, s0
 801bb24:	2200      	movs	r2, #0
 801bb26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bb2a:	4649      	mov	r1, r9
 801bb2c:	f7e4 fff8 	bl	8000b20 <__aeabi_dcmple>
 801bb30:	2800      	cmp	r0, #0
 801bb32:	d07a      	beq.n	801bc2a <_strtod_l+0xa8a>
 801bb34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d04a      	beq.n	801bbd0 <_strtod_l+0xa30>
 801bb3a:	4b95      	ldr	r3, [pc, #596]	; (801bd90 <_strtod_l+0xbf0>)
 801bb3c:	2200      	movs	r2, #0
 801bb3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bb42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801bd90 <_strtod_l+0xbf0>
 801bb46:	f04f 0800 	mov.w	r8, #0
 801bb4a:	4b92      	ldr	r3, [pc, #584]	; (801bd94 <_strtod_l+0xbf4>)
 801bb4c:	403b      	ands	r3, r7
 801bb4e:	930d      	str	r3, [sp, #52]	; 0x34
 801bb50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb52:	4b91      	ldr	r3, [pc, #580]	; (801bd98 <_strtod_l+0xbf8>)
 801bb54:	429a      	cmp	r2, r3
 801bb56:	f040 80b0 	bne.w	801bcba <_strtod_l+0xb1a>
 801bb5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bb5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801bb62:	ec4b ab10 	vmov	d0, sl, fp
 801bb66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bb6a:	f002 fa9f 	bl	801e0ac <__ulp>
 801bb6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bb72:	ec53 2b10 	vmov	r2, r3, d0
 801bb76:	f7e4 fd57 	bl	8000628 <__aeabi_dmul>
 801bb7a:	4652      	mov	r2, sl
 801bb7c:	465b      	mov	r3, fp
 801bb7e:	f7e4 fb9d 	bl	80002bc <__adddf3>
 801bb82:	460b      	mov	r3, r1
 801bb84:	4983      	ldr	r1, [pc, #524]	; (801bd94 <_strtod_l+0xbf4>)
 801bb86:	4a85      	ldr	r2, [pc, #532]	; (801bd9c <_strtod_l+0xbfc>)
 801bb88:	4019      	ands	r1, r3
 801bb8a:	4291      	cmp	r1, r2
 801bb8c:	4682      	mov	sl, r0
 801bb8e:	d960      	bls.n	801bc52 <_strtod_l+0xab2>
 801bb90:	ee18 3a90 	vmov	r3, s17
 801bb94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bb98:	4293      	cmp	r3, r2
 801bb9a:	d104      	bne.n	801bba6 <_strtod_l+0xa06>
 801bb9c:	ee18 3a10 	vmov	r3, s16
 801bba0:	3301      	adds	r3, #1
 801bba2:	f43f ad45 	beq.w	801b630 <_strtod_l+0x490>
 801bba6:	f8df b200 	ldr.w	fp, [pc, #512]	; 801bda8 <_strtod_l+0xc08>
 801bbaa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801bbae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bbb0:	4620      	mov	r0, r4
 801bbb2:	f001 ff49 	bl	801da48 <_Bfree>
 801bbb6:	9905      	ldr	r1, [sp, #20]
 801bbb8:	4620      	mov	r0, r4
 801bbba:	f001 ff45 	bl	801da48 <_Bfree>
 801bbbe:	4631      	mov	r1, r6
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f001 ff41 	bl	801da48 <_Bfree>
 801bbc6:	4629      	mov	r1, r5
 801bbc8:	4620      	mov	r0, r4
 801bbca:	f001 ff3d 	bl	801da48 <_Bfree>
 801bbce:	e61a      	b.n	801b806 <_strtod_l+0x666>
 801bbd0:	f1ba 0f00 	cmp.w	sl, #0
 801bbd4:	d11b      	bne.n	801bc0e <_strtod_l+0xa6e>
 801bbd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bbda:	b9f3      	cbnz	r3, 801bc1a <_strtod_l+0xa7a>
 801bbdc:	4b6c      	ldr	r3, [pc, #432]	; (801bd90 <_strtod_l+0xbf0>)
 801bbde:	2200      	movs	r2, #0
 801bbe0:	4640      	mov	r0, r8
 801bbe2:	4649      	mov	r1, r9
 801bbe4:	f7e4 ff92 	bl	8000b0c <__aeabi_dcmplt>
 801bbe8:	b9d0      	cbnz	r0, 801bc20 <_strtod_l+0xa80>
 801bbea:	4640      	mov	r0, r8
 801bbec:	4649      	mov	r1, r9
 801bbee:	4b6c      	ldr	r3, [pc, #432]	; (801bda0 <_strtod_l+0xc00>)
 801bbf0:	2200      	movs	r2, #0
 801bbf2:	f7e4 fd19 	bl	8000628 <__aeabi_dmul>
 801bbf6:	4680      	mov	r8, r0
 801bbf8:	4689      	mov	r9, r1
 801bbfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801bbfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801bc02:	9315      	str	r3, [sp, #84]	; 0x54
 801bc04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bc08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bc0c:	e79d      	b.n	801bb4a <_strtod_l+0x9aa>
 801bc0e:	f1ba 0f01 	cmp.w	sl, #1
 801bc12:	d102      	bne.n	801bc1a <_strtod_l+0xa7a>
 801bc14:	2f00      	cmp	r7, #0
 801bc16:	f43f ad83 	beq.w	801b720 <_strtod_l+0x580>
 801bc1a:	4b62      	ldr	r3, [pc, #392]	; (801bda4 <_strtod_l+0xc04>)
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	e78e      	b.n	801bb3e <_strtod_l+0x99e>
 801bc20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801bda0 <_strtod_l+0xc00>
 801bc24:	f04f 0800 	mov.w	r8, #0
 801bc28:	e7e7      	b.n	801bbfa <_strtod_l+0xa5a>
 801bc2a:	4b5d      	ldr	r3, [pc, #372]	; (801bda0 <_strtod_l+0xc00>)
 801bc2c:	4640      	mov	r0, r8
 801bc2e:	4649      	mov	r1, r9
 801bc30:	2200      	movs	r2, #0
 801bc32:	f7e4 fcf9 	bl	8000628 <__aeabi_dmul>
 801bc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc38:	4680      	mov	r8, r0
 801bc3a:	4689      	mov	r9, r1
 801bc3c:	b933      	cbnz	r3, 801bc4c <_strtod_l+0xaac>
 801bc3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc42:	900e      	str	r0, [sp, #56]	; 0x38
 801bc44:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bc4a:	e7dd      	b.n	801bc08 <_strtod_l+0xa68>
 801bc4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801bc50:	e7f9      	b.n	801bc46 <_strtod_l+0xaa6>
 801bc52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801bc56:	9b04      	ldr	r3, [sp, #16]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d1a8      	bne.n	801bbae <_strtod_l+0xa0e>
 801bc5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bc60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc62:	0d1b      	lsrs	r3, r3, #20
 801bc64:	051b      	lsls	r3, r3, #20
 801bc66:	429a      	cmp	r2, r3
 801bc68:	d1a1      	bne.n	801bbae <_strtod_l+0xa0e>
 801bc6a:	4640      	mov	r0, r8
 801bc6c:	4649      	mov	r1, r9
 801bc6e:	f7e5 f88b 	bl	8000d88 <__aeabi_d2lz>
 801bc72:	f7e4 fcab 	bl	80005cc <__aeabi_l2d>
 801bc76:	4602      	mov	r2, r0
 801bc78:	460b      	mov	r3, r1
 801bc7a:	4640      	mov	r0, r8
 801bc7c:	4649      	mov	r1, r9
 801bc7e:	f7e4 fb1b 	bl	80002b8 <__aeabi_dsub>
 801bc82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bc84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bc88:	ea43 030a 	orr.w	r3, r3, sl
 801bc8c:	4313      	orrs	r3, r2
 801bc8e:	4680      	mov	r8, r0
 801bc90:	4689      	mov	r9, r1
 801bc92:	d055      	beq.n	801bd40 <_strtod_l+0xba0>
 801bc94:	a336      	add	r3, pc, #216	; (adr r3, 801bd70 <_strtod_l+0xbd0>)
 801bc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc9a:	f7e4 ff37 	bl	8000b0c <__aeabi_dcmplt>
 801bc9e:	2800      	cmp	r0, #0
 801bca0:	f47f acd0 	bne.w	801b644 <_strtod_l+0x4a4>
 801bca4:	a334      	add	r3, pc, #208	; (adr r3, 801bd78 <_strtod_l+0xbd8>)
 801bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcaa:	4640      	mov	r0, r8
 801bcac:	4649      	mov	r1, r9
 801bcae:	f7e4 ff4b 	bl	8000b48 <__aeabi_dcmpgt>
 801bcb2:	2800      	cmp	r0, #0
 801bcb4:	f43f af7b 	beq.w	801bbae <_strtod_l+0xa0e>
 801bcb8:	e4c4      	b.n	801b644 <_strtod_l+0x4a4>
 801bcba:	9b04      	ldr	r3, [sp, #16]
 801bcbc:	b333      	cbz	r3, 801bd0c <_strtod_l+0xb6c>
 801bcbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bcc4:	d822      	bhi.n	801bd0c <_strtod_l+0xb6c>
 801bcc6:	a32e      	add	r3, pc, #184	; (adr r3, 801bd80 <_strtod_l+0xbe0>)
 801bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bccc:	4640      	mov	r0, r8
 801bcce:	4649      	mov	r1, r9
 801bcd0:	f7e4 ff26 	bl	8000b20 <__aeabi_dcmple>
 801bcd4:	b1a0      	cbz	r0, 801bd00 <_strtod_l+0xb60>
 801bcd6:	4649      	mov	r1, r9
 801bcd8:	4640      	mov	r0, r8
 801bcda:	f7e4 ff7d 	bl	8000bd8 <__aeabi_d2uiz>
 801bcde:	2801      	cmp	r0, #1
 801bce0:	bf38      	it	cc
 801bce2:	2001      	movcc	r0, #1
 801bce4:	f7e4 fc26 	bl	8000534 <__aeabi_ui2d>
 801bce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcea:	4680      	mov	r8, r0
 801bcec:	4689      	mov	r9, r1
 801bcee:	bb23      	cbnz	r3, 801bd3a <_strtod_l+0xb9a>
 801bcf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bcf4:	9010      	str	r0, [sp, #64]	; 0x40
 801bcf6:	9311      	str	r3, [sp, #68]	; 0x44
 801bcf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bcfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bd08:	1a9b      	subs	r3, r3, r2
 801bd0a:	9309      	str	r3, [sp, #36]	; 0x24
 801bd0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd10:	eeb0 0a48 	vmov.f32	s0, s16
 801bd14:	eef0 0a68 	vmov.f32	s1, s17
 801bd18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bd1c:	f002 f9c6 	bl	801e0ac <__ulp>
 801bd20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd24:	ec53 2b10 	vmov	r2, r3, d0
 801bd28:	f7e4 fc7e 	bl	8000628 <__aeabi_dmul>
 801bd2c:	ec53 2b18 	vmov	r2, r3, d8
 801bd30:	f7e4 fac4 	bl	80002bc <__adddf3>
 801bd34:	4682      	mov	sl, r0
 801bd36:	468b      	mov	fp, r1
 801bd38:	e78d      	b.n	801bc56 <_strtod_l+0xab6>
 801bd3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801bd3e:	e7db      	b.n	801bcf8 <_strtod_l+0xb58>
 801bd40:	a311      	add	r3, pc, #68	; (adr r3, 801bd88 <_strtod_l+0xbe8>)
 801bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd46:	f7e4 fee1 	bl	8000b0c <__aeabi_dcmplt>
 801bd4a:	e7b2      	b.n	801bcb2 <_strtod_l+0xb12>
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	930a      	str	r3, [sp, #40]	; 0x28
 801bd50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bd52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd54:	6013      	str	r3, [r2, #0]
 801bd56:	f7ff ba6b 	b.w	801b230 <_strtod_l+0x90>
 801bd5a:	2a65      	cmp	r2, #101	; 0x65
 801bd5c:	f43f ab5f 	beq.w	801b41e <_strtod_l+0x27e>
 801bd60:	2a45      	cmp	r2, #69	; 0x45
 801bd62:	f43f ab5c 	beq.w	801b41e <_strtod_l+0x27e>
 801bd66:	2301      	movs	r3, #1
 801bd68:	f7ff bb94 	b.w	801b494 <_strtod_l+0x2f4>
 801bd6c:	f3af 8000 	nop.w
 801bd70:	94a03595 	.word	0x94a03595
 801bd74:	3fdfffff 	.word	0x3fdfffff
 801bd78:	35afe535 	.word	0x35afe535
 801bd7c:	3fe00000 	.word	0x3fe00000
 801bd80:	ffc00000 	.word	0xffc00000
 801bd84:	41dfffff 	.word	0x41dfffff
 801bd88:	94a03595 	.word	0x94a03595
 801bd8c:	3fcfffff 	.word	0x3fcfffff
 801bd90:	3ff00000 	.word	0x3ff00000
 801bd94:	7ff00000 	.word	0x7ff00000
 801bd98:	7fe00000 	.word	0x7fe00000
 801bd9c:	7c9fffff 	.word	0x7c9fffff
 801bda0:	3fe00000 	.word	0x3fe00000
 801bda4:	bff00000 	.word	0xbff00000
 801bda8:	7fefffff 	.word	0x7fefffff

0801bdac <_strtod_r>:
 801bdac:	4b01      	ldr	r3, [pc, #4]	; (801bdb4 <_strtod_r+0x8>)
 801bdae:	f7ff b9f7 	b.w	801b1a0 <_strtod_l>
 801bdb2:	bf00      	nop
 801bdb4:	200000f0 	.word	0x200000f0

0801bdb8 <strtod>:
 801bdb8:	460a      	mov	r2, r1
 801bdba:	4601      	mov	r1, r0
 801bdbc:	4802      	ldr	r0, [pc, #8]	; (801bdc8 <strtod+0x10>)
 801bdbe:	4b03      	ldr	r3, [pc, #12]	; (801bdcc <strtod+0x14>)
 801bdc0:	6800      	ldr	r0, [r0, #0]
 801bdc2:	f7ff b9ed 	b.w	801b1a0 <_strtod_l>
 801bdc6:	bf00      	nop
 801bdc8:	20000088 	.word	0x20000088
 801bdcc:	200000f0 	.word	0x200000f0

0801bdd0 <strtok>:
 801bdd0:	4b16      	ldr	r3, [pc, #88]	; (801be2c <strtok+0x5c>)
 801bdd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bdd4:	681e      	ldr	r6, [r3, #0]
 801bdd6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801bdd8:	4605      	mov	r5, r0
 801bdda:	b9fc      	cbnz	r4, 801be1c <strtok+0x4c>
 801bddc:	2050      	movs	r0, #80	; 0x50
 801bdde:	9101      	str	r1, [sp, #4]
 801bde0:	f7fd ffb8 	bl	8019d54 <malloc>
 801bde4:	9901      	ldr	r1, [sp, #4]
 801bde6:	65b0      	str	r0, [r6, #88]	; 0x58
 801bde8:	4602      	mov	r2, r0
 801bdea:	b920      	cbnz	r0, 801bdf6 <strtok+0x26>
 801bdec:	4b10      	ldr	r3, [pc, #64]	; (801be30 <strtok+0x60>)
 801bdee:	4811      	ldr	r0, [pc, #68]	; (801be34 <strtok+0x64>)
 801bdf0:	2157      	movs	r1, #87	; 0x57
 801bdf2:	f000 fa55 	bl	801c2a0 <__assert_func>
 801bdf6:	e9c0 4400 	strd	r4, r4, [r0]
 801bdfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801bdfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801be02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801be06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801be0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801be0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801be12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801be16:	6184      	str	r4, [r0, #24]
 801be18:	7704      	strb	r4, [r0, #28]
 801be1a:	6244      	str	r4, [r0, #36]	; 0x24
 801be1c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801be1e:	2301      	movs	r3, #1
 801be20:	4628      	mov	r0, r5
 801be22:	b002      	add	sp, #8
 801be24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be28:	f000 b806 	b.w	801be38 <__strtok_r>
 801be2c:	20000088 	.word	0x20000088
 801be30:	0801f741 	.word	0x0801f741
 801be34:	0801f808 	.word	0x0801f808

0801be38 <__strtok_r>:
 801be38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be3a:	b908      	cbnz	r0, 801be40 <__strtok_r+0x8>
 801be3c:	6810      	ldr	r0, [r2, #0]
 801be3e:	b188      	cbz	r0, 801be64 <__strtok_r+0x2c>
 801be40:	4604      	mov	r4, r0
 801be42:	4620      	mov	r0, r4
 801be44:	f814 5b01 	ldrb.w	r5, [r4], #1
 801be48:	460f      	mov	r7, r1
 801be4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801be4e:	b91e      	cbnz	r6, 801be58 <__strtok_r+0x20>
 801be50:	b965      	cbnz	r5, 801be6c <__strtok_r+0x34>
 801be52:	6015      	str	r5, [r2, #0]
 801be54:	4628      	mov	r0, r5
 801be56:	e005      	b.n	801be64 <__strtok_r+0x2c>
 801be58:	42b5      	cmp	r5, r6
 801be5a:	d1f6      	bne.n	801be4a <__strtok_r+0x12>
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d1f0      	bne.n	801be42 <__strtok_r+0xa>
 801be60:	6014      	str	r4, [r2, #0]
 801be62:	7003      	strb	r3, [r0, #0]
 801be64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be66:	461c      	mov	r4, r3
 801be68:	e00c      	b.n	801be84 <__strtok_r+0x4c>
 801be6a:	b915      	cbnz	r5, 801be72 <__strtok_r+0x3a>
 801be6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801be70:	460e      	mov	r6, r1
 801be72:	f816 5b01 	ldrb.w	r5, [r6], #1
 801be76:	42ab      	cmp	r3, r5
 801be78:	d1f7      	bne.n	801be6a <__strtok_r+0x32>
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d0f3      	beq.n	801be66 <__strtok_r+0x2e>
 801be7e:	2300      	movs	r3, #0
 801be80:	f804 3c01 	strb.w	r3, [r4, #-1]
 801be84:	6014      	str	r4, [r2, #0]
 801be86:	e7ed      	b.n	801be64 <__strtok_r+0x2c>

0801be88 <_strtol_l.constprop.0>:
 801be88:	2b01      	cmp	r3, #1
 801be8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be8e:	d001      	beq.n	801be94 <_strtol_l.constprop.0+0xc>
 801be90:	2b24      	cmp	r3, #36	; 0x24
 801be92:	d906      	bls.n	801bea2 <_strtol_l.constprop.0+0x1a>
 801be94:	f7fd fdf2 	bl	8019a7c <__errno>
 801be98:	2316      	movs	r3, #22
 801be9a:	6003      	str	r3, [r0, #0]
 801be9c:	2000      	movs	r0, #0
 801be9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bea2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801bf88 <_strtol_l.constprop.0+0x100>
 801bea6:	460d      	mov	r5, r1
 801bea8:	462e      	mov	r6, r5
 801beaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801beae:	f814 700c 	ldrb.w	r7, [r4, ip]
 801beb2:	f017 0708 	ands.w	r7, r7, #8
 801beb6:	d1f7      	bne.n	801bea8 <_strtol_l.constprop.0+0x20>
 801beb8:	2c2d      	cmp	r4, #45	; 0x2d
 801beba:	d132      	bne.n	801bf22 <_strtol_l.constprop.0+0x9a>
 801bebc:	782c      	ldrb	r4, [r5, #0]
 801bebe:	2701      	movs	r7, #1
 801bec0:	1cb5      	adds	r5, r6, #2
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d05b      	beq.n	801bf7e <_strtol_l.constprop.0+0xf6>
 801bec6:	2b10      	cmp	r3, #16
 801bec8:	d109      	bne.n	801bede <_strtol_l.constprop.0+0x56>
 801beca:	2c30      	cmp	r4, #48	; 0x30
 801becc:	d107      	bne.n	801bede <_strtol_l.constprop.0+0x56>
 801bece:	782c      	ldrb	r4, [r5, #0]
 801bed0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bed4:	2c58      	cmp	r4, #88	; 0x58
 801bed6:	d14d      	bne.n	801bf74 <_strtol_l.constprop.0+0xec>
 801bed8:	786c      	ldrb	r4, [r5, #1]
 801beda:	2310      	movs	r3, #16
 801bedc:	3502      	adds	r5, #2
 801bede:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801bee2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801bee6:	f04f 0c00 	mov.w	ip, #0
 801beea:	fbb8 f9f3 	udiv	r9, r8, r3
 801beee:	4666      	mov	r6, ip
 801bef0:	fb03 8a19 	mls	sl, r3, r9, r8
 801bef4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801bef8:	f1be 0f09 	cmp.w	lr, #9
 801befc:	d816      	bhi.n	801bf2c <_strtol_l.constprop.0+0xa4>
 801befe:	4674      	mov	r4, lr
 801bf00:	42a3      	cmp	r3, r4
 801bf02:	dd24      	ble.n	801bf4e <_strtol_l.constprop.0+0xc6>
 801bf04:	f1bc 0f00 	cmp.w	ip, #0
 801bf08:	db1e      	blt.n	801bf48 <_strtol_l.constprop.0+0xc0>
 801bf0a:	45b1      	cmp	r9, r6
 801bf0c:	d31c      	bcc.n	801bf48 <_strtol_l.constprop.0+0xc0>
 801bf0e:	d101      	bne.n	801bf14 <_strtol_l.constprop.0+0x8c>
 801bf10:	45a2      	cmp	sl, r4
 801bf12:	db19      	blt.n	801bf48 <_strtol_l.constprop.0+0xc0>
 801bf14:	fb06 4603 	mla	r6, r6, r3, r4
 801bf18:	f04f 0c01 	mov.w	ip, #1
 801bf1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf20:	e7e8      	b.n	801bef4 <_strtol_l.constprop.0+0x6c>
 801bf22:	2c2b      	cmp	r4, #43	; 0x2b
 801bf24:	bf04      	itt	eq
 801bf26:	782c      	ldrbeq	r4, [r5, #0]
 801bf28:	1cb5      	addeq	r5, r6, #2
 801bf2a:	e7ca      	b.n	801bec2 <_strtol_l.constprop.0+0x3a>
 801bf2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801bf30:	f1be 0f19 	cmp.w	lr, #25
 801bf34:	d801      	bhi.n	801bf3a <_strtol_l.constprop.0+0xb2>
 801bf36:	3c37      	subs	r4, #55	; 0x37
 801bf38:	e7e2      	b.n	801bf00 <_strtol_l.constprop.0+0x78>
 801bf3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801bf3e:	f1be 0f19 	cmp.w	lr, #25
 801bf42:	d804      	bhi.n	801bf4e <_strtol_l.constprop.0+0xc6>
 801bf44:	3c57      	subs	r4, #87	; 0x57
 801bf46:	e7db      	b.n	801bf00 <_strtol_l.constprop.0+0x78>
 801bf48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801bf4c:	e7e6      	b.n	801bf1c <_strtol_l.constprop.0+0x94>
 801bf4e:	f1bc 0f00 	cmp.w	ip, #0
 801bf52:	da05      	bge.n	801bf60 <_strtol_l.constprop.0+0xd8>
 801bf54:	2322      	movs	r3, #34	; 0x22
 801bf56:	6003      	str	r3, [r0, #0]
 801bf58:	4646      	mov	r6, r8
 801bf5a:	b942      	cbnz	r2, 801bf6e <_strtol_l.constprop.0+0xe6>
 801bf5c:	4630      	mov	r0, r6
 801bf5e:	e79e      	b.n	801be9e <_strtol_l.constprop.0+0x16>
 801bf60:	b107      	cbz	r7, 801bf64 <_strtol_l.constprop.0+0xdc>
 801bf62:	4276      	negs	r6, r6
 801bf64:	2a00      	cmp	r2, #0
 801bf66:	d0f9      	beq.n	801bf5c <_strtol_l.constprop.0+0xd4>
 801bf68:	f1bc 0f00 	cmp.w	ip, #0
 801bf6c:	d000      	beq.n	801bf70 <_strtol_l.constprop.0+0xe8>
 801bf6e:	1e69      	subs	r1, r5, #1
 801bf70:	6011      	str	r1, [r2, #0]
 801bf72:	e7f3      	b.n	801bf5c <_strtol_l.constprop.0+0xd4>
 801bf74:	2430      	movs	r4, #48	; 0x30
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d1b1      	bne.n	801bede <_strtol_l.constprop.0+0x56>
 801bf7a:	2308      	movs	r3, #8
 801bf7c:	e7af      	b.n	801bede <_strtol_l.constprop.0+0x56>
 801bf7e:	2c30      	cmp	r4, #48	; 0x30
 801bf80:	d0a5      	beq.n	801bece <_strtol_l.constprop.0+0x46>
 801bf82:	230a      	movs	r3, #10
 801bf84:	e7ab      	b.n	801bede <_strtol_l.constprop.0+0x56>
 801bf86:	bf00      	nop
 801bf88:	0801f5a1 	.word	0x0801f5a1

0801bf8c <_strtol_r>:
 801bf8c:	f7ff bf7c 	b.w	801be88 <_strtol_l.constprop.0>

0801bf90 <_strtoul_l.constprop.0>:
 801bf90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf94:	4f36      	ldr	r7, [pc, #216]	; (801c070 <_strtoul_l.constprop.0+0xe0>)
 801bf96:	4686      	mov	lr, r0
 801bf98:	460d      	mov	r5, r1
 801bf9a:	4628      	mov	r0, r5
 801bf9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bfa0:	5de6      	ldrb	r6, [r4, r7]
 801bfa2:	f016 0608 	ands.w	r6, r6, #8
 801bfa6:	d1f8      	bne.n	801bf9a <_strtoul_l.constprop.0+0xa>
 801bfa8:	2c2d      	cmp	r4, #45	; 0x2d
 801bfaa:	d12f      	bne.n	801c00c <_strtoul_l.constprop.0+0x7c>
 801bfac:	782c      	ldrb	r4, [r5, #0]
 801bfae:	2601      	movs	r6, #1
 801bfb0:	1c85      	adds	r5, r0, #2
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d057      	beq.n	801c066 <_strtoul_l.constprop.0+0xd6>
 801bfb6:	2b10      	cmp	r3, #16
 801bfb8:	d109      	bne.n	801bfce <_strtoul_l.constprop.0+0x3e>
 801bfba:	2c30      	cmp	r4, #48	; 0x30
 801bfbc:	d107      	bne.n	801bfce <_strtoul_l.constprop.0+0x3e>
 801bfbe:	7828      	ldrb	r0, [r5, #0]
 801bfc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bfc4:	2858      	cmp	r0, #88	; 0x58
 801bfc6:	d149      	bne.n	801c05c <_strtoul_l.constprop.0+0xcc>
 801bfc8:	786c      	ldrb	r4, [r5, #1]
 801bfca:	2310      	movs	r3, #16
 801bfcc:	3502      	adds	r5, #2
 801bfce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bfd2:	2700      	movs	r7, #0
 801bfd4:	fbb8 f8f3 	udiv	r8, r8, r3
 801bfd8:	fb03 f908 	mul.w	r9, r3, r8
 801bfdc:	ea6f 0909 	mvn.w	r9, r9
 801bfe0:	4638      	mov	r0, r7
 801bfe2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bfe6:	f1bc 0f09 	cmp.w	ip, #9
 801bfea:	d814      	bhi.n	801c016 <_strtoul_l.constprop.0+0x86>
 801bfec:	4664      	mov	r4, ip
 801bfee:	42a3      	cmp	r3, r4
 801bff0:	dd22      	ble.n	801c038 <_strtoul_l.constprop.0+0xa8>
 801bff2:	2f00      	cmp	r7, #0
 801bff4:	db1d      	blt.n	801c032 <_strtoul_l.constprop.0+0xa2>
 801bff6:	4580      	cmp	r8, r0
 801bff8:	d31b      	bcc.n	801c032 <_strtoul_l.constprop.0+0xa2>
 801bffa:	d101      	bne.n	801c000 <_strtoul_l.constprop.0+0x70>
 801bffc:	45a1      	cmp	r9, r4
 801bffe:	db18      	blt.n	801c032 <_strtoul_l.constprop.0+0xa2>
 801c000:	fb00 4003 	mla	r0, r0, r3, r4
 801c004:	2701      	movs	r7, #1
 801c006:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c00a:	e7ea      	b.n	801bfe2 <_strtoul_l.constprop.0+0x52>
 801c00c:	2c2b      	cmp	r4, #43	; 0x2b
 801c00e:	bf04      	itt	eq
 801c010:	782c      	ldrbeq	r4, [r5, #0]
 801c012:	1c85      	addeq	r5, r0, #2
 801c014:	e7cd      	b.n	801bfb2 <_strtoul_l.constprop.0+0x22>
 801c016:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c01a:	f1bc 0f19 	cmp.w	ip, #25
 801c01e:	d801      	bhi.n	801c024 <_strtoul_l.constprop.0+0x94>
 801c020:	3c37      	subs	r4, #55	; 0x37
 801c022:	e7e4      	b.n	801bfee <_strtoul_l.constprop.0+0x5e>
 801c024:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c028:	f1bc 0f19 	cmp.w	ip, #25
 801c02c:	d804      	bhi.n	801c038 <_strtoul_l.constprop.0+0xa8>
 801c02e:	3c57      	subs	r4, #87	; 0x57
 801c030:	e7dd      	b.n	801bfee <_strtoul_l.constprop.0+0x5e>
 801c032:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c036:	e7e6      	b.n	801c006 <_strtoul_l.constprop.0+0x76>
 801c038:	2f00      	cmp	r7, #0
 801c03a:	da07      	bge.n	801c04c <_strtoul_l.constprop.0+0xbc>
 801c03c:	2322      	movs	r3, #34	; 0x22
 801c03e:	f8ce 3000 	str.w	r3, [lr]
 801c042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c046:	b932      	cbnz	r2, 801c056 <_strtoul_l.constprop.0+0xc6>
 801c048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c04c:	b106      	cbz	r6, 801c050 <_strtoul_l.constprop.0+0xc0>
 801c04e:	4240      	negs	r0, r0
 801c050:	2a00      	cmp	r2, #0
 801c052:	d0f9      	beq.n	801c048 <_strtoul_l.constprop.0+0xb8>
 801c054:	b107      	cbz	r7, 801c058 <_strtoul_l.constprop.0+0xc8>
 801c056:	1e69      	subs	r1, r5, #1
 801c058:	6011      	str	r1, [r2, #0]
 801c05a:	e7f5      	b.n	801c048 <_strtoul_l.constprop.0+0xb8>
 801c05c:	2430      	movs	r4, #48	; 0x30
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d1b5      	bne.n	801bfce <_strtoul_l.constprop.0+0x3e>
 801c062:	2308      	movs	r3, #8
 801c064:	e7b3      	b.n	801bfce <_strtoul_l.constprop.0+0x3e>
 801c066:	2c30      	cmp	r4, #48	; 0x30
 801c068:	d0a9      	beq.n	801bfbe <_strtoul_l.constprop.0+0x2e>
 801c06a:	230a      	movs	r3, #10
 801c06c:	e7af      	b.n	801bfce <_strtoul_l.constprop.0+0x3e>
 801c06e:	bf00      	nop
 801c070:	0801f5a1 	.word	0x0801f5a1

0801c074 <strtoul>:
 801c074:	4613      	mov	r3, r2
 801c076:	460a      	mov	r2, r1
 801c078:	4601      	mov	r1, r0
 801c07a:	4802      	ldr	r0, [pc, #8]	; (801c084 <strtoul+0x10>)
 801c07c:	6800      	ldr	r0, [r0, #0]
 801c07e:	f7ff bf87 	b.w	801bf90 <_strtoul_l.constprop.0>
 801c082:	bf00      	nop
 801c084:	20000088 	.word	0x20000088

0801c088 <_vsniprintf_r>:
 801c088:	b530      	push	{r4, r5, lr}
 801c08a:	4614      	mov	r4, r2
 801c08c:	2c00      	cmp	r4, #0
 801c08e:	b09b      	sub	sp, #108	; 0x6c
 801c090:	4605      	mov	r5, r0
 801c092:	461a      	mov	r2, r3
 801c094:	da05      	bge.n	801c0a2 <_vsniprintf_r+0x1a>
 801c096:	238b      	movs	r3, #139	; 0x8b
 801c098:	6003      	str	r3, [r0, #0]
 801c09a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c09e:	b01b      	add	sp, #108	; 0x6c
 801c0a0:	bd30      	pop	{r4, r5, pc}
 801c0a2:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c0a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c0aa:	bf14      	ite	ne
 801c0ac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c0b0:	4623      	moveq	r3, r4
 801c0b2:	9302      	str	r3, [sp, #8]
 801c0b4:	9305      	str	r3, [sp, #20]
 801c0b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c0ba:	9100      	str	r1, [sp, #0]
 801c0bc:	9104      	str	r1, [sp, #16]
 801c0be:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c0c2:	4669      	mov	r1, sp
 801c0c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c0c6:	f002 f9cb 	bl	801e460 <_svfiprintf_r>
 801c0ca:	1c43      	adds	r3, r0, #1
 801c0cc:	bfbc      	itt	lt
 801c0ce:	238b      	movlt	r3, #139	; 0x8b
 801c0d0:	602b      	strlt	r3, [r5, #0]
 801c0d2:	2c00      	cmp	r4, #0
 801c0d4:	d0e3      	beq.n	801c09e <_vsniprintf_r+0x16>
 801c0d6:	9b00      	ldr	r3, [sp, #0]
 801c0d8:	2200      	movs	r2, #0
 801c0da:	701a      	strb	r2, [r3, #0]
 801c0dc:	e7df      	b.n	801c09e <_vsniprintf_r+0x16>
	...

0801c0e0 <vsniprintf>:
 801c0e0:	b507      	push	{r0, r1, r2, lr}
 801c0e2:	9300      	str	r3, [sp, #0]
 801c0e4:	4613      	mov	r3, r2
 801c0e6:	460a      	mov	r2, r1
 801c0e8:	4601      	mov	r1, r0
 801c0ea:	4803      	ldr	r0, [pc, #12]	; (801c0f8 <vsniprintf+0x18>)
 801c0ec:	6800      	ldr	r0, [r0, #0]
 801c0ee:	f7ff ffcb 	bl	801c088 <_vsniprintf_r>
 801c0f2:	b003      	add	sp, #12
 801c0f4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c0f8:	20000088 	.word	0x20000088

0801c0fc <__swbuf_r>:
 801c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0fe:	460e      	mov	r6, r1
 801c100:	4614      	mov	r4, r2
 801c102:	4605      	mov	r5, r0
 801c104:	b118      	cbz	r0, 801c10e <__swbuf_r+0x12>
 801c106:	6983      	ldr	r3, [r0, #24]
 801c108:	b90b      	cbnz	r3, 801c10e <__swbuf_r+0x12>
 801c10a:	f7fd fd15 	bl	8019b38 <__sinit>
 801c10e:	4b21      	ldr	r3, [pc, #132]	; (801c194 <__swbuf_r+0x98>)
 801c110:	429c      	cmp	r4, r3
 801c112:	d12b      	bne.n	801c16c <__swbuf_r+0x70>
 801c114:	686c      	ldr	r4, [r5, #4]
 801c116:	69a3      	ldr	r3, [r4, #24]
 801c118:	60a3      	str	r3, [r4, #8]
 801c11a:	89a3      	ldrh	r3, [r4, #12]
 801c11c:	071a      	lsls	r2, r3, #28
 801c11e:	d52f      	bpl.n	801c180 <__swbuf_r+0x84>
 801c120:	6923      	ldr	r3, [r4, #16]
 801c122:	b36b      	cbz	r3, 801c180 <__swbuf_r+0x84>
 801c124:	6923      	ldr	r3, [r4, #16]
 801c126:	6820      	ldr	r0, [r4, #0]
 801c128:	1ac0      	subs	r0, r0, r3
 801c12a:	6963      	ldr	r3, [r4, #20]
 801c12c:	b2f6      	uxtb	r6, r6
 801c12e:	4283      	cmp	r3, r0
 801c130:	4637      	mov	r7, r6
 801c132:	dc04      	bgt.n	801c13e <__swbuf_r+0x42>
 801c134:	4621      	mov	r1, r4
 801c136:	4628      	mov	r0, r5
 801c138:	f000 ffee 	bl	801d118 <_fflush_r>
 801c13c:	bb30      	cbnz	r0, 801c18c <__swbuf_r+0x90>
 801c13e:	68a3      	ldr	r3, [r4, #8]
 801c140:	3b01      	subs	r3, #1
 801c142:	60a3      	str	r3, [r4, #8]
 801c144:	6823      	ldr	r3, [r4, #0]
 801c146:	1c5a      	adds	r2, r3, #1
 801c148:	6022      	str	r2, [r4, #0]
 801c14a:	701e      	strb	r6, [r3, #0]
 801c14c:	6963      	ldr	r3, [r4, #20]
 801c14e:	3001      	adds	r0, #1
 801c150:	4283      	cmp	r3, r0
 801c152:	d004      	beq.n	801c15e <__swbuf_r+0x62>
 801c154:	89a3      	ldrh	r3, [r4, #12]
 801c156:	07db      	lsls	r3, r3, #31
 801c158:	d506      	bpl.n	801c168 <__swbuf_r+0x6c>
 801c15a:	2e0a      	cmp	r6, #10
 801c15c:	d104      	bne.n	801c168 <__swbuf_r+0x6c>
 801c15e:	4621      	mov	r1, r4
 801c160:	4628      	mov	r0, r5
 801c162:	f000 ffd9 	bl	801d118 <_fflush_r>
 801c166:	b988      	cbnz	r0, 801c18c <__swbuf_r+0x90>
 801c168:	4638      	mov	r0, r7
 801c16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c16c:	4b0a      	ldr	r3, [pc, #40]	; (801c198 <__swbuf_r+0x9c>)
 801c16e:	429c      	cmp	r4, r3
 801c170:	d101      	bne.n	801c176 <__swbuf_r+0x7a>
 801c172:	68ac      	ldr	r4, [r5, #8]
 801c174:	e7cf      	b.n	801c116 <__swbuf_r+0x1a>
 801c176:	4b09      	ldr	r3, [pc, #36]	; (801c19c <__swbuf_r+0xa0>)
 801c178:	429c      	cmp	r4, r3
 801c17a:	bf08      	it	eq
 801c17c:	68ec      	ldreq	r4, [r5, #12]
 801c17e:	e7ca      	b.n	801c116 <__swbuf_r+0x1a>
 801c180:	4621      	mov	r1, r4
 801c182:	4628      	mov	r0, r5
 801c184:	f000 f81e 	bl	801c1c4 <__swsetup_r>
 801c188:	2800      	cmp	r0, #0
 801c18a:	d0cb      	beq.n	801c124 <__swbuf_r+0x28>
 801c18c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c190:	e7ea      	b.n	801c168 <__swbuf_r+0x6c>
 801c192:	bf00      	nop
 801c194:	0801f6c4 	.word	0x0801f6c4
 801c198:	0801f6e4 	.word	0x0801f6e4
 801c19c:	0801f6a4 	.word	0x0801f6a4

0801c1a0 <_write_r>:
 801c1a0:	b538      	push	{r3, r4, r5, lr}
 801c1a2:	4d07      	ldr	r5, [pc, #28]	; (801c1c0 <_write_r+0x20>)
 801c1a4:	4604      	mov	r4, r0
 801c1a6:	4608      	mov	r0, r1
 801c1a8:	4611      	mov	r1, r2
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	602a      	str	r2, [r5, #0]
 801c1ae:	461a      	mov	r2, r3
 801c1b0:	f7e8 fae1 	bl	8004776 <_write>
 801c1b4:	1c43      	adds	r3, r0, #1
 801c1b6:	d102      	bne.n	801c1be <_write_r+0x1e>
 801c1b8:	682b      	ldr	r3, [r5, #0]
 801c1ba:	b103      	cbz	r3, 801c1be <_write_r+0x1e>
 801c1bc:	6023      	str	r3, [r4, #0]
 801c1be:	bd38      	pop	{r3, r4, r5, pc}
 801c1c0:	20009f28 	.word	0x20009f28

0801c1c4 <__swsetup_r>:
 801c1c4:	4b32      	ldr	r3, [pc, #200]	; (801c290 <__swsetup_r+0xcc>)
 801c1c6:	b570      	push	{r4, r5, r6, lr}
 801c1c8:	681d      	ldr	r5, [r3, #0]
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	460c      	mov	r4, r1
 801c1ce:	b125      	cbz	r5, 801c1da <__swsetup_r+0x16>
 801c1d0:	69ab      	ldr	r3, [r5, #24]
 801c1d2:	b913      	cbnz	r3, 801c1da <__swsetup_r+0x16>
 801c1d4:	4628      	mov	r0, r5
 801c1d6:	f7fd fcaf 	bl	8019b38 <__sinit>
 801c1da:	4b2e      	ldr	r3, [pc, #184]	; (801c294 <__swsetup_r+0xd0>)
 801c1dc:	429c      	cmp	r4, r3
 801c1de:	d10f      	bne.n	801c200 <__swsetup_r+0x3c>
 801c1e0:	686c      	ldr	r4, [r5, #4]
 801c1e2:	89a3      	ldrh	r3, [r4, #12]
 801c1e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c1e8:	0719      	lsls	r1, r3, #28
 801c1ea:	d42c      	bmi.n	801c246 <__swsetup_r+0x82>
 801c1ec:	06dd      	lsls	r5, r3, #27
 801c1ee:	d411      	bmi.n	801c214 <__swsetup_r+0x50>
 801c1f0:	2309      	movs	r3, #9
 801c1f2:	6033      	str	r3, [r6, #0]
 801c1f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c1f8:	81a3      	strh	r3, [r4, #12]
 801c1fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c1fe:	e03e      	b.n	801c27e <__swsetup_r+0xba>
 801c200:	4b25      	ldr	r3, [pc, #148]	; (801c298 <__swsetup_r+0xd4>)
 801c202:	429c      	cmp	r4, r3
 801c204:	d101      	bne.n	801c20a <__swsetup_r+0x46>
 801c206:	68ac      	ldr	r4, [r5, #8]
 801c208:	e7eb      	b.n	801c1e2 <__swsetup_r+0x1e>
 801c20a:	4b24      	ldr	r3, [pc, #144]	; (801c29c <__swsetup_r+0xd8>)
 801c20c:	429c      	cmp	r4, r3
 801c20e:	bf08      	it	eq
 801c210:	68ec      	ldreq	r4, [r5, #12]
 801c212:	e7e6      	b.n	801c1e2 <__swsetup_r+0x1e>
 801c214:	0758      	lsls	r0, r3, #29
 801c216:	d512      	bpl.n	801c23e <__swsetup_r+0x7a>
 801c218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c21a:	b141      	cbz	r1, 801c22e <__swsetup_r+0x6a>
 801c21c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c220:	4299      	cmp	r1, r3
 801c222:	d002      	beq.n	801c22a <__swsetup_r+0x66>
 801c224:	4630      	mov	r0, r6
 801c226:	f7fd fdeb 	bl	8019e00 <_free_r>
 801c22a:	2300      	movs	r3, #0
 801c22c:	6363      	str	r3, [r4, #52]	; 0x34
 801c22e:	89a3      	ldrh	r3, [r4, #12]
 801c230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c234:	81a3      	strh	r3, [r4, #12]
 801c236:	2300      	movs	r3, #0
 801c238:	6063      	str	r3, [r4, #4]
 801c23a:	6923      	ldr	r3, [r4, #16]
 801c23c:	6023      	str	r3, [r4, #0]
 801c23e:	89a3      	ldrh	r3, [r4, #12]
 801c240:	f043 0308 	orr.w	r3, r3, #8
 801c244:	81a3      	strh	r3, [r4, #12]
 801c246:	6923      	ldr	r3, [r4, #16]
 801c248:	b94b      	cbnz	r3, 801c25e <__swsetup_r+0x9a>
 801c24a:	89a3      	ldrh	r3, [r4, #12]
 801c24c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c254:	d003      	beq.n	801c25e <__swsetup_r+0x9a>
 801c256:	4621      	mov	r1, r4
 801c258:	4630      	mov	r0, r6
 801c25a:	f001 fb57 	bl	801d90c <__smakebuf_r>
 801c25e:	89a0      	ldrh	r0, [r4, #12]
 801c260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c264:	f010 0301 	ands.w	r3, r0, #1
 801c268:	d00a      	beq.n	801c280 <__swsetup_r+0xbc>
 801c26a:	2300      	movs	r3, #0
 801c26c:	60a3      	str	r3, [r4, #8]
 801c26e:	6963      	ldr	r3, [r4, #20]
 801c270:	425b      	negs	r3, r3
 801c272:	61a3      	str	r3, [r4, #24]
 801c274:	6923      	ldr	r3, [r4, #16]
 801c276:	b943      	cbnz	r3, 801c28a <__swsetup_r+0xc6>
 801c278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c27c:	d1ba      	bne.n	801c1f4 <__swsetup_r+0x30>
 801c27e:	bd70      	pop	{r4, r5, r6, pc}
 801c280:	0781      	lsls	r1, r0, #30
 801c282:	bf58      	it	pl
 801c284:	6963      	ldrpl	r3, [r4, #20]
 801c286:	60a3      	str	r3, [r4, #8]
 801c288:	e7f4      	b.n	801c274 <__swsetup_r+0xb0>
 801c28a:	2000      	movs	r0, #0
 801c28c:	e7f7      	b.n	801c27e <__swsetup_r+0xba>
 801c28e:	bf00      	nop
 801c290:	20000088 	.word	0x20000088
 801c294:	0801f6c4 	.word	0x0801f6c4
 801c298:	0801f6e4 	.word	0x0801f6e4
 801c29c:	0801f6a4 	.word	0x0801f6a4

0801c2a0 <__assert_func>:
 801c2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2a2:	4614      	mov	r4, r2
 801c2a4:	461a      	mov	r2, r3
 801c2a6:	4b09      	ldr	r3, [pc, #36]	; (801c2cc <__assert_func+0x2c>)
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	4605      	mov	r5, r0
 801c2ac:	68d8      	ldr	r0, [r3, #12]
 801c2ae:	b14c      	cbz	r4, 801c2c4 <__assert_func+0x24>
 801c2b0:	4b07      	ldr	r3, [pc, #28]	; (801c2d0 <__assert_func+0x30>)
 801c2b2:	9100      	str	r1, [sp, #0]
 801c2b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c2b8:	4906      	ldr	r1, [pc, #24]	; (801c2d4 <__assert_func+0x34>)
 801c2ba:	462b      	mov	r3, r5
 801c2bc:	f000 ff68 	bl	801d190 <fiprintf>
 801c2c0:	f002 fb4f 	bl	801e962 <abort>
 801c2c4:	4b04      	ldr	r3, [pc, #16]	; (801c2d8 <__assert_func+0x38>)
 801c2c6:	461c      	mov	r4, r3
 801c2c8:	e7f3      	b.n	801c2b2 <__assert_func+0x12>
 801c2ca:	bf00      	nop
 801c2cc:	20000088 	.word	0x20000088
 801c2d0:	0801f865 	.word	0x0801f865
 801c2d4:	0801f872 	.word	0x0801f872
 801c2d8:	0801f8a0 	.word	0x0801f8a0

0801c2dc <_close_r>:
 801c2dc:	b538      	push	{r3, r4, r5, lr}
 801c2de:	4d06      	ldr	r5, [pc, #24]	; (801c2f8 <_close_r+0x1c>)
 801c2e0:	2300      	movs	r3, #0
 801c2e2:	4604      	mov	r4, r0
 801c2e4:	4608      	mov	r0, r1
 801c2e6:	602b      	str	r3, [r5, #0]
 801c2e8:	f7e8 fa61 	bl	80047ae <_close>
 801c2ec:	1c43      	adds	r3, r0, #1
 801c2ee:	d102      	bne.n	801c2f6 <_close_r+0x1a>
 801c2f0:	682b      	ldr	r3, [r5, #0]
 801c2f2:	b103      	cbz	r3, 801c2f6 <_close_r+0x1a>
 801c2f4:	6023      	str	r3, [r4, #0]
 801c2f6:	bd38      	pop	{r3, r4, r5, pc}
 801c2f8:	20009f28 	.word	0x20009f28

0801c2fc <quorem>:
 801c2fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c300:	6903      	ldr	r3, [r0, #16]
 801c302:	690c      	ldr	r4, [r1, #16]
 801c304:	42a3      	cmp	r3, r4
 801c306:	4607      	mov	r7, r0
 801c308:	f2c0 8081 	blt.w	801c40e <quorem+0x112>
 801c30c:	3c01      	subs	r4, #1
 801c30e:	f101 0814 	add.w	r8, r1, #20
 801c312:	f100 0514 	add.w	r5, r0, #20
 801c316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c31a:	9301      	str	r3, [sp, #4]
 801c31c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c324:	3301      	adds	r3, #1
 801c326:	429a      	cmp	r2, r3
 801c328:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c32c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c330:	fbb2 f6f3 	udiv	r6, r2, r3
 801c334:	d331      	bcc.n	801c39a <quorem+0x9e>
 801c336:	f04f 0e00 	mov.w	lr, #0
 801c33a:	4640      	mov	r0, r8
 801c33c:	46ac      	mov	ip, r5
 801c33e:	46f2      	mov	sl, lr
 801c340:	f850 2b04 	ldr.w	r2, [r0], #4
 801c344:	b293      	uxth	r3, r2
 801c346:	fb06 e303 	mla	r3, r6, r3, lr
 801c34a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c34e:	b29b      	uxth	r3, r3
 801c350:	ebaa 0303 	sub.w	r3, sl, r3
 801c354:	f8dc a000 	ldr.w	sl, [ip]
 801c358:	0c12      	lsrs	r2, r2, #16
 801c35a:	fa13 f38a 	uxtah	r3, r3, sl
 801c35e:	fb06 e202 	mla	r2, r6, r2, lr
 801c362:	9300      	str	r3, [sp, #0]
 801c364:	9b00      	ldr	r3, [sp, #0]
 801c366:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c36a:	b292      	uxth	r2, r2
 801c36c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c374:	f8bd 3000 	ldrh.w	r3, [sp]
 801c378:	4581      	cmp	r9, r0
 801c37a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c37e:	f84c 3b04 	str.w	r3, [ip], #4
 801c382:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c386:	d2db      	bcs.n	801c340 <quorem+0x44>
 801c388:	f855 300b 	ldr.w	r3, [r5, fp]
 801c38c:	b92b      	cbnz	r3, 801c39a <quorem+0x9e>
 801c38e:	9b01      	ldr	r3, [sp, #4]
 801c390:	3b04      	subs	r3, #4
 801c392:	429d      	cmp	r5, r3
 801c394:	461a      	mov	r2, r3
 801c396:	d32e      	bcc.n	801c3f6 <quorem+0xfa>
 801c398:	613c      	str	r4, [r7, #16]
 801c39a:	4638      	mov	r0, r7
 801c39c:	f001 fde0 	bl	801df60 <__mcmp>
 801c3a0:	2800      	cmp	r0, #0
 801c3a2:	db24      	blt.n	801c3ee <quorem+0xf2>
 801c3a4:	3601      	adds	r6, #1
 801c3a6:	4628      	mov	r0, r5
 801c3a8:	f04f 0c00 	mov.w	ip, #0
 801c3ac:	f858 2b04 	ldr.w	r2, [r8], #4
 801c3b0:	f8d0 e000 	ldr.w	lr, [r0]
 801c3b4:	b293      	uxth	r3, r2
 801c3b6:	ebac 0303 	sub.w	r3, ip, r3
 801c3ba:	0c12      	lsrs	r2, r2, #16
 801c3bc:	fa13 f38e 	uxtah	r3, r3, lr
 801c3c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c3c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c3c8:	b29b      	uxth	r3, r3
 801c3ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c3ce:	45c1      	cmp	r9, r8
 801c3d0:	f840 3b04 	str.w	r3, [r0], #4
 801c3d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c3d8:	d2e8      	bcs.n	801c3ac <quorem+0xb0>
 801c3da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c3de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c3e2:	b922      	cbnz	r2, 801c3ee <quorem+0xf2>
 801c3e4:	3b04      	subs	r3, #4
 801c3e6:	429d      	cmp	r5, r3
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	d30a      	bcc.n	801c402 <quorem+0x106>
 801c3ec:	613c      	str	r4, [r7, #16]
 801c3ee:	4630      	mov	r0, r6
 801c3f0:	b003      	add	sp, #12
 801c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3f6:	6812      	ldr	r2, [r2, #0]
 801c3f8:	3b04      	subs	r3, #4
 801c3fa:	2a00      	cmp	r2, #0
 801c3fc:	d1cc      	bne.n	801c398 <quorem+0x9c>
 801c3fe:	3c01      	subs	r4, #1
 801c400:	e7c7      	b.n	801c392 <quorem+0x96>
 801c402:	6812      	ldr	r2, [r2, #0]
 801c404:	3b04      	subs	r3, #4
 801c406:	2a00      	cmp	r2, #0
 801c408:	d1f0      	bne.n	801c3ec <quorem+0xf0>
 801c40a:	3c01      	subs	r4, #1
 801c40c:	e7eb      	b.n	801c3e6 <quorem+0xea>
 801c40e:	2000      	movs	r0, #0
 801c410:	e7ee      	b.n	801c3f0 <quorem+0xf4>
 801c412:	0000      	movs	r0, r0
 801c414:	0000      	movs	r0, r0
	...

0801c418 <_dtoa_r>:
 801c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c41c:	ed2d 8b04 	vpush	{d8-d9}
 801c420:	ec57 6b10 	vmov	r6, r7, d0
 801c424:	b093      	sub	sp, #76	; 0x4c
 801c426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c428:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c42c:	9106      	str	r1, [sp, #24]
 801c42e:	ee10 aa10 	vmov	sl, s0
 801c432:	4604      	mov	r4, r0
 801c434:	9209      	str	r2, [sp, #36]	; 0x24
 801c436:	930c      	str	r3, [sp, #48]	; 0x30
 801c438:	46bb      	mov	fp, r7
 801c43a:	b975      	cbnz	r5, 801c45a <_dtoa_r+0x42>
 801c43c:	2010      	movs	r0, #16
 801c43e:	f7fd fc89 	bl	8019d54 <malloc>
 801c442:	4602      	mov	r2, r0
 801c444:	6260      	str	r0, [r4, #36]	; 0x24
 801c446:	b920      	cbnz	r0, 801c452 <_dtoa_r+0x3a>
 801c448:	4ba7      	ldr	r3, [pc, #668]	; (801c6e8 <_dtoa_r+0x2d0>)
 801c44a:	21ea      	movs	r1, #234	; 0xea
 801c44c:	48a7      	ldr	r0, [pc, #668]	; (801c6ec <_dtoa_r+0x2d4>)
 801c44e:	f7ff ff27 	bl	801c2a0 <__assert_func>
 801c452:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c456:	6005      	str	r5, [r0, #0]
 801c458:	60c5      	str	r5, [r0, #12]
 801c45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c45c:	6819      	ldr	r1, [r3, #0]
 801c45e:	b151      	cbz	r1, 801c476 <_dtoa_r+0x5e>
 801c460:	685a      	ldr	r2, [r3, #4]
 801c462:	604a      	str	r2, [r1, #4]
 801c464:	2301      	movs	r3, #1
 801c466:	4093      	lsls	r3, r2
 801c468:	608b      	str	r3, [r1, #8]
 801c46a:	4620      	mov	r0, r4
 801c46c:	f001 faec 	bl	801da48 <_Bfree>
 801c470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c472:	2200      	movs	r2, #0
 801c474:	601a      	str	r2, [r3, #0]
 801c476:	1e3b      	subs	r3, r7, #0
 801c478:	bfaa      	itet	ge
 801c47a:	2300      	movge	r3, #0
 801c47c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801c480:	f8c8 3000 	strge.w	r3, [r8]
 801c484:	4b9a      	ldr	r3, [pc, #616]	; (801c6f0 <_dtoa_r+0x2d8>)
 801c486:	bfbc      	itt	lt
 801c488:	2201      	movlt	r2, #1
 801c48a:	f8c8 2000 	strlt.w	r2, [r8]
 801c48e:	ea33 030b 	bics.w	r3, r3, fp
 801c492:	d11b      	bne.n	801c4cc <_dtoa_r+0xb4>
 801c494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c496:	f242 730f 	movw	r3, #9999	; 0x270f
 801c49a:	6013      	str	r3, [r2, #0]
 801c49c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c4a0:	4333      	orrs	r3, r6
 801c4a2:	f000 8592 	beq.w	801cfca <_dtoa_r+0xbb2>
 801c4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4a8:	b963      	cbnz	r3, 801c4c4 <_dtoa_r+0xac>
 801c4aa:	4b92      	ldr	r3, [pc, #584]	; (801c6f4 <_dtoa_r+0x2dc>)
 801c4ac:	e022      	b.n	801c4f4 <_dtoa_r+0xdc>
 801c4ae:	4b92      	ldr	r3, [pc, #584]	; (801c6f8 <_dtoa_r+0x2e0>)
 801c4b0:	9301      	str	r3, [sp, #4]
 801c4b2:	3308      	adds	r3, #8
 801c4b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c4b6:	6013      	str	r3, [r2, #0]
 801c4b8:	9801      	ldr	r0, [sp, #4]
 801c4ba:	b013      	add	sp, #76	; 0x4c
 801c4bc:	ecbd 8b04 	vpop	{d8-d9}
 801c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4c4:	4b8b      	ldr	r3, [pc, #556]	; (801c6f4 <_dtoa_r+0x2dc>)
 801c4c6:	9301      	str	r3, [sp, #4]
 801c4c8:	3303      	adds	r3, #3
 801c4ca:	e7f3      	b.n	801c4b4 <_dtoa_r+0x9c>
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	4650      	mov	r0, sl
 801c4d2:	4659      	mov	r1, fp
 801c4d4:	f7e4 fb10 	bl	8000af8 <__aeabi_dcmpeq>
 801c4d8:	ec4b ab19 	vmov	d9, sl, fp
 801c4dc:	4680      	mov	r8, r0
 801c4de:	b158      	cbz	r0, 801c4f8 <_dtoa_r+0xe0>
 801c4e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c4e2:	2301      	movs	r3, #1
 801c4e4:	6013      	str	r3, [r2, #0]
 801c4e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	f000 856b 	beq.w	801cfc4 <_dtoa_r+0xbac>
 801c4ee:	4883      	ldr	r0, [pc, #524]	; (801c6fc <_dtoa_r+0x2e4>)
 801c4f0:	6018      	str	r0, [r3, #0]
 801c4f2:	1e43      	subs	r3, r0, #1
 801c4f4:	9301      	str	r3, [sp, #4]
 801c4f6:	e7df      	b.n	801c4b8 <_dtoa_r+0xa0>
 801c4f8:	ec4b ab10 	vmov	d0, sl, fp
 801c4fc:	aa10      	add	r2, sp, #64	; 0x40
 801c4fe:	a911      	add	r1, sp, #68	; 0x44
 801c500:	4620      	mov	r0, r4
 801c502:	f001 fe4f 	bl	801e1a4 <__d2b>
 801c506:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801c50a:	ee08 0a10 	vmov	s16, r0
 801c50e:	2d00      	cmp	r5, #0
 801c510:	f000 8084 	beq.w	801c61c <_dtoa_r+0x204>
 801c514:	ee19 3a90 	vmov	r3, s19
 801c518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c51c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c520:	4656      	mov	r6, sl
 801c522:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c52a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c52e:	4b74      	ldr	r3, [pc, #464]	; (801c700 <_dtoa_r+0x2e8>)
 801c530:	2200      	movs	r2, #0
 801c532:	4630      	mov	r0, r6
 801c534:	4639      	mov	r1, r7
 801c536:	f7e3 febf 	bl	80002b8 <__aeabi_dsub>
 801c53a:	a365      	add	r3, pc, #404	; (adr r3, 801c6d0 <_dtoa_r+0x2b8>)
 801c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c540:	f7e4 f872 	bl	8000628 <__aeabi_dmul>
 801c544:	a364      	add	r3, pc, #400	; (adr r3, 801c6d8 <_dtoa_r+0x2c0>)
 801c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c54a:	f7e3 feb7 	bl	80002bc <__adddf3>
 801c54e:	4606      	mov	r6, r0
 801c550:	4628      	mov	r0, r5
 801c552:	460f      	mov	r7, r1
 801c554:	f7e3 fffe 	bl	8000554 <__aeabi_i2d>
 801c558:	a361      	add	r3, pc, #388	; (adr r3, 801c6e0 <_dtoa_r+0x2c8>)
 801c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c55e:	f7e4 f863 	bl	8000628 <__aeabi_dmul>
 801c562:	4602      	mov	r2, r0
 801c564:	460b      	mov	r3, r1
 801c566:	4630      	mov	r0, r6
 801c568:	4639      	mov	r1, r7
 801c56a:	f7e3 fea7 	bl	80002bc <__adddf3>
 801c56e:	4606      	mov	r6, r0
 801c570:	460f      	mov	r7, r1
 801c572:	f7e4 fb09 	bl	8000b88 <__aeabi_d2iz>
 801c576:	2200      	movs	r2, #0
 801c578:	9000      	str	r0, [sp, #0]
 801c57a:	2300      	movs	r3, #0
 801c57c:	4630      	mov	r0, r6
 801c57e:	4639      	mov	r1, r7
 801c580:	f7e4 fac4 	bl	8000b0c <__aeabi_dcmplt>
 801c584:	b150      	cbz	r0, 801c59c <_dtoa_r+0x184>
 801c586:	9800      	ldr	r0, [sp, #0]
 801c588:	f7e3 ffe4 	bl	8000554 <__aeabi_i2d>
 801c58c:	4632      	mov	r2, r6
 801c58e:	463b      	mov	r3, r7
 801c590:	f7e4 fab2 	bl	8000af8 <__aeabi_dcmpeq>
 801c594:	b910      	cbnz	r0, 801c59c <_dtoa_r+0x184>
 801c596:	9b00      	ldr	r3, [sp, #0]
 801c598:	3b01      	subs	r3, #1
 801c59a:	9300      	str	r3, [sp, #0]
 801c59c:	9b00      	ldr	r3, [sp, #0]
 801c59e:	2b16      	cmp	r3, #22
 801c5a0:	d85a      	bhi.n	801c658 <_dtoa_r+0x240>
 801c5a2:	9a00      	ldr	r2, [sp, #0]
 801c5a4:	4b57      	ldr	r3, [pc, #348]	; (801c704 <_dtoa_r+0x2ec>)
 801c5a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5ae:	ec51 0b19 	vmov	r0, r1, d9
 801c5b2:	f7e4 faab 	bl	8000b0c <__aeabi_dcmplt>
 801c5b6:	2800      	cmp	r0, #0
 801c5b8:	d050      	beq.n	801c65c <_dtoa_r+0x244>
 801c5ba:	9b00      	ldr	r3, [sp, #0]
 801c5bc:	3b01      	subs	r3, #1
 801c5be:	9300      	str	r3, [sp, #0]
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	930b      	str	r3, [sp, #44]	; 0x2c
 801c5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5c6:	1b5d      	subs	r5, r3, r5
 801c5c8:	1e6b      	subs	r3, r5, #1
 801c5ca:	9305      	str	r3, [sp, #20]
 801c5cc:	bf45      	ittet	mi
 801c5ce:	f1c5 0301 	rsbmi	r3, r5, #1
 801c5d2:	9304      	strmi	r3, [sp, #16]
 801c5d4:	2300      	movpl	r3, #0
 801c5d6:	2300      	movmi	r3, #0
 801c5d8:	bf4c      	ite	mi
 801c5da:	9305      	strmi	r3, [sp, #20]
 801c5dc:	9304      	strpl	r3, [sp, #16]
 801c5de:	9b00      	ldr	r3, [sp, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	db3d      	blt.n	801c660 <_dtoa_r+0x248>
 801c5e4:	9b05      	ldr	r3, [sp, #20]
 801c5e6:	9a00      	ldr	r2, [sp, #0]
 801c5e8:	920a      	str	r2, [sp, #40]	; 0x28
 801c5ea:	4413      	add	r3, r2
 801c5ec:	9305      	str	r3, [sp, #20]
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	9307      	str	r3, [sp, #28]
 801c5f2:	9b06      	ldr	r3, [sp, #24]
 801c5f4:	2b09      	cmp	r3, #9
 801c5f6:	f200 8089 	bhi.w	801c70c <_dtoa_r+0x2f4>
 801c5fa:	2b05      	cmp	r3, #5
 801c5fc:	bfc4      	itt	gt
 801c5fe:	3b04      	subgt	r3, #4
 801c600:	9306      	strgt	r3, [sp, #24]
 801c602:	9b06      	ldr	r3, [sp, #24]
 801c604:	f1a3 0302 	sub.w	r3, r3, #2
 801c608:	bfcc      	ite	gt
 801c60a:	2500      	movgt	r5, #0
 801c60c:	2501      	movle	r5, #1
 801c60e:	2b03      	cmp	r3, #3
 801c610:	f200 8087 	bhi.w	801c722 <_dtoa_r+0x30a>
 801c614:	e8df f003 	tbb	[pc, r3]
 801c618:	59383a2d 	.word	0x59383a2d
 801c61c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801c620:	441d      	add	r5, r3
 801c622:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c626:	2b20      	cmp	r3, #32
 801c628:	bfc1      	itttt	gt
 801c62a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c62e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c632:	fa0b f303 	lslgt.w	r3, fp, r3
 801c636:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c63a:	bfda      	itte	le
 801c63c:	f1c3 0320 	rsble	r3, r3, #32
 801c640:	fa06 f003 	lslle.w	r0, r6, r3
 801c644:	4318      	orrgt	r0, r3
 801c646:	f7e3 ff75 	bl	8000534 <__aeabi_ui2d>
 801c64a:	2301      	movs	r3, #1
 801c64c:	4606      	mov	r6, r0
 801c64e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c652:	3d01      	subs	r5, #1
 801c654:	930e      	str	r3, [sp, #56]	; 0x38
 801c656:	e76a      	b.n	801c52e <_dtoa_r+0x116>
 801c658:	2301      	movs	r3, #1
 801c65a:	e7b2      	b.n	801c5c2 <_dtoa_r+0x1aa>
 801c65c:	900b      	str	r0, [sp, #44]	; 0x2c
 801c65e:	e7b1      	b.n	801c5c4 <_dtoa_r+0x1ac>
 801c660:	9b04      	ldr	r3, [sp, #16]
 801c662:	9a00      	ldr	r2, [sp, #0]
 801c664:	1a9b      	subs	r3, r3, r2
 801c666:	9304      	str	r3, [sp, #16]
 801c668:	4253      	negs	r3, r2
 801c66a:	9307      	str	r3, [sp, #28]
 801c66c:	2300      	movs	r3, #0
 801c66e:	930a      	str	r3, [sp, #40]	; 0x28
 801c670:	e7bf      	b.n	801c5f2 <_dtoa_r+0x1da>
 801c672:	2300      	movs	r3, #0
 801c674:	9308      	str	r3, [sp, #32]
 801c676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c678:	2b00      	cmp	r3, #0
 801c67a:	dc55      	bgt.n	801c728 <_dtoa_r+0x310>
 801c67c:	2301      	movs	r3, #1
 801c67e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c682:	461a      	mov	r2, r3
 801c684:	9209      	str	r2, [sp, #36]	; 0x24
 801c686:	e00c      	b.n	801c6a2 <_dtoa_r+0x28a>
 801c688:	2301      	movs	r3, #1
 801c68a:	e7f3      	b.n	801c674 <_dtoa_r+0x25c>
 801c68c:	2300      	movs	r3, #0
 801c68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c690:	9308      	str	r3, [sp, #32]
 801c692:	9b00      	ldr	r3, [sp, #0]
 801c694:	4413      	add	r3, r2
 801c696:	9302      	str	r3, [sp, #8]
 801c698:	3301      	adds	r3, #1
 801c69a:	2b01      	cmp	r3, #1
 801c69c:	9303      	str	r3, [sp, #12]
 801c69e:	bfb8      	it	lt
 801c6a0:	2301      	movlt	r3, #1
 801c6a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c6a4:	2200      	movs	r2, #0
 801c6a6:	6042      	str	r2, [r0, #4]
 801c6a8:	2204      	movs	r2, #4
 801c6aa:	f102 0614 	add.w	r6, r2, #20
 801c6ae:	429e      	cmp	r6, r3
 801c6b0:	6841      	ldr	r1, [r0, #4]
 801c6b2:	d93d      	bls.n	801c730 <_dtoa_r+0x318>
 801c6b4:	4620      	mov	r0, r4
 801c6b6:	f001 f987 	bl	801d9c8 <_Balloc>
 801c6ba:	9001      	str	r0, [sp, #4]
 801c6bc:	2800      	cmp	r0, #0
 801c6be:	d13b      	bne.n	801c738 <_dtoa_r+0x320>
 801c6c0:	4b11      	ldr	r3, [pc, #68]	; (801c708 <_dtoa_r+0x2f0>)
 801c6c2:	4602      	mov	r2, r0
 801c6c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c6c8:	e6c0      	b.n	801c44c <_dtoa_r+0x34>
 801c6ca:	2301      	movs	r3, #1
 801c6cc:	e7df      	b.n	801c68e <_dtoa_r+0x276>
 801c6ce:	bf00      	nop
 801c6d0:	636f4361 	.word	0x636f4361
 801c6d4:	3fd287a7 	.word	0x3fd287a7
 801c6d8:	8b60c8b3 	.word	0x8b60c8b3
 801c6dc:	3fc68a28 	.word	0x3fc68a28
 801c6e0:	509f79fb 	.word	0x509f79fb
 801c6e4:	3fd34413 	.word	0x3fd34413
 801c6e8:	0801f741 	.word	0x0801f741
 801c6ec:	0801f8ae 	.word	0x0801f8ae
 801c6f0:	7ff00000 	.word	0x7ff00000
 801c6f4:	0801f8aa 	.word	0x0801f8aa
 801c6f8:	0801f8a1 	.word	0x0801f8a1
 801c6fc:	0801f719 	.word	0x0801f719
 801c700:	3ff80000 	.word	0x3ff80000
 801c704:	0801fa18 	.word	0x0801fa18
 801c708:	0801f909 	.word	0x0801f909
 801c70c:	2501      	movs	r5, #1
 801c70e:	2300      	movs	r3, #0
 801c710:	9306      	str	r3, [sp, #24]
 801c712:	9508      	str	r5, [sp, #32]
 801c714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c718:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c71c:	2200      	movs	r2, #0
 801c71e:	2312      	movs	r3, #18
 801c720:	e7b0      	b.n	801c684 <_dtoa_r+0x26c>
 801c722:	2301      	movs	r3, #1
 801c724:	9308      	str	r3, [sp, #32]
 801c726:	e7f5      	b.n	801c714 <_dtoa_r+0x2fc>
 801c728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c72a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c72e:	e7b8      	b.n	801c6a2 <_dtoa_r+0x28a>
 801c730:	3101      	adds	r1, #1
 801c732:	6041      	str	r1, [r0, #4]
 801c734:	0052      	lsls	r2, r2, #1
 801c736:	e7b8      	b.n	801c6aa <_dtoa_r+0x292>
 801c738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c73a:	9a01      	ldr	r2, [sp, #4]
 801c73c:	601a      	str	r2, [r3, #0]
 801c73e:	9b03      	ldr	r3, [sp, #12]
 801c740:	2b0e      	cmp	r3, #14
 801c742:	f200 809d 	bhi.w	801c880 <_dtoa_r+0x468>
 801c746:	2d00      	cmp	r5, #0
 801c748:	f000 809a 	beq.w	801c880 <_dtoa_r+0x468>
 801c74c:	9b00      	ldr	r3, [sp, #0]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	dd32      	ble.n	801c7b8 <_dtoa_r+0x3a0>
 801c752:	4ab7      	ldr	r2, [pc, #732]	; (801ca30 <_dtoa_r+0x618>)
 801c754:	f003 030f 	and.w	r3, r3, #15
 801c758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c75c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c760:	9b00      	ldr	r3, [sp, #0]
 801c762:	05d8      	lsls	r0, r3, #23
 801c764:	ea4f 1723 	mov.w	r7, r3, asr #4
 801c768:	d516      	bpl.n	801c798 <_dtoa_r+0x380>
 801c76a:	4bb2      	ldr	r3, [pc, #712]	; (801ca34 <_dtoa_r+0x61c>)
 801c76c:	ec51 0b19 	vmov	r0, r1, d9
 801c770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c774:	f7e4 f882 	bl	800087c <__aeabi_ddiv>
 801c778:	f007 070f 	and.w	r7, r7, #15
 801c77c:	4682      	mov	sl, r0
 801c77e:	468b      	mov	fp, r1
 801c780:	2503      	movs	r5, #3
 801c782:	4eac      	ldr	r6, [pc, #688]	; (801ca34 <_dtoa_r+0x61c>)
 801c784:	b957      	cbnz	r7, 801c79c <_dtoa_r+0x384>
 801c786:	4642      	mov	r2, r8
 801c788:	464b      	mov	r3, r9
 801c78a:	4650      	mov	r0, sl
 801c78c:	4659      	mov	r1, fp
 801c78e:	f7e4 f875 	bl	800087c <__aeabi_ddiv>
 801c792:	4682      	mov	sl, r0
 801c794:	468b      	mov	fp, r1
 801c796:	e028      	b.n	801c7ea <_dtoa_r+0x3d2>
 801c798:	2502      	movs	r5, #2
 801c79a:	e7f2      	b.n	801c782 <_dtoa_r+0x36a>
 801c79c:	07f9      	lsls	r1, r7, #31
 801c79e:	d508      	bpl.n	801c7b2 <_dtoa_r+0x39a>
 801c7a0:	4640      	mov	r0, r8
 801c7a2:	4649      	mov	r1, r9
 801c7a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c7a8:	f7e3 ff3e 	bl	8000628 <__aeabi_dmul>
 801c7ac:	3501      	adds	r5, #1
 801c7ae:	4680      	mov	r8, r0
 801c7b0:	4689      	mov	r9, r1
 801c7b2:	107f      	asrs	r7, r7, #1
 801c7b4:	3608      	adds	r6, #8
 801c7b6:	e7e5      	b.n	801c784 <_dtoa_r+0x36c>
 801c7b8:	f000 809b 	beq.w	801c8f2 <_dtoa_r+0x4da>
 801c7bc:	9b00      	ldr	r3, [sp, #0]
 801c7be:	4f9d      	ldr	r7, [pc, #628]	; (801ca34 <_dtoa_r+0x61c>)
 801c7c0:	425e      	negs	r6, r3
 801c7c2:	4b9b      	ldr	r3, [pc, #620]	; (801ca30 <_dtoa_r+0x618>)
 801c7c4:	f006 020f 	and.w	r2, r6, #15
 801c7c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d0:	ec51 0b19 	vmov	r0, r1, d9
 801c7d4:	f7e3 ff28 	bl	8000628 <__aeabi_dmul>
 801c7d8:	1136      	asrs	r6, r6, #4
 801c7da:	4682      	mov	sl, r0
 801c7dc:	468b      	mov	fp, r1
 801c7de:	2300      	movs	r3, #0
 801c7e0:	2502      	movs	r5, #2
 801c7e2:	2e00      	cmp	r6, #0
 801c7e4:	d17a      	bne.n	801c8dc <_dtoa_r+0x4c4>
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d1d3      	bne.n	801c792 <_dtoa_r+0x37a>
 801c7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	f000 8082 	beq.w	801c8f6 <_dtoa_r+0x4de>
 801c7f2:	4b91      	ldr	r3, [pc, #580]	; (801ca38 <_dtoa_r+0x620>)
 801c7f4:	2200      	movs	r2, #0
 801c7f6:	4650      	mov	r0, sl
 801c7f8:	4659      	mov	r1, fp
 801c7fa:	f7e4 f987 	bl	8000b0c <__aeabi_dcmplt>
 801c7fe:	2800      	cmp	r0, #0
 801c800:	d079      	beq.n	801c8f6 <_dtoa_r+0x4de>
 801c802:	9b03      	ldr	r3, [sp, #12]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d076      	beq.n	801c8f6 <_dtoa_r+0x4de>
 801c808:	9b02      	ldr	r3, [sp, #8]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	dd36      	ble.n	801c87c <_dtoa_r+0x464>
 801c80e:	9b00      	ldr	r3, [sp, #0]
 801c810:	4650      	mov	r0, sl
 801c812:	4659      	mov	r1, fp
 801c814:	1e5f      	subs	r7, r3, #1
 801c816:	2200      	movs	r2, #0
 801c818:	4b88      	ldr	r3, [pc, #544]	; (801ca3c <_dtoa_r+0x624>)
 801c81a:	f7e3 ff05 	bl	8000628 <__aeabi_dmul>
 801c81e:	9e02      	ldr	r6, [sp, #8]
 801c820:	4682      	mov	sl, r0
 801c822:	468b      	mov	fp, r1
 801c824:	3501      	adds	r5, #1
 801c826:	4628      	mov	r0, r5
 801c828:	f7e3 fe94 	bl	8000554 <__aeabi_i2d>
 801c82c:	4652      	mov	r2, sl
 801c82e:	465b      	mov	r3, fp
 801c830:	f7e3 fefa 	bl	8000628 <__aeabi_dmul>
 801c834:	4b82      	ldr	r3, [pc, #520]	; (801ca40 <_dtoa_r+0x628>)
 801c836:	2200      	movs	r2, #0
 801c838:	f7e3 fd40 	bl	80002bc <__adddf3>
 801c83c:	46d0      	mov	r8, sl
 801c83e:	46d9      	mov	r9, fp
 801c840:	4682      	mov	sl, r0
 801c842:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801c846:	2e00      	cmp	r6, #0
 801c848:	d158      	bne.n	801c8fc <_dtoa_r+0x4e4>
 801c84a:	4b7e      	ldr	r3, [pc, #504]	; (801ca44 <_dtoa_r+0x62c>)
 801c84c:	2200      	movs	r2, #0
 801c84e:	4640      	mov	r0, r8
 801c850:	4649      	mov	r1, r9
 801c852:	f7e3 fd31 	bl	80002b8 <__aeabi_dsub>
 801c856:	4652      	mov	r2, sl
 801c858:	465b      	mov	r3, fp
 801c85a:	4680      	mov	r8, r0
 801c85c:	4689      	mov	r9, r1
 801c85e:	f7e4 f973 	bl	8000b48 <__aeabi_dcmpgt>
 801c862:	2800      	cmp	r0, #0
 801c864:	f040 8295 	bne.w	801cd92 <_dtoa_r+0x97a>
 801c868:	4652      	mov	r2, sl
 801c86a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c86e:	4640      	mov	r0, r8
 801c870:	4649      	mov	r1, r9
 801c872:	f7e4 f94b 	bl	8000b0c <__aeabi_dcmplt>
 801c876:	2800      	cmp	r0, #0
 801c878:	f040 8289 	bne.w	801cd8e <_dtoa_r+0x976>
 801c87c:	ec5b ab19 	vmov	sl, fp, d9
 801c880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c882:	2b00      	cmp	r3, #0
 801c884:	f2c0 8148 	blt.w	801cb18 <_dtoa_r+0x700>
 801c888:	9a00      	ldr	r2, [sp, #0]
 801c88a:	2a0e      	cmp	r2, #14
 801c88c:	f300 8144 	bgt.w	801cb18 <_dtoa_r+0x700>
 801c890:	4b67      	ldr	r3, [pc, #412]	; (801ca30 <_dtoa_r+0x618>)
 801c892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c896:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	f280 80d5 	bge.w	801ca4c <_dtoa_r+0x634>
 801c8a2:	9b03      	ldr	r3, [sp, #12]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	f300 80d1 	bgt.w	801ca4c <_dtoa_r+0x634>
 801c8aa:	f040 826f 	bne.w	801cd8c <_dtoa_r+0x974>
 801c8ae:	4b65      	ldr	r3, [pc, #404]	; (801ca44 <_dtoa_r+0x62c>)
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	4640      	mov	r0, r8
 801c8b4:	4649      	mov	r1, r9
 801c8b6:	f7e3 feb7 	bl	8000628 <__aeabi_dmul>
 801c8ba:	4652      	mov	r2, sl
 801c8bc:	465b      	mov	r3, fp
 801c8be:	f7e4 f939 	bl	8000b34 <__aeabi_dcmpge>
 801c8c2:	9e03      	ldr	r6, [sp, #12]
 801c8c4:	4637      	mov	r7, r6
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	f040 8245 	bne.w	801cd56 <_dtoa_r+0x93e>
 801c8cc:	9d01      	ldr	r5, [sp, #4]
 801c8ce:	2331      	movs	r3, #49	; 0x31
 801c8d0:	f805 3b01 	strb.w	r3, [r5], #1
 801c8d4:	9b00      	ldr	r3, [sp, #0]
 801c8d6:	3301      	adds	r3, #1
 801c8d8:	9300      	str	r3, [sp, #0]
 801c8da:	e240      	b.n	801cd5e <_dtoa_r+0x946>
 801c8dc:	07f2      	lsls	r2, r6, #31
 801c8de:	d505      	bpl.n	801c8ec <_dtoa_r+0x4d4>
 801c8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c8e4:	f7e3 fea0 	bl	8000628 <__aeabi_dmul>
 801c8e8:	3501      	adds	r5, #1
 801c8ea:	2301      	movs	r3, #1
 801c8ec:	1076      	asrs	r6, r6, #1
 801c8ee:	3708      	adds	r7, #8
 801c8f0:	e777      	b.n	801c7e2 <_dtoa_r+0x3ca>
 801c8f2:	2502      	movs	r5, #2
 801c8f4:	e779      	b.n	801c7ea <_dtoa_r+0x3d2>
 801c8f6:	9f00      	ldr	r7, [sp, #0]
 801c8f8:	9e03      	ldr	r6, [sp, #12]
 801c8fa:	e794      	b.n	801c826 <_dtoa_r+0x40e>
 801c8fc:	9901      	ldr	r1, [sp, #4]
 801c8fe:	4b4c      	ldr	r3, [pc, #304]	; (801ca30 <_dtoa_r+0x618>)
 801c900:	4431      	add	r1, r6
 801c902:	910d      	str	r1, [sp, #52]	; 0x34
 801c904:	9908      	ldr	r1, [sp, #32]
 801c906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c90a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c90e:	2900      	cmp	r1, #0
 801c910:	d043      	beq.n	801c99a <_dtoa_r+0x582>
 801c912:	494d      	ldr	r1, [pc, #308]	; (801ca48 <_dtoa_r+0x630>)
 801c914:	2000      	movs	r0, #0
 801c916:	f7e3 ffb1 	bl	800087c <__aeabi_ddiv>
 801c91a:	4652      	mov	r2, sl
 801c91c:	465b      	mov	r3, fp
 801c91e:	f7e3 fccb 	bl	80002b8 <__aeabi_dsub>
 801c922:	9d01      	ldr	r5, [sp, #4]
 801c924:	4682      	mov	sl, r0
 801c926:	468b      	mov	fp, r1
 801c928:	4649      	mov	r1, r9
 801c92a:	4640      	mov	r0, r8
 801c92c:	f7e4 f92c 	bl	8000b88 <__aeabi_d2iz>
 801c930:	4606      	mov	r6, r0
 801c932:	f7e3 fe0f 	bl	8000554 <__aeabi_i2d>
 801c936:	4602      	mov	r2, r0
 801c938:	460b      	mov	r3, r1
 801c93a:	4640      	mov	r0, r8
 801c93c:	4649      	mov	r1, r9
 801c93e:	f7e3 fcbb 	bl	80002b8 <__aeabi_dsub>
 801c942:	3630      	adds	r6, #48	; 0x30
 801c944:	f805 6b01 	strb.w	r6, [r5], #1
 801c948:	4652      	mov	r2, sl
 801c94a:	465b      	mov	r3, fp
 801c94c:	4680      	mov	r8, r0
 801c94e:	4689      	mov	r9, r1
 801c950:	f7e4 f8dc 	bl	8000b0c <__aeabi_dcmplt>
 801c954:	2800      	cmp	r0, #0
 801c956:	d163      	bne.n	801ca20 <_dtoa_r+0x608>
 801c958:	4642      	mov	r2, r8
 801c95a:	464b      	mov	r3, r9
 801c95c:	4936      	ldr	r1, [pc, #216]	; (801ca38 <_dtoa_r+0x620>)
 801c95e:	2000      	movs	r0, #0
 801c960:	f7e3 fcaa 	bl	80002b8 <__aeabi_dsub>
 801c964:	4652      	mov	r2, sl
 801c966:	465b      	mov	r3, fp
 801c968:	f7e4 f8d0 	bl	8000b0c <__aeabi_dcmplt>
 801c96c:	2800      	cmp	r0, #0
 801c96e:	f040 80b5 	bne.w	801cadc <_dtoa_r+0x6c4>
 801c972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c974:	429d      	cmp	r5, r3
 801c976:	d081      	beq.n	801c87c <_dtoa_r+0x464>
 801c978:	4b30      	ldr	r3, [pc, #192]	; (801ca3c <_dtoa_r+0x624>)
 801c97a:	2200      	movs	r2, #0
 801c97c:	4650      	mov	r0, sl
 801c97e:	4659      	mov	r1, fp
 801c980:	f7e3 fe52 	bl	8000628 <__aeabi_dmul>
 801c984:	4b2d      	ldr	r3, [pc, #180]	; (801ca3c <_dtoa_r+0x624>)
 801c986:	4682      	mov	sl, r0
 801c988:	468b      	mov	fp, r1
 801c98a:	4640      	mov	r0, r8
 801c98c:	4649      	mov	r1, r9
 801c98e:	2200      	movs	r2, #0
 801c990:	f7e3 fe4a 	bl	8000628 <__aeabi_dmul>
 801c994:	4680      	mov	r8, r0
 801c996:	4689      	mov	r9, r1
 801c998:	e7c6      	b.n	801c928 <_dtoa_r+0x510>
 801c99a:	4650      	mov	r0, sl
 801c99c:	4659      	mov	r1, fp
 801c99e:	f7e3 fe43 	bl	8000628 <__aeabi_dmul>
 801c9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9a4:	9d01      	ldr	r5, [sp, #4]
 801c9a6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9a8:	4682      	mov	sl, r0
 801c9aa:	468b      	mov	fp, r1
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	4640      	mov	r0, r8
 801c9b0:	f7e4 f8ea 	bl	8000b88 <__aeabi_d2iz>
 801c9b4:	4606      	mov	r6, r0
 801c9b6:	f7e3 fdcd 	bl	8000554 <__aeabi_i2d>
 801c9ba:	3630      	adds	r6, #48	; 0x30
 801c9bc:	4602      	mov	r2, r0
 801c9be:	460b      	mov	r3, r1
 801c9c0:	4640      	mov	r0, r8
 801c9c2:	4649      	mov	r1, r9
 801c9c4:	f7e3 fc78 	bl	80002b8 <__aeabi_dsub>
 801c9c8:	f805 6b01 	strb.w	r6, [r5], #1
 801c9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c9ce:	429d      	cmp	r5, r3
 801c9d0:	4680      	mov	r8, r0
 801c9d2:	4689      	mov	r9, r1
 801c9d4:	f04f 0200 	mov.w	r2, #0
 801c9d8:	d124      	bne.n	801ca24 <_dtoa_r+0x60c>
 801c9da:	4b1b      	ldr	r3, [pc, #108]	; (801ca48 <_dtoa_r+0x630>)
 801c9dc:	4650      	mov	r0, sl
 801c9de:	4659      	mov	r1, fp
 801c9e0:	f7e3 fc6c 	bl	80002bc <__adddf3>
 801c9e4:	4602      	mov	r2, r0
 801c9e6:	460b      	mov	r3, r1
 801c9e8:	4640      	mov	r0, r8
 801c9ea:	4649      	mov	r1, r9
 801c9ec:	f7e4 f8ac 	bl	8000b48 <__aeabi_dcmpgt>
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	d173      	bne.n	801cadc <_dtoa_r+0x6c4>
 801c9f4:	4652      	mov	r2, sl
 801c9f6:	465b      	mov	r3, fp
 801c9f8:	4913      	ldr	r1, [pc, #76]	; (801ca48 <_dtoa_r+0x630>)
 801c9fa:	2000      	movs	r0, #0
 801c9fc:	f7e3 fc5c 	bl	80002b8 <__aeabi_dsub>
 801ca00:	4602      	mov	r2, r0
 801ca02:	460b      	mov	r3, r1
 801ca04:	4640      	mov	r0, r8
 801ca06:	4649      	mov	r1, r9
 801ca08:	f7e4 f880 	bl	8000b0c <__aeabi_dcmplt>
 801ca0c:	2800      	cmp	r0, #0
 801ca0e:	f43f af35 	beq.w	801c87c <_dtoa_r+0x464>
 801ca12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ca14:	1e6b      	subs	r3, r5, #1
 801ca16:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ca1c:	2b30      	cmp	r3, #48	; 0x30
 801ca1e:	d0f8      	beq.n	801ca12 <_dtoa_r+0x5fa>
 801ca20:	9700      	str	r7, [sp, #0]
 801ca22:	e049      	b.n	801cab8 <_dtoa_r+0x6a0>
 801ca24:	4b05      	ldr	r3, [pc, #20]	; (801ca3c <_dtoa_r+0x624>)
 801ca26:	f7e3 fdff 	bl	8000628 <__aeabi_dmul>
 801ca2a:	4680      	mov	r8, r0
 801ca2c:	4689      	mov	r9, r1
 801ca2e:	e7bd      	b.n	801c9ac <_dtoa_r+0x594>
 801ca30:	0801fa18 	.word	0x0801fa18
 801ca34:	0801f9f0 	.word	0x0801f9f0
 801ca38:	3ff00000 	.word	0x3ff00000
 801ca3c:	40240000 	.word	0x40240000
 801ca40:	401c0000 	.word	0x401c0000
 801ca44:	40140000 	.word	0x40140000
 801ca48:	3fe00000 	.word	0x3fe00000
 801ca4c:	9d01      	ldr	r5, [sp, #4]
 801ca4e:	4656      	mov	r6, sl
 801ca50:	465f      	mov	r7, fp
 801ca52:	4642      	mov	r2, r8
 801ca54:	464b      	mov	r3, r9
 801ca56:	4630      	mov	r0, r6
 801ca58:	4639      	mov	r1, r7
 801ca5a:	f7e3 ff0f 	bl	800087c <__aeabi_ddiv>
 801ca5e:	f7e4 f893 	bl	8000b88 <__aeabi_d2iz>
 801ca62:	4682      	mov	sl, r0
 801ca64:	f7e3 fd76 	bl	8000554 <__aeabi_i2d>
 801ca68:	4642      	mov	r2, r8
 801ca6a:	464b      	mov	r3, r9
 801ca6c:	f7e3 fddc 	bl	8000628 <__aeabi_dmul>
 801ca70:	4602      	mov	r2, r0
 801ca72:	460b      	mov	r3, r1
 801ca74:	4630      	mov	r0, r6
 801ca76:	4639      	mov	r1, r7
 801ca78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801ca7c:	f7e3 fc1c 	bl	80002b8 <__aeabi_dsub>
 801ca80:	f805 6b01 	strb.w	r6, [r5], #1
 801ca84:	9e01      	ldr	r6, [sp, #4]
 801ca86:	9f03      	ldr	r7, [sp, #12]
 801ca88:	1bae      	subs	r6, r5, r6
 801ca8a:	42b7      	cmp	r7, r6
 801ca8c:	4602      	mov	r2, r0
 801ca8e:	460b      	mov	r3, r1
 801ca90:	d135      	bne.n	801cafe <_dtoa_r+0x6e6>
 801ca92:	f7e3 fc13 	bl	80002bc <__adddf3>
 801ca96:	4642      	mov	r2, r8
 801ca98:	464b      	mov	r3, r9
 801ca9a:	4606      	mov	r6, r0
 801ca9c:	460f      	mov	r7, r1
 801ca9e:	f7e4 f853 	bl	8000b48 <__aeabi_dcmpgt>
 801caa2:	b9d0      	cbnz	r0, 801cada <_dtoa_r+0x6c2>
 801caa4:	4642      	mov	r2, r8
 801caa6:	464b      	mov	r3, r9
 801caa8:	4630      	mov	r0, r6
 801caaa:	4639      	mov	r1, r7
 801caac:	f7e4 f824 	bl	8000af8 <__aeabi_dcmpeq>
 801cab0:	b110      	cbz	r0, 801cab8 <_dtoa_r+0x6a0>
 801cab2:	f01a 0f01 	tst.w	sl, #1
 801cab6:	d110      	bne.n	801cada <_dtoa_r+0x6c2>
 801cab8:	4620      	mov	r0, r4
 801caba:	ee18 1a10 	vmov	r1, s16
 801cabe:	f000 ffc3 	bl	801da48 <_Bfree>
 801cac2:	2300      	movs	r3, #0
 801cac4:	9800      	ldr	r0, [sp, #0]
 801cac6:	702b      	strb	r3, [r5, #0]
 801cac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801caca:	3001      	adds	r0, #1
 801cacc:	6018      	str	r0, [r3, #0]
 801cace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	f43f acf1 	beq.w	801c4b8 <_dtoa_r+0xa0>
 801cad6:	601d      	str	r5, [r3, #0]
 801cad8:	e4ee      	b.n	801c4b8 <_dtoa_r+0xa0>
 801cada:	9f00      	ldr	r7, [sp, #0]
 801cadc:	462b      	mov	r3, r5
 801cade:	461d      	mov	r5, r3
 801cae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cae4:	2a39      	cmp	r2, #57	; 0x39
 801cae6:	d106      	bne.n	801caf6 <_dtoa_r+0x6de>
 801cae8:	9a01      	ldr	r2, [sp, #4]
 801caea:	429a      	cmp	r2, r3
 801caec:	d1f7      	bne.n	801cade <_dtoa_r+0x6c6>
 801caee:	9901      	ldr	r1, [sp, #4]
 801caf0:	2230      	movs	r2, #48	; 0x30
 801caf2:	3701      	adds	r7, #1
 801caf4:	700a      	strb	r2, [r1, #0]
 801caf6:	781a      	ldrb	r2, [r3, #0]
 801caf8:	3201      	adds	r2, #1
 801cafa:	701a      	strb	r2, [r3, #0]
 801cafc:	e790      	b.n	801ca20 <_dtoa_r+0x608>
 801cafe:	4ba6      	ldr	r3, [pc, #664]	; (801cd98 <_dtoa_r+0x980>)
 801cb00:	2200      	movs	r2, #0
 801cb02:	f7e3 fd91 	bl	8000628 <__aeabi_dmul>
 801cb06:	2200      	movs	r2, #0
 801cb08:	2300      	movs	r3, #0
 801cb0a:	4606      	mov	r6, r0
 801cb0c:	460f      	mov	r7, r1
 801cb0e:	f7e3 fff3 	bl	8000af8 <__aeabi_dcmpeq>
 801cb12:	2800      	cmp	r0, #0
 801cb14:	d09d      	beq.n	801ca52 <_dtoa_r+0x63a>
 801cb16:	e7cf      	b.n	801cab8 <_dtoa_r+0x6a0>
 801cb18:	9a08      	ldr	r2, [sp, #32]
 801cb1a:	2a00      	cmp	r2, #0
 801cb1c:	f000 80d7 	beq.w	801ccce <_dtoa_r+0x8b6>
 801cb20:	9a06      	ldr	r2, [sp, #24]
 801cb22:	2a01      	cmp	r2, #1
 801cb24:	f300 80ba 	bgt.w	801cc9c <_dtoa_r+0x884>
 801cb28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb2a:	2a00      	cmp	r2, #0
 801cb2c:	f000 80b2 	beq.w	801cc94 <_dtoa_r+0x87c>
 801cb30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801cb34:	9e07      	ldr	r6, [sp, #28]
 801cb36:	9d04      	ldr	r5, [sp, #16]
 801cb38:	9a04      	ldr	r2, [sp, #16]
 801cb3a:	441a      	add	r2, r3
 801cb3c:	9204      	str	r2, [sp, #16]
 801cb3e:	9a05      	ldr	r2, [sp, #20]
 801cb40:	2101      	movs	r1, #1
 801cb42:	441a      	add	r2, r3
 801cb44:	4620      	mov	r0, r4
 801cb46:	9205      	str	r2, [sp, #20]
 801cb48:	f001 f880 	bl	801dc4c <__i2b>
 801cb4c:	4607      	mov	r7, r0
 801cb4e:	2d00      	cmp	r5, #0
 801cb50:	dd0c      	ble.n	801cb6c <_dtoa_r+0x754>
 801cb52:	9b05      	ldr	r3, [sp, #20]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	dd09      	ble.n	801cb6c <_dtoa_r+0x754>
 801cb58:	42ab      	cmp	r3, r5
 801cb5a:	9a04      	ldr	r2, [sp, #16]
 801cb5c:	bfa8      	it	ge
 801cb5e:	462b      	movge	r3, r5
 801cb60:	1ad2      	subs	r2, r2, r3
 801cb62:	9204      	str	r2, [sp, #16]
 801cb64:	9a05      	ldr	r2, [sp, #20]
 801cb66:	1aed      	subs	r5, r5, r3
 801cb68:	1ad3      	subs	r3, r2, r3
 801cb6a:	9305      	str	r3, [sp, #20]
 801cb6c:	9b07      	ldr	r3, [sp, #28]
 801cb6e:	b31b      	cbz	r3, 801cbb8 <_dtoa_r+0x7a0>
 801cb70:	9b08      	ldr	r3, [sp, #32]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	f000 80af 	beq.w	801ccd6 <_dtoa_r+0x8be>
 801cb78:	2e00      	cmp	r6, #0
 801cb7a:	dd13      	ble.n	801cba4 <_dtoa_r+0x78c>
 801cb7c:	4639      	mov	r1, r7
 801cb7e:	4632      	mov	r2, r6
 801cb80:	4620      	mov	r0, r4
 801cb82:	f001 f923 	bl	801ddcc <__pow5mult>
 801cb86:	ee18 2a10 	vmov	r2, s16
 801cb8a:	4601      	mov	r1, r0
 801cb8c:	4607      	mov	r7, r0
 801cb8e:	4620      	mov	r0, r4
 801cb90:	f001 f872 	bl	801dc78 <__multiply>
 801cb94:	ee18 1a10 	vmov	r1, s16
 801cb98:	4680      	mov	r8, r0
 801cb9a:	4620      	mov	r0, r4
 801cb9c:	f000 ff54 	bl	801da48 <_Bfree>
 801cba0:	ee08 8a10 	vmov	s16, r8
 801cba4:	9b07      	ldr	r3, [sp, #28]
 801cba6:	1b9a      	subs	r2, r3, r6
 801cba8:	d006      	beq.n	801cbb8 <_dtoa_r+0x7a0>
 801cbaa:	ee18 1a10 	vmov	r1, s16
 801cbae:	4620      	mov	r0, r4
 801cbb0:	f001 f90c 	bl	801ddcc <__pow5mult>
 801cbb4:	ee08 0a10 	vmov	s16, r0
 801cbb8:	2101      	movs	r1, #1
 801cbba:	4620      	mov	r0, r4
 801cbbc:	f001 f846 	bl	801dc4c <__i2b>
 801cbc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	4606      	mov	r6, r0
 801cbc6:	f340 8088 	ble.w	801ccda <_dtoa_r+0x8c2>
 801cbca:	461a      	mov	r2, r3
 801cbcc:	4601      	mov	r1, r0
 801cbce:	4620      	mov	r0, r4
 801cbd0:	f001 f8fc 	bl	801ddcc <__pow5mult>
 801cbd4:	9b06      	ldr	r3, [sp, #24]
 801cbd6:	2b01      	cmp	r3, #1
 801cbd8:	4606      	mov	r6, r0
 801cbda:	f340 8081 	ble.w	801cce0 <_dtoa_r+0x8c8>
 801cbde:	f04f 0800 	mov.w	r8, #0
 801cbe2:	6933      	ldr	r3, [r6, #16]
 801cbe4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cbe8:	6918      	ldr	r0, [r3, #16]
 801cbea:	f000 ffdf 	bl	801dbac <__hi0bits>
 801cbee:	f1c0 0020 	rsb	r0, r0, #32
 801cbf2:	9b05      	ldr	r3, [sp, #20]
 801cbf4:	4418      	add	r0, r3
 801cbf6:	f010 001f 	ands.w	r0, r0, #31
 801cbfa:	f000 8092 	beq.w	801cd22 <_dtoa_r+0x90a>
 801cbfe:	f1c0 0320 	rsb	r3, r0, #32
 801cc02:	2b04      	cmp	r3, #4
 801cc04:	f340 808a 	ble.w	801cd1c <_dtoa_r+0x904>
 801cc08:	f1c0 001c 	rsb	r0, r0, #28
 801cc0c:	9b04      	ldr	r3, [sp, #16]
 801cc0e:	4403      	add	r3, r0
 801cc10:	9304      	str	r3, [sp, #16]
 801cc12:	9b05      	ldr	r3, [sp, #20]
 801cc14:	4403      	add	r3, r0
 801cc16:	4405      	add	r5, r0
 801cc18:	9305      	str	r3, [sp, #20]
 801cc1a:	9b04      	ldr	r3, [sp, #16]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	dd07      	ble.n	801cc30 <_dtoa_r+0x818>
 801cc20:	ee18 1a10 	vmov	r1, s16
 801cc24:	461a      	mov	r2, r3
 801cc26:	4620      	mov	r0, r4
 801cc28:	f001 f92a 	bl	801de80 <__lshift>
 801cc2c:	ee08 0a10 	vmov	s16, r0
 801cc30:	9b05      	ldr	r3, [sp, #20]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	dd05      	ble.n	801cc42 <_dtoa_r+0x82a>
 801cc36:	4631      	mov	r1, r6
 801cc38:	461a      	mov	r2, r3
 801cc3a:	4620      	mov	r0, r4
 801cc3c:	f001 f920 	bl	801de80 <__lshift>
 801cc40:	4606      	mov	r6, r0
 801cc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d06e      	beq.n	801cd26 <_dtoa_r+0x90e>
 801cc48:	ee18 0a10 	vmov	r0, s16
 801cc4c:	4631      	mov	r1, r6
 801cc4e:	f001 f987 	bl	801df60 <__mcmp>
 801cc52:	2800      	cmp	r0, #0
 801cc54:	da67      	bge.n	801cd26 <_dtoa_r+0x90e>
 801cc56:	9b00      	ldr	r3, [sp, #0]
 801cc58:	3b01      	subs	r3, #1
 801cc5a:	ee18 1a10 	vmov	r1, s16
 801cc5e:	9300      	str	r3, [sp, #0]
 801cc60:	220a      	movs	r2, #10
 801cc62:	2300      	movs	r3, #0
 801cc64:	4620      	mov	r0, r4
 801cc66:	f000 ff11 	bl	801da8c <__multadd>
 801cc6a:	9b08      	ldr	r3, [sp, #32]
 801cc6c:	ee08 0a10 	vmov	s16, r0
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	f000 81b1 	beq.w	801cfd8 <_dtoa_r+0xbc0>
 801cc76:	2300      	movs	r3, #0
 801cc78:	4639      	mov	r1, r7
 801cc7a:	220a      	movs	r2, #10
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	f000 ff05 	bl	801da8c <__multadd>
 801cc82:	9b02      	ldr	r3, [sp, #8]
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	4607      	mov	r7, r0
 801cc88:	f300 808e 	bgt.w	801cda8 <_dtoa_r+0x990>
 801cc8c:	9b06      	ldr	r3, [sp, #24]
 801cc8e:	2b02      	cmp	r3, #2
 801cc90:	dc51      	bgt.n	801cd36 <_dtoa_r+0x91e>
 801cc92:	e089      	b.n	801cda8 <_dtoa_r+0x990>
 801cc94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cc9a:	e74b      	b.n	801cb34 <_dtoa_r+0x71c>
 801cc9c:	9b03      	ldr	r3, [sp, #12]
 801cc9e:	1e5e      	subs	r6, r3, #1
 801cca0:	9b07      	ldr	r3, [sp, #28]
 801cca2:	42b3      	cmp	r3, r6
 801cca4:	bfbf      	itttt	lt
 801cca6:	9b07      	ldrlt	r3, [sp, #28]
 801cca8:	9607      	strlt	r6, [sp, #28]
 801ccaa:	1af2      	sublt	r2, r6, r3
 801ccac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801ccae:	bfb6      	itet	lt
 801ccb0:	189b      	addlt	r3, r3, r2
 801ccb2:	1b9e      	subge	r6, r3, r6
 801ccb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 801ccb6:	9b03      	ldr	r3, [sp, #12]
 801ccb8:	bfb8      	it	lt
 801ccba:	2600      	movlt	r6, #0
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	bfb7      	itett	lt
 801ccc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801ccc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801ccc8:	1a9d      	sublt	r5, r3, r2
 801ccca:	2300      	movlt	r3, #0
 801cccc:	e734      	b.n	801cb38 <_dtoa_r+0x720>
 801ccce:	9e07      	ldr	r6, [sp, #28]
 801ccd0:	9d04      	ldr	r5, [sp, #16]
 801ccd2:	9f08      	ldr	r7, [sp, #32]
 801ccd4:	e73b      	b.n	801cb4e <_dtoa_r+0x736>
 801ccd6:	9a07      	ldr	r2, [sp, #28]
 801ccd8:	e767      	b.n	801cbaa <_dtoa_r+0x792>
 801ccda:	9b06      	ldr	r3, [sp, #24]
 801ccdc:	2b01      	cmp	r3, #1
 801ccde:	dc18      	bgt.n	801cd12 <_dtoa_r+0x8fa>
 801cce0:	f1ba 0f00 	cmp.w	sl, #0
 801cce4:	d115      	bne.n	801cd12 <_dtoa_r+0x8fa>
 801cce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ccea:	b993      	cbnz	r3, 801cd12 <_dtoa_r+0x8fa>
 801ccec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ccf0:	0d1b      	lsrs	r3, r3, #20
 801ccf2:	051b      	lsls	r3, r3, #20
 801ccf4:	b183      	cbz	r3, 801cd18 <_dtoa_r+0x900>
 801ccf6:	9b04      	ldr	r3, [sp, #16]
 801ccf8:	3301      	adds	r3, #1
 801ccfa:	9304      	str	r3, [sp, #16]
 801ccfc:	9b05      	ldr	r3, [sp, #20]
 801ccfe:	3301      	adds	r3, #1
 801cd00:	9305      	str	r3, [sp, #20]
 801cd02:	f04f 0801 	mov.w	r8, #1
 801cd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	f47f af6a 	bne.w	801cbe2 <_dtoa_r+0x7ca>
 801cd0e:	2001      	movs	r0, #1
 801cd10:	e76f      	b.n	801cbf2 <_dtoa_r+0x7da>
 801cd12:	f04f 0800 	mov.w	r8, #0
 801cd16:	e7f6      	b.n	801cd06 <_dtoa_r+0x8ee>
 801cd18:	4698      	mov	r8, r3
 801cd1a:	e7f4      	b.n	801cd06 <_dtoa_r+0x8ee>
 801cd1c:	f43f af7d 	beq.w	801cc1a <_dtoa_r+0x802>
 801cd20:	4618      	mov	r0, r3
 801cd22:	301c      	adds	r0, #28
 801cd24:	e772      	b.n	801cc0c <_dtoa_r+0x7f4>
 801cd26:	9b03      	ldr	r3, [sp, #12]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	dc37      	bgt.n	801cd9c <_dtoa_r+0x984>
 801cd2c:	9b06      	ldr	r3, [sp, #24]
 801cd2e:	2b02      	cmp	r3, #2
 801cd30:	dd34      	ble.n	801cd9c <_dtoa_r+0x984>
 801cd32:	9b03      	ldr	r3, [sp, #12]
 801cd34:	9302      	str	r3, [sp, #8]
 801cd36:	9b02      	ldr	r3, [sp, #8]
 801cd38:	b96b      	cbnz	r3, 801cd56 <_dtoa_r+0x93e>
 801cd3a:	4631      	mov	r1, r6
 801cd3c:	2205      	movs	r2, #5
 801cd3e:	4620      	mov	r0, r4
 801cd40:	f000 fea4 	bl	801da8c <__multadd>
 801cd44:	4601      	mov	r1, r0
 801cd46:	4606      	mov	r6, r0
 801cd48:	ee18 0a10 	vmov	r0, s16
 801cd4c:	f001 f908 	bl	801df60 <__mcmp>
 801cd50:	2800      	cmp	r0, #0
 801cd52:	f73f adbb 	bgt.w	801c8cc <_dtoa_r+0x4b4>
 801cd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd58:	9d01      	ldr	r5, [sp, #4]
 801cd5a:	43db      	mvns	r3, r3
 801cd5c:	9300      	str	r3, [sp, #0]
 801cd5e:	f04f 0800 	mov.w	r8, #0
 801cd62:	4631      	mov	r1, r6
 801cd64:	4620      	mov	r0, r4
 801cd66:	f000 fe6f 	bl	801da48 <_Bfree>
 801cd6a:	2f00      	cmp	r7, #0
 801cd6c:	f43f aea4 	beq.w	801cab8 <_dtoa_r+0x6a0>
 801cd70:	f1b8 0f00 	cmp.w	r8, #0
 801cd74:	d005      	beq.n	801cd82 <_dtoa_r+0x96a>
 801cd76:	45b8      	cmp	r8, r7
 801cd78:	d003      	beq.n	801cd82 <_dtoa_r+0x96a>
 801cd7a:	4641      	mov	r1, r8
 801cd7c:	4620      	mov	r0, r4
 801cd7e:	f000 fe63 	bl	801da48 <_Bfree>
 801cd82:	4639      	mov	r1, r7
 801cd84:	4620      	mov	r0, r4
 801cd86:	f000 fe5f 	bl	801da48 <_Bfree>
 801cd8a:	e695      	b.n	801cab8 <_dtoa_r+0x6a0>
 801cd8c:	2600      	movs	r6, #0
 801cd8e:	4637      	mov	r7, r6
 801cd90:	e7e1      	b.n	801cd56 <_dtoa_r+0x93e>
 801cd92:	9700      	str	r7, [sp, #0]
 801cd94:	4637      	mov	r7, r6
 801cd96:	e599      	b.n	801c8cc <_dtoa_r+0x4b4>
 801cd98:	40240000 	.word	0x40240000
 801cd9c:	9b08      	ldr	r3, [sp, #32]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	f000 80ca 	beq.w	801cf38 <_dtoa_r+0xb20>
 801cda4:	9b03      	ldr	r3, [sp, #12]
 801cda6:	9302      	str	r3, [sp, #8]
 801cda8:	2d00      	cmp	r5, #0
 801cdaa:	dd05      	ble.n	801cdb8 <_dtoa_r+0x9a0>
 801cdac:	4639      	mov	r1, r7
 801cdae:	462a      	mov	r2, r5
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	f001 f865 	bl	801de80 <__lshift>
 801cdb6:	4607      	mov	r7, r0
 801cdb8:	f1b8 0f00 	cmp.w	r8, #0
 801cdbc:	d05b      	beq.n	801ce76 <_dtoa_r+0xa5e>
 801cdbe:	6879      	ldr	r1, [r7, #4]
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	f000 fe01 	bl	801d9c8 <_Balloc>
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	b928      	cbnz	r0, 801cdd6 <_dtoa_r+0x9be>
 801cdca:	4b87      	ldr	r3, [pc, #540]	; (801cfe8 <_dtoa_r+0xbd0>)
 801cdcc:	4602      	mov	r2, r0
 801cdce:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cdd2:	f7ff bb3b 	b.w	801c44c <_dtoa_r+0x34>
 801cdd6:	693a      	ldr	r2, [r7, #16]
 801cdd8:	3202      	adds	r2, #2
 801cdda:	0092      	lsls	r2, r2, #2
 801cddc:	f107 010c 	add.w	r1, r7, #12
 801cde0:	300c      	adds	r0, #12
 801cde2:	f7fc ffc7 	bl	8019d74 <memcpy>
 801cde6:	2201      	movs	r2, #1
 801cde8:	4629      	mov	r1, r5
 801cdea:	4620      	mov	r0, r4
 801cdec:	f001 f848 	bl	801de80 <__lshift>
 801cdf0:	9b01      	ldr	r3, [sp, #4]
 801cdf2:	f103 0901 	add.w	r9, r3, #1
 801cdf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801cdfa:	4413      	add	r3, r2
 801cdfc:	9305      	str	r3, [sp, #20]
 801cdfe:	f00a 0301 	and.w	r3, sl, #1
 801ce02:	46b8      	mov	r8, r7
 801ce04:	9304      	str	r3, [sp, #16]
 801ce06:	4607      	mov	r7, r0
 801ce08:	4631      	mov	r1, r6
 801ce0a:	ee18 0a10 	vmov	r0, s16
 801ce0e:	f7ff fa75 	bl	801c2fc <quorem>
 801ce12:	4641      	mov	r1, r8
 801ce14:	9002      	str	r0, [sp, #8]
 801ce16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801ce1a:	ee18 0a10 	vmov	r0, s16
 801ce1e:	f001 f89f 	bl	801df60 <__mcmp>
 801ce22:	463a      	mov	r2, r7
 801ce24:	9003      	str	r0, [sp, #12]
 801ce26:	4631      	mov	r1, r6
 801ce28:	4620      	mov	r0, r4
 801ce2a:	f001 f8b5 	bl	801df98 <__mdiff>
 801ce2e:	68c2      	ldr	r2, [r0, #12]
 801ce30:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801ce34:	4605      	mov	r5, r0
 801ce36:	bb02      	cbnz	r2, 801ce7a <_dtoa_r+0xa62>
 801ce38:	4601      	mov	r1, r0
 801ce3a:	ee18 0a10 	vmov	r0, s16
 801ce3e:	f001 f88f 	bl	801df60 <__mcmp>
 801ce42:	4602      	mov	r2, r0
 801ce44:	4629      	mov	r1, r5
 801ce46:	4620      	mov	r0, r4
 801ce48:	9207      	str	r2, [sp, #28]
 801ce4a:	f000 fdfd 	bl	801da48 <_Bfree>
 801ce4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ce52:	ea43 0102 	orr.w	r1, r3, r2
 801ce56:	9b04      	ldr	r3, [sp, #16]
 801ce58:	430b      	orrs	r3, r1
 801ce5a:	464d      	mov	r5, r9
 801ce5c:	d10f      	bne.n	801ce7e <_dtoa_r+0xa66>
 801ce5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ce62:	d02a      	beq.n	801ceba <_dtoa_r+0xaa2>
 801ce64:	9b03      	ldr	r3, [sp, #12]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	dd02      	ble.n	801ce70 <_dtoa_r+0xa58>
 801ce6a:	9b02      	ldr	r3, [sp, #8]
 801ce6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801ce70:	f88b a000 	strb.w	sl, [fp]
 801ce74:	e775      	b.n	801cd62 <_dtoa_r+0x94a>
 801ce76:	4638      	mov	r0, r7
 801ce78:	e7ba      	b.n	801cdf0 <_dtoa_r+0x9d8>
 801ce7a:	2201      	movs	r2, #1
 801ce7c:	e7e2      	b.n	801ce44 <_dtoa_r+0xa2c>
 801ce7e:	9b03      	ldr	r3, [sp, #12]
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	db04      	blt.n	801ce8e <_dtoa_r+0xa76>
 801ce84:	9906      	ldr	r1, [sp, #24]
 801ce86:	430b      	orrs	r3, r1
 801ce88:	9904      	ldr	r1, [sp, #16]
 801ce8a:	430b      	orrs	r3, r1
 801ce8c:	d122      	bne.n	801ced4 <_dtoa_r+0xabc>
 801ce8e:	2a00      	cmp	r2, #0
 801ce90:	ddee      	ble.n	801ce70 <_dtoa_r+0xa58>
 801ce92:	ee18 1a10 	vmov	r1, s16
 801ce96:	2201      	movs	r2, #1
 801ce98:	4620      	mov	r0, r4
 801ce9a:	f000 fff1 	bl	801de80 <__lshift>
 801ce9e:	4631      	mov	r1, r6
 801cea0:	ee08 0a10 	vmov	s16, r0
 801cea4:	f001 f85c 	bl	801df60 <__mcmp>
 801cea8:	2800      	cmp	r0, #0
 801ceaa:	dc03      	bgt.n	801ceb4 <_dtoa_r+0xa9c>
 801ceac:	d1e0      	bne.n	801ce70 <_dtoa_r+0xa58>
 801ceae:	f01a 0f01 	tst.w	sl, #1
 801ceb2:	d0dd      	beq.n	801ce70 <_dtoa_r+0xa58>
 801ceb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ceb8:	d1d7      	bne.n	801ce6a <_dtoa_r+0xa52>
 801ceba:	2339      	movs	r3, #57	; 0x39
 801cebc:	f88b 3000 	strb.w	r3, [fp]
 801cec0:	462b      	mov	r3, r5
 801cec2:	461d      	mov	r5, r3
 801cec4:	3b01      	subs	r3, #1
 801cec6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ceca:	2a39      	cmp	r2, #57	; 0x39
 801cecc:	d071      	beq.n	801cfb2 <_dtoa_r+0xb9a>
 801cece:	3201      	adds	r2, #1
 801ced0:	701a      	strb	r2, [r3, #0]
 801ced2:	e746      	b.n	801cd62 <_dtoa_r+0x94a>
 801ced4:	2a00      	cmp	r2, #0
 801ced6:	dd07      	ble.n	801cee8 <_dtoa_r+0xad0>
 801ced8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801cedc:	d0ed      	beq.n	801ceba <_dtoa_r+0xaa2>
 801cede:	f10a 0301 	add.w	r3, sl, #1
 801cee2:	f88b 3000 	strb.w	r3, [fp]
 801cee6:	e73c      	b.n	801cd62 <_dtoa_r+0x94a>
 801cee8:	9b05      	ldr	r3, [sp, #20]
 801ceea:	f809 ac01 	strb.w	sl, [r9, #-1]
 801ceee:	4599      	cmp	r9, r3
 801cef0:	d047      	beq.n	801cf82 <_dtoa_r+0xb6a>
 801cef2:	ee18 1a10 	vmov	r1, s16
 801cef6:	2300      	movs	r3, #0
 801cef8:	220a      	movs	r2, #10
 801cefa:	4620      	mov	r0, r4
 801cefc:	f000 fdc6 	bl	801da8c <__multadd>
 801cf00:	45b8      	cmp	r8, r7
 801cf02:	ee08 0a10 	vmov	s16, r0
 801cf06:	f04f 0300 	mov.w	r3, #0
 801cf0a:	f04f 020a 	mov.w	r2, #10
 801cf0e:	4641      	mov	r1, r8
 801cf10:	4620      	mov	r0, r4
 801cf12:	d106      	bne.n	801cf22 <_dtoa_r+0xb0a>
 801cf14:	f000 fdba 	bl	801da8c <__multadd>
 801cf18:	4680      	mov	r8, r0
 801cf1a:	4607      	mov	r7, r0
 801cf1c:	f109 0901 	add.w	r9, r9, #1
 801cf20:	e772      	b.n	801ce08 <_dtoa_r+0x9f0>
 801cf22:	f000 fdb3 	bl	801da8c <__multadd>
 801cf26:	4639      	mov	r1, r7
 801cf28:	4680      	mov	r8, r0
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	220a      	movs	r2, #10
 801cf2e:	4620      	mov	r0, r4
 801cf30:	f000 fdac 	bl	801da8c <__multadd>
 801cf34:	4607      	mov	r7, r0
 801cf36:	e7f1      	b.n	801cf1c <_dtoa_r+0xb04>
 801cf38:	9b03      	ldr	r3, [sp, #12]
 801cf3a:	9302      	str	r3, [sp, #8]
 801cf3c:	9d01      	ldr	r5, [sp, #4]
 801cf3e:	ee18 0a10 	vmov	r0, s16
 801cf42:	4631      	mov	r1, r6
 801cf44:	f7ff f9da 	bl	801c2fc <quorem>
 801cf48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801cf4c:	9b01      	ldr	r3, [sp, #4]
 801cf4e:	f805 ab01 	strb.w	sl, [r5], #1
 801cf52:	1aea      	subs	r2, r5, r3
 801cf54:	9b02      	ldr	r3, [sp, #8]
 801cf56:	4293      	cmp	r3, r2
 801cf58:	dd09      	ble.n	801cf6e <_dtoa_r+0xb56>
 801cf5a:	ee18 1a10 	vmov	r1, s16
 801cf5e:	2300      	movs	r3, #0
 801cf60:	220a      	movs	r2, #10
 801cf62:	4620      	mov	r0, r4
 801cf64:	f000 fd92 	bl	801da8c <__multadd>
 801cf68:	ee08 0a10 	vmov	s16, r0
 801cf6c:	e7e7      	b.n	801cf3e <_dtoa_r+0xb26>
 801cf6e:	9b02      	ldr	r3, [sp, #8]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	bfc8      	it	gt
 801cf74:	461d      	movgt	r5, r3
 801cf76:	9b01      	ldr	r3, [sp, #4]
 801cf78:	bfd8      	it	le
 801cf7a:	2501      	movle	r5, #1
 801cf7c:	441d      	add	r5, r3
 801cf7e:	f04f 0800 	mov.w	r8, #0
 801cf82:	ee18 1a10 	vmov	r1, s16
 801cf86:	2201      	movs	r2, #1
 801cf88:	4620      	mov	r0, r4
 801cf8a:	f000 ff79 	bl	801de80 <__lshift>
 801cf8e:	4631      	mov	r1, r6
 801cf90:	ee08 0a10 	vmov	s16, r0
 801cf94:	f000 ffe4 	bl	801df60 <__mcmp>
 801cf98:	2800      	cmp	r0, #0
 801cf9a:	dc91      	bgt.n	801cec0 <_dtoa_r+0xaa8>
 801cf9c:	d102      	bne.n	801cfa4 <_dtoa_r+0xb8c>
 801cf9e:	f01a 0f01 	tst.w	sl, #1
 801cfa2:	d18d      	bne.n	801cec0 <_dtoa_r+0xaa8>
 801cfa4:	462b      	mov	r3, r5
 801cfa6:	461d      	mov	r5, r3
 801cfa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cfac:	2a30      	cmp	r2, #48	; 0x30
 801cfae:	d0fa      	beq.n	801cfa6 <_dtoa_r+0xb8e>
 801cfb0:	e6d7      	b.n	801cd62 <_dtoa_r+0x94a>
 801cfb2:	9a01      	ldr	r2, [sp, #4]
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	d184      	bne.n	801cec2 <_dtoa_r+0xaaa>
 801cfb8:	9b00      	ldr	r3, [sp, #0]
 801cfba:	3301      	adds	r3, #1
 801cfbc:	9300      	str	r3, [sp, #0]
 801cfbe:	2331      	movs	r3, #49	; 0x31
 801cfc0:	7013      	strb	r3, [r2, #0]
 801cfc2:	e6ce      	b.n	801cd62 <_dtoa_r+0x94a>
 801cfc4:	4b09      	ldr	r3, [pc, #36]	; (801cfec <_dtoa_r+0xbd4>)
 801cfc6:	f7ff ba95 	b.w	801c4f4 <_dtoa_r+0xdc>
 801cfca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	f47f aa6e 	bne.w	801c4ae <_dtoa_r+0x96>
 801cfd2:	4b07      	ldr	r3, [pc, #28]	; (801cff0 <_dtoa_r+0xbd8>)
 801cfd4:	f7ff ba8e 	b.w	801c4f4 <_dtoa_r+0xdc>
 801cfd8:	9b02      	ldr	r3, [sp, #8]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	dcae      	bgt.n	801cf3c <_dtoa_r+0xb24>
 801cfde:	9b06      	ldr	r3, [sp, #24]
 801cfe0:	2b02      	cmp	r3, #2
 801cfe2:	f73f aea8 	bgt.w	801cd36 <_dtoa_r+0x91e>
 801cfe6:	e7a9      	b.n	801cf3c <_dtoa_r+0xb24>
 801cfe8:	0801f909 	.word	0x0801f909
 801cfec:	0801f718 	.word	0x0801f718
 801cff0:	0801f8a1 	.word	0x0801f8a1

0801cff4 <__env_lock>:
 801cff4:	4801      	ldr	r0, [pc, #4]	; (801cffc <__env_lock+0x8>)
 801cff6:	f7fc beaa 	b.w	8019d4e <__retarget_lock_acquire_recursive>
 801cffa:	bf00      	nop
 801cffc:	20009f1c 	.word	0x20009f1c

0801d000 <__env_unlock>:
 801d000:	4801      	ldr	r0, [pc, #4]	; (801d008 <__env_unlock+0x8>)
 801d002:	f7fc bea5 	b.w	8019d50 <__retarget_lock_release_recursive>
 801d006:	bf00      	nop
 801d008:	20009f1c 	.word	0x20009f1c

0801d00c <__sflush_r>:
 801d00c:	898a      	ldrh	r2, [r1, #12]
 801d00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d012:	4605      	mov	r5, r0
 801d014:	0710      	lsls	r0, r2, #28
 801d016:	460c      	mov	r4, r1
 801d018:	d458      	bmi.n	801d0cc <__sflush_r+0xc0>
 801d01a:	684b      	ldr	r3, [r1, #4]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	dc05      	bgt.n	801d02c <__sflush_r+0x20>
 801d020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d022:	2b00      	cmp	r3, #0
 801d024:	dc02      	bgt.n	801d02c <__sflush_r+0x20>
 801d026:	2000      	movs	r0, #0
 801d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d02e:	2e00      	cmp	r6, #0
 801d030:	d0f9      	beq.n	801d026 <__sflush_r+0x1a>
 801d032:	2300      	movs	r3, #0
 801d034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d038:	682f      	ldr	r7, [r5, #0]
 801d03a:	602b      	str	r3, [r5, #0]
 801d03c:	d032      	beq.n	801d0a4 <__sflush_r+0x98>
 801d03e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d040:	89a3      	ldrh	r3, [r4, #12]
 801d042:	075a      	lsls	r2, r3, #29
 801d044:	d505      	bpl.n	801d052 <__sflush_r+0x46>
 801d046:	6863      	ldr	r3, [r4, #4]
 801d048:	1ac0      	subs	r0, r0, r3
 801d04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d04c:	b10b      	cbz	r3, 801d052 <__sflush_r+0x46>
 801d04e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d050:	1ac0      	subs	r0, r0, r3
 801d052:	2300      	movs	r3, #0
 801d054:	4602      	mov	r2, r0
 801d056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d058:	6a21      	ldr	r1, [r4, #32]
 801d05a:	4628      	mov	r0, r5
 801d05c:	47b0      	blx	r6
 801d05e:	1c43      	adds	r3, r0, #1
 801d060:	89a3      	ldrh	r3, [r4, #12]
 801d062:	d106      	bne.n	801d072 <__sflush_r+0x66>
 801d064:	6829      	ldr	r1, [r5, #0]
 801d066:	291d      	cmp	r1, #29
 801d068:	d82c      	bhi.n	801d0c4 <__sflush_r+0xb8>
 801d06a:	4a2a      	ldr	r2, [pc, #168]	; (801d114 <__sflush_r+0x108>)
 801d06c:	40ca      	lsrs	r2, r1
 801d06e:	07d6      	lsls	r6, r2, #31
 801d070:	d528      	bpl.n	801d0c4 <__sflush_r+0xb8>
 801d072:	2200      	movs	r2, #0
 801d074:	6062      	str	r2, [r4, #4]
 801d076:	04d9      	lsls	r1, r3, #19
 801d078:	6922      	ldr	r2, [r4, #16]
 801d07a:	6022      	str	r2, [r4, #0]
 801d07c:	d504      	bpl.n	801d088 <__sflush_r+0x7c>
 801d07e:	1c42      	adds	r2, r0, #1
 801d080:	d101      	bne.n	801d086 <__sflush_r+0x7a>
 801d082:	682b      	ldr	r3, [r5, #0]
 801d084:	b903      	cbnz	r3, 801d088 <__sflush_r+0x7c>
 801d086:	6560      	str	r0, [r4, #84]	; 0x54
 801d088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d08a:	602f      	str	r7, [r5, #0]
 801d08c:	2900      	cmp	r1, #0
 801d08e:	d0ca      	beq.n	801d026 <__sflush_r+0x1a>
 801d090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d094:	4299      	cmp	r1, r3
 801d096:	d002      	beq.n	801d09e <__sflush_r+0x92>
 801d098:	4628      	mov	r0, r5
 801d09a:	f7fc feb1 	bl	8019e00 <_free_r>
 801d09e:	2000      	movs	r0, #0
 801d0a0:	6360      	str	r0, [r4, #52]	; 0x34
 801d0a2:	e7c1      	b.n	801d028 <__sflush_r+0x1c>
 801d0a4:	6a21      	ldr	r1, [r4, #32]
 801d0a6:	2301      	movs	r3, #1
 801d0a8:	4628      	mov	r0, r5
 801d0aa:	47b0      	blx	r6
 801d0ac:	1c41      	adds	r1, r0, #1
 801d0ae:	d1c7      	bne.n	801d040 <__sflush_r+0x34>
 801d0b0:	682b      	ldr	r3, [r5, #0]
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d0c4      	beq.n	801d040 <__sflush_r+0x34>
 801d0b6:	2b1d      	cmp	r3, #29
 801d0b8:	d001      	beq.n	801d0be <__sflush_r+0xb2>
 801d0ba:	2b16      	cmp	r3, #22
 801d0bc:	d101      	bne.n	801d0c2 <__sflush_r+0xb6>
 801d0be:	602f      	str	r7, [r5, #0]
 801d0c0:	e7b1      	b.n	801d026 <__sflush_r+0x1a>
 801d0c2:	89a3      	ldrh	r3, [r4, #12]
 801d0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d0c8:	81a3      	strh	r3, [r4, #12]
 801d0ca:	e7ad      	b.n	801d028 <__sflush_r+0x1c>
 801d0cc:	690f      	ldr	r7, [r1, #16]
 801d0ce:	2f00      	cmp	r7, #0
 801d0d0:	d0a9      	beq.n	801d026 <__sflush_r+0x1a>
 801d0d2:	0793      	lsls	r3, r2, #30
 801d0d4:	680e      	ldr	r6, [r1, #0]
 801d0d6:	bf08      	it	eq
 801d0d8:	694b      	ldreq	r3, [r1, #20]
 801d0da:	600f      	str	r7, [r1, #0]
 801d0dc:	bf18      	it	ne
 801d0de:	2300      	movne	r3, #0
 801d0e0:	eba6 0807 	sub.w	r8, r6, r7
 801d0e4:	608b      	str	r3, [r1, #8]
 801d0e6:	f1b8 0f00 	cmp.w	r8, #0
 801d0ea:	dd9c      	ble.n	801d026 <__sflush_r+0x1a>
 801d0ec:	6a21      	ldr	r1, [r4, #32]
 801d0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d0f0:	4643      	mov	r3, r8
 801d0f2:	463a      	mov	r2, r7
 801d0f4:	4628      	mov	r0, r5
 801d0f6:	47b0      	blx	r6
 801d0f8:	2800      	cmp	r0, #0
 801d0fa:	dc06      	bgt.n	801d10a <__sflush_r+0xfe>
 801d0fc:	89a3      	ldrh	r3, [r4, #12]
 801d0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d102:	81a3      	strh	r3, [r4, #12]
 801d104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d108:	e78e      	b.n	801d028 <__sflush_r+0x1c>
 801d10a:	4407      	add	r7, r0
 801d10c:	eba8 0800 	sub.w	r8, r8, r0
 801d110:	e7e9      	b.n	801d0e6 <__sflush_r+0xda>
 801d112:	bf00      	nop
 801d114:	20400001 	.word	0x20400001

0801d118 <_fflush_r>:
 801d118:	b538      	push	{r3, r4, r5, lr}
 801d11a:	690b      	ldr	r3, [r1, #16]
 801d11c:	4605      	mov	r5, r0
 801d11e:	460c      	mov	r4, r1
 801d120:	b913      	cbnz	r3, 801d128 <_fflush_r+0x10>
 801d122:	2500      	movs	r5, #0
 801d124:	4628      	mov	r0, r5
 801d126:	bd38      	pop	{r3, r4, r5, pc}
 801d128:	b118      	cbz	r0, 801d132 <_fflush_r+0x1a>
 801d12a:	6983      	ldr	r3, [r0, #24]
 801d12c:	b90b      	cbnz	r3, 801d132 <_fflush_r+0x1a>
 801d12e:	f7fc fd03 	bl	8019b38 <__sinit>
 801d132:	4b14      	ldr	r3, [pc, #80]	; (801d184 <_fflush_r+0x6c>)
 801d134:	429c      	cmp	r4, r3
 801d136:	d11b      	bne.n	801d170 <_fflush_r+0x58>
 801d138:	686c      	ldr	r4, [r5, #4]
 801d13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d0ef      	beq.n	801d122 <_fflush_r+0xa>
 801d142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d144:	07d0      	lsls	r0, r2, #31
 801d146:	d404      	bmi.n	801d152 <_fflush_r+0x3a>
 801d148:	0599      	lsls	r1, r3, #22
 801d14a:	d402      	bmi.n	801d152 <_fflush_r+0x3a>
 801d14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d14e:	f7fc fdfe 	bl	8019d4e <__retarget_lock_acquire_recursive>
 801d152:	4628      	mov	r0, r5
 801d154:	4621      	mov	r1, r4
 801d156:	f7ff ff59 	bl	801d00c <__sflush_r>
 801d15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d15c:	07da      	lsls	r2, r3, #31
 801d15e:	4605      	mov	r5, r0
 801d160:	d4e0      	bmi.n	801d124 <_fflush_r+0xc>
 801d162:	89a3      	ldrh	r3, [r4, #12]
 801d164:	059b      	lsls	r3, r3, #22
 801d166:	d4dd      	bmi.n	801d124 <_fflush_r+0xc>
 801d168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d16a:	f7fc fdf1 	bl	8019d50 <__retarget_lock_release_recursive>
 801d16e:	e7d9      	b.n	801d124 <_fflush_r+0xc>
 801d170:	4b05      	ldr	r3, [pc, #20]	; (801d188 <_fflush_r+0x70>)
 801d172:	429c      	cmp	r4, r3
 801d174:	d101      	bne.n	801d17a <_fflush_r+0x62>
 801d176:	68ac      	ldr	r4, [r5, #8]
 801d178:	e7df      	b.n	801d13a <_fflush_r+0x22>
 801d17a:	4b04      	ldr	r3, [pc, #16]	; (801d18c <_fflush_r+0x74>)
 801d17c:	429c      	cmp	r4, r3
 801d17e:	bf08      	it	eq
 801d180:	68ec      	ldreq	r4, [r5, #12]
 801d182:	e7da      	b.n	801d13a <_fflush_r+0x22>
 801d184:	0801f6c4 	.word	0x0801f6c4
 801d188:	0801f6e4 	.word	0x0801f6e4
 801d18c:	0801f6a4 	.word	0x0801f6a4

0801d190 <fiprintf>:
 801d190:	b40e      	push	{r1, r2, r3}
 801d192:	b503      	push	{r0, r1, lr}
 801d194:	4601      	mov	r1, r0
 801d196:	ab03      	add	r3, sp, #12
 801d198:	4805      	ldr	r0, [pc, #20]	; (801d1b0 <fiprintf+0x20>)
 801d19a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d19e:	6800      	ldr	r0, [r0, #0]
 801d1a0:	9301      	str	r3, [sp, #4]
 801d1a2:	f001 fa87 	bl	801e6b4 <_vfiprintf_r>
 801d1a6:	b002      	add	sp, #8
 801d1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1ac:	b003      	add	sp, #12
 801d1ae:	4770      	bx	lr
 801d1b0:	20000088 	.word	0x20000088

0801d1b4 <rshift>:
 801d1b4:	6903      	ldr	r3, [r0, #16]
 801d1b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d1ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d1be:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d1c2:	f100 0414 	add.w	r4, r0, #20
 801d1c6:	dd45      	ble.n	801d254 <rshift+0xa0>
 801d1c8:	f011 011f 	ands.w	r1, r1, #31
 801d1cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d1d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d1d4:	d10c      	bne.n	801d1f0 <rshift+0x3c>
 801d1d6:	f100 0710 	add.w	r7, r0, #16
 801d1da:	4629      	mov	r1, r5
 801d1dc:	42b1      	cmp	r1, r6
 801d1de:	d334      	bcc.n	801d24a <rshift+0x96>
 801d1e0:	1a9b      	subs	r3, r3, r2
 801d1e2:	009b      	lsls	r3, r3, #2
 801d1e4:	1eea      	subs	r2, r5, #3
 801d1e6:	4296      	cmp	r6, r2
 801d1e8:	bf38      	it	cc
 801d1ea:	2300      	movcc	r3, #0
 801d1ec:	4423      	add	r3, r4
 801d1ee:	e015      	b.n	801d21c <rshift+0x68>
 801d1f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d1f4:	f1c1 0820 	rsb	r8, r1, #32
 801d1f8:	40cf      	lsrs	r7, r1
 801d1fa:	f105 0e04 	add.w	lr, r5, #4
 801d1fe:	46a1      	mov	r9, r4
 801d200:	4576      	cmp	r6, lr
 801d202:	46f4      	mov	ip, lr
 801d204:	d815      	bhi.n	801d232 <rshift+0x7e>
 801d206:	1a9a      	subs	r2, r3, r2
 801d208:	0092      	lsls	r2, r2, #2
 801d20a:	3a04      	subs	r2, #4
 801d20c:	3501      	adds	r5, #1
 801d20e:	42ae      	cmp	r6, r5
 801d210:	bf38      	it	cc
 801d212:	2200      	movcc	r2, #0
 801d214:	18a3      	adds	r3, r4, r2
 801d216:	50a7      	str	r7, [r4, r2]
 801d218:	b107      	cbz	r7, 801d21c <rshift+0x68>
 801d21a:	3304      	adds	r3, #4
 801d21c:	1b1a      	subs	r2, r3, r4
 801d21e:	42a3      	cmp	r3, r4
 801d220:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d224:	bf08      	it	eq
 801d226:	2300      	moveq	r3, #0
 801d228:	6102      	str	r2, [r0, #16]
 801d22a:	bf08      	it	eq
 801d22c:	6143      	streq	r3, [r0, #20]
 801d22e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d232:	f8dc c000 	ldr.w	ip, [ip]
 801d236:	fa0c fc08 	lsl.w	ip, ip, r8
 801d23a:	ea4c 0707 	orr.w	r7, ip, r7
 801d23e:	f849 7b04 	str.w	r7, [r9], #4
 801d242:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d246:	40cf      	lsrs	r7, r1
 801d248:	e7da      	b.n	801d200 <rshift+0x4c>
 801d24a:	f851 cb04 	ldr.w	ip, [r1], #4
 801d24e:	f847 cf04 	str.w	ip, [r7, #4]!
 801d252:	e7c3      	b.n	801d1dc <rshift+0x28>
 801d254:	4623      	mov	r3, r4
 801d256:	e7e1      	b.n	801d21c <rshift+0x68>

0801d258 <__hexdig_fun>:
 801d258:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d25c:	2b09      	cmp	r3, #9
 801d25e:	d802      	bhi.n	801d266 <__hexdig_fun+0xe>
 801d260:	3820      	subs	r0, #32
 801d262:	b2c0      	uxtb	r0, r0
 801d264:	4770      	bx	lr
 801d266:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d26a:	2b05      	cmp	r3, #5
 801d26c:	d801      	bhi.n	801d272 <__hexdig_fun+0x1a>
 801d26e:	3847      	subs	r0, #71	; 0x47
 801d270:	e7f7      	b.n	801d262 <__hexdig_fun+0xa>
 801d272:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d276:	2b05      	cmp	r3, #5
 801d278:	d801      	bhi.n	801d27e <__hexdig_fun+0x26>
 801d27a:	3827      	subs	r0, #39	; 0x27
 801d27c:	e7f1      	b.n	801d262 <__hexdig_fun+0xa>
 801d27e:	2000      	movs	r0, #0
 801d280:	4770      	bx	lr
	...

0801d284 <__gethex>:
 801d284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d288:	ed2d 8b02 	vpush	{d8}
 801d28c:	b089      	sub	sp, #36	; 0x24
 801d28e:	ee08 0a10 	vmov	s16, r0
 801d292:	9304      	str	r3, [sp, #16]
 801d294:	4bb4      	ldr	r3, [pc, #720]	; (801d568 <__gethex+0x2e4>)
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	9301      	str	r3, [sp, #4]
 801d29a:	4618      	mov	r0, r3
 801d29c:	468b      	mov	fp, r1
 801d29e:	4690      	mov	r8, r2
 801d2a0:	f7e2 ffa8 	bl	80001f4 <strlen>
 801d2a4:	9b01      	ldr	r3, [sp, #4]
 801d2a6:	f8db 2000 	ldr.w	r2, [fp]
 801d2aa:	4403      	add	r3, r0
 801d2ac:	4682      	mov	sl, r0
 801d2ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d2b2:	9305      	str	r3, [sp, #20]
 801d2b4:	1c93      	adds	r3, r2, #2
 801d2b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d2ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d2be:	32fe      	adds	r2, #254	; 0xfe
 801d2c0:	18d1      	adds	r1, r2, r3
 801d2c2:	461f      	mov	r7, r3
 801d2c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d2c8:	9100      	str	r1, [sp, #0]
 801d2ca:	2830      	cmp	r0, #48	; 0x30
 801d2cc:	d0f8      	beq.n	801d2c0 <__gethex+0x3c>
 801d2ce:	f7ff ffc3 	bl	801d258 <__hexdig_fun>
 801d2d2:	4604      	mov	r4, r0
 801d2d4:	2800      	cmp	r0, #0
 801d2d6:	d13a      	bne.n	801d34e <__gethex+0xca>
 801d2d8:	9901      	ldr	r1, [sp, #4]
 801d2da:	4652      	mov	r2, sl
 801d2dc:	4638      	mov	r0, r7
 801d2de:	f7fd ff17 	bl	801b110 <strncmp>
 801d2e2:	4605      	mov	r5, r0
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	d168      	bne.n	801d3ba <__gethex+0x136>
 801d2e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d2ec:	eb07 060a 	add.w	r6, r7, sl
 801d2f0:	f7ff ffb2 	bl	801d258 <__hexdig_fun>
 801d2f4:	2800      	cmp	r0, #0
 801d2f6:	d062      	beq.n	801d3be <__gethex+0x13a>
 801d2f8:	4633      	mov	r3, r6
 801d2fa:	7818      	ldrb	r0, [r3, #0]
 801d2fc:	2830      	cmp	r0, #48	; 0x30
 801d2fe:	461f      	mov	r7, r3
 801d300:	f103 0301 	add.w	r3, r3, #1
 801d304:	d0f9      	beq.n	801d2fa <__gethex+0x76>
 801d306:	f7ff ffa7 	bl	801d258 <__hexdig_fun>
 801d30a:	2301      	movs	r3, #1
 801d30c:	fab0 f480 	clz	r4, r0
 801d310:	0964      	lsrs	r4, r4, #5
 801d312:	4635      	mov	r5, r6
 801d314:	9300      	str	r3, [sp, #0]
 801d316:	463a      	mov	r2, r7
 801d318:	4616      	mov	r6, r2
 801d31a:	3201      	adds	r2, #1
 801d31c:	7830      	ldrb	r0, [r6, #0]
 801d31e:	f7ff ff9b 	bl	801d258 <__hexdig_fun>
 801d322:	2800      	cmp	r0, #0
 801d324:	d1f8      	bne.n	801d318 <__gethex+0x94>
 801d326:	9901      	ldr	r1, [sp, #4]
 801d328:	4652      	mov	r2, sl
 801d32a:	4630      	mov	r0, r6
 801d32c:	f7fd fef0 	bl	801b110 <strncmp>
 801d330:	b980      	cbnz	r0, 801d354 <__gethex+0xd0>
 801d332:	b94d      	cbnz	r5, 801d348 <__gethex+0xc4>
 801d334:	eb06 050a 	add.w	r5, r6, sl
 801d338:	462a      	mov	r2, r5
 801d33a:	4616      	mov	r6, r2
 801d33c:	3201      	adds	r2, #1
 801d33e:	7830      	ldrb	r0, [r6, #0]
 801d340:	f7ff ff8a 	bl	801d258 <__hexdig_fun>
 801d344:	2800      	cmp	r0, #0
 801d346:	d1f8      	bne.n	801d33a <__gethex+0xb6>
 801d348:	1bad      	subs	r5, r5, r6
 801d34a:	00ad      	lsls	r5, r5, #2
 801d34c:	e004      	b.n	801d358 <__gethex+0xd4>
 801d34e:	2400      	movs	r4, #0
 801d350:	4625      	mov	r5, r4
 801d352:	e7e0      	b.n	801d316 <__gethex+0x92>
 801d354:	2d00      	cmp	r5, #0
 801d356:	d1f7      	bne.n	801d348 <__gethex+0xc4>
 801d358:	7833      	ldrb	r3, [r6, #0]
 801d35a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d35e:	2b50      	cmp	r3, #80	; 0x50
 801d360:	d13b      	bne.n	801d3da <__gethex+0x156>
 801d362:	7873      	ldrb	r3, [r6, #1]
 801d364:	2b2b      	cmp	r3, #43	; 0x2b
 801d366:	d02c      	beq.n	801d3c2 <__gethex+0x13e>
 801d368:	2b2d      	cmp	r3, #45	; 0x2d
 801d36a:	d02e      	beq.n	801d3ca <__gethex+0x146>
 801d36c:	1c71      	adds	r1, r6, #1
 801d36e:	f04f 0900 	mov.w	r9, #0
 801d372:	7808      	ldrb	r0, [r1, #0]
 801d374:	f7ff ff70 	bl	801d258 <__hexdig_fun>
 801d378:	1e43      	subs	r3, r0, #1
 801d37a:	b2db      	uxtb	r3, r3
 801d37c:	2b18      	cmp	r3, #24
 801d37e:	d82c      	bhi.n	801d3da <__gethex+0x156>
 801d380:	f1a0 0210 	sub.w	r2, r0, #16
 801d384:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d388:	f7ff ff66 	bl	801d258 <__hexdig_fun>
 801d38c:	1e43      	subs	r3, r0, #1
 801d38e:	b2db      	uxtb	r3, r3
 801d390:	2b18      	cmp	r3, #24
 801d392:	d91d      	bls.n	801d3d0 <__gethex+0x14c>
 801d394:	f1b9 0f00 	cmp.w	r9, #0
 801d398:	d000      	beq.n	801d39c <__gethex+0x118>
 801d39a:	4252      	negs	r2, r2
 801d39c:	4415      	add	r5, r2
 801d39e:	f8cb 1000 	str.w	r1, [fp]
 801d3a2:	b1e4      	cbz	r4, 801d3de <__gethex+0x15a>
 801d3a4:	9b00      	ldr	r3, [sp, #0]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	bf14      	ite	ne
 801d3aa:	2700      	movne	r7, #0
 801d3ac:	2706      	moveq	r7, #6
 801d3ae:	4638      	mov	r0, r7
 801d3b0:	b009      	add	sp, #36	; 0x24
 801d3b2:	ecbd 8b02 	vpop	{d8}
 801d3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ba:	463e      	mov	r6, r7
 801d3bc:	4625      	mov	r5, r4
 801d3be:	2401      	movs	r4, #1
 801d3c0:	e7ca      	b.n	801d358 <__gethex+0xd4>
 801d3c2:	f04f 0900 	mov.w	r9, #0
 801d3c6:	1cb1      	adds	r1, r6, #2
 801d3c8:	e7d3      	b.n	801d372 <__gethex+0xee>
 801d3ca:	f04f 0901 	mov.w	r9, #1
 801d3ce:	e7fa      	b.n	801d3c6 <__gethex+0x142>
 801d3d0:	230a      	movs	r3, #10
 801d3d2:	fb03 0202 	mla	r2, r3, r2, r0
 801d3d6:	3a10      	subs	r2, #16
 801d3d8:	e7d4      	b.n	801d384 <__gethex+0x100>
 801d3da:	4631      	mov	r1, r6
 801d3dc:	e7df      	b.n	801d39e <__gethex+0x11a>
 801d3de:	1bf3      	subs	r3, r6, r7
 801d3e0:	3b01      	subs	r3, #1
 801d3e2:	4621      	mov	r1, r4
 801d3e4:	2b07      	cmp	r3, #7
 801d3e6:	dc0b      	bgt.n	801d400 <__gethex+0x17c>
 801d3e8:	ee18 0a10 	vmov	r0, s16
 801d3ec:	f000 faec 	bl	801d9c8 <_Balloc>
 801d3f0:	4604      	mov	r4, r0
 801d3f2:	b940      	cbnz	r0, 801d406 <__gethex+0x182>
 801d3f4:	4b5d      	ldr	r3, [pc, #372]	; (801d56c <__gethex+0x2e8>)
 801d3f6:	4602      	mov	r2, r0
 801d3f8:	21de      	movs	r1, #222	; 0xde
 801d3fa:	485d      	ldr	r0, [pc, #372]	; (801d570 <__gethex+0x2ec>)
 801d3fc:	f7fe ff50 	bl	801c2a0 <__assert_func>
 801d400:	3101      	adds	r1, #1
 801d402:	105b      	asrs	r3, r3, #1
 801d404:	e7ee      	b.n	801d3e4 <__gethex+0x160>
 801d406:	f100 0914 	add.w	r9, r0, #20
 801d40a:	f04f 0b00 	mov.w	fp, #0
 801d40e:	f1ca 0301 	rsb	r3, sl, #1
 801d412:	f8cd 9008 	str.w	r9, [sp, #8]
 801d416:	f8cd b000 	str.w	fp, [sp]
 801d41a:	9306      	str	r3, [sp, #24]
 801d41c:	42b7      	cmp	r7, r6
 801d41e:	d340      	bcc.n	801d4a2 <__gethex+0x21e>
 801d420:	9802      	ldr	r0, [sp, #8]
 801d422:	9b00      	ldr	r3, [sp, #0]
 801d424:	f840 3b04 	str.w	r3, [r0], #4
 801d428:	eba0 0009 	sub.w	r0, r0, r9
 801d42c:	1080      	asrs	r0, r0, #2
 801d42e:	0146      	lsls	r6, r0, #5
 801d430:	6120      	str	r0, [r4, #16]
 801d432:	4618      	mov	r0, r3
 801d434:	f000 fbba 	bl	801dbac <__hi0bits>
 801d438:	1a30      	subs	r0, r6, r0
 801d43a:	f8d8 6000 	ldr.w	r6, [r8]
 801d43e:	42b0      	cmp	r0, r6
 801d440:	dd63      	ble.n	801d50a <__gethex+0x286>
 801d442:	1b87      	subs	r7, r0, r6
 801d444:	4639      	mov	r1, r7
 801d446:	4620      	mov	r0, r4
 801d448:	f000 ff5e 	bl	801e308 <__any_on>
 801d44c:	4682      	mov	sl, r0
 801d44e:	b1a8      	cbz	r0, 801d47c <__gethex+0x1f8>
 801d450:	1e7b      	subs	r3, r7, #1
 801d452:	1159      	asrs	r1, r3, #5
 801d454:	f003 021f 	and.w	r2, r3, #31
 801d458:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d45c:	f04f 0a01 	mov.w	sl, #1
 801d460:	fa0a f202 	lsl.w	r2, sl, r2
 801d464:	420a      	tst	r2, r1
 801d466:	d009      	beq.n	801d47c <__gethex+0x1f8>
 801d468:	4553      	cmp	r3, sl
 801d46a:	dd05      	ble.n	801d478 <__gethex+0x1f4>
 801d46c:	1eb9      	subs	r1, r7, #2
 801d46e:	4620      	mov	r0, r4
 801d470:	f000 ff4a 	bl	801e308 <__any_on>
 801d474:	2800      	cmp	r0, #0
 801d476:	d145      	bne.n	801d504 <__gethex+0x280>
 801d478:	f04f 0a02 	mov.w	sl, #2
 801d47c:	4639      	mov	r1, r7
 801d47e:	4620      	mov	r0, r4
 801d480:	f7ff fe98 	bl	801d1b4 <rshift>
 801d484:	443d      	add	r5, r7
 801d486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d48a:	42ab      	cmp	r3, r5
 801d48c:	da4c      	bge.n	801d528 <__gethex+0x2a4>
 801d48e:	ee18 0a10 	vmov	r0, s16
 801d492:	4621      	mov	r1, r4
 801d494:	f000 fad8 	bl	801da48 <_Bfree>
 801d498:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d49a:	2300      	movs	r3, #0
 801d49c:	6013      	str	r3, [r2, #0]
 801d49e:	27a3      	movs	r7, #163	; 0xa3
 801d4a0:	e785      	b.n	801d3ae <__gethex+0x12a>
 801d4a2:	1e73      	subs	r3, r6, #1
 801d4a4:	9a05      	ldr	r2, [sp, #20]
 801d4a6:	9303      	str	r3, [sp, #12]
 801d4a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d4ac:	4293      	cmp	r3, r2
 801d4ae:	d019      	beq.n	801d4e4 <__gethex+0x260>
 801d4b0:	f1bb 0f20 	cmp.w	fp, #32
 801d4b4:	d107      	bne.n	801d4c6 <__gethex+0x242>
 801d4b6:	9b02      	ldr	r3, [sp, #8]
 801d4b8:	9a00      	ldr	r2, [sp, #0]
 801d4ba:	f843 2b04 	str.w	r2, [r3], #4
 801d4be:	9302      	str	r3, [sp, #8]
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	9300      	str	r3, [sp, #0]
 801d4c4:	469b      	mov	fp, r3
 801d4c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d4ca:	f7ff fec5 	bl	801d258 <__hexdig_fun>
 801d4ce:	9b00      	ldr	r3, [sp, #0]
 801d4d0:	f000 000f 	and.w	r0, r0, #15
 801d4d4:	fa00 f00b 	lsl.w	r0, r0, fp
 801d4d8:	4303      	orrs	r3, r0
 801d4da:	9300      	str	r3, [sp, #0]
 801d4dc:	f10b 0b04 	add.w	fp, fp, #4
 801d4e0:	9b03      	ldr	r3, [sp, #12]
 801d4e2:	e00d      	b.n	801d500 <__gethex+0x27c>
 801d4e4:	9b03      	ldr	r3, [sp, #12]
 801d4e6:	9a06      	ldr	r2, [sp, #24]
 801d4e8:	4413      	add	r3, r2
 801d4ea:	42bb      	cmp	r3, r7
 801d4ec:	d3e0      	bcc.n	801d4b0 <__gethex+0x22c>
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	9901      	ldr	r1, [sp, #4]
 801d4f2:	9307      	str	r3, [sp, #28]
 801d4f4:	4652      	mov	r2, sl
 801d4f6:	f7fd fe0b 	bl	801b110 <strncmp>
 801d4fa:	9b07      	ldr	r3, [sp, #28]
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	d1d7      	bne.n	801d4b0 <__gethex+0x22c>
 801d500:	461e      	mov	r6, r3
 801d502:	e78b      	b.n	801d41c <__gethex+0x198>
 801d504:	f04f 0a03 	mov.w	sl, #3
 801d508:	e7b8      	b.n	801d47c <__gethex+0x1f8>
 801d50a:	da0a      	bge.n	801d522 <__gethex+0x29e>
 801d50c:	1a37      	subs	r7, r6, r0
 801d50e:	4621      	mov	r1, r4
 801d510:	ee18 0a10 	vmov	r0, s16
 801d514:	463a      	mov	r2, r7
 801d516:	f000 fcb3 	bl	801de80 <__lshift>
 801d51a:	1bed      	subs	r5, r5, r7
 801d51c:	4604      	mov	r4, r0
 801d51e:	f100 0914 	add.w	r9, r0, #20
 801d522:	f04f 0a00 	mov.w	sl, #0
 801d526:	e7ae      	b.n	801d486 <__gethex+0x202>
 801d528:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d52c:	42a8      	cmp	r0, r5
 801d52e:	dd72      	ble.n	801d616 <__gethex+0x392>
 801d530:	1b45      	subs	r5, r0, r5
 801d532:	42ae      	cmp	r6, r5
 801d534:	dc36      	bgt.n	801d5a4 <__gethex+0x320>
 801d536:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d53a:	2b02      	cmp	r3, #2
 801d53c:	d02a      	beq.n	801d594 <__gethex+0x310>
 801d53e:	2b03      	cmp	r3, #3
 801d540:	d02c      	beq.n	801d59c <__gethex+0x318>
 801d542:	2b01      	cmp	r3, #1
 801d544:	d11c      	bne.n	801d580 <__gethex+0x2fc>
 801d546:	42ae      	cmp	r6, r5
 801d548:	d11a      	bne.n	801d580 <__gethex+0x2fc>
 801d54a:	2e01      	cmp	r6, #1
 801d54c:	d112      	bne.n	801d574 <__gethex+0x2f0>
 801d54e:	9a04      	ldr	r2, [sp, #16]
 801d550:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d554:	6013      	str	r3, [r2, #0]
 801d556:	2301      	movs	r3, #1
 801d558:	6123      	str	r3, [r4, #16]
 801d55a:	f8c9 3000 	str.w	r3, [r9]
 801d55e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d560:	2762      	movs	r7, #98	; 0x62
 801d562:	601c      	str	r4, [r3, #0]
 801d564:	e723      	b.n	801d3ae <__gethex+0x12a>
 801d566:	bf00      	nop
 801d568:	0801f980 	.word	0x0801f980
 801d56c:	0801f909 	.word	0x0801f909
 801d570:	0801f91a 	.word	0x0801f91a
 801d574:	1e71      	subs	r1, r6, #1
 801d576:	4620      	mov	r0, r4
 801d578:	f000 fec6 	bl	801e308 <__any_on>
 801d57c:	2800      	cmp	r0, #0
 801d57e:	d1e6      	bne.n	801d54e <__gethex+0x2ca>
 801d580:	ee18 0a10 	vmov	r0, s16
 801d584:	4621      	mov	r1, r4
 801d586:	f000 fa5f 	bl	801da48 <_Bfree>
 801d58a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d58c:	2300      	movs	r3, #0
 801d58e:	6013      	str	r3, [r2, #0]
 801d590:	2750      	movs	r7, #80	; 0x50
 801d592:	e70c      	b.n	801d3ae <__gethex+0x12a>
 801d594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d596:	2b00      	cmp	r3, #0
 801d598:	d1f2      	bne.n	801d580 <__gethex+0x2fc>
 801d59a:	e7d8      	b.n	801d54e <__gethex+0x2ca>
 801d59c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d1d5      	bne.n	801d54e <__gethex+0x2ca>
 801d5a2:	e7ed      	b.n	801d580 <__gethex+0x2fc>
 801d5a4:	1e6f      	subs	r7, r5, #1
 801d5a6:	f1ba 0f00 	cmp.w	sl, #0
 801d5aa:	d131      	bne.n	801d610 <__gethex+0x38c>
 801d5ac:	b127      	cbz	r7, 801d5b8 <__gethex+0x334>
 801d5ae:	4639      	mov	r1, r7
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	f000 fea9 	bl	801e308 <__any_on>
 801d5b6:	4682      	mov	sl, r0
 801d5b8:	117b      	asrs	r3, r7, #5
 801d5ba:	2101      	movs	r1, #1
 801d5bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d5c0:	f007 071f 	and.w	r7, r7, #31
 801d5c4:	fa01 f707 	lsl.w	r7, r1, r7
 801d5c8:	421f      	tst	r7, r3
 801d5ca:	4629      	mov	r1, r5
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	bf18      	it	ne
 801d5d0:	f04a 0a02 	orrne.w	sl, sl, #2
 801d5d4:	1b76      	subs	r6, r6, r5
 801d5d6:	f7ff fded 	bl	801d1b4 <rshift>
 801d5da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d5de:	2702      	movs	r7, #2
 801d5e0:	f1ba 0f00 	cmp.w	sl, #0
 801d5e4:	d048      	beq.n	801d678 <__gethex+0x3f4>
 801d5e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d5ea:	2b02      	cmp	r3, #2
 801d5ec:	d015      	beq.n	801d61a <__gethex+0x396>
 801d5ee:	2b03      	cmp	r3, #3
 801d5f0:	d017      	beq.n	801d622 <__gethex+0x39e>
 801d5f2:	2b01      	cmp	r3, #1
 801d5f4:	d109      	bne.n	801d60a <__gethex+0x386>
 801d5f6:	f01a 0f02 	tst.w	sl, #2
 801d5fa:	d006      	beq.n	801d60a <__gethex+0x386>
 801d5fc:	f8d9 0000 	ldr.w	r0, [r9]
 801d600:	ea4a 0a00 	orr.w	sl, sl, r0
 801d604:	f01a 0f01 	tst.w	sl, #1
 801d608:	d10e      	bne.n	801d628 <__gethex+0x3a4>
 801d60a:	f047 0710 	orr.w	r7, r7, #16
 801d60e:	e033      	b.n	801d678 <__gethex+0x3f4>
 801d610:	f04f 0a01 	mov.w	sl, #1
 801d614:	e7d0      	b.n	801d5b8 <__gethex+0x334>
 801d616:	2701      	movs	r7, #1
 801d618:	e7e2      	b.n	801d5e0 <__gethex+0x35c>
 801d61a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d61c:	f1c3 0301 	rsb	r3, r3, #1
 801d620:	9315      	str	r3, [sp, #84]	; 0x54
 801d622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d624:	2b00      	cmp	r3, #0
 801d626:	d0f0      	beq.n	801d60a <__gethex+0x386>
 801d628:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d62c:	f104 0314 	add.w	r3, r4, #20
 801d630:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d634:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d638:	f04f 0c00 	mov.w	ip, #0
 801d63c:	4618      	mov	r0, r3
 801d63e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d642:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801d646:	d01c      	beq.n	801d682 <__gethex+0x3fe>
 801d648:	3201      	adds	r2, #1
 801d64a:	6002      	str	r2, [r0, #0]
 801d64c:	2f02      	cmp	r7, #2
 801d64e:	f104 0314 	add.w	r3, r4, #20
 801d652:	d13f      	bne.n	801d6d4 <__gethex+0x450>
 801d654:	f8d8 2000 	ldr.w	r2, [r8]
 801d658:	3a01      	subs	r2, #1
 801d65a:	42b2      	cmp	r2, r6
 801d65c:	d10a      	bne.n	801d674 <__gethex+0x3f0>
 801d65e:	1171      	asrs	r1, r6, #5
 801d660:	2201      	movs	r2, #1
 801d662:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d666:	f006 061f 	and.w	r6, r6, #31
 801d66a:	fa02 f606 	lsl.w	r6, r2, r6
 801d66e:	421e      	tst	r6, r3
 801d670:	bf18      	it	ne
 801d672:	4617      	movne	r7, r2
 801d674:	f047 0720 	orr.w	r7, r7, #32
 801d678:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d67a:	601c      	str	r4, [r3, #0]
 801d67c:	9b04      	ldr	r3, [sp, #16]
 801d67e:	601d      	str	r5, [r3, #0]
 801d680:	e695      	b.n	801d3ae <__gethex+0x12a>
 801d682:	4299      	cmp	r1, r3
 801d684:	f843 cc04 	str.w	ip, [r3, #-4]
 801d688:	d8d8      	bhi.n	801d63c <__gethex+0x3b8>
 801d68a:	68a3      	ldr	r3, [r4, #8]
 801d68c:	459b      	cmp	fp, r3
 801d68e:	db19      	blt.n	801d6c4 <__gethex+0x440>
 801d690:	6861      	ldr	r1, [r4, #4]
 801d692:	ee18 0a10 	vmov	r0, s16
 801d696:	3101      	adds	r1, #1
 801d698:	f000 f996 	bl	801d9c8 <_Balloc>
 801d69c:	4681      	mov	r9, r0
 801d69e:	b918      	cbnz	r0, 801d6a8 <__gethex+0x424>
 801d6a0:	4b1a      	ldr	r3, [pc, #104]	; (801d70c <__gethex+0x488>)
 801d6a2:	4602      	mov	r2, r0
 801d6a4:	2184      	movs	r1, #132	; 0x84
 801d6a6:	e6a8      	b.n	801d3fa <__gethex+0x176>
 801d6a8:	6922      	ldr	r2, [r4, #16]
 801d6aa:	3202      	adds	r2, #2
 801d6ac:	f104 010c 	add.w	r1, r4, #12
 801d6b0:	0092      	lsls	r2, r2, #2
 801d6b2:	300c      	adds	r0, #12
 801d6b4:	f7fc fb5e 	bl	8019d74 <memcpy>
 801d6b8:	4621      	mov	r1, r4
 801d6ba:	ee18 0a10 	vmov	r0, s16
 801d6be:	f000 f9c3 	bl	801da48 <_Bfree>
 801d6c2:	464c      	mov	r4, r9
 801d6c4:	6923      	ldr	r3, [r4, #16]
 801d6c6:	1c5a      	adds	r2, r3, #1
 801d6c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d6cc:	6122      	str	r2, [r4, #16]
 801d6ce:	2201      	movs	r2, #1
 801d6d0:	615a      	str	r2, [r3, #20]
 801d6d2:	e7bb      	b.n	801d64c <__gethex+0x3c8>
 801d6d4:	6922      	ldr	r2, [r4, #16]
 801d6d6:	455a      	cmp	r2, fp
 801d6d8:	dd0b      	ble.n	801d6f2 <__gethex+0x46e>
 801d6da:	2101      	movs	r1, #1
 801d6dc:	4620      	mov	r0, r4
 801d6de:	f7ff fd69 	bl	801d1b4 <rshift>
 801d6e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d6e6:	3501      	adds	r5, #1
 801d6e8:	42ab      	cmp	r3, r5
 801d6ea:	f6ff aed0 	blt.w	801d48e <__gethex+0x20a>
 801d6ee:	2701      	movs	r7, #1
 801d6f0:	e7c0      	b.n	801d674 <__gethex+0x3f0>
 801d6f2:	f016 061f 	ands.w	r6, r6, #31
 801d6f6:	d0fa      	beq.n	801d6ee <__gethex+0x46a>
 801d6f8:	4453      	add	r3, sl
 801d6fa:	f1c6 0620 	rsb	r6, r6, #32
 801d6fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d702:	f000 fa53 	bl	801dbac <__hi0bits>
 801d706:	42b0      	cmp	r0, r6
 801d708:	dbe7      	blt.n	801d6da <__gethex+0x456>
 801d70a:	e7f0      	b.n	801d6ee <__gethex+0x46a>
 801d70c:	0801f909 	.word	0x0801f909

0801d710 <L_shift>:
 801d710:	f1c2 0208 	rsb	r2, r2, #8
 801d714:	0092      	lsls	r2, r2, #2
 801d716:	b570      	push	{r4, r5, r6, lr}
 801d718:	f1c2 0620 	rsb	r6, r2, #32
 801d71c:	6843      	ldr	r3, [r0, #4]
 801d71e:	6804      	ldr	r4, [r0, #0]
 801d720:	fa03 f506 	lsl.w	r5, r3, r6
 801d724:	432c      	orrs	r4, r5
 801d726:	40d3      	lsrs	r3, r2
 801d728:	6004      	str	r4, [r0, #0]
 801d72a:	f840 3f04 	str.w	r3, [r0, #4]!
 801d72e:	4288      	cmp	r0, r1
 801d730:	d3f4      	bcc.n	801d71c <L_shift+0xc>
 801d732:	bd70      	pop	{r4, r5, r6, pc}

0801d734 <__match>:
 801d734:	b530      	push	{r4, r5, lr}
 801d736:	6803      	ldr	r3, [r0, #0]
 801d738:	3301      	adds	r3, #1
 801d73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d73e:	b914      	cbnz	r4, 801d746 <__match+0x12>
 801d740:	6003      	str	r3, [r0, #0]
 801d742:	2001      	movs	r0, #1
 801d744:	bd30      	pop	{r4, r5, pc}
 801d746:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d74a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d74e:	2d19      	cmp	r5, #25
 801d750:	bf98      	it	ls
 801d752:	3220      	addls	r2, #32
 801d754:	42a2      	cmp	r2, r4
 801d756:	d0f0      	beq.n	801d73a <__match+0x6>
 801d758:	2000      	movs	r0, #0
 801d75a:	e7f3      	b.n	801d744 <__match+0x10>

0801d75c <__hexnan>:
 801d75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d760:	680b      	ldr	r3, [r1, #0]
 801d762:	115e      	asrs	r6, r3, #5
 801d764:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d768:	f013 031f 	ands.w	r3, r3, #31
 801d76c:	b087      	sub	sp, #28
 801d76e:	bf18      	it	ne
 801d770:	3604      	addne	r6, #4
 801d772:	2500      	movs	r5, #0
 801d774:	1f37      	subs	r7, r6, #4
 801d776:	4690      	mov	r8, r2
 801d778:	6802      	ldr	r2, [r0, #0]
 801d77a:	9301      	str	r3, [sp, #4]
 801d77c:	4682      	mov	sl, r0
 801d77e:	f846 5c04 	str.w	r5, [r6, #-4]
 801d782:	46b9      	mov	r9, r7
 801d784:	463c      	mov	r4, r7
 801d786:	9502      	str	r5, [sp, #8]
 801d788:	46ab      	mov	fp, r5
 801d78a:	7851      	ldrb	r1, [r2, #1]
 801d78c:	1c53      	adds	r3, r2, #1
 801d78e:	9303      	str	r3, [sp, #12]
 801d790:	b341      	cbz	r1, 801d7e4 <__hexnan+0x88>
 801d792:	4608      	mov	r0, r1
 801d794:	9205      	str	r2, [sp, #20]
 801d796:	9104      	str	r1, [sp, #16]
 801d798:	f7ff fd5e 	bl	801d258 <__hexdig_fun>
 801d79c:	2800      	cmp	r0, #0
 801d79e:	d14f      	bne.n	801d840 <__hexnan+0xe4>
 801d7a0:	9904      	ldr	r1, [sp, #16]
 801d7a2:	9a05      	ldr	r2, [sp, #20]
 801d7a4:	2920      	cmp	r1, #32
 801d7a6:	d818      	bhi.n	801d7da <__hexnan+0x7e>
 801d7a8:	9b02      	ldr	r3, [sp, #8]
 801d7aa:	459b      	cmp	fp, r3
 801d7ac:	dd13      	ble.n	801d7d6 <__hexnan+0x7a>
 801d7ae:	454c      	cmp	r4, r9
 801d7b0:	d206      	bcs.n	801d7c0 <__hexnan+0x64>
 801d7b2:	2d07      	cmp	r5, #7
 801d7b4:	dc04      	bgt.n	801d7c0 <__hexnan+0x64>
 801d7b6:	462a      	mov	r2, r5
 801d7b8:	4649      	mov	r1, r9
 801d7ba:	4620      	mov	r0, r4
 801d7bc:	f7ff ffa8 	bl	801d710 <L_shift>
 801d7c0:	4544      	cmp	r4, r8
 801d7c2:	d950      	bls.n	801d866 <__hexnan+0x10a>
 801d7c4:	2300      	movs	r3, #0
 801d7c6:	f1a4 0904 	sub.w	r9, r4, #4
 801d7ca:	f844 3c04 	str.w	r3, [r4, #-4]
 801d7ce:	f8cd b008 	str.w	fp, [sp, #8]
 801d7d2:	464c      	mov	r4, r9
 801d7d4:	461d      	mov	r5, r3
 801d7d6:	9a03      	ldr	r2, [sp, #12]
 801d7d8:	e7d7      	b.n	801d78a <__hexnan+0x2e>
 801d7da:	2929      	cmp	r1, #41	; 0x29
 801d7dc:	d156      	bne.n	801d88c <__hexnan+0x130>
 801d7de:	3202      	adds	r2, #2
 801d7e0:	f8ca 2000 	str.w	r2, [sl]
 801d7e4:	f1bb 0f00 	cmp.w	fp, #0
 801d7e8:	d050      	beq.n	801d88c <__hexnan+0x130>
 801d7ea:	454c      	cmp	r4, r9
 801d7ec:	d206      	bcs.n	801d7fc <__hexnan+0xa0>
 801d7ee:	2d07      	cmp	r5, #7
 801d7f0:	dc04      	bgt.n	801d7fc <__hexnan+0xa0>
 801d7f2:	462a      	mov	r2, r5
 801d7f4:	4649      	mov	r1, r9
 801d7f6:	4620      	mov	r0, r4
 801d7f8:	f7ff ff8a 	bl	801d710 <L_shift>
 801d7fc:	4544      	cmp	r4, r8
 801d7fe:	d934      	bls.n	801d86a <__hexnan+0x10e>
 801d800:	f1a8 0204 	sub.w	r2, r8, #4
 801d804:	4623      	mov	r3, r4
 801d806:	f853 1b04 	ldr.w	r1, [r3], #4
 801d80a:	f842 1f04 	str.w	r1, [r2, #4]!
 801d80e:	429f      	cmp	r7, r3
 801d810:	d2f9      	bcs.n	801d806 <__hexnan+0xaa>
 801d812:	1b3b      	subs	r3, r7, r4
 801d814:	f023 0303 	bic.w	r3, r3, #3
 801d818:	3304      	adds	r3, #4
 801d81a:	3401      	adds	r4, #1
 801d81c:	3e03      	subs	r6, #3
 801d81e:	42b4      	cmp	r4, r6
 801d820:	bf88      	it	hi
 801d822:	2304      	movhi	r3, #4
 801d824:	4443      	add	r3, r8
 801d826:	2200      	movs	r2, #0
 801d828:	f843 2b04 	str.w	r2, [r3], #4
 801d82c:	429f      	cmp	r7, r3
 801d82e:	d2fb      	bcs.n	801d828 <__hexnan+0xcc>
 801d830:	683b      	ldr	r3, [r7, #0]
 801d832:	b91b      	cbnz	r3, 801d83c <__hexnan+0xe0>
 801d834:	4547      	cmp	r7, r8
 801d836:	d127      	bne.n	801d888 <__hexnan+0x12c>
 801d838:	2301      	movs	r3, #1
 801d83a:	603b      	str	r3, [r7, #0]
 801d83c:	2005      	movs	r0, #5
 801d83e:	e026      	b.n	801d88e <__hexnan+0x132>
 801d840:	3501      	adds	r5, #1
 801d842:	2d08      	cmp	r5, #8
 801d844:	f10b 0b01 	add.w	fp, fp, #1
 801d848:	dd06      	ble.n	801d858 <__hexnan+0xfc>
 801d84a:	4544      	cmp	r4, r8
 801d84c:	d9c3      	bls.n	801d7d6 <__hexnan+0x7a>
 801d84e:	2300      	movs	r3, #0
 801d850:	f844 3c04 	str.w	r3, [r4, #-4]
 801d854:	2501      	movs	r5, #1
 801d856:	3c04      	subs	r4, #4
 801d858:	6822      	ldr	r2, [r4, #0]
 801d85a:	f000 000f 	and.w	r0, r0, #15
 801d85e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d862:	6022      	str	r2, [r4, #0]
 801d864:	e7b7      	b.n	801d7d6 <__hexnan+0x7a>
 801d866:	2508      	movs	r5, #8
 801d868:	e7b5      	b.n	801d7d6 <__hexnan+0x7a>
 801d86a:	9b01      	ldr	r3, [sp, #4]
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d0df      	beq.n	801d830 <__hexnan+0xd4>
 801d870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d874:	f1c3 0320 	rsb	r3, r3, #32
 801d878:	fa22 f303 	lsr.w	r3, r2, r3
 801d87c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d880:	401a      	ands	r2, r3
 801d882:	f846 2c04 	str.w	r2, [r6, #-4]
 801d886:	e7d3      	b.n	801d830 <__hexnan+0xd4>
 801d888:	3f04      	subs	r7, #4
 801d88a:	e7d1      	b.n	801d830 <__hexnan+0xd4>
 801d88c:	2004      	movs	r0, #4
 801d88e:	b007      	add	sp, #28
 801d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d894 <_localeconv_r>:
 801d894:	4800      	ldr	r0, [pc, #0]	; (801d898 <_localeconv_r+0x4>)
 801d896:	4770      	bx	lr
 801d898:	200001e0 	.word	0x200001e0

0801d89c <_lseek_r>:
 801d89c:	b538      	push	{r3, r4, r5, lr}
 801d89e:	4d07      	ldr	r5, [pc, #28]	; (801d8bc <_lseek_r+0x20>)
 801d8a0:	4604      	mov	r4, r0
 801d8a2:	4608      	mov	r0, r1
 801d8a4:	4611      	mov	r1, r2
 801d8a6:	2200      	movs	r2, #0
 801d8a8:	602a      	str	r2, [r5, #0]
 801d8aa:	461a      	mov	r2, r3
 801d8ac:	f7e6 ffa6 	bl	80047fc <_lseek>
 801d8b0:	1c43      	adds	r3, r0, #1
 801d8b2:	d102      	bne.n	801d8ba <_lseek_r+0x1e>
 801d8b4:	682b      	ldr	r3, [r5, #0]
 801d8b6:	b103      	cbz	r3, 801d8ba <_lseek_r+0x1e>
 801d8b8:	6023      	str	r3, [r4, #0]
 801d8ba:	bd38      	pop	{r3, r4, r5, pc}
 801d8bc:	20009f28 	.word	0x20009f28

0801d8c0 <__swhatbuf_r>:
 801d8c0:	b570      	push	{r4, r5, r6, lr}
 801d8c2:	460e      	mov	r6, r1
 801d8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8c8:	2900      	cmp	r1, #0
 801d8ca:	b096      	sub	sp, #88	; 0x58
 801d8cc:	4614      	mov	r4, r2
 801d8ce:	461d      	mov	r5, r3
 801d8d0:	da08      	bge.n	801d8e4 <__swhatbuf_r+0x24>
 801d8d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	602a      	str	r2, [r5, #0]
 801d8da:	061a      	lsls	r2, r3, #24
 801d8dc:	d410      	bmi.n	801d900 <__swhatbuf_r+0x40>
 801d8de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8e2:	e00e      	b.n	801d902 <__swhatbuf_r+0x42>
 801d8e4:	466a      	mov	r2, sp
 801d8e6:	f001 f843 	bl	801e970 <_fstat_r>
 801d8ea:	2800      	cmp	r0, #0
 801d8ec:	dbf1      	blt.n	801d8d2 <__swhatbuf_r+0x12>
 801d8ee:	9a01      	ldr	r2, [sp, #4]
 801d8f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d8f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d8f8:	425a      	negs	r2, r3
 801d8fa:	415a      	adcs	r2, r3
 801d8fc:	602a      	str	r2, [r5, #0]
 801d8fe:	e7ee      	b.n	801d8de <__swhatbuf_r+0x1e>
 801d900:	2340      	movs	r3, #64	; 0x40
 801d902:	2000      	movs	r0, #0
 801d904:	6023      	str	r3, [r4, #0]
 801d906:	b016      	add	sp, #88	; 0x58
 801d908:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d90c <__smakebuf_r>:
 801d90c:	898b      	ldrh	r3, [r1, #12]
 801d90e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d910:	079d      	lsls	r5, r3, #30
 801d912:	4606      	mov	r6, r0
 801d914:	460c      	mov	r4, r1
 801d916:	d507      	bpl.n	801d928 <__smakebuf_r+0x1c>
 801d918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d91c:	6023      	str	r3, [r4, #0]
 801d91e:	6123      	str	r3, [r4, #16]
 801d920:	2301      	movs	r3, #1
 801d922:	6163      	str	r3, [r4, #20]
 801d924:	b002      	add	sp, #8
 801d926:	bd70      	pop	{r4, r5, r6, pc}
 801d928:	ab01      	add	r3, sp, #4
 801d92a:	466a      	mov	r2, sp
 801d92c:	f7ff ffc8 	bl	801d8c0 <__swhatbuf_r>
 801d930:	9900      	ldr	r1, [sp, #0]
 801d932:	4605      	mov	r5, r0
 801d934:	4630      	mov	r0, r6
 801d936:	f7fc facf 	bl	8019ed8 <_malloc_r>
 801d93a:	b948      	cbnz	r0, 801d950 <__smakebuf_r+0x44>
 801d93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d940:	059a      	lsls	r2, r3, #22
 801d942:	d4ef      	bmi.n	801d924 <__smakebuf_r+0x18>
 801d944:	f023 0303 	bic.w	r3, r3, #3
 801d948:	f043 0302 	orr.w	r3, r3, #2
 801d94c:	81a3      	strh	r3, [r4, #12]
 801d94e:	e7e3      	b.n	801d918 <__smakebuf_r+0xc>
 801d950:	4b0d      	ldr	r3, [pc, #52]	; (801d988 <__smakebuf_r+0x7c>)
 801d952:	62b3      	str	r3, [r6, #40]	; 0x28
 801d954:	89a3      	ldrh	r3, [r4, #12]
 801d956:	6020      	str	r0, [r4, #0]
 801d958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d95c:	81a3      	strh	r3, [r4, #12]
 801d95e:	9b00      	ldr	r3, [sp, #0]
 801d960:	6163      	str	r3, [r4, #20]
 801d962:	9b01      	ldr	r3, [sp, #4]
 801d964:	6120      	str	r0, [r4, #16]
 801d966:	b15b      	cbz	r3, 801d980 <__smakebuf_r+0x74>
 801d968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d96c:	4630      	mov	r0, r6
 801d96e:	f001 f811 	bl	801e994 <_isatty_r>
 801d972:	b128      	cbz	r0, 801d980 <__smakebuf_r+0x74>
 801d974:	89a3      	ldrh	r3, [r4, #12]
 801d976:	f023 0303 	bic.w	r3, r3, #3
 801d97a:	f043 0301 	orr.w	r3, r3, #1
 801d97e:	81a3      	strh	r3, [r4, #12]
 801d980:	89a0      	ldrh	r0, [r4, #12]
 801d982:	4305      	orrs	r5, r0
 801d984:	81a5      	strh	r5, [r4, #12]
 801d986:	e7cd      	b.n	801d924 <__smakebuf_r+0x18>
 801d988:	08019ad1 	.word	0x08019ad1

0801d98c <__ascii_mbtowc>:
 801d98c:	b082      	sub	sp, #8
 801d98e:	b901      	cbnz	r1, 801d992 <__ascii_mbtowc+0x6>
 801d990:	a901      	add	r1, sp, #4
 801d992:	b142      	cbz	r2, 801d9a6 <__ascii_mbtowc+0x1a>
 801d994:	b14b      	cbz	r3, 801d9aa <__ascii_mbtowc+0x1e>
 801d996:	7813      	ldrb	r3, [r2, #0]
 801d998:	600b      	str	r3, [r1, #0]
 801d99a:	7812      	ldrb	r2, [r2, #0]
 801d99c:	1e10      	subs	r0, r2, #0
 801d99e:	bf18      	it	ne
 801d9a0:	2001      	movne	r0, #1
 801d9a2:	b002      	add	sp, #8
 801d9a4:	4770      	bx	lr
 801d9a6:	4610      	mov	r0, r2
 801d9a8:	e7fb      	b.n	801d9a2 <__ascii_mbtowc+0x16>
 801d9aa:	f06f 0001 	mvn.w	r0, #1
 801d9ae:	e7f8      	b.n	801d9a2 <__ascii_mbtowc+0x16>

0801d9b0 <__malloc_lock>:
 801d9b0:	4801      	ldr	r0, [pc, #4]	; (801d9b8 <__malloc_lock+0x8>)
 801d9b2:	f7fc b9cc 	b.w	8019d4e <__retarget_lock_acquire_recursive>
 801d9b6:	bf00      	nop
 801d9b8:	20009f1d 	.word	0x20009f1d

0801d9bc <__malloc_unlock>:
 801d9bc:	4801      	ldr	r0, [pc, #4]	; (801d9c4 <__malloc_unlock+0x8>)
 801d9be:	f7fc b9c7 	b.w	8019d50 <__retarget_lock_release_recursive>
 801d9c2:	bf00      	nop
 801d9c4:	20009f1d 	.word	0x20009f1d

0801d9c8 <_Balloc>:
 801d9c8:	b570      	push	{r4, r5, r6, lr}
 801d9ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d9cc:	4604      	mov	r4, r0
 801d9ce:	460d      	mov	r5, r1
 801d9d0:	b976      	cbnz	r6, 801d9f0 <_Balloc+0x28>
 801d9d2:	2010      	movs	r0, #16
 801d9d4:	f7fc f9be 	bl	8019d54 <malloc>
 801d9d8:	4602      	mov	r2, r0
 801d9da:	6260      	str	r0, [r4, #36]	; 0x24
 801d9dc:	b920      	cbnz	r0, 801d9e8 <_Balloc+0x20>
 801d9de:	4b18      	ldr	r3, [pc, #96]	; (801da40 <_Balloc+0x78>)
 801d9e0:	4818      	ldr	r0, [pc, #96]	; (801da44 <_Balloc+0x7c>)
 801d9e2:	2166      	movs	r1, #102	; 0x66
 801d9e4:	f7fe fc5c 	bl	801c2a0 <__assert_func>
 801d9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d9ec:	6006      	str	r6, [r0, #0]
 801d9ee:	60c6      	str	r6, [r0, #12]
 801d9f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d9f2:	68f3      	ldr	r3, [r6, #12]
 801d9f4:	b183      	cbz	r3, 801da18 <_Balloc+0x50>
 801d9f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9f8:	68db      	ldr	r3, [r3, #12]
 801d9fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d9fe:	b9b8      	cbnz	r0, 801da30 <_Balloc+0x68>
 801da00:	2101      	movs	r1, #1
 801da02:	fa01 f605 	lsl.w	r6, r1, r5
 801da06:	1d72      	adds	r2, r6, #5
 801da08:	0092      	lsls	r2, r2, #2
 801da0a:	4620      	mov	r0, r4
 801da0c:	f7fc f9e2 	bl	8019dd4 <_calloc_r>
 801da10:	b160      	cbz	r0, 801da2c <_Balloc+0x64>
 801da12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801da16:	e00e      	b.n	801da36 <_Balloc+0x6e>
 801da18:	2221      	movs	r2, #33	; 0x21
 801da1a:	2104      	movs	r1, #4
 801da1c:	4620      	mov	r0, r4
 801da1e:	f7fc f9d9 	bl	8019dd4 <_calloc_r>
 801da22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da24:	60f0      	str	r0, [r6, #12]
 801da26:	68db      	ldr	r3, [r3, #12]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d1e4      	bne.n	801d9f6 <_Balloc+0x2e>
 801da2c:	2000      	movs	r0, #0
 801da2e:	bd70      	pop	{r4, r5, r6, pc}
 801da30:	6802      	ldr	r2, [r0, #0]
 801da32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801da36:	2300      	movs	r3, #0
 801da38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801da3c:	e7f7      	b.n	801da2e <_Balloc+0x66>
 801da3e:	bf00      	nop
 801da40:	0801f741 	.word	0x0801f741
 801da44:	0801f994 	.word	0x0801f994

0801da48 <_Bfree>:
 801da48:	b570      	push	{r4, r5, r6, lr}
 801da4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801da4c:	4605      	mov	r5, r0
 801da4e:	460c      	mov	r4, r1
 801da50:	b976      	cbnz	r6, 801da70 <_Bfree+0x28>
 801da52:	2010      	movs	r0, #16
 801da54:	f7fc f97e 	bl	8019d54 <malloc>
 801da58:	4602      	mov	r2, r0
 801da5a:	6268      	str	r0, [r5, #36]	; 0x24
 801da5c:	b920      	cbnz	r0, 801da68 <_Bfree+0x20>
 801da5e:	4b09      	ldr	r3, [pc, #36]	; (801da84 <_Bfree+0x3c>)
 801da60:	4809      	ldr	r0, [pc, #36]	; (801da88 <_Bfree+0x40>)
 801da62:	218a      	movs	r1, #138	; 0x8a
 801da64:	f7fe fc1c 	bl	801c2a0 <__assert_func>
 801da68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801da6c:	6006      	str	r6, [r0, #0]
 801da6e:	60c6      	str	r6, [r0, #12]
 801da70:	b13c      	cbz	r4, 801da82 <_Bfree+0x3a>
 801da72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801da74:	6862      	ldr	r2, [r4, #4]
 801da76:	68db      	ldr	r3, [r3, #12]
 801da78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801da7c:	6021      	str	r1, [r4, #0]
 801da7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801da82:	bd70      	pop	{r4, r5, r6, pc}
 801da84:	0801f741 	.word	0x0801f741
 801da88:	0801f994 	.word	0x0801f994

0801da8c <__multadd>:
 801da8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da90:	690d      	ldr	r5, [r1, #16]
 801da92:	4607      	mov	r7, r0
 801da94:	460c      	mov	r4, r1
 801da96:	461e      	mov	r6, r3
 801da98:	f101 0c14 	add.w	ip, r1, #20
 801da9c:	2000      	movs	r0, #0
 801da9e:	f8dc 3000 	ldr.w	r3, [ip]
 801daa2:	b299      	uxth	r1, r3
 801daa4:	fb02 6101 	mla	r1, r2, r1, r6
 801daa8:	0c1e      	lsrs	r6, r3, #16
 801daaa:	0c0b      	lsrs	r3, r1, #16
 801daac:	fb02 3306 	mla	r3, r2, r6, r3
 801dab0:	b289      	uxth	r1, r1
 801dab2:	3001      	adds	r0, #1
 801dab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dab8:	4285      	cmp	r5, r0
 801daba:	f84c 1b04 	str.w	r1, [ip], #4
 801dabe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dac2:	dcec      	bgt.n	801da9e <__multadd+0x12>
 801dac4:	b30e      	cbz	r6, 801db0a <__multadd+0x7e>
 801dac6:	68a3      	ldr	r3, [r4, #8]
 801dac8:	42ab      	cmp	r3, r5
 801daca:	dc19      	bgt.n	801db00 <__multadd+0x74>
 801dacc:	6861      	ldr	r1, [r4, #4]
 801dace:	4638      	mov	r0, r7
 801dad0:	3101      	adds	r1, #1
 801dad2:	f7ff ff79 	bl	801d9c8 <_Balloc>
 801dad6:	4680      	mov	r8, r0
 801dad8:	b928      	cbnz	r0, 801dae6 <__multadd+0x5a>
 801dada:	4602      	mov	r2, r0
 801dadc:	4b0c      	ldr	r3, [pc, #48]	; (801db10 <__multadd+0x84>)
 801dade:	480d      	ldr	r0, [pc, #52]	; (801db14 <__multadd+0x88>)
 801dae0:	21b5      	movs	r1, #181	; 0xb5
 801dae2:	f7fe fbdd 	bl	801c2a0 <__assert_func>
 801dae6:	6922      	ldr	r2, [r4, #16]
 801dae8:	3202      	adds	r2, #2
 801daea:	f104 010c 	add.w	r1, r4, #12
 801daee:	0092      	lsls	r2, r2, #2
 801daf0:	300c      	adds	r0, #12
 801daf2:	f7fc f93f 	bl	8019d74 <memcpy>
 801daf6:	4621      	mov	r1, r4
 801daf8:	4638      	mov	r0, r7
 801dafa:	f7ff ffa5 	bl	801da48 <_Bfree>
 801dafe:	4644      	mov	r4, r8
 801db00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801db04:	3501      	adds	r5, #1
 801db06:	615e      	str	r6, [r3, #20]
 801db08:	6125      	str	r5, [r4, #16]
 801db0a:	4620      	mov	r0, r4
 801db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db10:	0801f909 	.word	0x0801f909
 801db14:	0801f994 	.word	0x0801f994

0801db18 <__s2b>:
 801db18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db1c:	460c      	mov	r4, r1
 801db1e:	4615      	mov	r5, r2
 801db20:	461f      	mov	r7, r3
 801db22:	2209      	movs	r2, #9
 801db24:	3308      	adds	r3, #8
 801db26:	4606      	mov	r6, r0
 801db28:	fb93 f3f2 	sdiv	r3, r3, r2
 801db2c:	2100      	movs	r1, #0
 801db2e:	2201      	movs	r2, #1
 801db30:	429a      	cmp	r2, r3
 801db32:	db09      	blt.n	801db48 <__s2b+0x30>
 801db34:	4630      	mov	r0, r6
 801db36:	f7ff ff47 	bl	801d9c8 <_Balloc>
 801db3a:	b940      	cbnz	r0, 801db4e <__s2b+0x36>
 801db3c:	4602      	mov	r2, r0
 801db3e:	4b19      	ldr	r3, [pc, #100]	; (801dba4 <__s2b+0x8c>)
 801db40:	4819      	ldr	r0, [pc, #100]	; (801dba8 <__s2b+0x90>)
 801db42:	21ce      	movs	r1, #206	; 0xce
 801db44:	f7fe fbac 	bl	801c2a0 <__assert_func>
 801db48:	0052      	lsls	r2, r2, #1
 801db4a:	3101      	adds	r1, #1
 801db4c:	e7f0      	b.n	801db30 <__s2b+0x18>
 801db4e:	9b08      	ldr	r3, [sp, #32]
 801db50:	6143      	str	r3, [r0, #20]
 801db52:	2d09      	cmp	r5, #9
 801db54:	f04f 0301 	mov.w	r3, #1
 801db58:	6103      	str	r3, [r0, #16]
 801db5a:	dd16      	ble.n	801db8a <__s2b+0x72>
 801db5c:	f104 0909 	add.w	r9, r4, #9
 801db60:	46c8      	mov	r8, r9
 801db62:	442c      	add	r4, r5
 801db64:	f818 3b01 	ldrb.w	r3, [r8], #1
 801db68:	4601      	mov	r1, r0
 801db6a:	3b30      	subs	r3, #48	; 0x30
 801db6c:	220a      	movs	r2, #10
 801db6e:	4630      	mov	r0, r6
 801db70:	f7ff ff8c 	bl	801da8c <__multadd>
 801db74:	45a0      	cmp	r8, r4
 801db76:	d1f5      	bne.n	801db64 <__s2b+0x4c>
 801db78:	f1a5 0408 	sub.w	r4, r5, #8
 801db7c:	444c      	add	r4, r9
 801db7e:	1b2d      	subs	r5, r5, r4
 801db80:	1963      	adds	r3, r4, r5
 801db82:	42bb      	cmp	r3, r7
 801db84:	db04      	blt.n	801db90 <__s2b+0x78>
 801db86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db8a:	340a      	adds	r4, #10
 801db8c:	2509      	movs	r5, #9
 801db8e:	e7f6      	b.n	801db7e <__s2b+0x66>
 801db90:	f814 3b01 	ldrb.w	r3, [r4], #1
 801db94:	4601      	mov	r1, r0
 801db96:	3b30      	subs	r3, #48	; 0x30
 801db98:	220a      	movs	r2, #10
 801db9a:	4630      	mov	r0, r6
 801db9c:	f7ff ff76 	bl	801da8c <__multadd>
 801dba0:	e7ee      	b.n	801db80 <__s2b+0x68>
 801dba2:	bf00      	nop
 801dba4:	0801f909 	.word	0x0801f909
 801dba8:	0801f994 	.word	0x0801f994

0801dbac <__hi0bits>:
 801dbac:	0c03      	lsrs	r3, r0, #16
 801dbae:	041b      	lsls	r3, r3, #16
 801dbb0:	b9d3      	cbnz	r3, 801dbe8 <__hi0bits+0x3c>
 801dbb2:	0400      	lsls	r0, r0, #16
 801dbb4:	2310      	movs	r3, #16
 801dbb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dbba:	bf04      	itt	eq
 801dbbc:	0200      	lsleq	r0, r0, #8
 801dbbe:	3308      	addeq	r3, #8
 801dbc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dbc4:	bf04      	itt	eq
 801dbc6:	0100      	lsleq	r0, r0, #4
 801dbc8:	3304      	addeq	r3, #4
 801dbca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dbce:	bf04      	itt	eq
 801dbd0:	0080      	lsleq	r0, r0, #2
 801dbd2:	3302      	addeq	r3, #2
 801dbd4:	2800      	cmp	r0, #0
 801dbd6:	db05      	blt.n	801dbe4 <__hi0bits+0x38>
 801dbd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dbdc:	f103 0301 	add.w	r3, r3, #1
 801dbe0:	bf08      	it	eq
 801dbe2:	2320      	moveq	r3, #32
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	4770      	bx	lr
 801dbe8:	2300      	movs	r3, #0
 801dbea:	e7e4      	b.n	801dbb6 <__hi0bits+0xa>

0801dbec <__lo0bits>:
 801dbec:	6803      	ldr	r3, [r0, #0]
 801dbee:	f013 0207 	ands.w	r2, r3, #7
 801dbf2:	4601      	mov	r1, r0
 801dbf4:	d00b      	beq.n	801dc0e <__lo0bits+0x22>
 801dbf6:	07da      	lsls	r2, r3, #31
 801dbf8:	d423      	bmi.n	801dc42 <__lo0bits+0x56>
 801dbfa:	0798      	lsls	r0, r3, #30
 801dbfc:	bf49      	itett	mi
 801dbfe:	085b      	lsrmi	r3, r3, #1
 801dc00:	089b      	lsrpl	r3, r3, #2
 801dc02:	2001      	movmi	r0, #1
 801dc04:	600b      	strmi	r3, [r1, #0]
 801dc06:	bf5c      	itt	pl
 801dc08:	600b      	strpl	r3, [r1, #0]
 801dc0a:	2002      	movpl	r0, #2
 801dc0c:	4770      	bx	lr
 801dc0e:	b298      	uxth	r0, r3
 801dc10:	b9a8      	cbnz	r0, 801dc3e <__lo0bits+0x52>
 801dc12:	0c1b      	lsrs	r3, r3, #16
 801dc14:	2010      	movs	r0, #16
 801dc16:	b2da      	uxtb	r2, r3
 801dc18:	b90a      	cbnz	r2, 801dc1e <__lo0bits+0x32>
 801dc1a:	3008      	adds	r0, #8
 801dc1c:	0a1b      	lsrs	r3, r3, #8
 801dc1e:	071a      	lsls	r2, r3, #28
 801dc20:	bf04      	itt	eq
 801dc22:	091b      	lsreq	r3, r3, #4
 801dc24:	3004      	addeq	r0, #4
 801dc26:	079a      	lsls	r2, r3, #30
 801dc28:	bf04      	itt	eq
 801dc2a:	089b      	lsreq	r3, r3, #2
 801dc2c:	3002      	addeq	r0, #2
 801dc2e:	07da      	lsls	r2, r3, #31
 801dc30:	d403      	bmi.n	801dc3a <__lo0bits+0x4e>
 801dc32:	085b      	lsrs	r3, r3, #1
 801dc34:	f100 0001 	add.w	r0, r0, #1
 801dc38:	d005      	beq.n	801dc46 <__lo0bits+0x5a>
 801dc3a:	600b      	str	r3, [r1, #0]
 801dc3c:	4770      	bx	lr
 801dc3e:	4610      	mov	r0, r2
 801dc40:	e7e9      	b.n	801dc16 <__lo0bits+0x2a>
 801dc42:	2000      	movs	r0, #0
 801dc44:	4770      	bx	lr
 801dc46:	2020      	movs	r0, #32
 801dc48:	4770      	bx	lr
	...

0801dc4c <__i2b>:
 801dc4c:	b510      	push	{r4, lr}
 801dc4e:	460c      	mov	r4, r1
 801dc50:	2101      	movs	r1, #1
 801dc52:	f7ff feb9 	bl	801d9c8 <_Balloc>
 801dc56:	4602      	mov	r2, r0
 801dc58:	b928      	cbnz	r0, 801dc66 <__i2b+0x1a>
 801dc5a:	4b05      	ldr	r3, [pc, #20]	; (801dc70 <__i2b+0x24>)
 801dc5c:	4805      	ldr	r0, [pc, #20]	; (801dc74 <__i2b+0x28>)
 801dc5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801dc62:	f7fe fb1d 	bl	801c2a0 <__assert_func>
 801dc66:	2301      	movs	r3, #1
 801dc68:	6144      	str	r4, [r0, #20]
 801dc6a:	6103      	str	r3, [r0, #16]
 801dc6c:	bd10      	pop	{r4, pc}
 801dc6e:	bf00      	nop
 801dc70:	0801f909 	.word	0x0801f909
 801dc74:	0801f994 	.word	0x0801f994

0801dc78 <__multiply>:
 801dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc7c:	4691      	mov	r9, r2
 801dc7e:	690a      	ldr	r2, [r1, #16]
 801dc80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dc84:	429a      	cmp	r2, r3
 801dc86:	bfb8      	it	lt
 801dc88:	460b      	movlt	r3, r1
 801dc8a:	460c      	mov	r4, r1
 801dc8c:	bfbc      	itt	lt
 801dc8e:	464c      	movlt	r4, r9
 801dc90:	4699      	movlt	r9, r3
 801dc92:	6927      	ldr	r7, [r4, #16]
 801dc94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801dc98:	68a3      	ldr	r3, [r4, #8]
 801dc9a:	6861      	ldr	r1, [r4, #4]
 801dc9c:	eb07 060a 	add.w	r6, r7, sl
 801dca0:	42b3      	cmp	r3, r6
 801dca2:	b085      	sub	sp, #20
 801dca4:	bfb8      	it	lt
 801dca6:	3101      	addlt	r1, #1
 801dca8:	f7ff fe8e 	bl	801d9c8 <_Balloc>
 801dcac:	b930      	cbnz	r0, 801dcbc <__multiply+0x44>
 801dcae:	4602      	mov	r2, r0
 801dcb0:	4b44      	ldr	r3, [pc, #272]	; (801ddc4 <__multiply+0x14c>)
 801dcb2:	4845      	ldr	r0, [pc, #276]	; (801ddc8 <__multiply+0x150>)
 801dcb4:	f240 115d 	movw	r1, #349	; 0x15d
 801dcb8:	f7fe faf2 	bl	801c2a0 <__assert_func>
 801dcbc:	f100 0514 	add.w	r5, r0, #20
 801dcc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dcc4:	462b      	mov	r3, r5
 801dcc6:	2200      	movs	r2, #0
 801dcc8:	4543      	cmp	r3, r8
 801dcca:	d321      	bcc.n	801dd10 <__multiply+0x98>
 801dccc:	f104 0314 	add.w	r3, r4, #20
 801dcd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801dcd4:	f109 0314 	add.w	r3, r9, #20
 801dcd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801dcdc:	9202      	str	r2, [sp, #8]
 801dcde:	1b3a      	subs	r2, r7, r4
 801dce0:	3a15      	subs	r2, #21
 801dce2:	f022 0203 	bic.w	r2, r2, #3
 801dce6:	3204      	adds	r2, #4
 801dce8:	f104 0115 	add.w	r1, r4, #21
 801dcec:	428f      	cmp	r7, r1
 801dcee:	bf38      	it	cc
 801dcf0:	2204      	movcc	r2, #4
 801dcf2:	9201      	str	r2, [sp, #4]
 801dcf4:	9a02      	ldr	r2, [sp, #8]
 801dcf6:	9303      	str	r3, [sp, #12]
 801dcf8:	429a      	cmp	r2, r3
 801dcfa:	d80c      	bhi.n	801dd16 <__multiply+0x9e>
 801dcfc:	2e00      	cmp	r6, #0
 801dcfe:	dd03      	ble.n	801dd08 <__multiply+0x90>
 801dd00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	d05a      	beq.n	801ddbe <__multiply+0x146>
 801dd08:	6106      	str	r6, [r0, #16]
 801dd0a:	b005      	add	sp, #20
 801dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd10:	f843 2b04 	str.w	r2, [r3], #4
 801dd14:	e7d8      	b.n	801dcc8 <__multiply+0x50>
 801dd16:	f8b3 a000 	ldrh.w	sl, [r3]
 801dd1a:	f1ba 0f00 	cmp.w	sl, #0
 801dd1e:	d024      	beq.n	801dd6a <__multiply+0xf2>
 801dd20:	f104 0e14 	add.w	lr, r4, #20
 801dd24:	46a9      	mov	r9, r5
 801dd26:	f04f 0c00 	mov.w	ip, #0
 801dd2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801dd2e:	f8d9 1000 	ldr.w	r1, [r9]
 801dd32:	fa1f fb82 	uxth.w	fp, r2
 801dd36:	b289      	uxth	r1, r1
 801dd38:	fb0a 110b 	mla	r1, sl, fp, r1
 801dd3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801dd40:	f8d9 2000 	ldr.w	r2, [r9]
 801dd44:	4461      	add	r1, ip
 801dd46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dd4a:	fb0a c20b 	mla	r2, sl, fp, ip
 801dd4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801dd52:	b289      	uxth	r1, r1
 801dd54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801dd58:	4577      	cmp	r7, lr
 801dd5a:	f849 1b04 	str.w	r1, [r9], #4
 801dd5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dd62:	d8e2      	bhi.n	801dd2a <__multiply+0xb2>
 801dd64:	9a01      	ldr	r2, [sp, #4]
 801dd66:	f845 c002 	str.w	ip, [r5, r2]
 801dd6a:	9a03      	ldr	r2, [sp, #12]
 801dd6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dd70:	3304      	adds	r3, #4
 801dd72:	f1b9 0f00 	cmp.w	r9, #0
 801dd76:	d020      	beq.n	801ddba <__multiply+0x142>
 801dd78:	6829      	ldr	r1, [r5, #0]
 801dd7a:	f104 0c14 	add.w	ip, r4, #20
 801dd7e:	46ae      	mov	lr, r5
 801dd80:	f04f 0a00 	mov.w	sl, #0
 801dd84:	f8bc b000 	ldrh.w	fp, [ip]
 801dd88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801dd8c:	fb09 220b 	mla	r2, r9, fp, r2
 801dd90:	4492      	add	sl, r2
 801dd92:	b289      	uxth	r1, r1
 801dd94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801dd98:	f84e 1b04 	str.w	r1, [lr], #4
 801dd9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801dda0:	f8be 1000 	ldrh.w	r1, [lr]
 801dda4:	0c12      	lsrs	r2, r2, #16
 801dda6:	fb09 1102 	mla	r1, r9, r2, r1
 801ddaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ddae:	4567      	cmp	r7, ip
 801ddb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ddb4:	d8e6      	bhi.n	801dd84 <__multiply+0x10c>
 801ddb6:	9a01      	ldr	r2, [sp, #4]
 801ddb8:	50a9      	str	r1, [r5, r2]
 801ddba:	3504      	adds	r5, #4
 801ddbc:	e79a      	b.n	801dcf4 <__multiply+0x7c>
 801ddbe:	3e01      	subs	r6, #1
 801ddc0:	e79c      	b.n	801dcfc <__multiply+0x84>
 801ddc2:	bf00      	nop
 801ddc4:	0801f909 	.word	0x0801f909
 801ddc8:	0801f994 	.word	0x0801f994

0801ddcc <__pow5mult>:
 801ddcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ddd0:	4615      	mov	r5, r2
 801ddd2:	f012 0203 	ands.w	r2, r2, #3
 801ddd6:	4606      	mov	r6, r0
 801ddd8:	460f      	mov	r7, r1
 801ddda:	d007      	beq.n	801ddec <__pow5mult+0x20>
 801dddc:	4c25      	ldr	r4, [pc, #148]	; (801de74 <__pow5mult+0xa8>)
 801ddde:	3a01      	subs	r2, #1
 801dde0:	2300      	movs	r3, #0
 801dde2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dde6:	f7ff fe51 	bl	801da8c <__multadd>
 801ddea:	4607      	mov	r7, r0
 801ddec:	10ad      	asrs	r5, r5, #2
 801ddee:	d03d      	beq.n	801de6c <__pow5mult+0xa0>
 801ddf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ddf2:	b97c      	cbnz	r4, 801de14 <__pow5mult+0x48>
 801ddf4:	2010      	movs	r0, #16
 801ddf6:	f7fb ffad 	bl	8019d54 <malloc>
 801ddfa:	4602      	mov	r2, r0
 801ddfc:	6270      	str	r0, [r6, #36]	; 0x24
 801ddfe:	b928      	cbnz	r0, 801de0c <__pow5mult+0x40>
 801de00:	4b1d      	ldr	r3, [pc, #116]	; (801de78 <__pow5mult+0xac>)
 801de02:	481e      	ldr	r0, [pc, #120]	; (801de7c <__pow5mult+0xb0>)
 801de04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801de08:	f7fe fa4a 	bl	801c2a0 <__assert_func>
 801de0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801de10:	6004      	str	r4, [r0, #0]
 801de12:	60c4      	str	r4, [r0, #12]
 801de14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801de18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801de1c:	b94c      	cbnz	r4, 801de32 <__pow5mult+0x66>
 801de1e:	f240 2171 	movw	r1, #625	; 0x271
 801de22:	4630      	mov	r0, r6
 801de24:	f7ff ff12 	bl	801dc4c <__i2b>
 801de28:	2300      	movs	r3, #0
 801de2a:	f8c8 0008 	str.w	r0, [r8, #8]
 801de2e:	4604      	mov	r4, r0
 801de30:	6003      	str	r3, [r0, #0]
 801de32:	f04f 0900 	mov.w	r9, #0
 801de36:	07eb      	lsls	r3, r5, #31
 801de38:	d50a      	bpl.n	801de50 <__pow5mult+0x84>
 801de3a:	4639      	mov	r1, r7
 801de3c:	4622      	mov	r2, r4
 801de3e:	4630      	mov	r0, r6
 801de40:	f7ff ff1a 	bl	801dc78 <__multiply>
 801de44:	4639      	mov	r1, r7
 801de46:	4680      	mov	r8, r0
 801de48:	4630      	mov	r0, r6
 801de4a:	f7ff fdfd 	bl	801da48 <_Bfree>
 801de4e:	4647      	mov	r7, r8
 801de50:	106d      	asrs	r5, r5, #1
 801de52:	d00b      	beq.n	801de6c <__pow5mult+0xa0>
 801de54:	6820      	ldr	r0, [r4, #0]
 801de56:	b938      	cbnz	r0, 801de68 <__pow5mult+0x9c>
 801de58:	4622      	mov	r2, r4
 801de5a:	4621      	mov	r1, r4
 801de5c:	4630      	mov	r0, r6
 801de5e:	f7ff ff0b 	bl	801dc78 <__multiply>
 801de62:	6020      	str	r0, [r4, #0]
 801de64:	f8c0 9000 	str.w	r9, [r0]
 801de68:	4604      	mov	r4, r0
 801de6a:	e7e4      	b.n	801de36 <__pow5mult+0x6a>
 801de6c:	4638      	mov	r0, r7
 801de6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de72:	bf00      	nop
 801de74:	0801fae0 	.word	0x0801fae0
 801de78:	0801f741 	.word	0x0801f741
 801de7c:	0801f994 	.word	0x0801f994

0801de80 <__lshift>:
 801de80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de84:	460c      	mov	r4, r1
 801de86:	6849      	ldr	r1, [r1, #4]
 801de88:	6923      	ldr	r3, [r4, #16]
 801de8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801de8e:	68a3      	ldr	r3, [r4, #8]
 801de90:	4607      	mov	r7, r0
 801de92:	4691      	mov	r9, r2
 801de94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801de98:	f108 0601 	add.w	r6, r8, #1
 801de9c:	42b3      	cmp	r3, r6
 801de9e:	db0b      	blt.n	801deb8 <__lshift+0x38>
 801dea0:	4638      	mov	r0, r7
 801dea2:	f7ff fd91 	bl	801d9c8 <_Balloc>
 801dea6:	4605      	mov	r5, r0
 801dea8:	b948      	cbnz	r0, 801debe <__lshift+0x3e>
 801deaa:	4602      	mov	r2, r0
 801deac:	4b2a      	ldr	r3, [pc, #168]	; (801df58 <__lshift+0xd8>)
 801deae:	482b      	ldr	r0, [pc, #172]	; (801df5c <__lshift+0xdc>)
 801deb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801deb4:	f7fe f9f4 	bl	801c2a0 <__assert_func>
 801deb8:	3101      	adds	r1, #1
 801deba:	005b      	lsls	r3, r3, #1
 801debc:	e7ee      	b.n	801de9c <__lshift+0x1c>
 801debe:	2300      	movs	r3, #0
 801dec0:	f100 0114 	add.w	r1, r0, #20
 801dec4:	f100 0210 	add.w	r2, r0, #16
 801dec8:	4618      	mov	r0, r3
 801deca:	4553      	cmp	r3, sl
 801decc:	db37      	blt.n	801df3e <__lshift+0xbe>
 801dece:	6920      	ldr	r0, [r4, #16]
 801ded0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ded4:	f104 0314 	add.w	r3, r4, #20
 801ded8:	f019 091f 	ands.w	r9, r9, #31
 801dedc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dee0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801dee4:	d02f      	beq.n	801df46 <__lshift+0xc6>
 801dee6:	f1c9 0e20 	rsb	lr, r9, #32
 801deea:	468a      	mov	sl, r1
 801deec:	f04f 0c00 	mov.w	ip, #0
 801def0:	681a      	ldr	r2, [r3, #0]
 801def2:	fa02 f209 	lsl.w	r2, r2, r9
 801def6:	ea42 020c 	orr.w	r2, r2, ip
 801defa:	f84a 2b04 	str.w	r2, [sl], #4
 801defe:	f853 2b04 	ldr.w	r2, [r3], #4
 801df02:	4298      	cmp	r0, r3
 801df04:	fa22 fc0e 	lsr.w	ip, r2, lr
 801df08:	d8f2      	bhi.n	801def0 <__lshift+0x70>
 801df0a:	1b03      	subs	r3, r0, r4
 801df0c:	3b15      	subs	r3, #21
 801df0e:	f023 0303 	bic.w	r3, r3, #3
 801df12:	3304      	adds	r3, #4
 801df14:	f104 0215 	add.w	r2, r4, #21
 801df18:	4290      	cmp	r0, r2
 801df1a:	bf38      	it	cc
 801df1c:	2304      	movcc	r3, #4
 801df1e:	f841 c003 	str.w	ip, [r1, r3]
 801df22:	f1bc 0f00 	cmp.w	ip, #0
 801df26:	d001      	beq.n	801df2c <__lshift+0xac>
 801df28:	f108 0602 	add.w	r6, r8, #2
 801df2c:	3e01      	subs	r6, #1
 801df2e:	4638      	mov	r0, r7
 801df30:	612e      	str	r6, [r5, #16]
 801df32:	4621      	mov	r1, r4
 801df34:	f7ff fd88 	bl	801da48 <_Bfree>
 801df38:	4628      	mov	r0, r5
 801df3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df3e:	f842 0f04 	str.w	r0, [r2, #4]!
 801df42:	3301      	adds	r3, #1
 801df44:	e7c1      	b.n	801deca <__lshift+0x4a>
 801df46:	3904      	subs	r1, #4
 801df48:	f853 2b04 	ldr.w	r2, [r3], #4
 801df4c:	f841 2f04 	str.w	r2, [r1, #4]!
 801df50:	4298      	cmp	r0, r3
 801df52:	d8f9      	bhi.n	801df48 <__lshift+0xc8>
 801df54:	e7ea      	b.n	801df2c <__lshift+0xac>
 801df56:	bf00      	nop
 801df58:	0801f909 	.word	0x0801f909
 801df5c:	0801f994 	.word	0x0801f994

0801df60 <__mcmp>:
 801df60:	b530      	push	{r4, r5, lr}
 801df62:	6902      	ldr	r2, [r0, #16]
 801df64:	690c      	ldr	r4, [r1, #16]
 801df66:	1b12      	subs	r2, r2, r4
 801df68:	d10e      	bne.n	801df88 <__mcmp+0x28>
 801df6a:	f100 0314 	add.w	r3, r0, #20
 801df6e:	3114      	adds	r1, #20
 801df70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801df74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801df78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801df7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801df80:	42a5      	cmp	r5, r4
 801df82:	d003      	beq.n	801df8c <__mcmp+0x2c>
 801df84:	d305      	bcc.n	801df92 <__mcmp+0x32>
 801df86:	2201      	movs	r2, #1
 801df88:	4610      	mov	r0, r2
 801df8a:	bd30      	pop	{r4, r5, pc}
 801df8c:	4283      	cmp	r3, r0
 801df8e:	d3f3      	bcc.n	801df78 <__mcmp+0x18>
 801df90:	e7fa      	b.n	801df88 <__mcmp+0x28>
 801df92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801df96:	e7f7      	b.n	801df88 <__mcmp+0x28>

0801df98 <__mdiff>:
 801df98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df9c:	460c      	mov	r4, r1
 801df9e:	4606      	mov	r6, r0
 801dfa0:	4611      	mov	r1, r2
 801dfa2:	4620      	mov	r0, r4
 801dfa4:	4690      	mov	r8, r2
 801dfa6:	f7ff ffdb 	bl	801df60 <__mcmp>
 801dfaa:	1e05      	subs	r5, r0, #0
 801dfac:	d110      	bne.n	801dfd0 <__mdiff+0x38>
 801dfae:	4629      	mov	r1, r5
 801dfb0:	4630      	mov	r0, r6
 801dfb2:	f7ff fd09 	bl	801d9c8 <_Balloc>
 801dfb6:	b930      	cbnz	r0, 801dfc6 <__mdiff+0x2e>
 801dfb8:	4b3a      	ldr	r3, [pc, #232]	; (801e0a4 <__mdiff+0x10c>)
 801dfba:	4602      	mov	r2, r0
 801dfbc:	f240 2132 	movw	r1, #562	; 0x232
 801dfc0:	4839      	ldr	r0, [pc, #228]	; (801e0a8 <__mdiff+0x110>)
 801dfc2:	f7fe f96d 	bl	801c2a0 <__assert_func>
 801dfc6:	2301      	movs	r3, #1
 801dfc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dfcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfd0:	bfa4      	itt	ge
 801dfd2:	4643      	movge	r3, r8
 801dfd4:	46a0      	movge	r8, r4
 801dfd6:	4630      	mov	r0, r6
 801dfd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dfdc:	bfa6      	itte	ge
 801dfde:	461c      	movge	r4, r3
 801dfe0:	2500      	movge	r5, #0
 801dfe2:	2501      	movlt	r5, #1
 801dfe4:	f7ff fcf0 	bl	801d9c8 <_Balloc>
 801dfe8:	b920      	cbnz	r0, 801dff4 <__mdiff+0x5c>
 801dfea:	4b2e      	ldr	r3, [pc, #184]	; (801e0a4 <__mdiff+0x10c>)
 801dfec:	4602      	mov	r2, r0
 801dfee:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dff2:	e7e5      	b.n	801dfc0 <__mdiff+0x28>
 801dff4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801dff8:	6926      	ldr	r6, [r4, #16]
 801dffa:	60c5      	str	r5, [r0, #12]
 801dffc:	f104 0914 	add.w	r9, r4, #20
 801e000:	f108 0514 	add.w	r5, r8, #20
 801e004:	f100 0e14 	add.w	lr, r0, #20
 801e008:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e00c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e010:	f108 0210 	add.w	r2, r8, #16
 801e014:	46f2      	mov	sl, lr
 801e016:	2100      	movs	r1, #0
 801e018:	f859 3b04 	ldr.w	r3, [r9], #4
 801e01c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e020:	fa1f f883 	uxth.w	r8, r3
 801e024:	fa11 f18b 	uxtah	r1, r1, fp
 801e028:	0c1b      	lsrs	r3, r3, #16
 801e02a:	eba1 0808 	sub.w	r8, r1, r8
 801e02e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e032:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e036:	fa1f f888 	uxth.w	r8, r8
 801e03a:	1419      	asrs	r1, r3, #16
 801e03c:	454e      	cmp	r6, r9
 801e03e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e042:	f84a 3b04 	str.w	r3, [sl], #4
 801e046:	d8e7      	bhi.n	801e018 <__mdiff+0x80>
 801e048:	1b33      	subs	r3, r6, r4
 801e04a:	3b15      	subs	r3, #21
 801e04c:	f023 0303 	bic.w	r3, r3, #3
 801e050:	3304      	adds	r3, #4
 801e052:	3415      	adds	r4, #21
 801e054:	42a6      	cmp	r6, r4
 801e056:	bf38      	it	cc
 801e058:	2304      	movcc	r3, #4
 801e05a:	441d      	add	r5, r3
 801e05c:	4473      	add	r3, lr
 801e05e:	469e      	mov	lr, r3
 801e060:	462e      	mov	r6, r5
 801e062:	4566      	cmp	r6, ip
 801e064:	d30e      	bcc.n	801e084 <__mdiff+0xec>
 801e066:	f10c 0203 	add.w	r2, ip, #3
 801e06a:	1b52      	subs	r2, r2, r5
 801e06c:	f022 0203 	bic.w	r2, r2, #3
 801e070:	3d03      	subs	r5, #3
 801e072:	45ac      	cmp	ip, r5
 801e074:	bf38      	it	cc
 801e076:	2200      	movcc	r2, #0
 801e078:	441a      	add	r2, r3
 801e07a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e07e:	b17b      	cbz	r3, 801e0a0 <__mdiff+0x108>
 801e080:	6107      	str	r7, [r0, #16]
 801e082:	e7a3      	b.n	801dfcc <__mdiff+0x34>
 801e084:	f856 8b04 	ldr.w	r8, [r6], #4
 801e088:	fa11 f288 	uxtah	r2, r1, r8
 801e08c:	1414      	asrs	r4, r2, #16
 801e08e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e092:	b292      	uxth	r2, r2
 801e094:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e098:	f84e 2b04 	str.w	r2, [lr], #4
 801e09c:	1421      	asrs	r1, r4, #16
 801e09e:	e7e0      	b.n	801e062 <__mdiff+0xca>
 801e0a0:	3f01      	subs	r7, #1
 801e0a2:	e7ea      	b.n	801e07a <__mdiff+0xe2>
 801e0a4:	0801f909 	.word	0x0801f909
 801e0a8:	0801f994 	.word	0x0801f994

0801e0ac <__ulp>:
 801e0ac:	b082      	sub	sp, #8
 801e0ae:	ed8d 0b00 	vstr	d0, [sp]
 801e0b2:	9b01      	ldr	r3, [sp, #4]
 801e0b4:	4912      	ldr	r1, [pc, #72]	; (801e100 <__ulp+0x54>)
 801e0b6:	4019      	ands	r1, r3
 801e0b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e0bc:	2900      	cmp	r1, #0
 801e0be:	dd05      	ble.n	801e0cc <__ulp+0x20>
 801e0c0:	2200      	movs	r2, #0
 801e0c2:	460b      	mov	r3, r1
 801e0c4:	ec43 2b10 	vmov	d0, r2, r3
 801e0c8:	b002      	add	sp, #8
 801e0ca:	4770      	bx	lr
 801e0cc:	4249      	negs	r1, r1
 801e0ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e0d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e0d6:	f04f 0200 	mov.w	r2, #0
 801e0da:	f04f 0300 	mov.w	r3, #0
 801e0de:	da04      	bge.n	801e0ea <__ulp+0x3e>
 801e0e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e0e4:	fa41 f300 	asr.w	r3, r1, r0
 801e0e8:	e7ec      	b.n	801e0c4 <__ulp+0x18>
 801e0ea:	f1a0 0114 	sub.w	r1, r0, #20
 801e0ee:	291e      	cmp	r1, #30
 801e0f0:	bfda      	itte	le
 801e0f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e0f6:	fa20 f101 	lsrle.w	r1, r0, r1
 801e0fa:	2101      	movgt	r1, #1
 801e0fc:	460a      	mov	r2, r1
 801e0fe:	e7e1      	b.n	801e0c4 <__ulp+0x18>
 801e100:	7ff00000 	.word	0x7ff00000

0801e104 <__b2d>:
 801e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e106:	6905      	ldr	r5, [r0, #16]
 801e108:	f100 0714 	add.w	r7, r0, #20
 801e10c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e110:	1f2e      	subs	r6, r5, #4
 801e112:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e116:	4620      	mov	r0, r4
 801e118:	f7ff fd48 	bl	801dbac <__hi0bits>
 801e11c:	f1c0 0320 	rsb	r3, r0, #32
 801e120:	280a      	cmp	r0, #10
 801e122:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e1a0 <__b2d+0x9c>
 801e126:	600b      	str	r3, [r1, #0]
 801e128:	dc14      	bgt.n	801e154 <__b2d+0x50>
 801e12a:	f1c0 0e0b 	rsb	lr, r0, #11
 801e12e:	fa24 f10e 	lsr.w	r1, r4, lr
 801e132:	42b7      	cmp	r7, r6
 801e134:	ea41 030c 	orr.w	r3, r1, ip
 801e138:	bf34      	ite	cc
 801e13a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e13e:	2100      	movcs	r1, #0
 801e140:	3015      	adds	r0, #21
 801e142:	fa04 f000 	lsl.w	r0, r4, r0
 801e146:	fa21 f10e 	lsr.w	r1, r1, lr
 801e14a:	ea40 0201 	orr.w	r2, r0, r1
 801e14e:	ec43 2b10 	vmov	d0, r2, r3
 801e152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e154:	42b7      	cmp	r7, r6
 801e156:	bf3a      	itte	cc
 801e158:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e15c:	f1a5 0608 	subcc.w	r6, r5, #8
 801e160:	2100      	movcs	r1, #0
 801e162:	380b      	subs	r0, #11
 801e164:	d017      	beq.n	801e196 <__b2d+0x92>
 801e166:	f1c0 0c20 	rsb	ip, r0, #32
 801e16a:	fa04 f500 	lsl.w	r5, r4, r0
 801e16e:	42be      	cmp	r6, r7
 801e170:	fa21 f40c 	lsr.w	r4, r1, ip
 801e174:	ea45 0504 	orr.w	r5, r5, r4
 801e178:	bf8c      	ite	hi
 801e17a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e17e:	2400      	movls	r4, #0
 801e180:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e184:	fa01 f000 	lsl.w	r0, r1, r0
 801e188:	fa24 f40c 	lsr.w	r4, r4, ip
 801e18c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e190:	ea40 0204 	orr.w	r2, r0, r4
 801e194:	e7db      	b.n	801e14e <__b2d+0x4a>
 801e196:	ea44 030c 	orr.w	r3, r4, ip
 801e19a:	460a      	mov	r2, r1
 801e19c:	e7d7      	b.n	801e14e <__b2d+0x4a>
 801e19e:	bf00      	nop
 801e1a0:	3ff00000 	.word	0x3ff00000

0801e1a4 <__d2b>:
 801e1a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e1a8:	4689      	mov	r9, r1
 801e1aa:	2101      	movs	r1, #1
 801e1ac:	ec57 6b10 	vmov	r6, r7, d0
 801e1b0:	4690      	mov	r8, r2
 801e1b2:	f7ff fc09 	bl	801d9c8 <_Balloc>
 801e1b6:	4604      	mov	r4, r0
 801e1b8:	b930      	cbnz	r0, 801e1c8 <__d2b+0x24>
 801e1ba:	4602      	mov	r2, r0
 801e1bc:	4b25      	ldr	r3, [pc, #148]	; (801e254 <__d2b+0xb0>)
 801e1be:	4826      	ldr	r0, [pc, #152]	; (801e258 <__d2b+0xb4>)
 801e1c0:	f240 310a 	movw	r1, #778	; 0x30a
 801e1c4:	f7fe f86c 	bl	801c2a0 <__assert_func>
 801e1c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e1cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e1d0:	bb35      	cbnz	r5, 801e220 <__d2b+0x7c>
 801e1d2:	2e00      	cmp	r6, #0
 801e1d4:	9301      	str	r3, [sp, #4]
 801e1d6:	d028      	beq.n	801e22a <__d2b+0x86>
 801e1d8:	4668      	mov	r0, sp
 801e1da:	9600      	str	r6, [sp, #0]
 801e1dc:	f7ff fd06 	bl	801dbec <__lo0bits>
 801e1e0:	9900      	ldr	r1, [sp, #0]
 801e1e2:	b300      	cbz	r0, 801e226 <__d2b+0x82>
 801e1e4:	9a01      	ldr	r2, [sp, #4]
 801e1e6:	f1c0 0320 	rsb	r3, r0, #32
 801e1ea:	fa02 f303 	lsl.w	r3, r2, r3
 801e1ee:	430b      	orrs	r3, r1
 801e1f0:	40c2      	lsrs	r2, r0
 801e1f2:	6163      	str	r3, [r4, #20]
 801e1f4:	9201      	str	r2, [sp, #4]
 801e1f6:	9b01      	ldr	r3, [sp, #4]
 801e1f8:	61a3      	str	r3, [r4, #24]
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	bf14      	ite	ne
 801e1fe:	2202      	movne	r2, #2
 801e200:	2201      	moveq	r2, #1
 801e202:	6122      	str	r2, [r4, #16]
 801e204:	b1d5      	cbz	r5, 801e23c <__d2b+0x98>
 801e206:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e20a:	4405      	add	r5, r0
 801e20c:	f8c9 5000 	str.w	r5, [r9]
 801e210:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e214:	f8c8 0000 	str.w	r0, [r8]
 801e218:	4620      	mov	r0, r4
 801e21a:	b003      	add	sp, #12
 801e21c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e224:	e7d5      	b.n	801e1d2 <__d2b+0x2e>
 801e226:	6161      	str	r1, [r4, #20]
 801e228:	e7e5      	b.n	801e1f6 <__d2b+0x52>
 801e22a:	a801      	add	r0, sp, #4
 801e22c:	f7ff fcde 	bl	801dbec <__lo0bits>
 801e230:	9b01      	ldr	r3, [sp, #4]
 801e232:	6163      	str	r3, [r4, #20]
 801e234:	2201      	movs	r2, #1
 801e236:	6122      	str	r2, [r4, #16]
 801e238:	3020      	adds	r0, #32
 801e23a:	e7e3      	b.n	801e204 <__d2b+0x60>
 801e23c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e240:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e244:	f8c9 0000 	str.w	r0, [r9]
 801e248:	6918      	ldr	r0, [r3, #16]
 801e24a:	f7ff fcaf 	bl	801dbac <__hi0bits>
 801e24e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e252:	e7df      	b.n	801e214 <__d2b+0x70>
 801e254:	0801f909 	.word	0x0801f909
 801e258:	0801f994 	.word	0x0801f994

0801e25c <__ratio>:
 801e25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e260:	4688      	mov	r8, r1
 801e262:	4669      	mov	r1, sp
 801e264:	4681      	mov	r9, r0
 801e266:	f7ff ff4d 	bl	801e104 <__b2d>
 801e26a:	a901      	add	r1, sp, #4
 801e26c:	4640      	mov	r0, r8
 801e26e:	ec55 4b10 	vmov	r4, r5, d0
 801e272:	f7ff ff47 	bl	801e104 <__b2d>
 801e276:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e27a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e27e:	eba3 0c02 	sub.w	ip, r3, r2
 801e282:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e286:	1a9b      	subs	r3, r3, r2
 801e288:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e28c:	ec51 0b10 	vmov	r0, r1, d0
 801e290:	2b00      	cmp	r3, #0
 801e292:	bfd6      	itet	le
 801e294:	460a      	movle	r2, r1
 801e296:	462a      	movgt	r2, r5
 801e298:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e29c:	468b      	mov	fp, r1
 801e29e:	462f      	mov	r7, r5
 801e2a0:	bfd4      	ite	le
 801e2a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e2a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	ee10 2a10 	vmov	r2, s0
 801e2b0:	465b      	mov	r3, fp
 801e2b2:	4639      	mov	r1, r7
 801e2b4:	f7e2 fae2 	bl	800087c <__aeabi_ddiv>
 801e2b8:	ec41 0b10 	vmov	d0, r0, r1
 801e2bc:	b003      	add	sp, #12
 801e2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2c2 <__copybits>:
 801e2c2:	3901      	subs	r1, #1
 801e2c4:	b570      	push	{r4, r5, r6, lr}
 801e2c6:	1149      	asrs	r1, r1, #5
 801e2c8:	6914      	ldr	r4, [r2, #16]
 801e2ca:	3101      	adds	r1, #1
 801e2cc:	f102 0314 	add.w	r3, r2, #20
 801e2d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e2d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e2d8:	1f05      	subs	r5, r0, #4
 801e2da:	42a3      	cmp	r3, r4
 801e2dc:	d30c      	bcc.n	801e2f8 <__copybits+0x36>
 801e2de:	1aa3      	subs	r3, r4, r2
 801e2e0:	3b11      	subs	r3, #17
 801e2e2:	f023 0303 	bic.w	r3, r3, #3
 801e2e6:	3211      	adds	r2, #17
 801e2e8:	42a2      	cmp	r2, r4
 801e2ea:	bf88      	it	hi
 801e2ec:	2300      	movhi	r3, #0
 801e2ee:	4418      	add	r0, r3
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	4288      	cmp	r0, r1
 801e2f4:	d305      	bcc.n	801e302 <__copybits+0x40>
 801e2f6:	bd70      	pop	{r4, r5, r6, pc}
 801e2f8:	f853 6b04 	ldr.w	r6, [r3], #4
 801e2fc:	f845 6f04 	str.w	r6, [r5, #4]!
 801e300:	e7eb      	b.n	801e2da <__copybits+0x18>
 801e302:	f840 3b04 	str.w	r3, [r0], #4
 801e306:	e7f4      	b.n	801e2f2 <__copybits+0x30>

0801e308 <__any_on>:
 801e308:	f100 0214 	add.w	r2, r0, #20
 801e30c:	6900      	ldr	r0, [r0, #16]
 801e30e:	114b      	asrs	r3, r1, #5
 801e310:	4298      	cmp	r0, r3
 801e312:	b510      	push	{r4, lr}
 801e314:	db11      	blt.n	801e33a <__any_on+0x32>
 801e316:	dd0a      	ble.n	801e32e <__any_on+0x26>
 801e318:	f011 011f 	ands.w	r1, r1, #31
 801e31c:	d007      	beq.n	801e32e <__any_on+0x26>
 801e31e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e322:	fa24 f001 	lsr.w	r0, r4, r1
 801e326:	fa00 f101 	lsl.w	r1, r0, r1
 801e32a:	428c      	cmp	r4, r1
 801e32c:	d10b      	bne.n	801e346 <__any_on+0x3e>
 801e32e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e332:	4293      	cmp	r3, r2
 801e334:	d803      	bhi.n	801e33e <__any_on+0x36>
 801e336:	2000      	movs	r0, #0
 801e338:	bd10      	pop	{r4, pc}
 801e33a:	4603      	mov	r3, r0
 801e33c:	e7f7      	b.n	801e32e <__any_on+0x26>
 801e33e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e342:	2900      	cmp	r1, #0
 801e344:	d0f5      	beq.n	801e332 <__any_on+0x2a>
 801e346:	2001      	movs	r0, #1
 801e348:	e7f6      	b.n	801e338 <__any_on+0x30>

0801e34a <_realloc_r>:
 801e34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e34e:	4680      	mov	r8, r0
 801e350:	4614      	mov	r4, r2
 801e352:	460e      	mov	r6, r1
 801e354:	b921      	cbnz	r1, 801e360 <_realloc_r+0x16>
 801e356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e35a:	4611      	mov	r1, r2
 801e35c:	f7fb bdbc 	b.w	8019ed8 <_malloc_r>
 801e360:	b92a      	cbnz	r2, 801e36e <_realloc_r+0x24>
 801e362:	f7fb fd4d 	bl	8019e00 <_free_r>
 801e366:	4625      	mov	r5, r4
 801e368:	4628      	mov	r0, r5
 801e36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e36e:	f000 fb21 	bl	801e9b4 <_malloc_usable_size_r>
 801e372:	4284      	cmp	r4, r0
 801e374:	4607      	mov	r7, r0
 801e376:	d802      	bhi.n	801e37e <_realloc_r+0x34>
 801e378:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e37c:	d812      	bhi.n	801e3a4 <_realloc_r+0x5a>
 801e37e:	4621      	mov	r1, r4
 801e380:	4640      	mov	r0, r8
 801e382:	f7fb fda9 	bl	8019ed8 <_malloc_r>
 801e386:	4605      	mov	r5, r0
 801e388:	2800      	cmp	r0, #0
 801e38a:	d0ed      	beq.n	801e368 <_realloc_r+0x1e>
 801e38c:	42bc      	cmp	r4, r7
 801e38e:	4622      	mov	r2, r4
 801e390:	4631      	mov	r1, r6
 801e392:	bf28      	it	cs
 801e394:	463a      	movcs	r2, r7
 801e396:	f7fb fced 	bl	8019d74 <memcpy>
 801e39a:	4631      	mov	r1, r6
 801e39c:	4640      	mov	r0, r8
 801e39e:	f7fb fd2f 	bl	8019e00 <_free_r>
 801e3a2:	e7e1      	b.n	801e368 <_realloc_r+0x1e>
 801e3a4:	4635      	mov	r5, r6
 801e3a6:	e7df      	b.n	801e368 <_realloc_r+0x1e>

0801e3a8 <__ssputs_r>:
 801e3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3ac:	688e      	ldr	r6, [r1, #8]
 801e3ae:	429e      	cmp	r6, r3
 801e3b0:	4682      	mov	sl, r0
 801e3b2:	460c      	mov	r4, r1
 801e3b4:	4690      	mov	r8, r2
 801e3b6:	461f      	mov	r7, r3
 801e3b8:	d838      	bhi.n	801e42c <__ssputs_r+0x84>
 801e3ba:	898a      	ldrh	r2, [r1, #12]
 801e3bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e3c0:	d032      	beq.n	801e428 <__ssputs_r+0x80>
 801e3c2:	6825      	ldr	r5, [r4, #0]
 801e3c4:	6909      	ldr	r1, [r1, #16]
 801e3c6:	eba5 0901 	sub.w	r9, r5, r1
 801e3ca:	6965      	ldr	r5, [r4, #20]
 801e3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e3d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e3d4:	3301      	adds	r3, #1
 801e3d6:	444b      	add	r3, r9
 801e3d8:	106d      	asrs	r5, r5, #1
 801e3da:	429d      	cmp	r5, r3
 801e3dc:	bf38      	it	cc
 801e3de:	461d      	movcc	r5, r3
 801e3e0:	0553      	lsls	r3, r2, #21
 801e3e2:	d531      	bpl.n	801e448 <__ssputs_r+0xa0>
 801e3e4:	4629      	mov	r1, r5
 801e3e6:	f7fb fd77 	bl	8019ed8 <_malloc_r>
 801e3ea:	4606      	mov	r6, r0
 801e3ec:	b950      	cbnz	r0, 801e404 <__ssputs_r+0x5c>
 801e3ee:	230c      	movs	r3, #12
 801e3f0:	f8ca 3000 	str.w	r3, [sl]
 801e3f4:	89a3      	ldrh	r3, [r4, #12]
 801e3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3fa:	81a3      	strh	r3, [r4, #12]
 801e3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e404:	6921      	ldr	r1, [r4, #16]
 801e406:	464a      	mov	r2, r9
 801e408:	f7fb fcb4 	bl	8019d74 <memcpy>
 801e40c:	89a3      	ldrh	r3, [r4, #12]
 801e40e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e416:	81a3      	strh	r3, [r4, #12]
 801e418:	6126      	str	r6, [r4, #16]
 801e41a:	6165      	str	r5, [r4, #20]
 801e41c:	444e      	add	r6, r9
 801e41e:	eba5 0509 	sub.w	r5, r5, r9
 801e422:	6026      	str	r6, [r4, #0]
 801e424:	60a5      	str	r5, [r4, #8]
 801e426:	463e      	mov	r6, r7
 801e428:	42be      	cmp	r6, r7
 801e42a:	d900      	bls.n	801e42e <__ssputs_r+0x86>
 801e42c:	463e      	mov	r6, r7
 801e42e:	6820      	ldr	r0, [r4, #0]
 801e430:	4632      	mov	r2, r6
 801e432:	4641      	mov	r1, r8
 801e434:	f7fb fcac 	bl	8019d90 <memmove>
 801e438:	68a3      	ldr	r3, [r4, #8]
 801e43a:	1b9b      	subs	r3, r3, r6
 801e43c:	60a3      	str	r3, [r4, #8]
 801e43e:	6823      	ldr	r3, [r4, #0]
 801e440:	4433      	add	r3, r6
 801e442:	6023      	str	r3, [r4, #0]
 801e444:	2000      	movs	r0, #0
 801e446:	e7db      	b.n	801e400 <__ssputs_r+0x58>
 801e448:	462a      	mov	r2, r5
 801e44a:	f7ff ff7e 	bl	801e34a <_realloc_r>
 801e44e:	4606      	mov	r6, r0
 801e450:	2800      	cmp	r0, #0
 801e452:	d1e1      	bne.n	801e418 <__ssputs_r+0x70>
 801e454:	6921      	ldr	r1, [r4, #16]
 801e456:	4650      	mov	r0, sl
 801e458:	f7fb fcd2 	bl	8019e00 <_free_r>
 801e45c:	e7c7      	b.n	801e3ee <__ssputs_r+0x46>
	...

0801e460 <_svfiprintf_r>:
 801e460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e464:	4698      	mov	r8, r3
 801e466:	898b      	ldrh	r3, [r1, #12]
 801e468:	061b      	lsls	r3, r3, #24
 801e46a:	b09d      	sub	sp, #116	; 0x74
 801e46c:	4607      	mov	r7, r0
 801e46e:	460d      	mov	r5, r1
 801e470:	4614      	mov	r4, r2
 801e472:	d50e      	bpl.n	801e492 <_svfiprintf_r+0x32>
 801e474:	690b      	ldr	r3, [r1, #16]
 801e476:	b963      	cbnz	r3, 801e492 <_svfiprintf_r+0x32>
 801e478:	2140      	movs	r1, #64	; 0x40
 801e47a:	f7fb fd2d 	bl	8019ed8 <_malloc_r>
 801e47e:	6028      	str	r0, [r5, #0]
 801e480:	6128      	str	r0, [r5, #16]
 801e482:	b920      	cbnz	r0, 801e48e <_svfiprintf_r+0x2e>
 801e484:	230c      	movs	r3, #12
 801e486:	603b      	str	r3, [r7, #0]
 801e488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e48c:	e0d1      	b.n	801e632 <_svfiprintf_r+0x1d2>
 801e48e:	2340      	movs	r3, #64	; 0x40
 801e490:	616b      	str	r3, [r5, #20]
 801e492:	2300      	movs	r3, #0
 801e494:	9309      	str	r3, [sp, #36]	; 0x24
 801e496:	2320      	movs	r3, #32
 801e498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e49c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e4a0:	2330      	movs	r3, #48	; 0x30
 801e4a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e64c <_svfiprintf_r+0x1ec>
 801e4a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e4aa:	f04f 0901 	mov.w	r9, #1
 801e4ae:	4623      	mov	r3, r4
 801e4b0:	469a      	mov	sl, r3
 801e4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e4b6:	b10a      	cbz	r2, 801e4bc <_svfiprintf_r+0x5c>
 801e4b8:	2a25      	cmp	r2, #37	; 0x25
 801e4ba:	d1f9      	bne.n	801e4b0 <_svfiprintf_r+0x50>
 801e4bc:	ebba 0b04 	subs.w	fp, sl, r4
 801e4c0:	d00b      	beq.n	801e4da <_svfiprintf_r+0x7a>
 801e4c2:	465b      	mov	r3, fp
 801e4c4:	4622      	mov	r2, r4
 801e4c6:	4629      	mov	r1, r5
 801e4c8:	4638      	mov	r0, r7
 801e4ca:	f7ff ff6d 	bl	801e3a8 <__ssputs_r>
 801e4ce:	3001      	adds	r0, #1
 801e4d0:	f000 80aa 	beq.w	801e628 <_svfiprintf_r+0x1c8>
 801e4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e4d6:	445a      	add	r2, fp
 801e4d8:	9209      	str	r2, [sp, #36]	; 0x24
 801e4da:	f89a 3000 	ldrb.w	r3, [sl]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	f000 80a2 	beq.w	801e628 <_svfiprintf_r+0x1c8>
 801e4e4:	2300      	movs	r3, #0
 801e4e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e4ee:	f10a 0a01 	add.w	sl, sl, #1
 801e4f2:	9304      	str	r3, [sp, #16]
 801e4f4:	9307      	str	r3, [sp, #28]
 801e4f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e4fa:	931a      	str	r3, [sp, #104]	; 0x68
 801e4fc:	4654      	mov	r4, sl
 801e4fe:	2205      	movs	r2, #5
 801e500:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e504:	4851      	ldr	r0, [pc, #324]	; (801e64c <_svfiprintf_r+0x1ec>)
 801e506:	f7e1 fe83 	bl	8000210 <memchr>
 801e50a:	9a04      	ldr	r2, [sp, #16]
 801e50c:	b9d8      	cbnz	r0, 801e546 <_svfiprintf_r+0xe6>
 801e50e:	06d0      	lsls	r0, r2, #27
 801e510:	bf44      	itt	mi
 801e512:	2320      	movmi	r3, #32
 801e514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e518:	0711      	lsls	r1, r2, #28
 801e51a:	bf44      	itt	mi
 801e51c:	232b      	movmi	r3, #43	; 0x2b
 801e51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e522:	f89a 3000 	ldrb.w	r3, [sl]
 801e526:	2b2a      	cmp	r3, #42	; 0x2a
 801e528:	d015      	beq.n	801e556 <_svfiprintf_r+0xf6>
 801e52a:	9a07      	ldr	r2, [sp, #28]
 801e52c:	4654      	mov	r4, sl
 801e52e:	2000      	movs	r0, #0
 801e530:	f04f 0c0a 	mov.w	ip, #10
 801e534:	4621      	mov	r1, r4
 801e536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e53a:	3b30      	subs	r3, #48	; 0x30
 801e53c:	2b09      	cmp	r3, #9
 801e53e:	d94e      	bls.n	801e5de <_svfiprintf_r+0x17e>
 801e540:	b1b0      	cbz	r0, 801e570 <_svfiprintf_r+0x110>
 801e542:	9207      	str	r2, [sp, #28]
 801e544:	e014      	b.n	801e570 <_svfiprintf_r+0x110>
 801e546:	eba0 0308 	sub.w	r3, r0, r8
 801e54a:	fa09 f303 	lsl.w	r3, r9, r3
 801e54e:	4313      	orrs	r3, r2
 801e550:	9304      	str	r3, [sp, #16]
 801e552:	46a2      	mov	sl, r4
 801e554:	e7d2      	b.n	801e4fc <_svfiprintf_r+0x9c>
 801e556:	9b03      	ldr	r3, [sp, #12]
 801e558:	1d19      	adds	r1, r3, #4
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	9103      	str	r1, [sp, #12]
 801e55e:	2b00      	cmp	r3, #0
 801e560:	bfbb      	ittet	lt
 801e562:	425b      	neglt	r3, r3
 801e564:	f042 0202 	orrlt.w	r2, r2, #2
 801e568:	9307      	strge	r3, [sp, #28]
 801e56a:	9307      	strlt	r3, [sp, #28]
 801e56c:	bfb8      	it	lt
 801e56e:	9204      	strlt	r2, [sp, #16]
 801e570:	7823      	ldrb	r3, [r4, #0]
 801e572:	2b2e      	cmp	r3, #46	; 0x2e
 801e574:	d10c      	bne.n	801e590 <_svfiprintf_r+0x130>
 801e576:	7863      	ldrb	r3, [r4, #1]
 801e578:	2b2a      	cmp	r3, #42	; 0x2a
 801e57a:	d135      	bne.n	801e5e8 <_svfiprintf_r+0x188>
 801e57c:	9b03      	ldr	r3, [sp, #12]
 801e57e:	1d1a      	adds	r2, r3, #4
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	9203      	str	r2, [sp, #12]
 801e584:	2b00      	cmp	r3, #0
 801e586:	bfb8      	it	lt
 801e588:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e58c:	3402      	adds	r4, #2
 801e58e:	9305      	str	r3, [sp, #20]
 801e590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e65c <_svfiprintf_r+0x1fc>
 801e594:	7821      	ldrb	r1, [r4, #0]
 801e596:	2203      	movs	r2, #3
 801e598:	4650      	mov	r0, sl
 801e59a:	f7e1 fe39 	bl	8000210 <memchr>
 801e59e:	b140      	cbz	r0, 801e5b2 <_svfiprintf_r+0x152>
 801e5a0:	2340      	movs	r3, #64	; 0x40
 801e5a2:	eba0 000a 	sub.w	r0, r0, sl
 801e5a6:	fa03 f000 	lsl.w	r0, r3, r0
 801e5aa:	9b04      	ldr	r3, [sp, #16]
 801e5ac:	4303      	orrs	r3, r0
 801e5ae:	3401      	adds	r4, #1
 801e5b0:	9304      	str	r3, [sp, #16]
 801e5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5b6:	4826      	ldr	r0, [pc, #152]	; (801e650 <_svfiprintf_r+0x1f0>)
 801e5b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e5bc:	2206      	movs	r2, #6
 801e5be:	f7e1 fe27 	bl	8000210 <memchr>
 801e5c2:	2800      	cmp	r0, #0
 801e5c4:	d038      	beq.n	801e638 <_svfiprintf_r+0x1d8>
 801e5c6:	4b23      	ldr	r3, [pc, #140]	; (801e654 <_svfiprintf_r+0x1f4>)
 801e5c8:	bb1b      	cbnz	r3, 801e612 <_svfiprintf_r+0x1b2>
 801e5ca:	9b03      	ldr	r3, [sp, #12]
 801e5cc:	3307      	adds	r3, #7
 801e5ce:	f023 0307 	bic.w	r3, r3, #7
 801e5d2:	3308      	adds	r3, #8
 801e5d4:	9303      	str	r3, [sp, #12]
 801e5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5d8:	4433      	add	r3, r6
 801e5da:	9309      	str	r3, [sp, #36]	; 0x24
 801e5dc:	e767      	b.n	801e4ae <_svfiprintf_r+0x4e>
 801e5de:	fb0c 3202 	mla	r2, ip, r2, r3
 801e5e2:	460c      	mov	r4, r1
 801e5e4:	2001      	movs	r0, #1
 801e5e6:	e7a5      	b.n	801e534 <_svfiprintf_r+0xd4>
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	3401      	adds	r4, #1
 801e5ec:	9305      	str	r3, [sp, #20]
 801e5ee:	4619      	mov	r1, r3
 801e5f0:	f04f 0c0a 	mov.w	ip, #10
 801e5f4:	4620      	mov	r0, r4
 801e5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e5fa:	3a30      	subs	r2, #48	; 0x30
 801e5fc:	2a09      	cmp	r2, #9
 801e5fe:	d903      	bls.n	801e608 <_svfiprintf_r+0x1a8>
 801e600:	2b00      	cmp	r3, #0
 801e602:	d0c5      	beq.n	801e590 <_svfiprintf_r+0x130>
 801e604:	9105      	str	r1, [sp, #20]
 801e606:	e7c3      	b.n	801e590 <_svfiprintf_r+0x130>
 801e608:	fb0c 2101 	mla	r1, ip, r1, r2
 801e60c:	4604      	mov	r4, r0
 801e60e:	2301      	movs	r3, #1
 801e610:	e7f0      	b.n	801e5f4 <_svfiprintf_r+0x194>
 801e612:	ab03      	add	r3, sp, #12
 801e614:	9300      	str	r3, [sp, #0]
 801e616:	462a      	mov	r2, r5
 801e618:	4b0f      	ldr	r3, [pc, #60]	; (801e658 <_svfiprintf_r+0x1f8>)
 801e61a:	a904      	add	r1, sp, #16
 801e61c:	4638      	mov	r0, r7
 801e61e:	f7fb fd6f 	bl	801a100 <_printf_float>
 801e622:	1c42      	adds	r2, r0, #1
 801e624:	4606      	mov	r6, r0
 801e626:	d1d6      	bne.n	801e5d6 <_svfiprintf_r+0x176>
 801e628:	89ab      	ldrh	r3, [r5, #12]
 801e62a:	065b      	lsls	r3, r3, #25
 801e62c:	f53f af2c 	bmi.w	801e488 <_svfiprintf_r+0x28>
 801e630:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e632:	b01d      	add	sp, #116	; 0x74
 801e634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e638:	ab03      	add	r3, sp, #12
 801e63a:	9300      	str	r3, [sp, #0]
 801e63c:	462a      	mov	r2, r5
 801e63e:	4b06      	ldr	r3, [pc, #24]	; (801e658 <_svfiprintf_r+0x1f8>)
 801e640:	a904      	add	r1, sp, #16
 801e642:	4638      	mov	r0, r7
 801e644:	f7fc f800 	bl	801a648 <_printf_i>
 801e648:	e7eb      	b.n	801e622 <_svfiprintf_r+0x1c2>
 801e64a:	bf00      	nop
 801e64c:	0801faec 	.word	0x0801faec
 801e650:	0801faf6 	.word	0x0801faf6
 801e654:	0801a101 	.word	0x0801a101
 801e658:	0801e3a9 	.word	0x0801e3a9
 801e65c:	0801faf2 	.word	0x0801faf2

0801e660 <__sfputc_r>:
 801e660:	6893      	ldr	r3, [r2, #8]
 801e662:	3b01      	subs	r3, #1
 801e664:	2b00      	cmp	r3, #0
 801e666:	b410      	push	{r4}
 801e668:	6093      	str	r3, [r2, #8]
 801e66a:	da08      	bge.n	801e67e <__sfputc_r+0x1e>
 801e66c:	6994      	ldr	r4, [r2, #24]
 801e66e:	42a3      	cmp	r3, r4
 801e670:	db01      	blt.n	801e676 <__sfputc_r+0x16>
 801e672:	290a      	cmp	r1, #10
 801e674:	d103      	bne.n	801e67e <__sfputc_r+0x1e>
 801e676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e67a:	f7fd bd3f 	b.w	801c0fc <__swbuf_r>
 801e67e:	6813      	ldr	r3, [r2, #0]
 801e680:	1c58      	adds	r0, r3, #1
 801e682:	6010      	str	r0, [r2, #0]
 801e684:	7019      	strb	r1, [r3, #0]
 801e686:	4608      	mov	r0, r1
 801e688:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e68c:	4770      	bx	lr

0801e68e <__sfputs_r>:
 801e68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e690:	4606      	mov	r6, r0
 801e692:	460f      	mov	r7, r1
 801e694:	4614      	mov	r4, r2
 801e696:	18d5      	adds	r5, r2, r3
 801e698:	42ac      	cmp	r4, r5
 801e69a:	d101      	bne.n	801e6a0 <__sfputs_r+0x12>
 801e69c:	2000      	movs	r0, #0
 801e69e:	e007      	b.n	801e6b0 <__sfputs_r+0x22>
 801e6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6a4:	463a      	mov	r2, r7
 801e6a6:	4630      	mov	r0, r6
 801e6a8:	f7ff ffda 	bl	801e660 <__sfputc_r>
 801e6ac:	1c43      	adds	r3, r0, #1
 801e6ae:	d1f3      	bne.n	801e698 <__sfputs_r+0xa>
 801e6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e6b4 <_vfiprintf_r>:
 801e6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6b8:	460d      	mov	r5, r1
 801e6ba:	b09d      	sub	sp, #116	; 0x74
 801e6bc:	4614      	mov	r4, r2
 801e6be:	4698      	mov	r8, r3
 801e6c0:	4606      	mov	r6, r0
 801e6c2:	b118      	cbz	r0, 801e6cc <_vfiprintf_r+0x18>
 801e6c4:	6983      	ldr	r3, [r0, #24]
 801e6c6:	b90b      	cbnz	r3, 801e6cc <_vfiprintf_r+0x18>
 801e6c8:	f7fb fa36 	bl	8019b38 <__sinit>
 801e6cc:	4b89      	ldr	r3, [pc, #548]	; (801e8f4 <_vfiprintf_r+0x240>)
 801e6ce:	429d      	cmp	r5, r3
 801e6d0:	d11b      	bne.n	801e70a <_vfiprintf_r+0x56>
 801e6d2:	6875      	ldr	r5, [r6, #4]
 801e6d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6d6:	07d9      	lsls	r1, r3, #31
 801e6d8:	d405      	bmi.n	801e6e6 <_vfiprintf_r+0x32>
 801e6da:	89ab      	ldrh	r3, [r5, #12]
 801e6dc:	059a      	lsls	r2, r3, #22
 801e6de:	d402      	bmi.n	801e6e6 <_vfiprintf_r+0x32>
 801e6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e6e2:	f7fb fb34 	bl	8019d4e <__retarget_lock_acquire_recursive>
 801e6e6:	89ab      	ldrh	r3, [r5, #12]
 801e6e8:	071b      	lsls	r3, r3, #28
 801e6ea:	d501      	bpl.n	801e6f0 <_vfiprintf_r+0x3c>
 801e6ec:	692b      	ldr	r3, [r5, #16]
 801e6ee:	b9eb      	cbnz	r3, 801e72c <_vfiprintf_r+0x78>
 801e6f0:	4629      	mov	r1, r5
 801e6f2:	4630      	mov	r0, r6
 801e6f4:	f7fd fd66 	bl	801c1c4 <__swsetup_r>
 801e6f8:	b1c0      	cbz	r0, 801e72c <_vfiprintf_r+0x78>
 801e6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6fc:	07dc      	lsls	r4, r3, #31
 801e6fe:	d50e      	bpl.n	801e71e <_vfiprintf_r+0x6a>
 801e700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e704:	b01d      	add	sp, #116	; 0x74
 801e706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e70a:	4b7b      	ldr	r3, [pc, #492]	; (801e8f8 <_vfiprintf_r+0x244>)
 801e70c:	429d      	cmp	r5, r3
 801e70e:	d101      	bne.n	801e714 <_vfiprintf_r+0x60>
 801e710:	68b5      	ldr	r5, [r6, #8]
 801e712:	e7df      	b.n	801e6d4 <_vfiprintf_r+0x20>
 801e714:	4b79      	ldr	r3, [pc, #484]	; (801e8fc <_vfiprintf_r+0x248>)
 801e716:	429d      	cmp	r5, r3
 801e718:	bf08      	it	eq
 801e71a:	68f5      	ldreq	r5, [r6, #12]
 801e71c:	e7da      	b.n	801e6d4 <_vfiprintf_r+0x20>
 801e71e:	89ab      	ldrh	r3, [r5, #12]
 801e720:	0598      	lsls	r0, r3, #22
 801e722:	d4ed      	bmi.n	801e700 <_vfiprintf_r+0x4c>
 801e724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e726:	f7fb fb13 	bl	8019d50 <__retarget_lock_release_recursive>
 801e72a:	e7e9      	b.n	801e700 <_vfiprintf_r+0x4c>
 801e72c:	2300      	movs	r3, #0
 801e72e:	9309      	str	r3, [sp, #36]	; 0x24
 801e730:	2320      	movs	r3, #32
 801e732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e736:	f8cd 800c 	str.w	r8, [sp, #12]
 801e73a:	2330      	movs	r3, #48	; 0x30
 801e73c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e900 <_vfiprintf_r+0x24c>
 801e740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e744:	f04f 0901 	mov.w	r9, #1
 801e748:	4623      	mov	r3, r4
 801e74a:	469a      	mov	sl, r3
 801e74c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e750:	b10a      	cbz	r2, 801e756 <_vfiprintf_r+0xa2>
 801e752:	2a25      	cmp	r2, #37	; 0x25
 801e754:	d1f9      	bne.n	801e74a <_vfiprintf_r+0x96>
 801e756:	ebba 0b04 	subs.w	fp, sl, r4
 801e75a:	d00b      	beq.n	801e774 <_vfiprintf_r+0xc0>
 801e75c:	465b      	mov	r3, fp
 801e75e:	4622      	mov	r2, r4
 801e760:	4629      	mov	r1, r5
 801e762:	4630      	mov	r0, r6
 801e764:	f7ff ff93 	bl	801e68e <__sfputs_r>
 801e768:	3001      	adds	r0, #1
 801e76a:	f000 80aa 	beq.w	801e8c2 <_vfiprintf_r+0x20e>
 801e76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e770:	445a      	add	r2, fp
 801e772:	9209      	str	r2, [sp, #36]	; 0x24
 801e774:	f89a 3000 	ldrb.w	r3, [sl]
 801e778:	2b00      	cmp	r3, #0
 801e77a:	f000 80a2 	beq.w	801e8c2 <_vfiprintf_r+0x20e>
 801e77e:	2300      	movs	r3, #0
 801e780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e788:	f10a 0a01 	add.w	sl, sl, #1
 801e78c:	9304      	str	r3, [sp, #16]
 801e78e:	9307      	str	r3, [sp, #28]
 801e790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e794:	931a      	str	r3, [sp, #104]	; 0x68
 801e796:	4654      	mov	r4, sl
 801e798:	2205      	movs	r2, #5
 801e79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e79e:	4858      	ldr	r0, [pc, #352]	; (801e900 <_vfiprintf_r+0x24c>)
 801e7a0:	f7e1 fd36 	bl	8000210 <memchr>
 801e7a4:	9a04      	ldr	r2, [sp, #16]
 801e7a6:	b9d8      	cbnz	r0, 801e7e0 <_vfiprintf_r+0x12c>
 801e7a8:	06d1      	lsls	r1, r2, #27
 801e7aa:	bf44      	itt	mi
 801e7ac:	2320      	movmi	r3, #32
 801e7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7b2:	0713      	lsls	r3, r2, #28
 801e7b4:	bf44      	itt	mi
 801e7b6:	232b      	movmi	r3, #43	; 0x2b
 801e7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7bc:	f89a 3000 	ldrb.w	r3, [sl]
 801e7c0:	2b2a      	cmp	r3, #42	; 0x2a
 801e7c2:	d015      	beq.n	801e7f0 <_vfiprintf_r+0x13c>
 801e7c4:	9a07      	ldr	r2, [sp, #28]
 801e7c6:	4654      	mov	r4, sl
 801e7c8:	2000      	movs	r0, #0
 801e7ca:	f04f 0c0a 	mov.w	ip, #10
 801e7ce:	4621      	mov	r1, r4
 801e7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e7d4:	3b30      	subs	r3, #48	; 0x30
 801e7d6:	2b09      	cmp	r3, #9
 801e7d8:	d94e      	bls.n	801e878 <_vfiprintf_r+0x1c4>
 801e7da:	b1b0      	cbz	r0, 801e80a <_vfiprintf_r+0x156>
 801e7dc:	9207      	str	r2, [sp, #28]
 801e7de:	e014      	b.n	801e80a <_vfiprintf_r+0x156>
 801e7e0:	eba0 0308 	sub.w	r3, r0, r8
 801e7e4:	fa09 f303 	lsl.w	r3, r9, r3
 801e7e8:	4313      	orrs	r3, r2
 801e7ea:	9304      	str	r3, [sp, #16]
 801e7ec:	46a2      	mov	sl, r4
 801e7ee:	e7d2      	b.n	801e796 <_vfiprintf_r+0xe2>
 801e7f0:	9b03      	ldr	r3, [sp, #12]
 801e7f2:	1d19      	adds	r1, r3, #4
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	9103      	str	r1, [sp, #12]
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	bfbb      	ittet	lt
 801e7fc:	425b      	neglt	r3, r3
 801e7fe:	f042 0202 	orrlt.w	r2, r2, #2
 801e802:	9307      	strge	r3, [sp, #28]
 801e804:	9307      	strlt	r3, [sp, #28]
 801e806:	bfb8      	it	lt
 801e808:	9204      	strlt	r2, [sp, #16]
 801e80a:	7823      	ldrb	r3, [r4, #0]
 801e80c:	2b2e      	cmp	r3, #46	; 0x2e
 801e80e:	d10c      	bne.n	801e82a <_vfiprintf_r+0x176>
 801e810:	7863      	ldrb	r3, [r4, #1]
 801e812:	2b2a      	cmp	r3, #42	; 0x2a
 801e814:	d135      	bne.n	801e882 <_vfiprintf_r+0x1ce>
 801e816:	9b03      	ldr	r3, [sp, #12]
 801e818:	1d1a      	adds	r2, r3, #4
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	9203      	str	r2, [sp, #12]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	bfb8      	it	lt
 801e822:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e826:	3402      	adds	r4, #2
 801e828:	9305      	str	r3, [sp, #20]
 801e82a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e910 <_vfiprintf_r+0x25c>
 801e82e:	7821      	ldrb	r1, [r4, #0]
 801e830:	2203      	movs	r2, #3
 801e832:	4650      	mov	r0, sl
 801e834:	f7e1 fcec 	bl	8000210 <memchr>
 801e838:	b140      	cbz	r0, 801e84c <_vfiprintf_r+0x198>
 801e83a:	2340      	movs	r3, #64	; 0x40
 801e83c:	eba0 000a 	sub.w	r0, r0, sl
 801e840:	fa03 f000 	lsl.w	r0, r3, r0
 801e844:	9b04      	ldr	r3, [sp, #16]
 801e846:	4303      	orrs	r3, r0
 801e848:	3401      	adds	r4, #1
 801e84a:	9304      	str	r3, [sp, #16]
 801e84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e850:	482c      	ldr	r0, [pc, #176]	; (801e904 <_vfiprintf_r+0x250>)
 801e852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e856:	2206      	movs	r2, #6
 801e858:	f7e1 fcda 	bl	8000210 <memchr>
 801e85c:	2800      	cmp	r0, #0
 801e85e:	d03f      	beq.n	801e8e0 <_vfiprintf_r+0x22c>
 801e860:	4b29      	ldr	r3, [pc, #164]	; (801e908 <_vfiprintf_r+0x254>)
 801e862:	bb1b      	cbnz	r3, 801e8ac <_vfiprintf_r+0x1f8>
 801e864:	9b03      	ldr	r3, [sp, #12]
 801e866:	3307      	adds	r3, #7
 801e868:	f023 0307 	bic.w	r3, r3, #7
 801e86c:	3308      	adds	r3, #8
 801e86e:	9303      	str	r3, [sp, #12]
 801e870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e872:	443b      	add	r3, r7
 801e874:	9309      	str	r3, [sp, #36]	; 0x24
 801e876:	e767      	b.n	801e748 <_vfiprintf_r+0x94>
 801e878:	fb0c 3202 	mla	r2, ip, r2, r3
 801e87c:	460c      	mov	r4, r1
 801e87e:	2001      	movs	r0, #1
 801e880:	e7a5      	b.n	801e7ce <_vfiprintf_r+0x11a>
 801e882:	2300      	movs	r3, #0
 801e884:	3401      	adds	r4, #1
 801e886:	9305      	str	r3, [sp, #20]
 801e888:	4619      	mov	r1, r3
 801e88a:	f04f 0c0a 	mov.w	ip, #10
 801e88e:	4620      	mov	r0, r4
 801e890:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e894:	3a30      	subs	r2, #48	; 0x30
 801e896:	2a09      	cmp	r2, #9
 801e898:	d903      	bls.n	801e8a2 <_vfiprintf_r+0x1ee>
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	d0c5      	beq.n	801e82a <_vfiprintf_r+0x176>
 801e89e:	9105      	str	r1, [sp, #20]
 801e8a0:	e7c3      	b.n	801e82a <_vfiprintf_r+0x176>
 801e8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801e8a6:	4604      	mov	r4, r0
 801e8a8:	2301      	movs	r3, #1
 801e8aa:	e7f0      	b.n	801e88e <_vfiprintf_r+0x1da>
 801e8ac:	ab03      	add	r3, sp, #12
 801e8ae:	9300      	str	r3, [sp, #0]
 801e8b0:	462a      	mov	r2, r5
 801e8b2:	4b16      	ldr	r3, [pc, #88]	; (801e90c <_vfiprintf_r+0x258>)
 801e8b4:	a904      	add	r1, sp, #16
 801e8b6:	4630      	mov	r0, r6
 801e8b8:	f7fb fc22 	bl	801a100 <_printf_float>
 801e8bc:	4607      	mov	r7, r0
 801e8be:	1c78      	adds	r0, r7, #1
 801e8c0:	d1d6      	bne.n	801e870 <_vfiprintf_r+0x1bc>
 801e8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e8c4:	07d9      	lsls	r1, r3, #31
 801e8c6:	d405      	bmi.n	801e8d4 <_vfiprintf_r+0x220>
 801e8c8:	89ab      	ldrh	r3, [r5, #12]
 801e8ca:	059a      	lsls	r2, r3, #22
 801e8cc:	d402      	bmi.n	801e8d4 <_vfiprintf_r+0x220>
 801e8ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e8d0:	f7fb fa3e 	bl	8019d50 <__retarget_lock_release_recursive>
 801e8d4:	89ab      	ldrh	r3, [r5, #12]
 801e8d6:	065b      	lsls	r3, r3, #25
 801e8d8:	f53f af12 	bmi.w	801e700 <_vfiprintf_r+0x4c>
 801e8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8de:	e711      	b.n	801e704 <_vfiprintf_r+0x50>
 801e8e0:	ab03      	add	r3, sp, #12
 801e8e2:	9300      	str	r3, [sp, #0]
 801e8e4:	462a      	mov	r2, r5
 801e8e6:	4b09      	ldr	r3, [pc, #36]	; (801e90c <_vfiprintf_r+0x258>)
 801e8e8:	a904      	add	r1, sp, #16
 801e8ea:	4630      	mov	r0, r6
 801e8ec:	f7fb feac 	bl	801a648 <_printf_i>
 801e8f0:	e7e4      	b.n	801e8bc <_vfiprintf_r+0x208>
 801e8f2:	bf00      	nop
 801e8f4:	0801f6c4 	.word	0x0801f6c4
 801e8f8:	0801f6e4 	.word	0x0801f6e4
 801e8fc:	0801f6a4 	.word	0x0801f6a4
 801e900:	0801faec 	.word	0x0801faec
 801e904:	0801faf6 	.word	0x0801faf6
 801e908:	0801a101 	.word	0x0801a101
 801e90c:	0801e68f 	.word	0x0801e68f
 801e910:	0801faf2 	.word	0x0801faf2

0801e914 <_read_r>:
 801e914:	b538      	push	{r3, r4, r5, lr}
 801e916:	4d07      	ldr	r5, [pc, #28]	; (801e934 <_read_r+0x20>)
 801e918:	4604      	mov	r4, r0
 801e91a:	4608      	mov	r0, r1
 801e91c:	4611      	mov	r1, r2
 801e91e:	2200      	movs	r2, #0
 801e920:	602a      	str	r2, [r5, #0]
 801e922:	461a      	mov	r2, r3
 801e924:	f7e5 ff0a 	bl	800473c <_read>
 801e928:	1c43      	adds	r3, r0, #1
 801e92a:	d102      	bne.n	801e932 <_read_r+0x1e>
 801e92c:	682b      	ldr	r3, [r5, #0]
 801e92e:	b103      	cbz	r3, 801e932 <_read_r+0x1e>
 801e930:	6023      	str	r3, [r4, #0]
 801e932:	bd38      	pop	{r3, r4, r5, pc}
 801e934:	20009f28 	.word	0x20009f28

0801e938 <nan>:
 801e938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e940 <nan+0x8>
 801e93c:	4770      	bx	lr
 801e93e:	bf00      	nop
 801e940:	00000000 	.word	0x00000000
 801e944:	7ff80000 	.word	0x7ff80000

0801e948 <__ascii_wctomb>:
 801e948:	b149      	cbz	r1, 801e95e <__ascii_wctomb+0x16>
 801e94a:	2aff      	cmp	r2, #255	; 0xff
 801e94c:	bf85      	ittet	hi
 801e94e:	238a      	movhi	r3, #138	; 0x8a
 801e950:	6003      	strhi	r3, [r0, #0]
 801e952:	700a      	strbls	r2, [r1, #0]
 801e954:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801e958:	bf98      	it	ls
 801e95a:	2001      	movls	r0, #1
 801e95c:	4770      	bx	lr
 801e95e:	4608      	mov	r0, r1
 801e960:	4770      	bx	lr

0801e962 <abort>:
 801e962:	b508      	push	{r3, lr}
 801e964:	2006      	movs	r0, #6
 801e966:	f000 f855 	bl	801ea14 <raise>
 801e96a:	2001      	movs	r0, #1
 801e96c:	f7e5 fedc 	bl	8004728 <_exit>

0801e970 <_fstat_r>:
 801e970:	b538      	push	{r3, r4, r5, lr}
 801e972:	4d07      	ldr	r5, [pc, #28]	; (801e990 <_fstat_r+0x20>)
 801e974:	2300      	movs	r3, #0
 801e976:	4604      	mov	r4, r0
 801e978:	4608      	mov	r0, r1
 801e97a:	4611      	mov	r1, r2
 801e97c:	602b      	str	r3, [r5, #0]
 801e97e:	f7e5 ff22 	bl	80047c6 <_fstat>
 801e982:	1c43      	adds	r3, r0, #1
 801e984:	d102      	bne.n	801e98c <_fstat_r+0x1c>
 801e986:	682b      	ldr	r3, [r5, #0]
 801e988:	b103      	cbz	r3, 801e98c <_fstat_r+0x1c>
 801e98a:	6023      	str	r3, [r4, #0]
 801e98c:	bd38      	pop	{r3, r4, r5, pc}
 801e98e:	bf00      	nop
 801e990:	20009f28 	.word	0x20009f28

0801e994 <_isatty_r>:
 801e994:	b538      	push	{r3, r4, r5, lr}
 801e996:	4d06      	ldr	r5, [pc, #24]	; (801e9b0 <_isatty_r+0x1c>)
 801e998:	2300      	movs	r3, #0
 801e99a:	4604      	mov	r4, r0
 801e99c:	4608      	mov	r0, r1
 801e99e:	602b      	str	r3, [r5, #0]
 801e9a0:	f7e5 ff21 	bl	80047e6 <_isatty>
 801e9a4:	1c43      	adds	r3, r0, #1
 801e9a6:	d102      	bne.n	801e9ae <_isatty_r+0x1a>
 801e9a8:	682b      	ldr	r3, [r5, #0]
 801e9aa:	b103      	cbz	r3, 801e9ae <_isatty_r+0x1a>
 801e9ac:	6023      	str	r3, [r4, #0]
 801e9ae:	bd38      	pop	{r3, r4, r5, pc}
 801e9b0:	20009f28 	.word	0x20009f28

0801e9b4 <_malloc_usable_size_r>:
 801e9b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e9b8:	1f18      	subs	r0, r3, #4
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	bfbc      	itt	lt
 801e9be:	580b      	ldrlt	r3, [r1, r0]
 801e9c0:	18c0      	addlt	r0, r0, r3
 801e9c2:	4770      	bx	lr

0801e9c4 <_raise_r>:
 801e9c4:	291f      	cmp	r1, #31
 801e9c6:	b538      	push	{r3, r4, r5, lr}
 801e9c8:	4604      	mov	r4, r0
 801e9ca:	460d      	mov	r5, r1
 801e9cc:	d904      	bls.n	801e9d8 <_raise_r+0x14>
 801e9ce:	2316      	movs	r3, #22
 801e9d0:	6003      	str	r3, [r0, #0]
 801e9d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e9d6:	bd38      	pop	{r3, r4, r5, pc}
 801e9d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e9da:	b112      	cbz	r2, 801e9e2 <_raise_r+0x1e>
 801e9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e9e0:	b94b      	cbnz	r3, 801e9f6 <_raise_r+0x32>
 801e9e2:	4620      	mov	r0, r4
 801e9e4:	f000 f830 	bl	801ea48 <_getpid_r>
 801e9e8:	462a      	mov	r2, r5
 801e9ea:	4601      	mov	r1, r0
 801e9ec:	4620      	mov	r0, r4
 801e9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9f2:	f000 b817 	b.w	801ea24 <_kill_r>
 801e9f6:	2b01      	cmp	r3, #1
 801e9f8:	d00a      	beq.n	801ea10 <_raise_r+0x4c>
 801e9fa:	1c59      	adds	r1, r3, #1
 801e9fc:	d103      	bne.n	801ea06 <_raise_r+0x42>
 801e9fe:	2316      	movs	r3, #22
 801ea00:	6003      	str	r3, [r0, #0]
 801ea02:	2001      	movs	r0, #1
 801ea04:	e7e7      	b.n	801e9d6 <_raise_r+0x12>
 801ea06:	2400      	movs	r4, #0
 801ea08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ea0c:	4628      	mov	r0, r5
 801ea0e:	4798      	blx	r3
 801ea10:	2000      	movs	r0, #0
 801ea12:	e7e0      	b.n	801e9d6 <_raise_r+0x12>

0801ea14 <raise>:
 801ea14:	4b02      	ldr	r3, [pc, #8]	; (801ea20 <raise+0xc>)
 801ea16:	4601      	mov	r1, r0
 801ea18:	6818      	ldr	r0, [r3, #0]
 801ea1a:	f7ff bfd3 	b.w	801e9c4 <_raise_r>
 801ea1e:	bf00      	nop
 801ea20:	20000088 	.word	0x20000088

0801ea24 <_kill_r>:
 801ea24:	b538      	push	{r3, r4, r5, lr}
 801ea26:	4d07      	ldr	r5, [pc, #28]	; (801ea44 <_kill_r+0x20>)
 801ea28:	2300      	movs	r3, #0
 801ea2a:	4604      	mov	r4, r0
 801ea2c:	4608      	mov	r0, r1
 801ea2e:	4611      	mov	r1, r2
 801ea30:	602b      	str	r3, [r5, #0]
 801ea32:	f7e5 fe69 	bl	8004708 <_kill>
 801ea36:	1c43      	adds	r3, r0, #1
 801ea38:	d102      	bne.n	801ea40 <_kill_r+0x1c>
 801ea3a:	682b      	ldr	r3, [r5, #0]
 801ea3c:	b103      	cbz	r3, 801ea40 <_kill_r+0x1c>
 801ea3e:	6023      	str	r3, [r4, #0]
 801ea40:	bd38      	pop	{r3, r4, r5, pc}
 801ea42:	bf00      	nop
 801ea44:	20009f28 	.word	0x20009f28

0801ea48 <_getpid_r>:
 801ea48:	f7e5 be56 	b.w	80046f8 <_getpid>

0801ea4c <_init>:
 801ea4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea4e:	bf00      	nop
 801ea50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea52:	bc08      	pop	{r3}
 801ea54:	469e      	mov	lr, r3
 801ea56:	4770      	bx	lr

0801ea58 <_fini>:
 801ea58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea5a:	bf00      	nop
 801ea5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea5e:	bc08      	pop	{r3}
 801ea60:	469e      	mov	lr, r3
 801ea62:	4770      	bx	lr
